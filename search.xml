<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>http://briangenisio.com/software/2017/06/12/creating-query-components-with-apollo.html</url>
      <content type="html"><![CDATA[<p>I recently wrote a blog for Khan Acacemy (my employer) about a pattern I like called “Query Components” for separating GraphQL/Apollo query and glue from the Presentational Components.  I’ve embedded it below:</p>
<iframe width="800" height="480" src="http://engineering.khanacademy.org/posts/creating-query-components-with-apollo.htm" frameborder="1"></iframe>
]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Khan Academy </tag>
            
            <tag> GraphQL </tag>
            
            <tag> React </tag>
            
            <tag> Apollo </tag>
            
            <tag> Patterns </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Get Your Motor Running]]></title>
      <url>http://briangenisio.com/software/2016/01/11/get-your-motor-running.html</url>
      <content type="html"><![CDATA[<p>I put together a video for getting bootstrapped with the Particle Photon and Johnny-Five.  This includes claiming the device, provisioning the device, loading the firmware, and building a Johnny-Five based wireless robot.</p>
<iframe width="480" height="360" src="https://www.youtube.com/embed/jhism2iqT7o" frameborder="0" allowfullscreen></iframe>
]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeBots </tag>
            
            <tag> Johnny-Five </tag>
            
            <tag> IoT </tag>
            
            <tag> Particle </tag>
            
            <tag> Photon </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Piece of Mind Temperature Monitor]]></title>
      <url>http://briangenisio.com/software/2015/02/20/piece-of-mind-temperature-monitor.html</url>
      <content type="html"><![CDATA[<p><img src="/images/siesta_key.jpg" alt="Siesta Key"></p>
<p>I just got home from 5-day vacation in <a href="http://www.drbeach.org/top10beaches.htm" target="_blank" rel="external">Siesta Key</a> where my family and I frolicked in the the slightly warmer climate than what we are used to in Ann Arbor Michigan.  The entire eastern half of the nation was under a <a href="http://en.wikipedia.org/wiki/Polar_vortex" target="_blank" rel="external">polar vortex</a> so our balmy Floridian host was much cooler than expected.  Back home, however, the temperature dropped as low as -28 degrees Fahrenheit (-33 degrees Celsius).</p>
<p>This wouldn’t normally cause me any anxiety if it were not for my 22 year old furnace.  I couldn’t help but worry that it would fail, causing my pipes to freeze followed by all sorts of damage.  I knew I wouldn’t be comfortable leaving my home without feeling confident that my furnace was keeping up.</p>
<h2 id="Spark-Core-Thermistor"><a href="#Spark-Core-Thermistor" class="headerlink" title="Spark Core + Thermistor"></a>Spark Core + Thermistor</h2><p>I dove into my basement to scrounge for parts and I built myself an “Internet of Things” thing to monitor the temperature inside my home.  It was really easy and it only took me 30 minutes.  I had an unused <a href="https://www.spark.io/" target="_blank" rel="external">Spark Core</a> and a <a href="http://www.amazon.com/Arduino-TinkerKit-Thermistor-Module/dp/B00EIB48W8" target="_blank" rel="external">Tinkerkit Thermistor</a> lying around, so I used them.  Any thermistor would have worked, but that is the one I found in my lab.</p>
<p><img src="/images/spark_temperature.jpg" alt="Spark + Thermistor"></p>
<p>I hooked up ground, power, and signal (to Analog 7) and got coding.  I found some conversion code for this Tinkerkit module on the <a href="https://github.com/rwaldron/johnny-five" target="_blank" rel="external">Johnny-Five</a> project, and I ported it over to C.  The Spark.io builder made it easy for me to send the following code to my Spark Core:</p>
<p><img src="/images/spark_temperature_fritz.png" alt="Spark + Thermistor Diagram"></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"math.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">double</span> temperature = <span class="number">0.0</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> RESISTOR = <span class="number">10000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> ADCRES = <span class="number">4095</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> BETA = <span class="number">3950</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> GINF = <span class="number">120.6685</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> KELVIN = <span class="number">273.15</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">    Spark.variable(<span class="string">"temperature"</span>, &amp;temperature, DOUBLE);</div><div class="line">    pinMode(A7, INPUT);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> raw = analogRead(A7);</div><div class="line">  <span class="keyword">double</span> rthermistor = RESISTOR * (ADCRES / raw - <span class="number">1.0</span>);</div><div class="line">  <span class="keyword">double</span> tempC = BETA / (<span class="built_in">log</span>(rthermistor * GINF));</div><div class="line"></div><div class="line">  temperature = tempC - KELVIN;</div><div class="line">  temperature = (temperature * <span class="number">9.0</span>) / <span class="number">5.0</span> + <span class="number">32.0</span>; <span class="comment">// to F</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>That was it.  From there, the “temperature” variable was exposed to the web.  The value was available from a simple URL: <code>https://api.spark.io/v1/devices/MY_DEVICE_ID/temperature?access_token=MY_ACCESS_TOKEN</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  cmd: &quot;VarReturn&quot;,</div><div class="line">  name: &quot;temperature&quot;,</div><div class="line">  result: 67.39388212240802,</div><div class="line">  coreInfo: &#123;</div><div class="line">    last_app: &quot;&quot;,</div><div class="line">    last_heard: &quot;2015-02-21T01:59:44.665Z&quot;,</div><div class="line">    connected: true,</div><div class="line">    deviceID: &quot;MY_DEVICE_ID&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Cool (or warm?)!  But I don’t really feel like reading JSON on my vacation.</p>
<h2 id="CodePen-to-Host-a-Simple-UI"><a href="#CodePen-to-Host-a-Simple-UI" class="headerlink" title="CodePen to Host a Simple UI"></a>CodePen to Host a Simple UI</h2><p>I didn’t want to go through the hassle of creating a tiny site and publishing it just to read this value.  This is why I like <a href="http://codepen.io" target="_blank" rel="external">CodePen</a> and their ilk.  I can write up a quick little code snippet (note that I’m using ES6), and I’m good to go.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>The temperature at home is <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"temperature"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"reload"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Reload<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTemperature</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> device = <span class="string">"MY_DEVICE_ID"</span>;</div><div class="line">  <span class="keyword">var</span> key = <span class="string">"MY_ACCESS_TOKEN"</span>;</div><div class="line">  <span class="keyword">var</span> url = <span class="string">`https://api.spark.io/v1/devices/<span class="subst">$&#123;device&#125;</span>/temperature?access_token=<span class="subst">$&#123;key&#125;</span>`</span>;</div><div class="line">  $.getJSON(url, json =&gt; $(<span class="string">'#temperature'</span>).text(json.result.toFixed(<span class="number">1</span>) + <span class="string">" degrees"</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  getTemperature();</div><div class="line"></div><div class="line">  $(<span class="string">'#reload'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'#temperature'</span>).text(<span class="string">'...'</span>);</div><div class="line">    getTemperature();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Now I can go to the “full-page” view of the site from my phone.  The UI was only hacked together so it is crude (remember, this entire project only took 30 minutes to hack together), but it works!</p>
<p><img src="http://i.imgur.com/wrm0jHJ.png" alt="See the temperature"></p>
<p>But I really don’t want to be checking my phone every 5 minutes.</p>
<h2 id="Setting-Up-Phone-Alerts"><a href="#Setting-Up-Phone-Alerts" class="headerlink" title="Setting Up Phone Alerts"></a>Setting Up Phone Alerts</h2><p>I really like <a href="http://ifttt.com" target="_blank" rel="external">IFTTT</a>.  It stands for “If This Then That”.  I published a <a href="https://ifttt.com/recipes/261514-cold-house" target="_blank" rel="external">recipe</a> that says: “If [the temperature goes below 55 degrees] then [send an alert to my phone]”.</p>
<p>I had to put the device in my freezer, but I received an alert on my phone that the temperature dropped below 55 degrees!</p>
<p><img src="/images/ifttt_alert.png" alt="A phone alert"></p>
<h2 id="Did-My-Furnace-Fail"><a href="#Did-My-Furnace-Fail" class="headerlink" title="Did My Furnace Fail?"></a>Did My Furnace Fail?</h2><p>No, it did not.  BUT, I was never worried about it on vacation because I always knew that it was holding up.  In fact, on the last day of our vacation, the temperature jumped from 65 degrees to 70 degrees.  At first I was confused, but then I learned that our house cleaners had come that morning and they bumped the temperature up in anticipation of our arrival home!  </p>
<p>This is why I love living in the future.  We have some amazing abstractions here.  I can focus on the details that matter to me and I let the infrastructure do the rest for me.  This is the kind of thing we’ll be seeing more and more of going forward as the “Internet of Things” becomes more ubiquitous.</p>
]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spark Core </tag>
            
            <tag> Hacking </tag>
            
            <tag> IOT </tag>
            
            <tag> Internet of Things </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CodeMash NodeBots]]></title>
      <url>http://briangenisio.com/software/2015/01/12/codemash-nodebots-recap.html</url>
      <content type="html"><![CDATA[<p><a href="http://LetsFixHealthcare.com" target="_blank" rel="external">We</a> just got back from running the <a href="http://nodebots.io" target="_blank" rel="external">NodeBots</a> session <a href="http://codemash.org" target="_blank" rel="external">CodeMash</a> and I was blown away.  Not only did all of the bot builders exceed my expectations, my team rocked it as well.  We had an amazing event.  I’ve never seen so many nerds have as much fun as we did.  </p>
<p><img src="/images/codemash15/codemash.nodebots.jpg" alt="NodeBots at CodeMash"></p>
<p>The event was held over two days with an open house on the third.  Tuesday had about 70 attendees and Wednesday saw over 90.  During the open house, well over 100 people came and went.  It was like a bee hive of creation – builders buzzing from station to station, picking up their bits and bringing them back to their cell.  </p>
<p><img src="/images/codemash15/the-room.jpg" alt="The Room"></p>
<p>I can’t come close to highlighting everything that happened those days, but I can showcase the stand-outs.</p>
<h2 id="Battle-Bots"><a href="#Battle-Bots" class="headerlink" title="Battle Bots"></a>Battle Bots</h2><p>One of the two events attendees participated in was the “Battle Bots” event.  The only build rule: the drive train had to be powered by the two continuous rotation servos provided to them in their kits.  Other than that, it was a bot-build free-for-all.  </p>
<p><img src="/images/codemash15/curb-feelerz.jpg" alt="Curb Feelerz"></p>
<p>The winner of the first day was <a href="https://twitter.com/jewlofthelotus" target="_blank" rel="external">Julie Cameron</a> and <a href="https://twitter.com/nathandotz" target="_blank" rel="external">Nate Dotz</a>.  They built a scoop-style bot which transformed from a wedge to a bulldozer to a skid steer.  “Curb Feelerz” was agile and dangerous when it got its scoop underneath your bot.</p>
<p><img src="/images/codemash15/wheels-of-death.jpg" alt="Wheels of Death"></p>
<p>By the second day, the attendees upped their game after being tipped off from the day before. The winner of the second day was <a href="https://twitter.com/CharlieSears" target="_blank" rel="external">Charlie Sears</a> and <a href="https://twitter.com/fusionmobile/" target="_blank" rel="external">Alex Matsukevich</a>.  They learned that traction was a key factor for victory so they embedded thumb tacks in the tires.  Along with a low profile, a curved body, and plenty of heft, “WheelS of Death” crushed everything in its path. </p>
<iframe width="640" height="360" src="//www.youtube.com/embed/H9AzpnXpcrU" frameborder="0" allowfullscreen></iframe>

<p>These bots went head-to-head at the open house.  In the end, the spiked tires proved to be the advantage and “WheelS of Death” handily crushed “Curb Feelerz”.</p>
<h2 id="Line-Racers"><a href="#Line-Racers" class="headerlink" title="Line Racers"></a>Line Racers</h2><p>Many of the pacifists in the group chose to avoid battle and hit the track.  Donned with a 6-sensor reflectance array, the line racers competed in time trials against a black-lined course.  There were several hairy turns and switchbacks they had to navigate, which proved difficult for some.  </p>
<p><img src="/images/codemash15/awesome-bot.jpg" alt="Awesome Bot"></p>
<p>Day one produced the winner.  “Awesome Bot” was truly awesome with a 22 second finish without penalty.  <a href="https://twitter.com/andorbal" target="_blank" rel="external">Andy Benz</a> figured out that large Folgers-lid wheels had a huge advantage. The wheels needed some reinforcements and traction, but when that was done, “Awesome Bot” left the rest in the dust.</p>
<iframe width="480" height="360" src="//www.youtube.com/embed/FdlE7aQxmAY" frameborder="0" allowfullscreen></iframe>

<p>The second day was unable to show up the performance of “Awesome Bot”, but it still gave a good show.  <a href="https://twitter.com/nlprunner/" target="_blank" rel="external">Amber McKenzie</a> and <a href="https://twitter.com/snoopy_681/" target="_blank" rel="external">Anthony Masi</a> figured out the wheel trick early on.  Instead of Folgers lids, they built their own wheels out of wood spokes, plastic rims, and tires made from cut-up rubber gloves.  “Bob” had so much traction that it was able to climb the walls and flip over!  In the end, they won the second day with a 25 second time trial.</p>
<h2 id="Best-in-Show"><a href="#Best-in-Show" class="headerlink" title="Best in Show"></a>Best in Show</h2><p><img src="/images/codemash15/sherman.jpg" alt="Sherman"></p>
<p>If there was one bot which took the spirit of this event and ran with it, it would be “Sherman” by <a href="https://twitter.com/pushorpull" target="_blank" rel="external">Charlotte Chang</a> and <a href="https://www.linkedin.com/profile/view?id=196107107" target="_blank" rel="external">Christopher Greff</a>.  They knew they wanted to use the tank treads, but they also knew that they needed to use the servos for power (which didn’t fit in the tank chassis).  They found a gearbox, which also didn’t fit in the chassis, and (literally) hacked it to bits to retro-fit the servos as power, and the tank wheels to the gearbox.  The result was pure hackery genius.  I LOVE this bot.</p>
<p><img src="/images/codemash15/sherman-gears.jpg" alt="Sherman&#39;s Gears"></p>
<h2 id="Honorable-Mention"><a href="#Honorable-Mention" class="headerlink" title="Honorable Mention"></a>Honorable Mention</h2><p><img src="/images/codemash15/gears.jpg" alt="Gears"></p>
<p>It is also worth mentioning that someone brought a 3D printer to the hack lab.  We didn’t know it was coming, but he gave access to anyone who wanted to use it.  Besides the owner, only one team took advantage of this tool.  <a href="https://twitter.com/JeanetteHead17" target="_blank" rel="external">Jeanette Head</a> and <a href="https://twitter.com/aljscott/" target="_blank" rel="external">Al Scott</a> had never 3D printed anything before, but that didn’t stop them.  They found some gears on <a href="http://www.thingiverse.com/" target="_blank" rel="external">Thingverse</a> and geared up their servos for more power.  How awesome is that?  Here is a photo with them sporting their prizes (a <a href="https://github.com/rwaldron/johnny-five" target="_blank" rel="external">Johnny-Five</a> t-shirt, which everyone highlighted in this post also won, thanks to <a href="https://twitter.com/rwaldron" target="_blank" rel="external">Rick Waldron</a> and <a href="https://twitter.com/bocoup" target="_blank" rel="external">Bocoup</a>)</p>
<p><img src="/images/codemash15/jeanette-al.jpg" alt="Jeanette and Al"></p>
<h2 id="Thank-You"><a href="#Thank-You" class="headerlink" title="Thank You!"></a>Thank You!</h2><p>There are so many people to thank.  I am sure I will miss somone here, but here is a list of people that helped make this event awesome (in the order of interactions): <a href="https://twitter.com/JohnChapman" target="_blank" rel="external">John Chapman</a>, <a href="https://twitter.com/rockbot" target="_blank" rel="external">Raquel Vélez</a>, <a href="https://twitter.com/voodootikigod" target="_blank" rel="external">Chris Williams</a>, <a href="https://twitter.com/rwaldron" target="_blank" rel="external">Rick Waldron</a>, <a href="https://twitter.com/brianhprince" target="_blank" rel="external">Brian Prince</a>, <a href="https://twitter.com/jfollas" target="_blank" rel="external">Jason Follas</a>, <a href="https://twitter.com/argodev" target="_blank" rel="external">Rob Gillen</a>, <a href="https://www.linkedin.com/profile/view?id=10306994" target="_blank" rel="external">Vik Kheterpal</a>, <a href="https://twitter.com/jefftunes" target="_blank" rel="external">Jeff Yates</a>, <a href="https://twitter.com/kneumei" target="_blank" rel="external">Kyle Neumeier</a>, <a href="https://twitter.com/sneezinglion" target="_blank" rel="external">Greg Weaver</a>, <a href="https://www.linkedin.com/profile/view?id=187252581" target="_blank" rel="external">Brandon Charnesky</a>, <a href="https://twitter.com/bbarnich" target="_blank" rel="external">Brad Barnich</a>, <a href="https://twitter.com/mikeward_aa" target="_blank" rel="external">Mike Ward</a>, <a href="https://twitter.com/Ravi_S_Desai" target="_blank" rel="external">Ravi Desai</a>, <a href="http://www.kalahariresorts.com/ohio" target="_blank" rel="external">The Kalahari Staff</a>, <a href="http://www.codemash.org/" target="_blank" rel="external">The CodeMash Staff</a>, <a href="http://LetsFixHealthcare.com" target="_blank" rel="external">CareEvolution</a>, and (most importantly) my wife <a href="https://twitter.com/CaraGenisio" target="_blank" rel="external">Cara Genisio</a>.</p>
]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeBots </tag>
            
            <tag> Johnny-Five </tag>
            
            <tag> CodeMash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LearnHarmony.org]]></title>
      <url>http://briangenisio.com/software/2014/10/23/learn-harmony.html</url>
      <content type="html"><![CDATA[<p>I’ve been working on a project lately for learning the next version of JavaScript.  It is called <a href="http://learnharmony.org" target="_blank" rel="external">LearnHarmony.org</a>.  It allows for in-browser experimentation of next-generation JavaScript features.  I’ve created several micro-lessons on the features that are available and I will be adding more to come.</p>
<p>There are a couple of fun things regarding this:</p>
<ul>
<li>The entire site is a static SPA, <a href="https://github.com/BrianGenisio/learnharmony" target="_blank" rel="external">built with ES6 features</a></li>
<li>You can run ES6 features directly in the browser</li>
<li>I hijacked the console and display it on-screen to make play easier</li>
<li>This site was built with <a href="https://github.com/google/traceur-compiler" target="_blank" rel="external">Traceur</a> and the REPL window also uses Traceur.</li>
</ul>
<p>Have Fun!</p>
]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Harmony </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NodeBots at Codemash]]></title>
      <url>http://briangenisio.com/software/2014/10/04/codemash-nodebots-woot.html</url>
      <content type="html"><![CDATA[<p>An epic thing happened last week.  The <a href="http://codemash.org" target="_blank" rel="external">CodeMash</a> 2015 session list was released.  There are some <a href="http://www.codemash.org/accepted-session-list/" target="_blank" rel="external">AMAZING sessions</a> lined up.  I can’t wait to go. <em>Don’t forget to <a href="http://www.codemash.org/registration/" target="_blank" rel="external">register</a>!</em></p>
<p><a href="http://twitter.com/nodebots_cm" target="_blank" rel="external"><img src="/images/nodebots.codemash.png" alt="NodeBots at CodeMash"></a></p>
<h2 id="NodeBots-at-CodeMash"><a href="#NodeBots-at-CodeMash" class="headerlink" title="NodeBots at CodeMash"></a>NodeBots at CodeMash</h2><p>One particular session I am excited about is the <a href="http://nodebots.io" target="_blank" rel="external">NodeBots</a> pre-compiler.  <a href="https://twitter.com/johnchapman" target="_blank" rel="external">John Chapman</a> and <a href="https://twitter.com/briangenisio" target="_blank" rel="external">I</a> are working hard to put together an immersive hacking experience.  With over $5000 worth of Arduinos, servos, electronics, power sources, cables, wood, tools, and artsy-craftsy stuff (all donated by my employer, <a href="http://letsfixhealthcare.com" target="_blank" rel="external">CareEvolution</a>), you just need to supply the creativity.</p>
<p>More details will follow later (follow us on <a href="http://twitter.com/nodebots_cm" target="_blank" rel="external">Twitter</a>), but here are some simple details:</p>
<ol>
<li>The NodeBots pre-compiler will run BOTH Tuesday and Wednesday</li>
<li>You will pick ONE of those days to attend</li>
<li>You will need to pre-register in order to participate</li>
<li>You will build a bot to compete in the “Octogon Battle” or “Autonomous Maze”.</li>
<li>If you don’t want to compete in one of those things, you can hack and build however you want.</li>
</ol>
<p>At one of our <a href="/software/2014/09/13/nodebots-hackathon-summary.html">recent hackathons</a>, we <a href="/software/2014/08/23/rise-of-the-nodebots.html">beta-tested</a> the NodeBots event and it was really, really fun.  We even made a <a href="https://www.youtube.com/watch?v=pmp_hCg6jGQ" target="_blank" rel="external">highlights video</a>!</p>
<p><img src="/images/nodebots-hacking.jpg" alt="Hacking Nodebots"></p>
]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeBots </tag>
            
            <tag> Arduino </tag>
            
            <tag> Johnny-Five </tag>
            
            <tag> Codemash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Our NodeBots Hackathon Summary]]></title>
      <url>http://briangenisio.com/software/2014/09/13/nodebots-hackathon-summary.html</url>
      <content type="html"><![CDATA[<h2 id="Our-NodeBots-Hackathon"><a href="#Our-NodeBots-Hackathon" class="headerlink" title="Our NodeBots Hackathon"></a>Our NodeBots Hackathon</h2><p>I discussed the plans for our <a href="/software/2014/08/23/rise-of-the-nodebots.html">“Battle of the NodeBots” Hackathon project</a>  a couple of weeks ago.  The outcome was much better than I had expected.  The creativity unleashed for that one day was enough to fuel us for months.  </p>
<p>We had offensive bots using spinning bashers, propellors, flippers, and quarter dumping.  We had agile bots, employing wireless communication and sophisticated control mechanisms.  We had defensive bots which used a 5 pound weight to increase mass.  We had a sabotage bot which created electromagnetic fields to disrupt their oponents’ electronics.  We even had an “Empirial Walker” style robot which slowly approached its opponent with friction on its side.</p>
<p>In all, we had 16 people building 8 robots with Arduinos, Johnny-Five, wood, hot glue, and all sorts of random components.</p>
<p>The rules of the game were simple:</p>
<ol>
<li>Build your bot however you want, but use the two continuous servos as your primary drive mechanism</li>
<li>The is a hexagon, approximately 4 feet wide on carpet</li>
<li>You are given 3 1-minute rounds to knock your opponent completely out of the arena.  A successful KO will win the match and the bot moves on.</li>
<li>If after 1 minute, a KO is not achieved, the bot with their Arduino closest to the center dot gets 1 point.</li>
<li>If after 3 rounds, nobotty has achieved a KO, the bot with the most points wins a “Technical KO” and the bot moves on.</li>
</ol>
<h2 id="Here-is-a-“Highlights-Video”"><a href="#Here-is-a-“Highlights-Video”" class="headerlink" title="Here is a “Highlights Video”"></a>Here is a “Highlights Video”</h2><iframe width="640" height="360" src="//www.youtube.com/embed/pmp_hCg6jGQ" frameborder="0" allowfullscreen></iframe>
]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeBots </tag>
            
            <tag> Arduino </tag>
            
            <tag> Johnny-Five </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Using Visual Studio to Program Your NodeBot]]></title>
      <url>http://briangenisio.com/software/2014/08/25/using-visual-studio-to-program-your-nodebot.html</url>
      <content type="html"><![CDATA[<p>Instead of using the <a href="/software/2014/08/25/bootstrapping-your-arduino-with-firmata-and-johnny-five.html">command line to manage your NodeBot workflow</a>, you may want to use Visual Studio in Windows.  This is certainly possible, using the Node Tools for Visual Studio.  Here is a screencast showing how to do that!</p>
<ul>
<li><a href="http://arduino.cc/en/Main/Software" target="_blank" rel="external">Arduino IDE</a></li>
<li><a href="http://nodejstools.codeplex.com/" target="_blank" rel="external">Node Tools for VS</a></li>
<li><a href="https://github.com/rwaldron/johnny-five" target="_blank" rel="external">Johnny-Five</a>   </li>
</ul>
<iframe width="480" height="360" src="//www.youtube.com/embed/ndLw8J1Vmxg" frameborder="0" allowfullscreen></iframe>



]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeBots </tag>
            
            <tag> Arduino </tag>
            
            <tag> Johnny-Five </tag>
            
            <tag> Visual Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Building Your NodeBot]]></title>
      <url>http://briangenisio.com/software/2014/08/25/building-your-nodebot.html</url>
      <content type="html"><![CDATA[<p>For our <a href="/software/2014/08/23/rise-of-the-nodebots.html">“Battle of the NodeBots” Hackathon project</a>, we will be building a bot to compete against other bots.  We have a kit which includes the following components.  </p>
<ul>
<li>(1) <a href="http://www.sainsmart.com/sainsmart-uno-r3-atmega328-au-development-board-compatible-with-arduino-uno-r3.html" target="_blank" rel="external">SainSmart Uno Arduino Clone</a></li>
<li>5mm Wood Platform – (1) 3” x 6.75” panel and (2) 2.5” wheels</li>
<li>(2) Parallax <a href="http://www.parallax.com/product/900-00008" target="_blank" rel="external">Continuous Rotation Servos</a></li>
<li>(1) <a href="http://www.amazon.com/TruePower-Roller-Ball-Transfer-Bearings/dp/B009KAQVWC/ref=sr_1_4" target="_blank" rel="external">5/8” Ball Caster</a></li>
<li>(1) <a href="http://www.amazon.com/SYB-170-Color-Board-Small-Bread/dp/B00ARUF2JM/ref=sr_1_2" target="_blank" rel="external">Small Breadboard</a></li>
<li>(6) <a href="http://www.amazon.com/Wosang-Solderless-Flexible-Breadboard-Jumper/dp/B005TZJ0AM/ref=pd_bxgy_e_img_y" target="_blank" rel="external">Solderless Breadboard Wires</a></li>
<li>(2) <a href="http://www.amazon.com/5pcs-Angle-Single-Header-Strip/dp/B0079SK5MO/ref=sr_1_4" target="_blank" rel="external">3-pin Headers</a></li>
<li>(1) 10’ USB Cable (A to B)</li>
<li>(1) 9v Battery</li>
<li>(1) 9v to 2.1mm Battery Clip</li>
<li>(4) Zipties</li>
<li>(2) 1” Double-Stick Tape</li>
<li>(6) #6x3/8” Self-Drilling Screws</li>
</ul>
<p>You are encouraged to build your bot however you want, but this is how you can build it without any modifications from the original design.</p>
<h3 id="Lay-out-your-parts"><a href="#Lay-out-your-parts" class="headerlink" title="Lay out your parts"></a>Lay out your parts</h3><p>You want to get a feel for where everything will go.  Lay your major components out on the board and rough-in where you think you’d like them to go.<br><img src="/images/nodebot-assemble/nodebot-rough-out.JPG" alt="Rough-out the parts"></p>
<h3 id="Attach-your-wheels-to-your-servos"><a href="#Attach-your-wheels-to-your-servos" class="headerlink" title="Attach your wheels to your servos"></a>Attach your wheels to your servos</h3><p>The easiest way to do this is to remove the servo horn and attach the horn to the wheels using the self-drilling screws.  The holes in the servo horn are smaller than the screws but these things make quick work of the plastic and go right through to the wood.  Just make sure they are centered. Reattach the horns when you are done.<br><img src="/images/nodebot-assemble/nodebot-attach-wheels-to-servo.JPG" alt="Attach the wheels to the servo horns"></p>
<h3 id="Attach-the-servos-to-your-chassis"><a href="#Attach-the-servos-to-your-chassis" class="headerlink" title="Attach the servos to your chassis"></a>Attach the servos to your chassis</h3><p>You can do this however you want.  A quick-and-dirty approach is to use double-sided tape.  I prefer zip-ties.  Figure out where you want the servos to sit and mark it on the board.  Use a drill to punch a hole through the wood.  Attach the servos to the wood using zip-ties and snip off the excess zip-tie.</p>
<p><img src="/images/nodebot-assemble/nodebot-mark-servo-location.JPG" alt="Mark your servo location"><br><img src="/images/nodebot-assemble/nodebot-attach-servos.JPG" alt="Attach the servos with zip-ties"></p>
<h3 id="Attach-the-caster-wheel-to-the-bottom-of-the-chassis"><a href="#Attach-the-caster-wheel-to-the-bottom-of-the-chassis" class="headerlink" title="Attach the caster wheel to the bottom of the chassis"></a>Attach the caster wheel to the bottom of the chassis</h3><p>The self-drilling screws are really useful for this.<br><img src="/images/nodebot-assemble/nodebot-attach-caster2.JPG" alt="Attach the front caster wheel"></p>
<h3 id="Attach-the-Arduino-and-Breadboard"><a href="#Attach-the-Arduino-and-Breadboard" class="headerlink" title="Attach the Arduino and Breadboard"></a>Attach the Arduino and Breadboard</h3><p>Affix the Arduino using double-stick tape.  Affix the breadboard using the attached mounting tape.<br><img src="/images/nodebot-assemble/nodebot-attach-boards.JPG" alt="Affix the boards"></p>
<h3 id="Mount-the-battery"><a href="#Mount-the-battery" class="headerlink" title="Mount the battery"></a>Mount the battery</h3><p>Using double-stick tape, affix the battery to the bot.  Connect it to the Arduino using the 9v clip.<br><img src="/images/nodebot-assemble/nodebot-attach-battery.JPG" alt="Affix the battery"></p>
<h3 id="Power-the-servos-from-the-board"><a href="#Power-the-servos-from-the-board" class="headerlink" title="Power the servos from the board"></a>Power the servos from the board</h3><p>You are not likely to keep the servos here permanently, but this is a good starting point.  Pins 9 and 10 support PWM signals, which are best for servos.  You can connect them to the SVG pin headers for now.  The white leads are the “signal” for the SVG pins.</p>
<p><img src="/images/nodebot-assemble/nodebot-plug-servos.JPG" alt="Power the servos"></p>
<p>Your servos may start spinning now.  If that happens, you can trim them using the screws on the back of the servos.  You may need to do this again once you have hooked your system up to the software.</p>
<p><img src="/images/nodebot-assemble/nodebot-calibrate.JPG" alt="Trim the servos"></p>
<h3 id="Start-programming-your-bot"><a href="#Start-programming-your-bot" class="headerlink" title="Start programming your bot!"></a>Start programming your bot!</h3><p>Now you have a working bot.  You can plug your USB cable into the board and go to town.  If you haven’t already <a href="/software/2014/08/25/bootstrapping-your-arduino-with-firmata-and-johnny-five.html">gotten yourself bootstrapped</a> (<a href="/software/2014/08/25/using-visual-studio-to-program-your-nodebot.html">or with Visual Studio</a>), now is a good time.</p>
<p>Take a look at the <a href="https://github.com/rwaldron/johnny-five/wiki/Servo" target="_blank" rel="external">servo API</a> in Johnny-Five to get you started.  Here is a <a href="https://github.com/rwaldron/johnny-five/blob/master/docs/servo-continuous.md" target="_blank" rel="external">simple example</a> that will rotate your 10-pin servo clockwise.</p>
<p><img src="/images/nodebot-assemble/nodebot-program-bot.JPG" alt="Start Programming"></p>
]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeBots </tag>
            
            <tag> Arduino </tag>
            
            <tag> Johnny-Five </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bootstrapping your Arduino with Firmata and Johnny-Five]]></title>
      <url>http://briangenisio.com/software/2014/08/25/bootstrapping-your-arduino-with-firmata-and-johnny-five.html</url>
      <content type="html"><![CDATA[<p>Here is a little screencast I put together to get all the software you need to get started with your NodeBot.  The instructions are exactly the same for Windows. Unless, of course, you want to <a href="/software/2014/08/25/using-visual-studio-to-program-your-nodebot.html">use Visual Studio</a>.  </p>
<ul>
<li><a href="http://arduino.cc/en/Main/Software" target="_blank" rel="external">Arduino IDE</a></li>
<li><a href="http://nodejs.org" target="_blank" rel="external">Node.js</a></li>
<li><a href="https://github.com/rwaldron/johnny-five" target="_blank" rel="external">Johnny-Five</a>   </li>
</ul>
<iframe width="640" height="360" src="//www.youtube.com/embed/j-Xvb386Dr0" frameborder="0" allowfullscreen></iframe>



]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeBots </tag>
            
            <tag> Arduino </tag>
            
            <tag> Johnny-Five </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Rise of the NodeBots]]></title>
      <url>http://briangenisio.com/software/2014/08/23/rise-of-the-nodebots.html</url>
      <content type="html"><![CDATA[<p>Every 8 weeks at <a href="http://letsfixhealthcare.com" target="_blank" rel="external">our company</a>, we take two days off to hack on something new.  It is a chance to try new ideas, learn new technologies, or exercise our brain in ways we don’t tend to do in our everyday roles.  These “Hackathons” are fully supported by the owner of our company as he believes these periodic shifting of gears are beneficial to our creativity and to our product portfolio.</p>
<p>We don’t always produce something useful.  Sometimes we learn that a given technology or approach is not for us.  Sometimes, however, we take what we learn and apply the ideas directly to our product.  Dozens of features and even full products have their roots in our “Hackathons”.  They have proven to be exceptionally beneficial for the culture of our workplace.</p>
<h3 id="Trying-Something-New-–-NodeBots"><a href="#Trying-Something-New-–-NodeBots" class="headerlink" title="Trying Something New – NodeBots"></a>Trying Something New – NodeBots</h3><p><img src="/images/nodebot-army.JPG" alt="Nodebot Army"></p>
<p>At our next Hackathon, we are organizing an event: “Battle of the NodeBots”.  Approximately 20 of us will be building robots that will fight in a ring for supremacy.  Everyone will be given the same base kit.  If any of us build the kit like the reference bot, it is very unlikely we will win – those with beneficial innovations are likely to have the advantage.</p>
<p>Innovations will come in one of three forms:</p>
<ul>
<li><strong>Software:</strong> Pre-programmed maneuvers, articulated control, sensing systems, etc will help the bot gain an edge in the “brains” department.  Most people will be using Node and <a href="https://github.com/rwaldron/johnny-five" target="_blank" rel="external">Jonhhy-Five</a> to program their bots, though nothing is stopping anyone from writing C code that runs on the metal.</li>
<li><strong>Electronics:</strong> Extra servos, motors, controllers, or sensors will help the bot gain an edge in the “motion and sensing” department. This is where most of us will be learning the most.  We are software developers, not electronics engineers!  We will have a library of electronics components to pull from.</li>
<li><strong>Mechanical:</strong> Wheel traction, caster location, weight, size, articulated parts, etc will gain an edge in the “physical” department.  We will have a library of building supplies to pull from.</li>
</ul>
<h3 id="The-Kit"><a href="#The-Kit" class="headerlink" title="The Kit"></a>The Kit</h3><p><img src="/images/nodebot-kit.JPG" alt="Nodebot Army"></p>
<p>Inspired by the <a href="http://sumobotkit.com/" target="_blank" rel="external">SumoBot Jr.</a> and the <a href="https://github.com/nodebotsau/SimpleBot" target="_blank" rel="external">SimpleBot</a>, I was able to put together a kit that came in around $45 per bag.  This is the kit we that everyone will get:</p>
<ul>
<li>(1) <a href="http://www.sainsmart.com/sainsmart-uno-r3-atmega328-au-development-board-compatible-with-arduino-uno-r3.html" target="_blank" rel="external">SainSmart Uno Arduino Clone</a></li>
<li>5mm Wood Platform – (1) 3” x 6.75” panel and (2) 2.5” wheels</li>
<li>(2) Parallax <a href="http://www.parallax.com/product/900-00008" target="_blank" rel="external">Continuous Rotation Servos</a></li>
<li>(1) <a href="http://www.amazon.com/TruePower-Roller-Ball-Transfer-Bearings/dp/B009KAQVWC/ref=sr_1_4" target="_blank" rel="external">5/8” Ball Caster</a></li>
<li>(1) <a href="http://www.amazon.com/SYB-170-Color-Board-Small-Bread/dp/B00ARUF2JM/ref=sr_1_2" target="_blank" rel="external">Small Breadboard</a></li>
<li>(6) <a href="http://www.amazon.com/Wosang-Solderless-Flexible-Breadboard-Jumper/dp/B005TZJ0AM/ref=pd_bxgy_e_img_y" target="_blank" rel="external">Solderless Breadboard Wires</a></li>
<li>(2) <a href="http://www.amazon.com/5pcs-Angle-Single-Header-Strip/dp/B0079SK5MO/ref=sr_1_4" target="_blank" rel="external">3-pin Headers</a></li>
<li>(1) 10’ USB Cable (A to B)</li>
<li>(1) 9v Battery</li>
<li>(1) 9v to 2.1mm Battery Clip</li>
<li>(4) Zipties</li>
<li>(2) 1” Double-Stick Tape</li>
<li>(6) #6x3/8” Self-Drilling Screws</li>
</ul>
<p>Here is the bot fully assembled:<br><img src="/images/nodebot-assembled.JPG" alt="Nodebot Army"></p>
<h3 id="The-Lab"><a href="#The-Lab" class="headerlink" title="The Lab"></a>The Lab</h3><p>In order to enable everyone to be creative, we will have a stocked lab:</p>
<ul>
<li>Electronics (Resistors, Capacitors, Diodes, Transistors, Wires, Headers, etc)</li>
<li>Displays (LEDs, LED Arrays, 8-Segments, Tri-color LEDs, LCDs, etc)</li>
<li>Locomotion (Servos, Motors, Gears, Propellers, etc)</li>
<li>Sensors (Light, Proximity, Temperature, Water, etc)</li>
<li>Control (Switches, Joysticks, Keypads, Potentiometers)</li>
<li>Building (Soldering Iron, Hot Glue Gun, Drills, Saws, Voltmeters, Screw Drivers, Pliers, etc)</li>
<li>Crafts (Wood, Popsicle Sticks, Dowel Rods, Wire, Flashing, Screws, etc)</li>
</ul>
<h3 id="The-Setup"><a href="#The-Setup" class="headerlink" title="The Setup"></a>The Setup</h3><p>We are going to use <a href="https://github.com/rwaldron/johnny-five" target="_blank" rel="external">Jonhhy-Five</a> to control our bots.  This mechanism uses serial (USB) communications to talk to our Arduino via the <a href="http://firmata.org/wiki/Main_Page" target="_blank" rel="external">Firmata</a> protocol.  This will require everyone to install <a href="https://github.com/firmata/arduino/blob/master/examples/StandardFirmata/StandardFirmata.ino" target="_blank" rel="external">StandardFirmata</a> on the board.  We will have a couple of these <a href="http://www.amazon.com/JY-MCU-Arduino-Bluetooth-Wireless-Serial/dp/B009DZQ4MG/ref=sr_1_1" target="_blank" rel="external">Bluetooth to Serial adapters</a> available if anyone feels like spending their valuable time <a href="https://github.com/rwaldron/johnny-five/wiki/JY-MCU-Bluetooth-Serial-Port-Module-Notes" target="_blank" rel="external">getting it working </a>.</p>
<h3 id="More-to-Come"><a href="#More-to-Come" class="headerlink" title="More to Come!"></a>More to Come!</h3><p>I plan to document more about this event as I go.  We’ll see how it goes.  I’ll be <a href="http://twitter.com/BrianGenisio" target="_blank" rel="external">tweeting </a> photos and recording video of the battles.  Stay tuned!</p>
]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeBots </tag>
            
            <tag> Arduino </tag>
            
            <tag> Johnny-Five </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Calling Actions in Directives]]></title>
      <url>http://briangenisio.com/software/2014/03/05/calling-actions-in-directives.html</url>
      <content type="html"><![CDATA[<p>The other day, a coleague asked me what the best way is to call an action on a directive.  We know that directives can call back to the parent scope, but with isolated scopes, you have no way to call into a directive to execute an action.  This type of thing is pretty rare in Angular.  Usually, our directives respond to changes in data or state which an be based off of the built-in binding capabilities.  Sometimes, however, we need to call actions on a directive.  A video player directive, for example, can benefit from actions such as <code>video.play()</code> and <code>video.pause()</code>.  </p>
<p>Some of the things to consider:</p>
<ul>
<li>When you have multiple instances, how do you tell them all to act?</li>
<li>When you have multiple instances, how do you tell only one to act?</li>
<li>How would multiple copies inside of an ng-repeat work?</li>
<li>We might want to avoid tight coupling (do we always?)</li>
</ul>
<p>So I thought about it more, and I have three possible answers to this question (there are more, but these feel most natural).  I am open to thoughts.  Is there a better way that I am missing?  I’m basing some of this off of what other widget frameworks do.  Take WinForms/WPF/Silverlight/Flex, for instance.  In those worlds, the controls (directives) expose methods.  The caller gives it a name <code>&lt;widget name=&quot;foo&quot;&gt;</code> and the framework creates variables for you to call: <code>foo.bar()</code>.  Convenient, but Angular doesn’t give us this out of the box.  What are some approaches to come close to that?</p>
<h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>I am assuming a directive called “arm” which can be composed to create a “puppet”.  A “puppeteer” wants to control the arms of the puppets.  Each arm has an action called <code>function wave(){ alert(&#39;wave&#39;); }</code>  All of the code for these examples can be found <a href="http://codepen.io/BrianGenisio/pen/ituKv" target="_blank" rel="external">here</a>.</p>
<h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>The most obvious solution mkhere is to use events.  Events are nice because they are built in.  Events are also a bit ugly, however, because they broadcast.  We can mitigate this by namespacing our events.  The caller can call <code>$broadcast(&#39;arm:wave&#39;)</code> and the directive can hook that event: <code>$scope.$on(&#39;arm:wave&#39;, wave)</code>.</p>
<p>This works well except that in our current implementation, we can’t send a “wave” event to a specific directive.  If we borrow from other frameworks, we can just give the arm an <code>id</code> like this: <code>&lt;arm id=&quot;left&quot;&gt;&lt;/arm&gt;</code>.  Now, the puppeteer can call it: <code>$broadcast(&#39;arm: wave&#39;, &#39;left&#39;)</code>.  The directive’s code gets a bit more complex but not too bad.  It starts by binding id <code>scope: { id: &#39;@&#39; }</code> and then the event handler does this</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$scope.$on(<span class="string">'arm:wave'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, id</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(id === <span class="literal">undefined</span> || $scope.id === id) &#123;</div><div class="line">        wave();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>This works well.  You can broadcast to all of them by ommiting the id, or you can call one of them by using the id.  How might you do this in an <code>ng-repeat</code>?</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">arm</span> <span class="attr">ng-repeat</span>=<span class="string">"arm in arms"</span> <span class="attr">id</span>=<span class="string">"arm-&#123;&#123; '&#123;&#123;arm.id' &#125;&#125;&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">arm</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Individual calls would become <code>$broadcast(&#39;arm:wave&#39;, &#39;arm-&#39; + arm.id)</code></p>
<h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><p>Borrowing from other frameworks, this example invokes the “command” pattern.  It lets the directive define some commands that the puppeteer can call.  The directive would define a binding: <code>scope: { commands: &#39;=?&#39; }</code>.  The directive would then set the commands object: <code>$scope.commands = { wave: wave }</code>.  </p>
<p>The puppeteer can now hook up the command: <code>&lt;arm commands=&quot;left&quot;&gt;&lt;/arm&gt;</code> and use it: <code>left.wave();</code></p>
<p>This approach is arguably cleaner, but it introduces a new concept that isn’t native to Angular.  How does it scale to <code>ng-repeat</code>?</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">arm</span> <span class="attr">ng-repeat</span>=<span class="string">"arm in arms"</span> <span class="attr">commands</span>=<span class="string">"armControls[arm.i]"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Broadcast would become: </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">armControls.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">arm</span>) </span>&#123; arm.wave(); &#125;);</div></pre></td></tr></table></figure>
<p>Individual calls would become: <code>armControls[arm.id].wave()</code></p>
<h3 id="Controller-Expose"><a href="#Controller-Expose" class="headerlink" title="Controller Expose"></a>Controller Expose</h3><p>Ok, so <strong>events</strong> are a bit chatty and more code than we want to copy everytime.  <strong>Commands</strong> are less code and less chatty, but they aren’t native.  It turns out that Angular already has a way to communicate via directives (directive-to-directive) by assigning functions to the controller itself.  Like this: <code>this.wave = wave;</code>.  But the puppeteer doesn’t have access to the directive’s controller.  </p>
<p>We can expose it!  Create a binding in the scope: <code>scope: { controller: &#39;=?&#39; }</code>.  Then, in the controller, you can just assign it: <code>$scope.controller = this;</code>.</p>
<p>Calling it is very similar to <strong>commands</strong>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">arm</span> <span class="attr">controller</span>=<span class="string">"left"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Access to the actions and <code>ng-repeat</code> is exactly the same as the <strong>commands</strong> option, but the way you wire it up is more Angular-like.  With <strong>commands</strong>, you expose only what you want, but you need to explicitly expose everything.  With <strong>controller</strong>, you only do it once, and you don’t have to explicitly wire up the action, but you now get access to everything.</p>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>In the end, I prefer the <strong>events</strong> mechanism if I am looking for a decoupled approach but a <strong>controller</strong> approach if I am looking for something a bit more coupled. I am soliciting feedback from the community since I know they are likely to have opinions.  Again, you can play with all three approaches <a href="http://codepen.io/BrianGenisio/pen/ituKv" target="_blank" rel="external">here</a>.  Thoughts?</p>
]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Angular </tag>
            
            <tag> Directives </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular Directives Demystified]]></title>
      <url>http://briangenisio.com/software/2014/01/16/angular-directives-demystified.html</url>
      <content type="html"><![CDATA[<p>At <a href="http://codemash.org" target="_blank" rel="external">Codemash</a> this year, I presented “Angular Directives: Demystified”. I expect to record this session soon, but in the meantime, here are the <a href="http://directivesdemystified.herokuapp.com/#/slides/0" target="_blank" rel="external">slides</a> and the <a href="https://github.com/BrianGenisio/directives" target="_blank" rel="external">code</a>.</p>
]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Angular </tag>
            
            <tag> Directives </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[There and Back Again -- Thoughts on SPAs]]></title>
      <url>http://briangenisio.com/software/2013/04/17/there-and-back-again-thoughts-on-spas.html</url>
      <content type="html"><![CDATA[<p>I’ve been doing this software thing for quite a while now.  My first software job was in web development back in 1998.  Since then, I’ve traveled through Simulation Systems, Embedded Systems, Tooling, Desktop Applications, Rich Internet Applications (RIA), some mobile and today I am back where I started, developing Web Applications.</p>
<h3 id="Productivity-Highs-with-RIA-Frameworks"><a href="#Productivity-Highs-with-RIA-Frameworks" class="headerlink" title="Productivity Highs with RIA Frameworks"></a>Productivity Highs with RIA Frameworks</h3><p>After traveling out and back, I see everything from a different perspective.  Web applications, today, are incredibly different from the way they were in the 90s.  The biggest difference, from my perspective, is the way we develop them.  Coming from the RIA perspective, using Silverlight and Flex, I am accustomed to a certain productivity that I pine for now that I am developing for the web again.</p>
<p>If you know me, you know that I was a big fan of Silverlight and Flex.  They were frameworks which let me develop amazing desktop experiences in the browser.  I was doing things in 2007 that to this day is still impossible to do with HTML5 today.  Those frameworks had one flaw, however.  They required plug-ins to run.</p>
<h3 id="Death-to-the-Plug-In"><a href="#Death-to-the-Plug-In" class="headerlink" title="Death to the Plug-In"></a>Death to the Plug-In</h3><p>I’ve never been much of an apologist for plug-ins. I saw them as a necessary evil.  An evil that became unsustainable in this brave new world of mobile computing.  When Apple, Microsoft and Adobe killed Silverlight and Flex, I wasn’t sad because I loved those platforms.  I was sad because I knew I couldn’t be as productive writing the same kinds of applications in HTML/JavaScript/CSS.</p>
<h3 id="First-Generation-SPA-Frameworks"><a href="#First-Generation-SPA-Frameworks" class="headerlink" title="First Generation SPA Frameworks"></a>First Generation SPA Frameworks</h3><p>This is where the Single-Paged Application (SPA) frameworks came to my aid.  There are too many to count, but from my vantage point, it has felt like Backbone.js and Knockout.js have been the primary options in the SPA market.    I landed on Backbone.js as my go-to choice because it was a more complete solution than Knockout.js with its client-side route handling and model synchronization.  I found myself at home with building SPAs because they were so similar to RIAs.</p>
<p>Unfortunately, my productivity never came close to that of the plug-in frameworks.  Backbone.js and Knockout.js simply aren’t high enough of an abstraction for them to provide the same abilities to me.  They are the first generation of SPA tools and with that brings the pains of a first-generation technology.</p>
<h3 id="Filling-in-the-Gaps"><a href="#Filling-in-the-Gaps" class="headerlink" title="Filling in the Gaps"></a>Filling in the Gaps</h3><p>We’re starting to see some pretty nice add-ons to our first-generation tools.  These add-ons fill the gaps that the frameworks leave by attempting to make you more productive.  Specifically, Backbone.js has a poor view abstraction, making things like collection views and deeply nested views difficult.  Marionette.js builds upon Backbone.js to provide more structure, guidance and capabilities.  Using Marionette.js boosted my productivity significantly by taking care of much of the boiler-plate code that I found myself writing with Backbone.js alone.  It is still not ideal, mostly because the abstractions are not extremely strong.  They are strongER, but nothing compared to the capabilities I pine for.  Knockout.js has a similar packaging called Hot Towel.  Hot Towel fills in the holes that Knockout.js left by providing model synchronization, route handling and child view handling.</p>
<p>Unfortunately, these approaches only take us as far as the base technologies allow us to.  Without a strong abstraction to begin with, these add-ons can only ever takes us to generation 1.5.</p>
<h3 id="Second-Generation-SPA-Frameworks"><a href="#Second-Generation-SPA-Frameworks" class="headerlink" title="Second Generation SPA Frameworks"></a>Second Generation SPA Frameworks</h3><p>At the same time, the second generation of the SPA frameworks are coming forward.  They come from a higher level of abstraction and the code you write demonstrates it by being significantly less (half or less).  These frameworks (Angular.js and Ember.js) provide everything we wanted from our first generation tools but they also bring more capabilities like convention-based development paradigms and dependency injection.  What’s more, we are starting to see tooling (such as Batarang) built around these abstractions which let our development lifecycle be that much smoother.</p>
<p>I am focusing my efforts on these second-generation tool sets for now.  I am not abandoning my Backbone.js/Marionette.js tools completely, but I am not planning to invest much more time in them.  Instead of patching the holes that the first generation tools created, I am choosing to spend my time using (and recommending) the next generation of tools.  Specifically, I am focusing my efforts on Angular.js.  It fits my development style better and I feel like the abstractions make more sense to me.  I’m not knocking on Ember.js in any way.  It is a fine choice, in my opinion.</p>
<h3 id="The-Future-of-SPA-Development"><a href="#The-Future-of-SPA-Development" class="headerlink" title="The Future of SPA Development"></a>The Future of SPA Development</h3><p>But this isn’t where we are settling.  I think it will require a third generation of tools before the SPA space really takes off.  I have no idea what these frameworks will be, but I expect they will approach the productivity that I grew accustomed to with Silverlight and Flex.  The levels of abstractions will be higher and the tooling will be richer.  I expect that we will start to approach similar developer/designer workflows that were so amazing in the SPA days.  I expect we will see multiple language integration, including debugging and profiling tools built around these frameworks.  They will feel much less like a web framework and more like a desktop development framework.  The user experiences we create will be comparable to the experiences we created with Flex and Silverlight.</p>
<h3 id="Paying-Back-the-Debt"><a href="#Paying-Back-the-Debt" class="headerlink" title="Paying Back the Debt"></a>Paying Back the Debt</h3><p>The funny thing is that we will have taken 5 years to get there.  It will be 5 years of stepping out of the plug-ins and into the browser so that we can achieve the same quality of application that we were already producing.  In some ways, it feels like a regression, but we have to realize that the plug-ins were really just a disguised form of technical debt.  They provided a one-off environment so that we were able to do things that weren’t possible in the browser, but they did so by not investing in the browser.  Ultimately, the browser is the platform we were headed towards so we incurred debt.  We just have to pay it off before we can really innovate again.</p>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>I’m excited to see where the future of front-end development goes.  I’m excited to see that great strides are being made and I am happy to be at the front of the wave.  The community is starting to get excited too.  Here in Ann Arbor, we will be kicking off a JavaScript user group very soon which will give us a place to discuss these technologies and approaches.  I look forward to chatting it up!</p>
<h3 id="On-a-personal-note"><a href="#On-a-personal-note" class="headerlink" title="On a personal note"></a>On a personal note</h3><p>This is my last blog post written for SRT Solutions.  I am moving on to something new.  More on that soon.</p>
]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Angular </tag>
            
            <tag> Backbone </tag>
            
            <tag> SPA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Where is the Rest of my Blog?]]></title>
      <url>http://briangenisio.com/software/2013/04/02/where-is-the-rest-of-my-blog.html</url>
      <content type="html"><![CDATA[<p>If you are looking for the rest of my blog – all the posts I have written over the years – you’ll have to look at my <strong><a href="http://houseofbilz.com" target="_blank" rel="external">“House of Bilz”</a></strong> blog.  I recently moved over to using Jekyll as my site generator and I haven’t gotten to translate all the old posts over.  I might get to it some day, I might not.  They are all there.  </p>
]]></content>
      
        <categories>
            
            <category> Software </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
