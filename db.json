{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/bg_hr.png","path":"images/bg_hr.png","modified":1,"renderable":0},{"_id":"source/images/blacktocat.png","path":"images/blacktocat.png","modified":1,"renderable":0},{"_id":"source/images/icon_download.png","path":"images/icon_download.png","modified":1,"renderable":0},{"_id":"source/images/ifttt_alert.png","path":"images/ifttt_alert.png","modified":1,"renderable":0},{"_id":"source/images/nodebots.codemash.png","path":"images/nodebots.codemash.png","modified":1,"renderable":0},{"_id":"source/images/siesta_key.jpg","path":"images/siesta_key.jpg","modified":1,"renderable":0},{"_id":"source/images/sprite_download.png","path":"images/sprite_download.png","modified":1,"renderable":0},{"_id":"source/images/nodebots-hacking.jpg","path":"images/nodebots-hacking.jpg","modified":1,"renderable":0},{"_id":"source/images/spark_temperature_fritz.png","path":"images/spark_temperature_fritz.png","modified":1,"renderable":0},{"_id":"source/images/codemash15/curb-feelerz.jpg","path":"images/codemash15/curb-feelerz.jpg","modified":1,"renderable":0},{"_id":"source/images/codemash15/sherman-gears.jpg","path":"images/codemash15/sherman-gears.jpg","modified":1,"renderable":0},{"_id":"source/images/codemash15/sherman.jpg","path":"images/codemash15/sherman.jpg","modified":1,"renderable":0},{"_id":"source/images/codemash15/wheels-of-death.jpg","path":"images/codemash15/wheels-of-death.jpg","modified":1,"renderable":0},{"_id":"source/images/nodebot-army.JPG","path":"images/nodebot-army.JPG","modified":1,"renderable":0},{"_id":"source/images/nodebot-assembled.JPG","path":"images/nodebot-assembled.JPG","modified":1,"renderable":0},{"_id":"source/images/nodebot-kit.JPG","path":"images/nodebot-kit.JPG","modified":1,"renderable":0},{"_id":"source/images/spark_temperature.jpg","path":"images/spark_temperature.jpg","modified":1,"renderable":0},{"_id":"themes/minos/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/minos/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"source/images/codemash15/awesome-bot.jpg","path":"images/codemash15/awesome-bot.jpg","modified":1,"renderable":0},{"_id":"themes/minos/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"source/images/codemash15/codemash.nodebots.jpg","path":"images/codemash15/codemash.nodebots.jpg","modified":1,"renderable":0},{"_id":"themes/minos/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"source/images/codemash15/gears.jpg","path":"images/codemash15/gears.jpg","modified":1,"renderable":0},{"_id":"source/images/codemash15/jeanette-al.jpg","path":"images/codemash15/jeanette-al.jpg","modified":1,"renderable":0},{"_id":"source/images/nodebot-assemble/nodebot-attach-caster.JPG","path":"images/nodebot-assemble/nodebot-attach-caster.JPG","modified":1,"renderable":0},{"_id":"source/images/nodebot-assemble/nodebot-calibrate.JPG","path":"images/nodebot-assemble/nodebot-calibrate.JPG","modified":1,"renderable":0},{"_id":"themes/minos/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/images/codemash15/the-room.jpg","path":"images/codemash15/the-room.jpg","modified":1,"renderable":0},{"_id":"source/images/nodebot-assemble/nodebot-attach-battery.JPG","path":"images/nodebot-assemble/nodebot-attach-battery.JPG","modified":1,"renderable":0},{"_id":"source/images/nodebot-assemble/nodebot-attach-boards.JPG","path":"images/nodebot-assemble/nodebot-attach-boards.JPG","modified":1,"renderable":0},{"_id":"source/images/nodebot-assemble/nodebot-attach-caster2.JPG","path":"images/nodebot-assemble/nodebot-attach-caster2.JPG","modified":1,"renderable":0},{"_id":"source/images/nodebot-assemble/nodebot-attach-servos.JPG","path":"images/nodebot-assemble/nodebot-attach-servos.JPG","modified":1,"renderable":0},{"_id":"source/images/nodebot-assemble/nodebot-plug-servos.JPG","path":"images/nodebot-assemble/nodebot-plug-servos.JPG","modified":1,"renderable":0},{"_id":"source/images/nodebot-assemble/nodebot-mark-servo-location.JPG","path":"images/nodebot-assemble/nodebot-mark-servo-location.JPG","modified":1,"renderable":0},{"_id":"source/images/nodebot-assemble/nodebot-attach-wheels-to-servo.JPG","path":"images/nodebot-assemble/nodebot-attach-wheels-to-servo.JPG","modified":1,"renderable":0},{"_id":"source/images/nodebot-assemble/nodebot-program-bot.JPG","path":"images/nodebot-assemble/nodebot-program-bot.JPG","modified":1,"renderable":0},{"_id":"themes/minos/source/css/images/logo.png","path":"css/images/logo.png","modified":1,"renderable":1},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/minos/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"source/images/nodebot-assemble/nodebot-rough-out.JPG","path":"images/nodebot-assemble/nodebot-rough-out.JPG","modified":1,"renderable":0},{"_id":"themes/minos/source/webfonts/source-code-pro/main.css","path":"webfonts/source-code-pro/main.css","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/main.css","path":"webfonts/ptserif/main.css","modified":1,"renderable":1},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/03aPdn7fFF3H6ngCgAlQzPk_vArhqVIZ0nv9q090hN8.woff2","path":"webfonts/ptserif/fonts/03aPdn7fFF3H6ngCgAlQzPk_vArhqVIZ0nv9q090hN8.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/3Nwg9VzlwLXPq3fNKwVRMCEAvth_LlrfE80CYdSH47w.woff2","path":"webfonts/ptserif/fonts/3Nwg9VzlwLXPq3fNKwVRMCEAvth_LlrfE80CYdSH47w.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/5hX15RUpPERmeybVlLQEWBTbgVql8nDJpwnrE27mub0.woff2","path":"webfonts/ptserif/fonts/5hX15RUpPERmeybVlLQEWBTbgVql8nDJpwnrE27mub0.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/CPRt--GVMETgA6YEaoGitxTbgVql8nDJpwnrE27mub0.woff2","path":"webfonts/ptserif/fonts/CPRt--GVMETgA6YEaoGitxTbgVql8nDJpwnrE27mub0.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/I-OtoJZa3TeyH6D9oli3ifesZW2xOQ-xsNqO47m55DA.woff2","path":"webfonts/ptserif/fonts/I-OtoJZa3TeyH6D9oli3ifesZW2xOQ-xsNqO47m55DA.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpCYE0-AqJ3nfInTTiDXDjU4.woff2","path":"webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpCYE0-AqJ3nfInTTiDXDjU4.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/O_WhD9hODL16N4KLHLX7xSEAvth_LlrfE80CYdSH47w.woff2","path":"webfonts/ptserif/fonts/O_WhD9hODL16N4KLHLX7xSEAvth_LlrfE80CYdSH47w.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDUj_cnvWIuuBMVgbX098Mw.woff2","path":"webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDUj_cnvWIuuBMVgbX098Mw.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpI4P5ICox8Kq3LLUNMylGO4.woff2","path":"webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpI4P5ICox8Kq3LLUNMylGO4.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/b31S45a_TNgaBApZhTgE6CEAvth_LlrfE80CYdSH47w.woff2","path":"webfonts/ptserif/fonts/b31S45a_TNgaBApZhTgE6CEAvth_LlrfE80CYdSH47w.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/fU0HAfLiPHGlZhZpY6M7dBTbgVql8nDJpwnrE27mub0.woff2","path":"webfonts/ptserif/fonts/fU0HAfLiPHGlZhZpY6M7dBTbgVql8nDJpwnrE27mub0.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1,"renderable":1},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/minos/.gitignore","hash":"bbe994b5dffd47ea6ad0458525548d5650e043a7","modified":1459821759000},{"_id":"themes/minos/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1459821759000},{"_id":"themes/minos/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1459821759000},{"_id":"themes/minos/README.md","hash":"971b835999fd136807ec8505e778a9124b3a871d","modified":1459821759000},{"_id":"themes/minos/_config.yml.example","hash":"ad310ea24abd37909faadbd83a8d6261dcd0e9b3","modified":1459821759000},{"_id":"themes/minos/package.json","hash":"6b4e8276c212f5a617dc558548f5b3d1ae0fb1f2","modified":1459821759000},{"_id":"source/about/index.md","hash":"fdc2451669c791d9e115ca9599e1545dfe40ddbd","modified":1459885222000},{"_id":"source/media-appearances/index.md","hash":"9a318bd37edd1b9ef07c087fb3572fca0505075e","modified":1459885593000},{"_id":"source/images/bg_hr.png","hash":"1495db713f4859f1b77b50b281989138b418e4cc","modified":1459885222000},{"_id":"source/images/blacktocat.png","hash":"4d6897ab7496380b3740dd8d4f80fda5e32cc069","modified":1459885222000},{"_id":"source/images/icon_download.png","hash":"0bd93cdb9cb5b6b25f5f0e1d606ca88471ec8841","modified":1459885222000},{"_id":"source/images/ifttt_alert.png","hash":"ab17633aec571b5cc4552845b2a446efcaed4ea6","modified":1459885222000},{"_id":"source/images/nodebots.codemash.png","hash":"dafcfb6cab68a5f6657e7cde52a0c0bb13f16bcb","modified":1459885222000},{"_id":"source/images/siesta_key.jpg","hash":"3e092f08ec3355b65b5c4dce3963490a84aaa4ab","modified":1459885222000},{"_id":"source/images/sprite_download.png","hash":"6350b79a023bfea2aa314e0dc7fec9db2827f511","modified":1459885222000},{"_id":"source/_posts/2008-06-21-the-start-of-a-new-blog.md","hash":"dd53a86e3185575fdb650e708c0115461fda6ea9","modified":1459885593000},{"_id":"source/_posts/2008-06-23-lansing-day-of-net.md","hash":"5708afffb8282b2000993adb6c60d7c6d789c7cc","modified":1459885593000},{"_id":"source/_posts/2008-06-24-on-readability-and-maintainability.md","hash":"93234ffdb1d7223d3b9212c18dfedd38ddd9c486","modified":1459885593000},{"_id":"source/_posts/2008-06-26-generic-constraints-for-value-types.md","hash":"3df92d4490b106dff0fe3384292fb4723648836f","modified":1459885593000},{"_id":"source/_posts/2008-06-28-pretty-code-in-blogs.md","hash":"c5485eab07eda1aec2bfeb137b77d93d405e71b2","modified":1459885593000},{"_id":"source/_posts/2008-07-08-castle-active-record.md","hash":"529574d15f52abec8dc4149df3c9ed0bb553b649","modified":1459885593000},{"_id":"source/_posts/2008-07-10-pdc-2008.md","hash":"ea5cbdc7b9066e324d64f5f945c083c5d5ae752d","modified":1459885593000},{"_id":"source/_posts/2008-07-11-active-record-talk.md","hash":"2f1053b45e531ee0006e0c2cf35c82b8ab29ecaf","modified":1459885593000},{"_id":"source/_posts/2008-07-19-comments.md","hash":"2818ab971784db1cd1425670c85e6b19ad9dc653","modified":1459885593000},{"_id":"source/_posts/2008-07-21-response-to-self-promotions-vs-other-relations.md","hash":"863fc1ae9de68dc452cec890f81a8ec3fe03da50","modified":1459885593000},{"_id":"source/_posts/2008-08-15-how-not-to-tdd.md","hash":"6ac8e636ee664c38dac596b32ad15c3ded5afbf9","modified":1459885593000},{"_id":"source/_posts/2008-09-11-castle-active-record-slides-and-links.md","hash":"267d30e56bd54ef51491bdad2304429ee749f919","modified":1459885593000},{"_id":"source/_posts/2008-09-12-have-you-seen-the-new-ants-profiler.md","hash":"ed9efec8eb9d9505532fa1fe071ac221d5ce90d9","modified":1459885593000},{"_id":"source/_posts/2008-07-22-active-record-mock-framework.md","hash":"aa716003d6ec2f3c0b80ba40386fb30bd1a967eb","modified":1459885593000},{"_id":"source/_posts/2008-09-24-day-of-net-ann-arbor.md","hash":"c27d0ea0d050b8072779f1c18f3a7f926cb7971f","modified":1459885593000},{"_id":"source/_posts/2008-09-22-why-you-really-need-to-think-about-your-interfaces.md","hash":"6351c68ffecb188bfdaac058ff9f4d9afb4742a0","modified":1459885593000},{"_id":"source/_posts/2008-10-04-ui-automation-not-fit-for-command.md","hash":"6e5ca81ec50574f5431e27890f8f7a6cd5d82f65","modified":1459885593000},{"_id":"source/_posts/2008-10-06-im-speechless-2.md","hash":"ee4d25589dbce4d231b122b2bbd547963033bbec","modified":1459885593000},{"_id":"source/_posts/2008-10-12-winforms-automation-extensions.md","hash":"c2d9039244f5e1da0935cafe3f4171850cf955e1","modified":1459885593000},{"_id":"source/_posts/2008-10-14-getting-your-nunit-tests-to-run-as-sta.md","hash":"9fe1bdc009db739337012882595c10e065984028","modified":1459885593000},{"_id":"source/_posts/2008-10-18-gui-testing-resources.md","hash":"c8a9902e92854b9dffbae71c67a8233f1f2d0661","modified":1459885593000},{"_id":"source/_posts/2008-10-14-build-your-own-spy-utility.md","hash":"42cf933e60952c7d745262ccab5ee93e7070aa85","modified":1459885593000},{"_id":"source/_posts/2008-10-23-my-year-with-tdd.md","hash":"54f6237a2156937489cd0ffa89f8c76434fdd4d7","modified":1459885593000},{"_id":"source/_posts/2008-10-27-pdc-microsoft-azure.md","hash":"85a3d8cf0ebcb0a5f18979560e67beb970f865fd","modified":1459885593000},{"_id":"source/_posts/2008-10-28-the-excitement-that-is-c-4-0.md","hash":"3b40f2da0ece4ac57430f442c9da02f88df2e60c","modified":1459885593000},{"_id":"source/_posts/2008-10-30-focusing-on-functional.md","hash":"b2532c69b382f25357cb92b0f02e65589d53c42c","modified":1459885593000},{"_id":"source/_posts/2008-11-02-speaking-at-glug-net-lansing.md","hash":"ccf814c2830901aa3aa91a0e436ba1209e7f2df5","modified":1459885593000},{"_id":"source/_posts/2008-11-11-writing-tests-to-catch-memory-leaks-in-net.md","hash":"3b9644d058553c780e9f59ce5cf0ec1a6de630b6","modified":1459885593000},{"_id":"source/_posts/2008-11-17-registered-for-codemash-09.md","hash":"7e8109ce7abc6f47e2b6d743da3b4754a1e3b88a","modified":1459885593000},{"_id":"source/_posts/2008-11-14-update-for-the-activerecord-mock-framework.md","hash":"10e81bd46f4b38fdd89770ec7480bd1d7786c47c","modified":1459885593000},{"_id":"source/_posts/2008-11-18-testing-wcf-service-apps-part-0-of-4.md","hash":"1a396e6b86252c6e53beccd4c69f4a2a95e4cdbd","modified":1459885593000},{"_id":"source/_posts/2008-11-24-testing-wcf-service-apps-part-1-of-4.md","hash":"b5b69e15c9f9e67b2c2cf3ec65d0be44c77c94b4","modified":1459885593000},{"_id":"source/_posts/2008-11-29-testing-wcf-service-apps-part-2-of-4.md","hash":"0e55cc26fcabe98de364de5201517cda6badbc70","modified":1459885593000},{"_id":"source/_posts/2008-12-09-ann-arbor-nerd-lunch-are-you-going.md","hash":"0098d9d1ad243d09ed34c86a4b30dccb037d9de8","modified":1459885593000},{"_id":"source/_posts/2009-01-19-brians-goals-for-2009.md","hash":"20e0c86cc30ba38cda239fc95c6684d7bf5c8a09","modified":1459885593000},{"_id":"source/_posts/2008-12-19-testing-wcf-service-apps-part-3-of-4.md","hash":"e32c9535d15b01e99fb068ee22928078104f52a6","modified":1459885593000},{"_id":"source/_posts/2009-01-05-testing-wcf-service-apps-part-4-of-4.md","hash":"ef230fb163a612278dbe6d56cf9bb6ba17a363b8","modified":1459885593000},{"_id":"source/_posts/2009-02-10-drag-and-drop-with-silverlight.md","hash":"675d9ca2edf505714aa2aa4502f2d0b97f77f467","modified":1459885593000},{"_id":"source/_posts/2009-02-12-ann-arbor-net-developers-group-has-new-leadership.md","hash":"138997bec5035290ea4048f174f5b32e00fb0a71","modified":1459885593000},{"_id":"source/_posts/2009-02-15-re-thinking-c-events.md","hash":"9117babcebbb555f2c6ebc953d2c66a2e2a93bc1","modified":1459885593000},{"_id":"source/_posts/2009-03-06-my-silverlight-3-wish-list.md","hash":"624c1bb4804dd0fea45d86f928c4e360f0dc4e18","modified":1459885593000},{"_id":"source/_posts/2009-03-01-right-clicking-in-silverlight-2-a-refinement.md","hash":"84176c8deb0127f9ecbdca31c24b7e63caa59a80","modified":1459885593000},{"_id":"source/_posts/2009-03-15-binding-to-resources-in-silverlightwpf.md","hash":"b8989b06f5359da2166ec8c5be77f81a854280b0","modified":1459885593000},{"_id":"source/_posts/2009-03-28-my-silverlight-testing-rig.md","hash":"a30f93a58b6d2067ff5f5bad46f1535a3497e70a","modified":1459885593000},{"_id":"source/_posts/2009-03-29-my-resharper-nunit-test-templates.md","hash":"ac50c6ec8a0f1cd9474dfccd6ddcc98d6b6c1314","modified":1459885593000},{"_id":"source/_posts/2009-04-26-introducing-html-utilities-for-silverlight.md","hash":"79be1b678df148d49c777ac954b694f6f694562d","modified":1459885593000},{"_id":"source/_posts/2009-05-19-my-summer-speaking-gigs.md","hash":"c4139c77a29ea4e2c9b7d622baf71316c7c166c9","modified":1459885593000},{"_id":"source/_posts/2009-05-02-what-to-do-about-those-pesky-singletons.md","hash":"a955804cd9fd8854086dece699c8b5a12261ffc0","modified":1459885593000},{"_id":"source/_posts/2009-05-22-adventures-in-mvvm-commands-in-silverlight.md","hash":"eab3145f6980250e283d2f1d63f32418eebcaa72","modified":1459885593000},{"_id":"source/_posts/2009-05-22-adventures-in-mvvm-model-view-viewmodel.md","hash":"a7d5bb69eebde35746c1823910652e57717b519b","modified":1459885593000},{"_id":"source/_posts/2009-05-27-adventures-in-mvvm-a-testing-story.md","hash":"59b87ea235e5e04d7593ba312284397c6a663459","modified":1459885593000},{"_id":"source/_posts/2009-06-12-adventures-in-mvvm-slides-and-demo-app.md","hash":"621a26066f0db1bf1b0b63c917897923371096f8","modified":1459885593000},{"_id":"source/_posts/2009-05-29-adventures-in-mvvm-commanding-with-list-boxes.md","hash":"9e93ed600eeb4da10d4b5edea3988d53282acaaa","modified":1459885593000},{"_id":"source/_posts/2009-06-19-adventures-in-mvvm-ball-of-mud-vs-mvvm.md","hash":"9248985e43808609d563a653392a45ededdddbf8","modified":1459885593000},{"_id":"source/_posts/2009-08-07-adventures-in-mvvm-mvvm-interview.md","hash":"f38cf1bd96c73a2861d21f6971b9c263bc40f5d6","modified":1459885593000},{"_id":"source/_posts/2009-08-22-adventures-in-mvvm-generalized-command-behavior-attachments.md","hash":"5d69b7d002c1cab7da95f4ccdd4371515f748c6a","modified":1459885593000},{"_id":"source/_posts/2009-09-18-introducing-dynamicwrapper.md","hash":"0dbd428e1cdbdd25f5a6ce1267f9fe700020a349","modified":1459885593000},{"_id":"source/_posts/2009-08-27-adventures-in-mvvm-binding-commands-to-any-event.md","hash":"0b28d5d10a6c74b4ceac49c0e69d45acb0704511","modified":1459885593000},{"_id":"source/_posts/2009-10-20-adventures-in-mvvm-a-rails-inspired-viewmodel.md","hash":"83fd86c8dde349863f0eaf8963430f411eb87a5b","modified":1459885593000},{"_id":"source/_posts/2009-11-14-adventures-in-mvvm-dependant-properties-with-inotifypropertychanged.md","hash":"69e8980fe67bcdac66a4452694352bd575a081de","modified":1459885593000},{"_id":"source/_posts/2009-12-20-moving-on.md","hash":"e5a9c89386abb2ae115e069e60ef4638c6d3628b","modified":1459885593000},{"_id":"source/_posts/2010-01-11-adventures-in-mvvm-codemash-schedule-application.md","hash":"eac3ba125555a6784818d8beba4a13f38c7ec62f","modified":1459885593000},{"_id":"source/_posts/2010-02-21-goodbye-xml-hello-yaml-part-1.md","hash":"a395b5c267bf3ac9f3b82b8ad6cc9c433ac1890d","modified":1459885593000},{"_id":"source/_posts/2010-02-27-mvvm-jam-prerequisites.md","hash":"9877c1212cd6e8c8f57129d9bdc223caf50202eb","modified":1459885593000},{"_id":"source/_posts/2010-03-02-mvvm-jam-a-solution.md","hash":"5eaa7f0ad2a923ffaca291be49f2cd47d4918736","modified":1459885593000},{"_id":"source/_posts/2010-03-11-prism-slides-and-demo.md","hash":"f1b430d29a5772b37d45aa72616cfd66e0a7238d","modified":1459885593000},{"_id":"source/_posts/2010-03-27-goodbye-xml-hello-yaml-part-2.md","hash":"1d7baeea0ae513efd98f8d91aa428d0990bcaab9","modified":1459885593000},{"_id":"source/_posts/2010-04-16-the-silverlightning-talks.md","hash":"9d714f9656413e31830b002298c20a8363c79eff","modified":1459885593000},{"_id":"source/_posts/2010-05-14-adventures-in-mvvm-my-viewmodel-base-silverlight-support.md","hash":"dfe7c87a714d1306a56ba78f6b38ae7f126cee32","modified":1459885593000},{"_id":"source/_posts/2010-05-08-adventures-in-mvvm-my-viewmodel-base.md","hash":"f26dcf33baffd7d9b684d67eac1c2f8301a98116","modified":1459885593000},{"_id":"source/_posts/2010-06-02-disabling-navigation-flicks-in-wpf.md","hash":"3f2a0e12ade4d385d1dbdb85efb3143c2b70c691","modified":1459885593000},{"_id":"source/_posts/2010-06-04-adventures-in-mvvm-viewmodel-location-and-creation.md","hash":"53740e5ebb3cd09f4205d3e8148bd0c2ddb66a47","modified":1459885593000},{"_id":"source/_posts/2010-06-14-adventures-in-ruby-mvvm-firing-events-from-ruby.md","hash":"6b18724333ebe95bea6063e1029e6e85b9f04bed","modified":1459885593000},{"_id":"source/_posts/2010-06-19-adventures-in-ruby-mvvm-a-viewmodel-base-class-in-ruby.md","hash":"4757c902e782418ba21513fba7797e0a9613472d","modified":1459885593000},{"_id":"source/_posts/2010-07-07-adventures-in-ruby-mvvm-bootstrapping-ruby.md","hash":"856ad874a960ba2ee6ac9ea321e9f083d7fdc775","modified":1459885593000},{"_id":"source/_posts/2010-10-24-cross-training-in-silverlight-vs-flex.md","hash":"319ba40be1003e157351632db2606ffbdf45a55d","modified":1459885593000},{"_id":"source/_posts/2010-10-26-cross-training-in-silverlight-flex-platform-overview.md","hash":"84620205e231eed965a437370c329b21f7fba2d9","modified":1459885593000},{"_id":"source/_posts/2010-10-30-cross-training-in-silverlight-flex-the-future-of-rias.md","hash":"51b6fe588286727c66e2c0abb9840e06054bd8a9","modified":1459885593000},{"_id":"source/_posts/2010-11-08-cross-training-in-silverlight-and-flex-xaml-vs-mxml.md","hash":"e93bf9140259d1c0ab0f39fa16db70325200e85a","modified":1459885593000},{"_id":"source/_posts/2010-12-17-cross-training-in-silverlight-flex-cclr-vs-actionscript3avm-part-1.md","hash":"10a7b1f40ca5ebb4540feed71371b1c149cc2061","modified":1459885593000},{"_id":"source/_posts/2010-12-29-cross-training-in-silverlight-flexmvvm-vs-presentation-model.md","hash":"eac9cd9804aa92ae9ed87b33db52d2591fce13f7","modified":1459885593000},{"_id":"source/_posts/2011-01-04-introducing-actionlinq.md","hash":"edd8948514cf988000d7a539f957011756bf9919","modified":1459885593000},{"_id":"source/_posts/2011-01-12-3-day-flex-jam-with-james-ward.md","hash":"b33d55e58b9ad1837490f254d7a9ff96f60ea00d","modified":1459885593000},{"_id":"source/_posts/2011-01-11-codemash-slides-and-demos.md","hash":"b5314b62b478088e42085071cc7733264c70b4c2","modified":1459885593000},{"_id":"source/_posts/2011-01-24-cross-training-in-silverlight-flexdata-binding.md","hash":"8dd472c5b48541eda089bb8e1c68303d9bbe0fe2","modified":1459885593000},{"_id":"source/_posts/2011-02-08-ria-rockstars.md","hash":"3384c3e16dca1d18be957557fe39e90326f8b81b","modified":1459885593000},{"_id":"source/_posts/2011-02-24-mobile-smackdown-flex-edition.md","hash":"b799647da96afa9ef92ef548513a6071535bf3ac","modified":1459885593000},{"_id":"source/_posts/2011-03-24-presentation-model-and-multiple-screens-flex.md","hash":"bdcecb3288c448ec5c5372199c98835afe123577","modified":1459885593000},{"_id":"source/_posts/2011-04-05-introducing-jasmine-flex.md","hash":"889214ae78c4709ca8a6d70247b3369b6c2e7950","modified":1459885593000},{"_id":"source/_posts/2011-05-06-slides-and-presentation-for-mobile-air-presentation.md","hash":"5eeaf40f9231c3e7438dc3b2fe63b3e8ec8db0cb","modified":1459885593000},{"_id":"source/_posts/2011-10-11-captive-runtime-packaging-in-air-3-0.md","hash":"08267cfa6c07ec07ff25154de95c2de0db7bd29f","modified":1459885593000},{"_id":"source/_posts/2011-11-07-a-proxy-server-for-parse-com.md","hash":"b282cae46fc302b77b62d17b91a2c2a790df7a96","modified":1459885593000},{"_id":"source/_posts/2011-11-07-going-mostly-server-less-with-backbone-js.md","hash":"7145ba77da273b979343f94b7a2b6508969e3aec","modified":1459885593000},{"_id":"source/_posts/2011-11-07-making-backbone-js-work-with-parse-com.md","hash":"9fa13544af307aa3dd763ffac13baacdb0fd6830","modified":1459885593000},{"_id":"source/_posts/2011-11-09-working-with-backbone-js-and-the-parse-com-proxy.md","hash":"c000030fedf74f2e184f9b40d80983ef90001575","modified":1459885593000},{"_id":"source/_posts/2011-11-30-an-example-backboneparse-com-app.md","hash":"7e119fac111078446cbe50b9d115f97ab7ae1678","modified":1459885593000},{"_id":"source/_posts/2011-11-30-hosting-the-todos-example-on-heroku.md","hash":"5620f91ca95700c27a68b2e5364957f06e91c316","modified":1459885593000},{"_id":"source/_posts/2013-02-05-choose-your-own-application.md","hash":"f9f5612e3e5960284a2f95f0672e8f87b9abcc5c","modified":1459885593000},{"_id":"source/_posts/2013-04-02-where-is-the-rest-of-my-blog.md","hash":"de1f1d14e6e5c8cc949be37f07a20604c4b28e52","modified":1459885222000},{"_id":"source/_posts/2013-04-17-there-and-back-again-thoughts-on-spas-1.md","hash":"60c9cb6502887f8a30bf0014d3f7a654ef5834a5","modified":1459885593000},{"_id":"source/_posts/2013-04-17-there-and-back-again-thoughts-on-spas.md","hash":"b35dd647f56663111bdeabd29d8dd0a1e94d8d42","modified":1459885222000},{"_id":"source/_posts/2014-01-16-angular-directives-demystified-1.md","hash":"2436df8de518797cc096a404b34407cb69414ba5","modified":1459885593000},{"_id":"source/_posts/2014-01-16-angular-directives-demystified.md","hash":"0809413bd1afae22f28a95ecb851f41195f53afe","modified":1459885222000},{"_id":"source/_posts/2014-03-05-calling-actions-in-directives.md","hash":"65c542d3809efc7d5a8604ff35123c8b95a557f7","modified":1459885222000},{"_id":"source/_posts/2014-08-23-rise-of-the-nodebots.md","hash":"23a3da9f7ca448e4d08657c86254d0862444658b","modified":1459885222000},{"_id":"source/_posts/2014-08-25-bootstrapping-your-arduino-with-firmata-and-johnny-five.md","hash":"7aac81c6acf6fafe03847a62009f6086cdf675fb","modified":1459885222000},{"_id":"source/_posts/2014-08-25-building-your-nodebot.md","hash":"180cfdfa79aa39e3b040ebc0d8651420f7ae5520","modified":1459885222000},{"_id":"source/_posts/2014-08-25-using-visual-studio-to-program-your-nodebot.md","hash":"82ceb5892fc047f29a86618175c5a7a005605dfe","modified":1459885222000},{"_id":"source/_posts/2014-09-03-my-blog-is-moving.md","hash":"d3f508a253b66bee1bb213fa7e53420ab6b8f86f","modified":1459885593000},{"_id":"source/_posts/2014-09-13-nodebots-hackathon-summary.md","hash":"82bff1c761fe4f5557c232ba660bd7e326aef324","modified":1459885222000},{"_id":"source/_posts/2014-10-04-codemash-nodebots-woot.md","hash":"315a49b86003ad8fb4bdf1b395ecb2853d6a58fd","modified":1459885222000},{"_id":"source/_posts/2014-10-23-learn-harmony.md","hash":"b6d962a89649a139e5ce5ff6823ccf7c912c24f1","modified":1459885222000},{"_id":"source/_posts/2015-01-12-codemash-nodebots-recap.md","hash":"7cc89e4b135b9d93f62a007ec60a46ccf137adb1","modified":1459885222000},{"_id":"source/_posts/2015-02-20-piece-of-mind-temperature-monitor.md","hash":"e0e24829736fe363e3b32f39c96cd2540657fb81","modified":1459885222000},{"_id":"source/projects/index.md","hash":"8f95d5ffbd0268a13ed63a026b16b499e4c7cb67","modified":1459885593000},{"_id":"source/_posts/2016-01-11-get-your-motor-running.md","hash":"9a578b48503a4b6a60be50be2fc6f3765d20607f","modified":1459885222000},{"_id":"source/speaker-resume/index.md","hash":"f8d47240f45dc5e09beb3877fbd1d6646eeafe1e","modified":1459885593000},{"_id":"themes/minos/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1459821759000},{"_id":"themes/minos/.git/config","hash":"e4bfcefc2c84f987d1fa8751374927f5c2854ff8","modified":1459821759000},{"_id":"themes/minos/.git/COMMIT_EDITMSG","hash":"d72b3f16d04723a25ffb96823254a7d2261b5e44","modified":1459872648000},{"_id":"themes/minos/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1459821757000},{"_id":"themes/minos/.git/index","hash":"44c9db8ca49ec67a8a17c9a7d298a452de093df1","modified":1459872648000},{"_id":"themes/minos/.git/packed-refs","hash":"1c4ce2bebab3a833a27f2dff064e605f4aae6ca3","modified":1459821759000},{"_id":"themes/minos/languages/en.yml","hash":"7bada5ca0cf685cb21ab64ba6ef2983314fe10c5","modified":1459821759000},{"_id":"themes/minos/languages/ru.yml","hash":"c0ac1d63913b0caea5494db14e458f7e5a0937c3","modified":1459821759000},{"_id":"themes/minos/languages/zh-CN.yml","hash":"c6daf6c25bdddcfa989ff0dd62559ed2ea5f790b","modified":1459821759000},{"_id":"themes/minos/layout/archive.ejs","hash":"4479c33517aa70f2714ee820775ff8307a0dd115","modified":1459821759000},{"_id":"themes/minos/layout/categories.ejs","hash":"c40b133eb9b8612a2286a83b8d7d2ca344673507","modified":1459821759000},{"_id":"themes/minos/layout/category.ejs","hash":"cd17981f9cac718731880148cb17de60d148a75c","modified":1459821759000},{"_id":"themes/minos/layout/index.ejs","hash":"505555df272ac4dd23e5eae3acb857a457e421b4","modified":1459821759000},{"_id":"themes/minos/layout/layout.ejs","hash":"03c85682322dce721f6a90aa0f0b5d2ed6622a35","modified":1459821759000},{"_id":"themes/minos/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1459821759000},{"_id":"themes/minos/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1459821759000},{"_id":"themes/minos/layout/tags.ejs","hash":"cf485e9053f96d69a1e0ce0f8a55c3aa33ebde03","modified":1459821759000},{"_id":"themes/minos/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1459821759000},{"_id":"themes/minos/layout/tag.ejs","hash":"bcde8c7ce7e21683ca2cba7fcc21ac43c817a9a4","modified":1459821759000},{"_id":"source/images/nodebots-hacking.jpg","hash":"3e3ff2b1c18361dd9a7378498c9be54df8aef27f","modified":1459885222000},{"_id":"source/images/spark_temperature_fritz.png","hash":"00b621eff1b17c38c9ee287ebd43de4f57610226","modified":1459885222000},{"_id":"source/_posts/2010-09-26-adventures-in-ruby-mvvm-wrapping-it-up.md","hash":"a6aa5b5d155499ce2c0da7407d132e767426ccb7","modified":1459885593000},{"_id":"source/images/codemash15/curb-feelerz.jpg","hash":"52536e6a3494ba86b54a8c53ebb33fbb0ffa7b83","modified":1459885222000},{"_id":"source/images/codemash15/sherman-gears.jpg","hash":"0bce8983b8ed308533a017b7b1a4dcd177e0852b","modified":1459885222000},{"_id":"source/images/codemash15/sherman.jpg","hash":"ff3fbc391d3965070cbf9d4896f65ac922e6a2bf","modified":1459885222000},{"_id":"source/images/codemash15/wheels-of-death.jpg","hash":"b807e0bca1e738bb5a0778a519f45e593f18021b","modified":1459885222000},{"_id":"source/images/nodebot-army.JPG","hash":"e71bbb18258f879a386f55d88d027149f39fa18a","modified":1459885222000},{"_id":"source/images/nodebot-assembled.JPG","hash":"5b7d73ce021e9c247e6b16048055fbca421a1d9c","modified":1459885222000},{"_id":"source/images/nodebot-kit.JPG","hash":"9a10181849e25797c87c595978ef239899360150","modified":1459885222000},{"_id":"source/images/spark_temperature.jpg","hash":"5c3475ee2f7a3debd30f434a4b91de7785a4790e","modified":1459885222000},{"_id":"themes/minos/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1459821757000},{"_id":"themes/minos/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1459821757000},{"_id":"themes/minos/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1459821757000},{"_id":"themes/minos/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1459821757000},{"_id":"themes/minos/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1459821757000},{"_id":"themes/minos/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1459821757000},{"_id":"themes/minos/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1459821757000},{"_id":"themes/minos/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1459821757000},{"_id":"themes/minos/.git/logs/HEAD","hash":"7659d8633fe54ccf0e7410e3fe4806cc60014cbc","modified":1459872648000},{"_id":"themes/minos/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1459821757000},{"_id":"themes/minos/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1459821757000},{"_id":"themes/minos/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1459821759000},{"_id":"themes/minos/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1459821759000},{"_id":"themes/minos/layout/_partial/after-footer.ejs","hash":"75ff417878f27f05f27bb3d2643db119cbc25377","modified":1459863727000},{"_id":"themes/minos/layout/_partial/archive-post.ejs","hash":"9d687d6560e05764d3d57b2948680aa3940332cf","modified":1459821759000},{"_id":"themes/minos/layout/_partial/archive.ejs","hash":"fb0206d283ae56717eb92f92784271e79b2e208a","modified":1459821759000},{"_id":"themes/minos/layout/_partial/footer.ejs","hash":"9ff7842d55d8707317fbcd00b1b2fac206a21a1a","modified":1459821759000},{"_id":"themes/minos/layout/_partial/article.ejs","hash":"9bd6eda11854c189594fe02d4c18f96a81167c4d","modified":1459821759000},{"_id":"themes/minos/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1459821759000},{"_id":"themes/minos/layout/_partial/head.ejs","hash":"0bd191a43bc158d1b2b01e1f5001efe5175edbec","modified":1459821759000},{"_id":"themes/minos/layout/_partial/header.ejs","hash":"f0996b745687334697625e196e4553edbc5677af","modified":1459871708000},{"_id":"themes/minos/source/css/_extend.styl","hash":"d31b1c9980353af3c1607ee6caf84835b7322eea","modified":1459821759000},{"_id":"themes/minos/source/css/_variables.styl","hash":"5bb3cfe78ece808ee0b32078535bb3ce69d98065","modified":1459821759000},{"_id":"themes/minos/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1459821759000},{"_id":"themes/minos/source/css/style.styl","hash":"6793062670c69b331e786cfb19d5473f82d7d51c","modified":1459870764000},{"_id":"themes/minos/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1459821759000},{"_id":"themes/minos/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1459821759000},{"_id":"themes/minos/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1459821759000},{"_id":"themes/minos/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1459821759000},{"_id":"themes/minos/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1459821759000},{"_id":"themes/minos/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1459821759000},{"_id":"themes/minos/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1459821759000},{"_id":"themes/minos/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1459821759000},{"_id":"source/images/codemash15/awesome-bot.jpg","hash":"7d04cedba28944c4eed2d44ef8969c5f59520fa1","modified":1459885222000},{"_id":"themes/minos/source/js/script.js","hash":"e6948d7aedcd4ea51cdf1266abed18b252414929","modified":1459863537000},{"_id":"source/images/codemash15/codemash.nodebots.jpg","hash":"0b9cc26da6bf22de23a4e12b37d61712c37ccdc9","modified":1459885222000},{"_id":"themes/minos/source/js/search.js","hash":"f7057731742dae3b7ef1c8de74c352ea2fac5e20","modified":1459872457000},{"_id":"source/images/codemash15/gears.jpg","hash":"145e870f9669e61d5a5e6484e7c05fdbd6512f54","modified":1459885222000},{"_id":"source/images/codemash15/jeanette-al.jpg","hash":"950e9b4bb013faff00f2a7cb58e6237d71acdd07","modified":1459885222000},{"_id":"source/images/nodebot-assemble/nodebot-attach-caster.JPG","hash":"6c87951a1574814f8c20350f8ee69cce88a0ea26","modified":1459885222000},{"_id":"source/images/nodebot-assemble/nodebot-calibrate.JPG","hash":"77ce5c34fc39a82717e0edb845268cb6f6711f87","modified":1459885222000},{"_id":"themes/minos/source/js/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1459821759000},{"_id":"source/images/codemash15/the-room.jpg","hash":"a0cde62773cc9624a4c98993eb26946e1ad87f99","modified":1459885222000},{"_id":"source/images/nodebot-assemble/nodebot-attach-battery.JPG","hash":"621722f934996d1c5fc892f35ef9364baab18288","modified":1459885222000},{"_id":"source/images/nodebot-assemble/nodebot-attach-boards.JPG","hash":"32d5e6fa5cd7e71f9281a2ce9dfb7c861c2341b8","modified":1459885222000},{"_id":"source/images/nodebot-assemble/nodebot-attach-caster2.JPG","hash":"59942044490155a399be6f2835941fdead96ac68","modified":1459885222000},{"_id":"source/images/nodebot-assemble/nodebot-attach-servos.JPG","hash":"0be8df772b3b37a8f2ba8034e08bb990f436affc","modified":1459885222000},{"_id":"source/images/nodebot-assemble/nodebot-plug-servos.JPG","hash":"fe74c001e3a7e6dc45163d5156edaa0bb1aa8bf8","modified":1459885222000},{"_id":"source/images/nodebot-assemble/nodebot-mark-servo-location.JPG","hash":"4aaf6302ab9c1802b399221442fa838d61d93a35","modified":1459885222000},{"_id":"source/images/nodebot-assemble/nodebot-attach-wheels-to-servo.JPG","hash":"e9d4ea6a241f5d29ed9d6fd458e984b8f547e3f8","modified":1459885222000},{"_id":"source/images/nodebot-assemble/nodebot-program-bot.JPG","hash":"3246128f80178daf42d03c09b37023021cf1df38","modified":1459885222000},{"_id":"themes/minos/.git/objects/0f/bab2f2c235034e76a81cb0f034a38fddddee04","hash":"eccd4e27065ad61fc69b9274b957d728d5517465","modified":1459872514000},{"_id":"themes/minos/.git/objects/17/55ce4359094112baa1db61c0a31a0bd50d9945","hash":"c7d560be80f2bdb011163eeb4114ce864ae76394","modified":1459872514000},{"_id":"themes/minos/.git/objects/0d/3e8c8bf8007d523bebfddd0ca07bc422b825e2","hash":"808c7b7342fe50bb2d542dc2341eee3317204838","modified":1459872514000},{"_id":"themes/minos/.git/objects/19/479afad3f0be86f5f9a8bbc418f590da5c6be7","hash":"3b556461ce92c29cfa83014aa96df2b37216544e","modified":1459872520000},{"_id":"themes/minos/.git/objects/32/f0c04235b7fdee59e6de61c5e644db16594e8f","hash":"2e0ae2a2a0cf1d30f7e9a49e444e7d5edbfed722","modified":1459872520000},{"_id":"themes/minos/.git/objects/88/f2b783db3e7306c92c9bf611d5297ff594d649","hash":"ff62d54e0afcda0959b3fddfa3e8d3bfa7762089","modified":1459872648000},{"_id":"themes/minos/.git/objects/63/b02f26970a013b6f9c79167faa53dc0e3bf176","hash":"78c02190e1cff80d44d5f73c741b2f69271f5fa2","modified":1459872514000},{"_id":"themes/minos/.git/objects/40/9203968e0d80a6322292ba222d813cda93da3d","hash":"4aad0c141ee58c3d9b018c2d9822690f6577cadc","modified":1459872520000},{"_id":"themes/minos/.git/objects/47/0c7b3b160fe1efc0563cdc665ea677f92518b1","hash":"1b226e71e809010b67623d3baa16c5de615f74fd","modified":1459872520000},{"_id":"themes/minos/.git/objects/9f/620fbc073e3b81028157690ad3dd79ccb09c25","hash":"45ac508b0c594d4a69e25e4e50774790795f92d5","modified":1459872520000},{"_id":"themes/minos/.git/objects/7f/e62f852ce9187b3cf98ac1070a21b33d87778b","hash":"234b7282016b74caaed032ef69a531ff338eb081","modified":1459872520000},{"_id":"themes/minos/.git/objects/d6/c1201ba7ebbb61fbf17fb3bcdd404aa7d15812","hash":"b37f85f0933b9c9104fa1763c7642959e8245a61","modified":1459872648000},{"_id":"themes/minos/.git/objects/a9/2518b117bc07f21a2e89b54a4d245893fa580a","hash":"170807962f5ce93169557569179147472200f06f","modified":1459872520000},{"_id":"themes/minos/.git/objects/a8/8e4592c1fcb1e9445c1e93567e15aa24feb40e","hash":"927c899c516d49a6a74c76be71affafeaf5cd73a","modified":1459872520000},{"_id":"themes/minos/.git/objects/cb/1bc2729c46a92e1dfd58a5b7777f00778885af","hash":"ce17ab41d07d95dd7ff0e094a1a5c770e4f5f196","modified":1459872514000},{"_id":"themes/minos/.git/objects/e4/04778b703c21951c513af37f07ef81fbcaf6f5","hash":"2e338ca5b9dd2b724bf496236d8a42a0c0d56634","modified":1459872628000},{"_id":"themes/minos/.git/objects/pack/pack-034edf2b473f14a1c809de62476afa78d701bccc.idx","hash":"031908fccc55dba0a26215210204f2b7c1c6e14c","modified":1459821759000},{"_id":"themes/minos/.git/objects/cc/ee39200beb02110f8754f211ed8b94a5e6fed6","hash":"0c339caa1b49257cd158b592a03d675f16248cb2","modified":1459872648000},{"_id":"themes/minos/.git/refs/heads/master","hash":"ec3bf7f972af137a26851fa00be5ccfd62f7d4ca","modified":1459872648000},{"_id":"themes/minos/.git/objects/fa/4b66b07dd5f558d1ca6745d4f0d59500abf0db","hash":"0256002adf479e47c8ac03abb042a4745300378b","modified":1459872648000},{"_id":"themes/minos/.git/objects/f6/cde0a24b54ace78e77b392961fd35e38a9d89a","hash":"7a62f0468e87db4a3390046900784215996f5df8","modified":1459872648000},{"_id":"themes/minos/layout/_partial/post/category.ejs","hash":"28600328d5d2d68b547b59e7ed713cd315a138d8","modified":1459821759000},{"_id":"themes/minos/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1459821759000},{"_id":"themes/minos/layout/_partial/post/nav.ejs","hash":"573863e2d6a9d637fff4a8e3b2a4cacb65565499","modified":1459821759000},{"_id":"themes/minos/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1459821759000},{"_id":"themes/minos/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1459821759000},{"_id":"themes/minos/source/css/_partial/archive.styl","hash":"f75e3da863fccfebafcae2e76ea6732a927b79f4","modified":1459821759000},{"_id":"themes/minos/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1459821759000},{"_id":"themes/minos/source/css/_partial/comment.styl","hash":"06fc75428036bd8277a6d3dea4b636a0dac91154","modified":1459821759000},{"_id":"themes/minos/source/css/_partial/article.styl","hash":"42ffaa45f8ee22f34f0a560164298e07aa8c24b9","modified":1459821759000},{"_id":"themes/minos/source/css/_partial/custom-layout.styl","hash":"8d922662464bda0ac0b639c40fda2ee196bef5b5","modified":1459821759000},{"_id":"themes/minos/source/css/_partial/fancybox.styl","hash":"46a40e2749e68db0348db2938429fe4ce0f4724e","modified":1459821759000},{"_id":"themes/minos/source/css/_partial/footer.styl","hash":"e4e9b6da90a2620f7905b7283e52322bb83d2fdb","modified":1459821759000},{"_id":"themes/minos/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1459821759000},{"_id":"themes/minos/source/css/_partial/header.styl","hash":"f70a600d591a6958d84fe0b9394159b10b4d5b08","modified":1459872580000},{"_id":"themes/minos/source/css/_partial/highlight.styl","hash":"3fb9265868e4cebeaffa155d8825e90311eb3744","modified":1459821759000},{"_id":"themes/minos/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1459821759000},{"_id":"themes/minos/source/css/images/logo.png","hash":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1459821759000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1459821759000},{"_id":"themes/minos/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1459821759000},{"_id":"themes/minos/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1459821759000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1459821759000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1459821759000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1459821759000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1459821759000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1459821759000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1459821759000},{"_id":"source/images/nodebot-assemble/nodebot-rough-out.JPG","hash":"a92f4229d0e162563849d6b2aec20f103770346b","modified":1459885222000},{"_id":"themes/minos/source/webfonts/source-code-pro/main.css","hash":"e6a0204ff3c501d6248d96e55aa20d0b42b45a79","modified":1459821759000},{"_id":"themes/minos/source/webfonts/ptserif/main.css","hash":"ec6a269189b9a8b807fb4e1de6ffd7acc6a7fea8","modified":1459821759000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1459821759000},{"_id":"themes/minos/.git/refs/remotes/origin/master","hash":"ec3bf7f972af137a26851fa00be5ccfd62f7d4ca","modified":1459872651000},{"_id":"themes/minos/.git/logs/refs/heads/master","hash":"7659d8633fe54ccf0e7410e3fe4806cc60014cbc","modified":1459872648000},{"_id":"themes/minos/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1459821759000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/03aPdn7fFF3H6ngCgAlQzPk_vArhqVIZ0nv9q090hN8.woff2","hash":"fa8cc541ddc3da23a5a90b08e64e4c12944c56a1","modified":1459821759000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/3Nwg9VzlwLXPq3fNKwVRMCEAvth_LlrfE80CYdSH47w.woff2","hash":"703369bb4159f050b38ecc4f52cfadb8e5760775","modified":1459821759000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/5hX15RUpPERmeybVlLQEWBTbgVql8nDJpwnrE27mub0.woff2","hash":"0c79a0581c3472e6bb29082092ea37d897370473","modified":1459821759000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/CPRt--GVMETgA6YEaoGitxTbgVql8nDJpwnrE27mub0.woff2","hash":"4da92f4f265caa786469ec415cfa6515d2997943","modified":1459821759000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/I-OtoJZa3TeyH6D9oli3ifesZW2xOQ-xsNqO47m55DA.woff2","hash":"36225cd511b12ed61f3e3fbad53773119e9dd73e","modified":1459821759000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpCYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5984003d117f49ae596bde0498310ed215ac3aba","modified":1459821759000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/O_WhD9hODL16N4KLHLX7xSEAvth_LlrfE80CYdSH47w.woff2","hash":"950d5547dc10d4a1bdb837439fcfc6c68bbe1b02","modified":1459821759000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b64d3a0d20efa14e6063070eb30fbdb594bde59c","modified":1459821759000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDUj_cnvWIuuBMVgbX098Mw.woff2","hash":"6f1e434623e2fa20ba8972a6f97dd9c800b56168","modified":1459821759000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpI4P5ICox8Kq3LLUNMylGO4.woff2","hash":"df9999766ca9ffe9428b139931352cd821526aed","modified":1459821759000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/b31S45a_TNgaBApZhTgE6CEAvth_LlrfE80CYdSH47w.woff2","hash":"0b4aef50c2979164681fa6dfe2c1d6bd6be6bcd3","modified":1459821759000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/fU0HAfLiPHGlZhZpY6M7dBTbgVql8nDJpwnrE27mub0.woff2","hash":"3f425d6aee0c07774a10d82dcb742e32b067f217","modified":1459821759000},{"_id":"themes/minos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1459821759000},{"_id":"themes/minos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1459821759000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1459821759000},{"_id":"themes/minos/.git/logs/refs/remotes/origin/master","hash":"6c6ecaf7bbfbd4b37711b6def16c6affaed10480","modified":1459872651000},{"_id":"themes/minos/.git/logs/refs/remotes/origin/HEAD","hash":"3bc1d7fd0153356702b09e933cf0bd568f955b13","modified":1459821759000},{"_id":"themes/minos/.git/objects/pack/pack-034edf2b473f14a1c809de62476afa78d701bccc.pack","hash":"f6abcc3578bb13d41e7588b982fb2eeda11f86e8","modified":1459821759000}],"Category":[{"name":"Uncategorized","_id":"cimnua9dg00046eulo4cfgwka"},{"name":"Software","_id":"cimnua9il006h6euls84qjdo6"}],"Data":[],"Page":[{"title":"About Me","date":"2016-04-04T22:24:01.000Z","_content":"\n![Brian Genisio](https://www.gravatar.com/avatar/170325813beddd7418a3b55ffbf378f9?s=256&d=identicon&r=PG)\n\nBrian Genisio is a passionate software developer in Ann Arbor, MI and an active member of the Michigan software community including co-organizing the SouthEast Michigan JavaScript Users’ Group ([SemJs.org](http://semjs.org)).  \n\nHe is also a contributor to the JavaScript-based robotics library, [Johnny-Five](http://johnny-five.io/) and organizes [NodeBots](http://nodebots.io/) events in his spare time.  His work with robotics has earned him a [Microsoft MVP](https://mvp.microsoft.com) award in Windows Development -- IoT.\n\nFor over 16 years, Brian has worked with countless languages and technologies.  Currently, he is focusing on front-end development stacks, mostly JavaScript-based. \n\nHe also loves to talk about making things. He can talk your ear off. Just humor him. Aside from technology, he enjoys cooking, cycling, and playing with his family.","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2016-04-04 18:24:01\n---\n\n![Brian Genisio](https://www.gravatar.com/avatar/170325813beddd7418a3b55ffbf378f9?s=256&d=identicon&r=PG)\n\nBrian Genisio is a passionate software developer in Ann Arbor, MI and an active member of the Michigan software community including co-organizing the SouthEast Michigan JavaScript Users’ Group ([SemJs.org](http://semjs.org)).  \n\nHe is also a contributor to the JavaScript-based robotics library, [Johnny-Five](http://johnny-five.io/) and organizes [NodeBots](http://nodebots.io/) events in his spare time.  His work with robotics has earned him a [Microsoft MVP](https://mvp.microsoft.com) award in Windows Development -- IoT.\n\nFor over 16 years, Brian has worked with countless languages and technologies.  Currently, he is focusing on front-end development stacks, mostly JavaScript-based. \n\nHe also loves to talk about making things. He can talk your ear off. Just humor him. Aside from technology, he enjoys cooking, cycling, and playing with his family.","updated":"2016-04-05T19:40:22.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cimnua9d500006eulhb1jm7dm","content":"<p><img src=\"https://www.gravatar.com/avatar/170325813beddd7418a3b55ffbf378f9?s=256&amp;d=identicon&amp;r=PG\" alt=\"Brian Genisio\"></p>\n<p>Brian Genisio is a passionate software developer in Ann Arbor, MI and an active member of the Michigan software community including co-organizing the SouthEast Michigan JavaScript Users’ Group (<a href=\"http://semjs.org\" target=\"_blank\" rel=\"external\">SemJs.org</a>).  </p>\n<p>He is also a contributor to the JavaScript-based robotics library, <a href=\"http://johnny-five.io/\" target=\"_blank\" rel=\"external\">Johnny-Five</a> and organizes <a href=\"http://nodebots.io/\" target=\"_blank\" rel=\"external\">NodeBots</a> events in his spare time.  His work with robotics has earned him a <a href=\"https://mvp.microsoft.com\" target=\"_blank\" rel=\"external\">Microsoft MVP</a> award in Windows Development – IoT.</p>\n<p>For over 16 years, Brian has worked with countless languages and technologies.  Currently, he is focusing on front-end development stacks, mostly JavaScript-based. </p>\n<p>He also loves to talk about making things. He can talk your ear off. Just humor him. Aside from technology, he enjoys cooking, cycling, and playing with his family.</p>\n","excerpt":"","more":"<p><img src=\"https://www.gravatar.com/avatar/170325813beddd7418a3b55ffbf378f9?s=256&amp;d=identicon&amp;r=PG\" alt=\"Brian Genisio\"></p>\n<p>Brian Genisio is a passionate software developer in Ann Arbor, MI and an active member of the Michigan software community including co-organizing the SouthEast Michigan JavaScript Users’ Group (<a href=\"http://semjs.org\">SemJs.org</a>).  </p>\n<p>He is also a contributor to the JavaScript-based robotics library, <a href=\"http://johnny-five.io/\">Johnny-Five</a> and organizes <a href=\"http://nodebots.io/\">NodeBots</a> events in his spare time.  His work with robotics has earned him a <a href=\"https://mvp.microsoft.com\">Microsoft MVP</a> award in Windows Development – IoT.</p>\n<p>For over 16 years, Brian has worked with countless languages and technologies.  Currently, he is focusing on front-end development stacks, mostly JavaScript-based. </p>\n<p>He also loves to talk about making things. He can talk your ear off. Just humor him. Aside from technology, he enjoys cooking, cycling, and playing with his family.</p>\n"},{"title":"Publications","id":107,"date":"2010-06-11T05:20:07.000Z","_content":"\n[**CODE Magazine -- Post Mortem: Computerized Survey and Intervention Project**](http://www.code-magazine.com/Article.aspx?quickid=112051)\n\n**[![](http://houseofbilz.com/wp-content/uploads/2011/01/CODE_Mag-225x300.jpg \"Code Magazine Article\")](http://www.code-magazine.com/Article.aspx?quickid=112051)**\n\n![UX Magazine Logo](http://uxmag.com/sites/default/files/uxmag_logo.png)\n[**UX Magazine: Understanding Designer/Developer Workflow**](http://uxmag.com/strategy/understanding-designer-developer-workflow)\n\n[**Technology and Friends -- Episode 248 -- Dennis Burton and Brian Genisio on Choose Your Own Application**](http://technologyandfriends.com/SubText/archive/2013/01/15/tf248.aspx)\n\n<iframe id=\"viddler-13023e2e\" src=\"//www.viddler.com/embed/13023e2e/?f=1&offset=0&autoplay=0&secret=69245295&disablebranding=0&view_secret=69245295\" width=\"545\" height=\"349\" frameborder=\"0\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n<a>** **</a>**<a></a>[<strong>Technology and Friends -- Episode 79 -- Brian Genisio on Prism**](http://technologyandfriends.com/archive/2010/03/29/tf079.aspx)</strong>\n\n**<object id=\"viddler\" classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" width=\"437\" height=\"370\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"><param name=\"allowScriptAccess\" value=\"always\" /><param name=\"allowFullScreen\" value=\"true\" /><param name=\"flashvars\" value=\"fake=1\" /><param name=\"src\" value=\"http://www.viddler.com/player/62e3dd09/\" /><param name=\"name\" value=\"viddler\" /><param name=\"allowfullscreen\" value=\"true\" /><embed id=\"viddler\" type=\"application/x-shockwave-flash\" width=\"437\" height=\"370\" src=\"http://www.viddler.com/player/62e3dd09/\" name=\"viddler\" flashvars=\"fake=1\" allowfullscreen=\"true\" allowscriptaccess=\"always\"></embed></object>**\n\n** **\n\n**[Technology and Friends -- Episode 34: Brian Genisio on the MVVM Pattern](http://technologyandfriends.com/archive/2009/07/15/tf034.aspx)**\n\n<object id=\"viddler\" classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" width=\"437\" height=\"370\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"><param name=\"allowScriptAccess\" value=\"always\" /><param name=\"allowFullScreen\" value=\"true\" /><param name=\"flashvars\" value=\"fake=1\" /><param name=\"src\" value=\"http://www.viddler.com/player/9acea31a/\" /><param name=\"name\" value=\"viddler\" /><param name=\"allowfullscreen\" value=\"true\" /><embed id=\"viddler\" type=\"application/x-shockwave-flash\" width=\"437\" height=\"370\" src=\"http://www.viddler.com/player/9acea31a/\" name=\"viddler\" flashvars=\"fake=1\" allowfullscreen=\"true\" allowscriptaccess=\"always\"></embed></object>","source":"media-appearances/index.md","raw":"---\ntitle: Publications\nid: 107\ndate: 2010-06-11 01:20:07\n---\n\n[**CODE Magazine -- Post Mortem: Computerized Survey and Intervention Project**](http://www.code-magazine.com/Article.aspx?quickid=112051)\n\n**[![](http://houseofbilz.com/wp-content/uploads/2011/01/CODE_Mag-225x300.jpg \"Code Magazine Article\")](http://www.code-magazine.com/Article.aspx?quickid=112051)**\n\n![UX Magazine Logo](http://uxmag.com/sites/default/files/uxmag_logo.png)\n[**UX Magazine: Understanding Designer/Developer Workflow**](http://uxmag.com/strategy/understanding-designer-developer-workflow)\n\n[**Technology and Friends -- Episode 248 -- Dennis Burton and Brian Genisio on Choose Your Own Application**](http://technologyandfriends.com/SubText/archive/2013/01/15/tf248.aspx)\n\n<iframe id=\"viddler-13023e2e\" src=\"//www.viddler.com/embed/13023e2e/?f=1&offset=0&autoplay=0&secret=69245295&disablebranding=0&view_secret=69245295\" width=\"545\" height=\"349\" frameborder=\"0\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n<a>** **</a>**<a></a>[<strong>Technology and Friends -- Episode 79 -- Brian Genisio on Prism**](http://technologyandfriends.com/archive/2010/03/29/tf079.aspx)</strong>\n\n**<object id=\"viddler\" classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" width=\"437\" height=\"370\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"><param name=\"allowScriptAccess\" value=\"always\" /><param name=\"allowFullScreen\" value=\"true\" /><param name=\"flashvars\" value=\"fake=1\" /><param name=\"src\" value=\"http://www.viddler.com/player/62e3dd09/\" /><param name=\"name\" value=\"viddler\" /><param name=\"allowfullscreen\" value=\"true\" /><embed id=\"viddler\" type=\"application/x-shockwave-flash\" width=\"437\" height=\"370\" src=\"http://www.viddler.com/player/62e3dd09/\" name=\"viddler\" flashvars=\"fake=1\" allowfullscreen=\"true\" allowscriptaccess=\"always\"></embed></object>**\n\n** **\n\n**[Technology and Friends -- Episode 34: Brian Genisio on the MVVM Pattern](http://technologyandfriends.com/archive/2009/07/15/tf034.aspx)**\n\n<object id=\"viddler\" classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" width=\"437\" height=\"370\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"><param name=\"allowScriptAccess\" value=\"always\" /><param name=\"allowFullScreen\" value=\"true\" /><param name=\"flashvars\" value=\"fake=1\" /><param name=\"src\" value=\"http://www.viddler.com/player/9acea31a/\" /><param name=\"name\" value=\"viddler\" /><param name=\"allowfullscreen\" value=\"true\" /><embed id=\"viddler\" type=\"application/x-shockwave-flash\" width=\"437\" height=\"370\" src=\"http://www.viddler.com/player/9acea31a/\" name=\"viddler\" flashvars=\"fake=1\" allowfullscreen=\"true\" allowscriptaccess=\"always\"></embed></object>","updated":"2016-04-05T19:46:33.000Z","path":"media-appearances/index.html","comments":1,"layout":"page","_id":"cimnua9dc00026eul5gsfvfjz"},{"title":"Projects","id":109,"date":"2010-06-11T05:25:18.000Z","_content":"\n[ChooseYourOwnApplication.com](http://chooseyourownapplication.com)-- 12 technologies. 22 distinct adventures. One application. You choose how to build it. We help you get there.\n\n[ActionLinq ](https://bitbucket.org/briangenisio/actionlinq)-- A complete LINQ-to-Objects implementation for ActionScript 3.0 ![](https://bitbucket-assetroot.s3.amazonaws.com/c/photos/2010/Dec/22/actionlinq-logo-1179906388-11_avatar.png \"ActionLinq logo\")\n\n[Jasmine-Flex](https://github.com/BrianGenisio/jasmine-flex/wiki) -- A BDD testing tool for ActionScript and Flex. ![Jasmine-Flex](http://pivotal.github.com/jasmine/images/jasmine_logo.png \"Jasmine\")\n\n[ViewModel Support](http://viewmodelsupport.codeplex.com/) -- A set of classes to reduce the friction when writing ViewModels\n\n[Dynamic Wrapper](http://dynamicwrapper.codeplex.com/) -- A utility to simulate casting objects to interfaces, even if they do not explicitly implement them.  Automatic wrapping.\n\n[Silverlight HTML Utilities](http://htmlpageutil.codeplex.com/) -- A set of wrappers around the DOM in Silverlight to make it easily doubled out for testing.\n\n[Ruby MVVM Experiments](http://bitbucket.org/briangenisio/rubyvm) -- Some experiments I have been playing with to see if MVVM can be done effectively in Ruby.","source":"projects/index.md","raw":"---\ntitle: Projects\nid: 109\ndate: 2010-06-11 01:25:18\n---\n\n[ChooseYourOwnApplication.com](http://chooseyourownapplication.com)-- 12 technologies. 22 distinct adventures. One application. You choose how to build it. We help you get there.\n\n[ActionLinq ](https://bitbucket.org/briangenisio/actionlinq)-- A complete LINQ-to-Objects implementation for ActionScript 3.0 ![](https://bitbucket-assetroot.s3.amazonaws.com/c/photos/2010/Dec/22/actionlinq-logo-1179906388-11_avatar.png \"ActionLinq logo\")\n\n[Jasmine-Flex](https://github.com/BrianGenisio/jasmine-flex/wiki) -- A BDD testing tool for ActionScript and Flex. ![Jasmine-Flex](http://pivotal.github.com/jasmine/images/jasmine_logo.png \"Jasmine\")\n\n[ViewModel Support](http://viewmodelsupport.codeplex.com/) -- A set of classes to reduce the friction when writing ViewModels\n\n[Dynamic Wrapper](http://dynamicwrapper.codeplex.com/) -- A utility to simulate casting objects to interfaces, even if they do not explicitly implement them.  Automatic wrapping.\n\n[Silverlight HTML Utilities](http://htmlpageutil.codeplex.com/) -- A set of wrappers around the DOM in Silverlight to make it easily doubled out for testing.\n\n[Ruby MVVM Experiments](http://bitbucket.org/briangenisio/rubyvm) -- Some experiments I have been playing with to see if MVVM can be done effectively in Ruby.","updated":"2016-04-05T19:46:33.000Z","path":"projects/index.html","comments":1,"layout":"page","_id":"cimnua9kt00fg6eul1oiatklr"},{"title":"Speaker Resume","id":98,"comment":false,"date":"2010-05-28T06:26:30.000Z","_content":"\nSeptember 2008 -- **Ann Arbor .Net Developers Group** --  Castle  ActiveRecord\nOctober 2008 -- **Ann Arbor Day of .Net** -- Testing  WinForms in .Net\nNovember 2008 -- **Greater Lansing User Group.Net** --  Castle ActiveRecord\nJune 2009 -- **Greater Lansing User Group.Net FLINT** -- Introducing the MVVM Pattern\nJune 2009 -- **Great Lakes Area .Net User Group** -- Introducing the MVVM  Pattern\nJuly 2009 -- **Ann Arbor .Net Developers Group** -- MVVM Grok  Talk\nJuly 2009 --** Codestock 2009** -- Introducing the MVVM Pattern\nAugust  2009 -- **Lansing Day of .Net** -- Getting started with Silverlight\nAugust 2009 -- **West Michigan .Net Users** -- Introducing the MVVM Pattern\nNovember  2009 -- **Come Jam With Us** -- Getting started with Silverlight\nJanuary  2010 -- **CodeMash 2010** -- Introducing the MVVM Pattern\nMarch 2010 --  **Come Jam With Us** -- MVVM Jam Session\nMarch 2010 -- **Ann Arbor .Net Developers Group** -- Introduction to Prism\nApril  2010 -- **Grand Rapids Silverlight Firestarter** -- Advanced topics in  Silverlight\nMay 2010 -- **Ann Arbor Day of .Net** -- Introduction to  Prism\nNovember 2010 -- **MI Silverlight Users Group** -- Cross-Training in Silverlight &amp; Flex\nJanuary 2011 -- **CodeMash 2011** -- Every Thing You Always Wanted to Know About Flex * But Were Afraid to Ask\nFebruary 2011 -- **MobiDevDay Detroit** -- Mobile App Development with Air\nFebruary 2011 -- **Flex Jam with James Ward** -- Several assorted topics (short form)\nApril 2011 -- **360Flex Unconference** -- Cross-Training in Silverlight &amp; Flex\nApril 2011 -- **West Michigan .Net Users Group** -- Cross-Training in Silverlight &amp; Flex\nMay 2011 -- **Stir Trek III** -- Mobile App Development with Air\nJune 2011 -- **Toledo .Net Users Group** -- Cross-Training in Silverlight &amp; Flex\nSeptember 2012 -- **Ann Arbor .Net Developers Group** -- Cross-Platform Mobile Solutions\nOctober 2012 -- **Mobile Monday Ann Arbor** -- Cross-Platform Mobile Solutions\nJanuary 2013 -- **Codemash 2013** -- Choose Your Own Application\nJanuary 2014 -- **Codemash 2014** -- Angular Directives: Demystified\nMarch 2014 -- **Columbus JavaScript User Group** -- Amazing Visualizations with D3.js","source":"speaker-resume/index.md","raw":"---\ntitle: Speaker Resume\nid: 98\ncomment: false\ndate: 2010-05-28 02:26:30\n---\n\nSeptember 2008 -- **Ann Arbor .Net Developers Group** --  Castle  ActiveRecord\nOctober 2008 -- **Ann Arbor Day of .Net** -- Testing  WinForms in .Net\nNovember 2008 -- **Greater Lansing User Group.Net** --  Castle ActiveRecord\nJune 2009 -- **Greater Lansing User Group.Net FLINT** -- Introducing the MVVM Pattern\nJune 2009 -- **Great Lakes Area .Net User Group** -- Introducing the MVVM  Pattern\nJuly 2009 -- **Ann Arbor .Net Developers Group** -- MVVM Grok  Talk\nJuly 2009 --** Codestock 2009** -- Introducing the MVVM Pattern\nAugust  2009 -- **Lansing Day of .Net** -- Getting started with Silverlight\nAugust 2009 -- **West Michigan .Net Users** -- Introducing the MVVM Pattern\nNovember  2009 -- **Come Jam With Us** -- Getting started with Silverlight\nJanuary  2010 -- **CodeMash 2010** -- Introducing the MVVM Pattern\nMarch 2010 --  **Come Jam With Us** -- MVVM Jam Session\nMarch 2010 -- **Ann Arbor .Net Developers Group** -- Introduction to Prism\nApril  2010 -- **Grand Rapids Silverlight Firestarter** -- Advanced topics in  Silverlight\nMay 2010 -- **Ann Arbor Day of .Net** -- Introduction to  Prism\nNovember 2010 -- **MI Silverlight Users Group** -- Cross-Training in Silverlight &amp; Flex\nJanuary 2011 -- **CodeMash 2011** -- Every Thing You Always Wanted to Know About Flex * But Were Afraid to Ask\nFebruary 2011 -- **MobiDevDay Detroit** -- Mobile App Development with Air\nFebruary 2011 -- **Flex Jam with James Ward** -- Several assorted topics (short form)\nApril 2011 -- **360Flex Unconference** -- Cross-Training in Silverlight &amp; Flex\nApril 2011 -- **West Michigan .Net Users Group** -- Cross-Training in Silverlight &amp; Flex\nMay 2011 -- **Stir Trek III** -- Mobile App Development with Air\nJune 2011 -- **Toledo .Net Users Group** -- Cross-Training in Silverlight &amp; Flex\nSeptember 2012 -- **Ann Arbor .Net Developers Group** -- Cross-Platform Mobile Solutions\nOctober 2012 -- **Mobile Monday Ann Arbor** -- Cross-Platform Mobile Solutions\nJanuary 2013 -- **Codemash 2013** -- Choose Your Own Application\nJanuary 2014 -- **Codemash 2014** -- Angular Directives: Demystified\nMarch 2014 -- **Columbus JavaScript User Group** -- Amazing Visualizations with D3.js","updated":"2016-04-05T19:46:33.000Z","path":"speaker-resume/index.html","comments":1,"layout":"page","_id":"cimnua9kw00fi6eulyq0k8vpl"}],"Post":[{"title":"The start of a new blog","id":"10","date":"2008-06-21T17:43:00.000Z","_content":"\nWhy am I doing this? Another blog? Another blog about software? Just another programmer who thinks that someone might care what he has to say? I don't know. I guess I am doing it to create more of an online presence... although if you &quot;google&quot; my name, you will find countless usenet conversations about everything from &quot;SSH Tunneling&quot; to blueberry jam. Searching for my alter-ego, Bilzmoude, will come up with a similar mish-mash of topics such as beer and MythTV. My presence is small, but it is there.   \n\nSo why a technical blog? Hasn't everyone already written everything I have to say? What is the point? Is this realling going to increase my &quot;web footprint&quot;?   \n\nThe point, I suppose, is to collect my thoughts about programming. I want it to capture what I am thinking in the moment. As my views change, I would like to be able to look back and see HOW they have changed. For instance, there was a time when I strongly believed that code without comments was bad code. I know believe the exact opposite. Likewise, I used to believe all functions should have a single exit point and have since changed my mind on that too. I know that I am growing as a developer because I am always changing my mind. As long as I am doing this, I know that I am still learning.   \n\nI am also trying to learn to write better. Throughout high school and college, I took the common engineering attitude that writing wasn't my thing... programming was. I regret that attitude now that I am over 30 and my writing reads like a high-schooler. If I write more in my blog, will my writing get better? I hope so.   \n\nThere are several things I want to write about, though I can't promise how often I will actually write. I have had several blogs in the past (and I am currently maintaining a family blog with my wife) but historically, I have not written very frequently. If history is an indicator, this blog will be similar.   ","source":"_posts/2008-06-21-the-start-of-a-new-blog.md","raw":"---\ntitle: The start of a new blog\nid: 10\ncategories:\n  - Uncategorized\ndate: 2008-06-21 13:43:00\ntags:\n---\n\nWhy am I doing this? Another blog? Another blog about software? Just another programmer who thinks that someone might care what he has to say? I don't know. I guess I am doing it to create more of an online presence... although if you &quot;google&quot; my name, you will find countless usenet conversations about everything from &quot;SSH Tunneling&quot; to blueberry jam. Searching for my alter-ego, Bilzmoude, will come up with a similar mish-mash of topics such as beer and MythTV. My presence is small, but it is there.   \n\nSo why a technical blog? Hasn't everyone already written everything I have to say? What is the point? Is this realling going to increase my &quot;web footprint&quot;?   \n\nThe point, I suppose, is to collect my thoughts about programming. I want it to capture what I am thinking in the moment. As my views change, I would like to be able to look back and see HOW they have changed. For instance, there was a time when I strongly believed that code without comments was bad code. I know believe the exact opposite. Likewise, I used to believe all functions should have a single exit point and have since changed my mind on that too. I know that I am growing as a developer because I am always changing my mind. As long as I am doing this, I know that I am still learning.   \n\nI am also trying to learn to write better. Throughout high school and college, I took the common engineering attitude that writing wasn't my thing... programming was. I regret that attitude now that I am over 30 and my writing reads like a high-schooler. If I write more in my blog, will my writing get better? I hope so.   \n\nThere are several things I want to write about, though I can't promise how often I will actually write. I have had several blogs in the past (and I am currently maintaining a family blog with my wife) but historically, I have not written very frequently. If history is an indicator, this blog will be similar.   ","slug":"the-start-of-a-new-blog","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9d800016eulvbc3pegi","content":"<p>Why am I doing this? Another blog? Another blog about software? Just another programmer who thinks that someone might care what he has to say? I don’t know. I guess I am doing it to create more of an online presence… although if you &quot;google&quot; my name, you will find countless usenet conversations about everything from &quot;SSH Tunneling&quot; to blueberry jam. Searching for my alter-ego, Bilzmoude, will come up with a similar mish-mash of topics such as beer and MythTV. My presence is small, but it is there.   </p>\n<p>So why a technical blog? Hasn’t everyone already written everything I have to say? What is the point? Is this realling going to increase my &quot;web footprint&quot;?   </p>\n<p>The point, I suppose, is to collect my thoughts about programming. I want it to capture what I am thinking in the moment. As my views change, I would like to be able to look back and see HOW they have changed. For instance, there was a time when I strongly believed that code without comments was bad code. I know believe the exact opposite. Likewise, I used to believe all functions should have a single exit point and have since changed my mind on that too. I know that I am growing as a developer because I am always changing my mind. As long as I am doing this, I know that I am still learning.   </p>\n<p>I am also trying to learn to write better. Throughout high school and college, I took the common engineering attitude that writing wasn’t my thing… programming was. I regret that attitude now that I am over 30 and my writing reads like a high-schooler. If I write more in my blog, will my writing get better? I hope so.   </p>\n<p>There are several things I want to write about, though I can’t promise how often I will actually write. I have had several blogs in the past (and I am currently maintaining a family blog with my wife) but historically, I have not written very frequently. If history is an indicator, this blog will be similar.   </p>\n","excerpt":"","more":"<p>Why am I doing this? Another blog? Another blog about software? Just another programmer who thinks that someone might care what he has to say? I don’t know. I guess I am doing it to create more of an online presence… although if you &quot;google&quot; my name, you will find countless usenet conversations about everything from &quot;SSH Tunneling&quot; to blueberry jam. Searching for my alter-ego, Bilzmoude, will come up with a similar mish-mash of topics such as beer and MythTV. My presence is small, but it is there.   </p>\n<p>So why a technical blog? Hasn’t everyone already written everything I have to say? What is the point? Is this realling going to increase my &quot;web footprint&quot;?   </p>\n<p>The point, I suppose, is to collect my thoughts about programming. I want it to capture what I am thinking in the moment. As my views change, I would like to be able to look back and see HOW they have changed. For instance, there was a time when I strongly believed that code without comments was bad code. I know believe the exact opposite. Likewise, I used to believe all functions should have a single exit point and have since changed my mind on that too. I know that I am growing as a developer because I am always changing my mind. As long as I am doing this, I know that I am still learning.   </p>\n<p>I am also trying to learn to write better. Throughout high school and college, I took the common engineering attitude that writing wasn’t my thing… programming was. I regret that attitude now that I am over 30 and my writing reads like a high-schooler. If I write more in my blog, will my writing get better? I hope so.   </p>\n<p>There are several things I want to write about, though I can’t promise how often I will actually write. I have had several blogs in the past (and I am currently maintaining a family blog with my wife) but historically, I have not written very frequently. If history is an indicator, this blog will be similar.   </p>\n"},{"title":"Lansing Day of .NET","id":"11","date":"2008-06-23T17:45:00.000Z","_content":"\nIn one of my favorite tech blogs, [Coding Horror](http://www.codinghorror.com/), Jeff Atwood [blogs](http://www.codinghorror.com/blog/archives/001138.html) about what it means to practice your profession. More specifically, he mentions that you can do your job without practicing your profession. That everyone drives every day, but most people are not professional drivers.   \n\nIn his post, he brings up several things you can do to become more practiced as a developer. One of those things is &quot;Write a blog&quot;. It seems he (who is a developer turned professional blogger) believes that what I have decided to do (write a blog) is worthwhile to my career. It helps me get past my fear that I am just doing this to feed my own ego... which it feels a bit like.   \n\nI believe that another thing that is important for practicing your career is going to conferences. On Saturday, I attended the [&quot;Day of .NET&quot;](http://www.dayofdotnet.org/Lansing/2008/Default.aspx) in Lansing. I left feeling like I learned a TON! It was a great thing for me professionally.   \n\nOne thing that I enjoyed about this conference was the fellow attendants. See, this conference was held on a Saturday. I can't say that I have gone to many Saturday conferences. I think they do this so people who can't get their bosses to let them go during the week can still go to this conference. The side affect is that the people who attend are the types of people who are truly interested in learning outside of work. The enthusiasm about the conference and the topics was quite a bit stronger than I have ever seen at something like this.   \n\nI am starting to understand that this community is not terribly large. I recognized many of the people there from the Ann Arbor .NET Users Group, blogs and podcasts. Many of these people are people that I follow on Twitter because I have found what they have to say interesting through one of the previously mentioned venues. Although most of these people do not know me, I find that their views resonate with what I believe about software.   \n\nWhile at the conference, I sat through several talks. The ones I found most interesting were the [Castle Project](http://www.castleproject.org/) talks. It is interesting how the technology has progressed (my analysis):   \n\nFirst, there was ruby on rails. They did some really neat things. Then came Java with Hibernate, Spring, etc to try to do what rails did. Then came the Castle Project for .NET, with ActiveRecord (on top of NHibernate), Windsor and Monorails. From there, Microsoft lifted their heads and realized &quot;Hey! We should do this&quot;. From there, Entity Framework and ASP MVC were born.   \n\nThose ruby folks were really on to something!   \n\nAnyways, the conference was good and I learned a lot about Entity Framework, Castle ActiveRecord, Castle Windsor and ASP MVC. I expect to play a lot with these technologies over the next few months, and continue practicing my craft.","source":"_posts/2008-06-23-lansing-day-of-net.md","raw":"---\ntitle: Lansing Day of .NET\nid: 11\ncategories:\n  - Uncategorized\ndate: 2008-06-23 13:45:00\ntags:\n---\n\nIn one of my favorite tech blogs, [Coding Horror](http://www.codinghorror.com/), Jeff Atwood [blogs](http://www.codinghorror.com/blog/archives/001138.html) about what it means to practice your profession. More specifically, he mentions that you can do your job without practicing your profession. That everyone drives every day, but most people are not professional drivers.   \n\nIn his post, he brings up several things you can do to become more practiced as a developer. One of those things is &quot;Write a blog&quot;. It seems he (who is a developer turned professional blogger) believes that what I have decided to do (write a blog) is worthwhile to my career. It helps me get past my fear that I am just doing this to feed my own ego... which it feels a bit like.   \n\nI believe that another thing that is important for practicing your career is going to conferences. On Saturday, I attended the [&quot;Day of .NET&quot;](http://www.dayofdotnet.org/Lansing/2008/Default.aspx) in Lansing. I left feeling like I learned a TON! It was a great thing for me professionally.   \n\nOne thing that I enjoyed about this conference was the fellow attendants. See, this conference was held on a Saturday. I can't say that I have gone to many Saturday conferences. I think they do this so people who can't get their bosses to let them go during the week can still go to this conference. The side affect is that the people who attend are the types of people who are truly interested in learning outside of work. The enthusiasm about the conference and the topics was quite a bit stronger than I have ever seen at something like this.   \n\nI am starting to understand that this community is not terribly large. I recognized many of the people there from the Ann Arbor .NET Users Group, blogs and podcasts. Many of these people are people that I follow on Twitter because I have found what they have to say interesting through one of the previously mentioned venues. Although most of these people do not know me, I find that their views resonate with what I believe about software.   \n\nWhile at the conference, I sat through several talks. The ones I found most interesting were the [Castle Project](http://www.castleproject.org/) talks. It is interesting how the technology has progressed (my analysis):   \n\nFirst, there was ruby on rails. They did some really neat things. Then came Java with Hibernate, Spring, etc to try to do what rails did. Then came the Castle Project for .NET, with ActiveRecord (on top of NHibernate), Windsor and Monorails. From there, Microsoft lifted their heads and realized &quot;Hey! We should do this&quot;. From there, Entity Framework and ASP MVC were born.   \n\nThose ruby folks were really on to something!   \n\nAnyways, the conference was good and I learned a lot about Entity Framework, Castle ActiveRecord, Castle Windsor and ASP MVC. I expect to play a lot with these technologies over the next few months, and continue practicing my craft.","slug":"lansing-day-of-net","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9dd00036eul6dwbgogy","content":"<p>In one of my favorite tech blogs, <a href=\"http://www.codinghorror.com/\" target=\"_blank\" rel=\"external\">Coding Horror</a>, Jeff Atwood <a href=\"http://www.codinghorror.com/blog/archives/001138.html\" target=\"_blank\" rel=\"external\">blogs</a> about what it means to practice your profession. More specifically, he mentions that you can do your job without practicing your profession. That everyone drives every day, but most people are not professional drivers.   </p>\n<p>In his post, he brings up several things you can do to become more practiced as a developer. One of those things is &quot;Write a blog&quot;. It seems he (who is a developer turned professional blogger) believes that what I have decided to do (write a blog) is worthwhile to my career. It helps me get past my fear that I am just doing this to feed my own ego… which it feels a bit like.   </p>\n<p>I believe that another thing that is important for practicing your career is going to conferences. On Saturday, I attended the <a href=\"http://www.dayofdotnet.org/Lansing/2008/Default.aspx\" target=\"_blank\" rel=\"external\">&quot;Day of .NET&quot;</a> in Lansing. I left feeling like I learned a TON! It was a great thing for me professionally.   </p>\n<p>One thing that I enjoyed about this conference was the fellow attendants. See, this conference was held on a Saturday. I can’t say that I have gone to many Saturday conferences. I think they do this so people who can’t get their bosses to let them go during the week can still go to this conference. The side affect is that the people who attend are the types of people who are truly interested in learning outside of work. The enthusiasm about the conference and the topics was quite a bit stronger than I have ever seen at something like this.   </p>\n<p>I am starting to understand that this community is not terribly large. I recognized many of the people there from the Ann Arbor .NET Users Group, blogs and podcasts. Many of these people are people that I follow on Twitter because I have found what they have to say interesting through one of the previously mentioned venues. Although most of these people do not know me, I find that their views resonate with what I believe about software.   </p>\n<p>While at the conference, I sat through several talks. The ones I found most interesting were the <a href=\"http://www.castleproject.org/\" target=\"_blank\" rel=\"external\">Castle Project</a> talks. It is interesting how the technology has progressed (my analysis):   </p>\n<p>First, there was ruby on rails. They did some really neat things. Then came Java with Hibernate, Spring, etc to try to do what rails did. Then came the Castle Project for .NET, with ActiveRecord (on top of NHibernate), Windsor and Monorails. From there, Microsoft lifted their heads and realized &quot;Hey! We should do this&quot;. From there, Entity Framework and ASP MVC were born.   </p>\n<p>Those ruby folks were really on to something!   </p>\n<p>Anyways, the conference was good and I learned a lot about Entity Framework, Castle ActiveRecord, Castle Windsor and ASP MVC. I expect to play a lot with these technologies over the next few months, and continue practicing my craft.</p>\n","excerpt":"","more":"<p>In one of my favorite tech blogs, <a href=\"http://www.codinghorror.com/\">Coding Horror</a>, Jeff Atwood <a href=\"http://www.codinghorror.com/blog/archives/001138.html\">blogs</a> about what it means to practice your profession. More specifically, he mentions that you can do your job without practicing your profession. That everyone drives every day, but most people are not professional drivers.   </p>\n<p>In his post, he brings up several things you can do to become more practiced as a developer. One of those things is &quot;Write a blog&quot;. It seems he (who is a developer turned professional blogger) believes that what I have decided to do (write a blog) is worthwhile to my career. It helps me get past my fear that I am just doing this to feed my own ego… which it feels a bit like.   </p>\n<p>I believe that another thing that is important for practicing your career is going to conferences. On Saturday, I attended the <a href=\"http://www.dayofdotnet.org/Lansing/2008/Default.aspx\">&quot;Day of .NET&quot;</a> in Lansing. I left feeling like I learned a TON! It was a great thing for me professionally.   </p>\n<p>One thing that I enjoyed about this conference was the fellow attendants. See, this conference was held on a Saturday. I can’t say that I have gone to many Saturday conferences. I think they do this so people who can’t get their bosses to let them go during the week can still go to this conference. The side affect is that the people who attend are the types of people who are truly interested in learning outside of work. The enthusiasm about the conference and the topics was quite a bit stronger than I have ever seen at something like this.   </p>\n<p>I am starting to understand that this community is not terribly large. I recognized many of the people there from the Ann Arbor .NET Users Group, blogs and podcasts. Many of these people are people that I follow on Twitter because I have found what they have to say interesting through one of the previously mentioned venues. Although most of these people do not know me, I find that their views resonate with what I believe about software.   </p>\n<p>While at the conference, I sat through several talks. The ones I found most interesting were the <a href=\"http://www.castleproject.org/\">Castle Project</a> talks. It is interesting how the technology has progressed (my analysis):   </p>\n<p>First, there was ruby on rails. They did some really neat things. Then came Java with Hibernate, Spring, etc to try to do what rails did. Then came the Castle Project for .NET, with ActiveRecord (on top of NHibernate), Windsor and Monorails. From there, Microsoft lifted their heads and realized &quot;Hey! We should do this&quot;. From there, Entity Framework and ASP MVC were born.   </p>\n<p>Those ruby folks were really on to something!   </p>\n<p>Anyways, the conference was good and I learned a lot about Entity Framework, Castle ActiveRecord, Castle Windsor and ASP MVC. I expect to play a lot with these technologies over the next few months, and continue practicing my craft.</p>\n"},{"title":"Generic constraints for value types","id":"19","date":"2008-06-26T17:55:00.000Z","_content":"\nI came across an oddity in the C# language the other day. I was trying to create a generic method that returned a nullable value. A simple example of this:\n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> T? GetNullable&lt;T&gt;(<span style=\"color: #0000ff\">int</span> index)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>   <span style=\"color: #0000ff\">if</span>(index &lt; 0)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>       <span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">null</span>;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>   <span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">default</span>(T);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span> }</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp:nogutter\" name=\"code\">&#160;</pre>\n\nThis will result in a compiler error:\n\nError 1 The type 'T' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'System.Nullable&lt;T&gt;' \n\nThis is a cryptic error that means that I need to put a constraint on my method to restrict it to a value type. In C#, this is done with the 'struct' keyword:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.48%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; height: 30px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> T? GetNullable&lt;T&gt;(<span style=\"color: #0000ff\">int</span> index) <span style=\"color: #0000ff\">where</span> T : struct</pre>\n  </div>\n</div>\n\nThis seems really odd to me. If someone were to read the interface for this class, it is not at all clear that I can send an int, bool double, etc into this method. \n\nIt turns out that T? and System.Nullable&lt;T&gt; compile into the same IL and the interface for System.Nullable&lt;T&gt; also has a constraint on 'struct'. So, as odd as it is, we need to consider the 'struct' constraint to really mean any value type.\n\nJust a little bit later, I created a utility method to convert a string to an enum. The code is really straight forward:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> T GetEnum&lt;T&gt;(<span style=\"color: #0000ff\">string</span> enumValue)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>    <span style=\"color: #0000ff\">return</span> (T)Enum.Parse(<span style=\"color: #0000ff\">typeof</span> (T), enumValue);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> }</pre>\n  </div>\n</div>\n\nBecause this method is only designed to be used for enums, it would be great if I could add an enum constraint:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.29%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; height: 33px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> T GetEnum&lt;T&gt;(<span style=\"color: #0000ff\">string</span> enumValue) <span style=\"color: #0000ff\">where</span> T : enum</pre>\n  </div>\n</div>\n\nThis, unfortunately, is not valid. C# does, however, allow you to put a constraint with a base class. Since all enums are derived from System.Enum, I thought I could restrict using System.Enum: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; height: 32px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> T GetEnum&lt;T&gt;(<span style=\"color: #0000ff\">string</span> enumValue) <span style=\"color: #0000ff\">where</span> T : System.Enum</pre>\n  </div>\n</div>\n\nAgain, no dice. System.Enum is considered a &quot;special class&quot; and cannot be used as a constraint. So, again, I am stuck using the 'struct' constraint and again, I am left feeling like this is not quite right. With this constraint, it would be perfectly acceptable to to write the following:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; height: 31px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> GetEnum&lt;<span style=\"color: #0000ff\">int</span>&gt;(<span style=\"color: #006080\">&quot;4&quot;</span>);</pre>\n  </div>\n</div>\n\nWoof. I guess the only thing I can do now, is to add the following parameter check:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">if</span>(!<span style=\"color: #0000ff\">typeof</span>(T).IsEnum)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span>    <span style=\"color: #0000ff\">throw</span> <span style=\"color: #0000ff\">new</span> ArgumentException(<span style=\"color: #006080\">&quot;Type T Must be an Enum&quot;</span>);</pre>\n  </div>\n</div>\n\nThis is the best I can do, thought it is far from ideal. It gives me a runtime check, at least, even though I can't get a compile-time check. \n\nIt leaves me hoping that in C# 4.0, that we see some significant changes to generic constraints. It would be nice if we could at least have an Enum construct. In addition, it would be nice to use the 'value' keyword in constraints instead of 'struct'. It will only improve readability.","source":"_posts/2008-06-26-generic-constraints-for-value-types.md","raw":"---\ntitle: Generic constraints for value types\nid: 19\ncategories:\n  - Uncategorized\ndate: 2008-06-26 13:55:00\ntags:\n---\n\nI came across an oddity in the C# language the other day. I was trying to create a generic method that returned a nullable value. A simple example of this:\n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> T? GetNullable&lt;T&gt;(<span style=\"color: #0000ff\">int</span> index)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>   <span style=\"color: #0000ff\">if</span>(index &lt; 0)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>       <span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">null</span>;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>   <span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">default</span>(T);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span> }</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp:nogutter\" name=\"code\">&#160;</pre>\n\nThis will result in a compiler error:\n\nError 1 The type 'T' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'System.Nullable&lt;T&gt;' \n\nThis is a cryptic error that means that I need to put a constraint on my method to restrict it to a value type. In C#, this is done with the 'struct' keyword:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.48%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; height: 30px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> T? GetNullable&lt;T&gt;(<span style=\"color: #0000ff\">int</span> index) <span style=\"color: #0000ff\">where</span> T : struct</pre>\n  </div>\n</div>\n\nThis seems really odd to me. If someone were to read the interface for this class, it is not at all clear that I can send an int, bool double, etc into this method. \n\nIt turns out that T? and System.Nullable&lt;T&gt; compile into the same IL and the interface for System.Nullable&lt;T&gt; also has a constraint on 'struct'. So, as odd as it is, we need to consider the 'struct' constraint to really mean any value type.\n\nJust a little bit later, I created a utility method to convert a string to an enum. The code is really straight forward:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> T GetEnum&lt;T&gt;(<span style=\"color: #0000ff\">string</span> enumValue)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>    <span style=\"color: #0000ff\">return</span> (T)Enum.Parse(<span style=\"color: #0000ff\">typeof</span> (T), enumValue);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> }</pre>\n  </div>\n</div>\n\nBecause this method is only designed to be used for enums, it would be great if I could add an enum constraint:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.29%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; height: 33px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> T GetEnum&lt;T&gt;(<span style=\"color: #0000ff\">string</span> enumValue) <span style=\"color: #0000ff\">where</span> T : enum</pre>\n  </div>\n</div>\n\nThis, unfortunately, is not valid. C# does, however, allow you to put a constraint with a base class. Since all enums are derived from System.Enum, I thought I could restrict using System.Enum: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; height: 32px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> T GetEnum&lt;T&gt;(<span style=\"color: #0000ff\">string</span> enumValue) <span style=\"color: #0000ff\">where</span> T : System.Enum</pre>\n  </div>\n</div>\n\nAgain, no dice. System.Enum is considered a &quot;special class&quot; and cannot be used as a constraint. So, again, I am stuck using the 'struct' constraint and again, I am left feeling like this is not quite right. With this constraint, it would be perfectly acceptable to to write the following:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; height: 31px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> GetEnum&lt;<span style=\"color: #0000ff\">int</span>&gt;(<span style=\"color: #006080\">&quot;4&quot;</span>);</pre>\n  </div>\n</div>\n\nWoof. I guess the only thing I can do now, is to add the following parameter check:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">if</span>(!<span style=\"color: #0000ff\">typeof</span>(T).IsEnum)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span>    <span style=\"color: #0000ff\">throw</span> <span style=\"color: #0000ff\">new</span> ArgumentException(<span style=\"color: #006080\">&quot;Type T Must be an Enum&quot;</span>);</pre>\n  </div>\n</div>\n\nThis is the best I can do, thought it is far from ideal. It gives me a runtime check, at least, even though I can't get a compile-time check. \n\nIt leaves me hoping that in C# 4.0, that we see some significant changes to generic constraints. It would be nice if we could at least have an Enum construct. In addition, it would be nice to use the 'value' keyword in constraints instead of 'struct'. It will only improve readability.","slug":"generic-constraints-for-value-types","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9di00056eulbt2igzfd"},{"title":"On Readability and Maintainability","id":"13","date":"2008-06-24T17:48:00.000Z","_content":"\nIn the last 6 weeks, I have been spending a lot of my time rearchitecting my software. Along with this comes a lot of refactoring. It gets me to thinking about readability and maintainability. I came across a situation where there were several methods with the same boilerplate code. I reduced this down to a single method that takes a delegate and each dependant method calls into the single method with an implementation of a filter. When it was all said and done, I had sacrificed readability for maintainability. Following is a contrived example that shows my dilema:   \n\n<span style=\"font-weight: bold\">Before:</span>   <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithABC(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     List&lt;<span style=\"color: #0000ff\">string</span>&gt; result = <span style=\"color: #0000ff\">new</span> List&lt;<span style=\"color: #0000ff\">string</span>&gt;();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     <span style=\"color: #0000ff\">using</span>(IDataReader reader = dataSource.GetData(<span style=\"color: #006080\">&quot;ABC&quot;</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>         <span style=\"color: #0000ff\">while</span>(reader.Read())</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>             <span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span> = reader.GetString(0);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>             <span style=\"color: #0000ff\">if</span>(CheckAboutABC(<span style=\"color: #0000ff\">value</span>) &amp;&amp; <span style=\"color: #0000ff\">value</span>.Contains(<span style=\"color: #006080\">&quot;JUNK&quot;</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>                 result.Add(<span style=\"color: #0000ff\">value</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>     <span style=\"color: #0000ff\">return</span> result;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithDEF(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>     List&lt;<span style=\"color: #0000ff\">string</span>&gt; result = <span style=\"color: #0000ff\">new</span> List&lt;<span style=\"color: #0000ff\">string</span>&gt;();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>     <span style=\"color: #0000ff\">using</span> (IDataReader reader = dataSource.GetData(<span style=\"color: #006080\">&quot;DEF&quot;</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>         <span style=\"color: #0000ff\">while</span> (reader.Read())</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>             <span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span> = reader.GetString(0);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span>             <span style=\"color: #0000ff\">if</span> (<span style=\"color: #0000ff\">value</span>.Contains(<span style=\"color: #006080\">&quot;BLAH&quot;</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span>                 result.Add(<span style=\"color: #0000ff\">value</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  32:</span>     <span style=\"color: #0000ff\">return</span> result;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  33:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  34:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  35:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithXYZ(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  36:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  37:</span>     List&lt;<span style=\"color: #0000ff\">string</span>&gt; result = <span style=\"color: #0000ff\">new</span> List&lt;<span style=\"color: #0000ff\">string</span>&gt;();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  38:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  39:</span>     <span style=\"color: #0000ff\">using</span> (IDataReader reader = dataSource.GetData(<span style=\"color: #006080\">&quot;XYZ&quot;</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  40:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  41:</span>         <span style=\"color: #0000ff\">while</span> (reader.Read())</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  42:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  43:</span>             <span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span> = reader.GetString(0);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  44:</span>             <span style=\"color: #0000ff\">if</span> (CheckAboutXYZ(<span style=\"color: #0000ff\">value</span>) &amp;&amp; CheckSomethingElseXYZ(<span style=\"color: #0000ff\">value</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  45:</span>                 result.Add(<span style=\"color: #0000ff\">value</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  46:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  47:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  48:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  49:</span>     <span style=\"color: #0000ff\">return</span> result;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  50:</span> }</pre>\n  </div>\n</div>\nNotice how each of these methods has the same boilerplate code. They are already pretty straight-forward: \n\n1\\. Create a list to return \n\n2\\. Get the data reader from the data source \n\n3\\. While there is data, Get the data, filter it and add the values to the list \n\n4\\. Return the list \n\nI think this code is pretty readable. Of course, it is not maintainable. If IDataSource is changed, for example, to return an IEnumerable, then we have to change all three methods. In my example, there were more like 10 methods with the same boilerplate code. \n\nThe only real difference in any of these methods is the filter. Why not extract the boilerplate code into a single method and pass a delegate to do the filtering? The result looks like this: \n\n<span style=\"font-weight: bold\">After:</span> \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">delegate</span> <span style=\"color: #0000ff\">bool</span> DataFilter(<span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithFilter(IDataSource dataSource, DataFilter filter)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     List result&lt;<span style=\"color: #0000ff\">string</span>&gt; = <span style=\"color: #0000ff\">new</span> List&lt;<span style=\"color: #0000ff\">string</span>&gt;();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     <span style=\"color: #0000ff\">using</span> (IDataReader reader = dataSource.GetData(<span style=\"color: #006080\">&quot;ABC&quot;</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>         <span style=\"color: #0000ff\">while</span> (reader.Read())</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>             <span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span> = reader.GetString(0);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>             <span style=\"color: #0000ff\">if</span> (filter(<span style=\"color: #0000ff\">value</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>                 result.Add(<span style=\"color: #0000ff\">value</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>     <span style=\"color: #0000ff\">return</span> result;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithABC(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>     <span style=\"color: #0000ff\">return</span> GetDataWithFilter(dataSource, <span style=\"color: #0000ff\">delegate</span>(<span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span>)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>         <span style=\"color: #0000ff\">return</span> CheckAboutABC(<span style=\"color: #0000ff\">value</span>) &amp;&amp; <span style=\"color: #0000ff\">value</span>.Contains(<span style=\"color: #006080\">&quot;JUNK&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>     });</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithDEF(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>     <span style=\"color: #0000ff\">return</span> GetDataWithFilter(dataSource, <span style=\"color: #0000ff\">delegate</span>(<span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span>)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span>         <span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">value</span>.Contains(<span style=\"color: #006080\">&quot;BLAH&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  32:</span>     });</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  33:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  34:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  35:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithXYZ(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  36:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  37:</span>     <span style=\"color: #0000ff\">return</span> GetDataWithFilter(dataSource, <span style=\"color: #0000ff\">delegate</span>(<span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span>)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  38:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  39:</span>         <span style=\"color: #0000ff\">return</span> CheckAboutXYZ(<span style=\"color: #0000ff\">value</span>) &amp;&amp; CheckSomethingElseXYZ(<span style=\"color: #0000ff\">value</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  40:</span>     });</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  41:</span> }</pre>\n  </div>\n</div>\nI love this approach. There is no duplication of code anymore. If something changes with the boilerplate code, it can be changed in one spot. I have saved lines of code and everything is more compact. \n\nUnfortunately, I think that the code has become less readable. First, it becomes difficult to discern what is going on there at first glance. The use of the inline delegate is a bit confusing and can trip up people who read this for the first time. Second, the double return is confusing. The inner return returns a bool where the method returns an ICollection. I have seen this trip up experienced developers who glance at the method. It is also more difficult to debug. \n\nI could always strip the delegates out into separate methods, but I believe that is even more unreadable. Whats worse, is that we didn't really save many lines of code. Only 9 lines of code were saved. (more were saved in my real-world scenario) \n\nSo what is better? Readability or Maintainability? \n\nA colleague whom I have a lot of respect for told me &quot;<span class=\"entry-content\">Always go with readable</span>&quot;. I guess, in this case, I have to disagree with him and go with Maintainability. Duplication of code, for me, is a real big no-no. Duplication 10 times is an even bigger no-no. In this case, I think the maintainability gain outweighs the readability loss. I will even argue that as you shorten the length of each individual method, the aggregated file becomes more readable as a whole. \n\nAs a side note, it turns out that in C# 3.0, you can use lambda functions to make it a bit more readable. Unfortunately, we aren't using 3.0 yet: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithABC(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     <span style=\"color: #0000ff\">return</span> GetDataWithFilter(dataSource, <span style=\"color: #0000ff\">value</span> =&gt; CheckAboutABC(<span style=\"color: #0000ff\">value</span>) &amp;&amp; <span style=\"color: #0000ff\">value</span>.Contains(<span style=\"color: #006080\">&quot;JUNK&quot;</span>));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> }</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp\" name=\"code\">&#160;</pre>","source":"_posts/2008-06-24-on-readability-and-maintainability.md","raw":"---\ntitle: On Readability and Maintainability\nid: 13\ncategories:\n  - Uncategorized\ndate: 2008-06-24 13:48:00\ntags:\n---\n\nIn the last 6 weeks, I have been spending a lot of my time rearchitecting my software. Along with this comes a lot of refactoring. It gets me to thinking about readability and maintainability. I came across a situation where there were several methods with the same boilerplate code. I reduced this down to a single method that takes a delegate and each dependant method calls into the single method with an implementation of a filter. When it was all said and done, I had sacrificed readability for maintainability. Following is a contrived example that shows my dilema:   \n\n<span style=\"font-weight: bold\">Before:</span>   <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithABC(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     List&lt;<span style=\"color: #0000ff\">string</span>&gt; result = <span style=\"color: #0000ff\">new</span> List&lt;<span style=\"color: #0000ff\">string</span>&gt;();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     <span style=\"color: #0000ff\">using</span>(IDataReader reader = dataSource.GetData(<span style=\"color: #006080\">&quot;ABC&quot;</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>         <span style=\"color: #0000ff\">while</span>(reader.Read())</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>             <span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span> = reader.GetString(0);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>             <span style=\"color: #0000ff\">if</span>(CheckAboutABC(<span style=\"color: #0000ff\">value</span>) &amp;&amp; <span style=\"color: #0000ff\">value</span>.Contains(<span style=\"color: #006080\">&quot;JUNK&quot;</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>                 result.Add(<span style=\"color: #0000ff\">value</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>     <span style=\"color: #0000ff\">return</span> result;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithDEF(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>     List&lt;<span style=\"color: #0000ff\">string</span>&gt; result = <span style=\"color: #0000ff\">new</span> List&lt;<span style=\"color: #0000ff\">string</span>&gt;();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>     <span style=\"color: #0000ff\">using</span> (IDataReader reader = dataSource.GetData(<span style=\"color: #006080\">&quot;DEF&quot;</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>         <span style=\"color: #0000ff\">while</span> (reader.Read())</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>             <span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span> = reader.GetString(0);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span>             <span style=\"color: #0000ff\">if</span> (<span style=\"color: #0000ff\">value</span>.Contains(<span style=\"color: #006080\">&quot;BLAH&quot;</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span>                 result.Add(<span style=\"color: #0000ff\">value</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  32:</span>     <span style=\"color: #0000ff\">return</span> result;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  33:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  34:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  35:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithXYZ(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  36:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  37:</span>     List&lt;<span style=\"color: #0000ff\">string</span>&gt; result = <span style=\"color: #0000ff\">new</span> List&lt;<span style=\"color: #0000ff\">string</span>&gt;();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  38:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  39:</span>     <span style=\"color: #0000ff\">using</span> (IDataReader reader = dataSource.GetData(<span style=\"color: #006080\">&quot;XYZ&quot;</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  40:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  41:</span>         <span style=\"color: #0000ff\">while</span> (reader.Read())</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  42:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  43:</span>             <span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span> = reader.GetString(0);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  44:</span>             <span style=\"color: #0000ff\">if</span> (CheckAboutXYZ(<span style=\"color: #0000ff\">value</span>) &amp;&amp; CheckSomethingElseXYZ(<span style=\"color: #0000ff\">value</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  45:</span>                 result.Add(<span style=\"color: #0000ff\">value</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  46:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  47:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  48:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  49:</span>     <span style=\"color: #0000ff\">return</span> result;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  50:</span> }</pre>\n  </div>\n</div>\nNotice how each of these methods has the same boilerplate code. They are already pretty straight-forward: \n\n1\\. Create a list to return \n\n2\\. Get the data reader from the data source \n\n3\\. While there is data, Get the data, filter it and add the values to the list \n\n4\\. Return the list \n\nI think this code is pretty readable. Of course, it is not maintainable. If IDataSource is changed, for example, to return an IEnumerable, then we have to change all three methods. In my example, there were more like 10 methods with the same boilerplate code. \n\nThe only real difference in any of these methods is the filter. Why not extract the boilerplate code into a single method and pass a delegate to do the filtering? The result looks like this: \n\n<span style=\"font-weight: bold\">After:</span> \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">delegate</span> <span style=\"color: #0000ff\">bool</span> DataFilter(<span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithFilter(IDataSource dataSource, DataFilter filter)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     List result&lt;<span style=\"color: #0000ff\">string</span>&gt; = <span style=\"color: #0000ff\">new</span> List&lt;<span style=\"color: #0000ff\">string</span>&gt;();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     <span style=\"color: #0000ff\">using</span> (IDataReader reader = dataSource.GetData(<span style=\"color: #006080\">&quot;ABC&quot;</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>         <span style=\"color: #0000ff\">while</span> (reader.Read())</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>             <span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span> = reader.GetString(0);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>             <span style=\"color: #0000ff\">if</span> (filter(<span style=\"color: #0000ff\">value</span>))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>                 result.Add(<span style=\"color: #0000ff\">value</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>     <span style=\"color: #0000ff\">return</span> result;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithABC(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>     <span style=\"color: #0000ff\">return</span> GetDataWithFilter(dataSource, <span style=\"color: #0000ff\">delegate</span>(<span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span>)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>         <span style=\"color: #0000ff\">return</span> CheckAboutABC(<span style=\"color: #0000ff\">value</span>) &amp;&amp; <span style=\"color: #0000ff\">value</span>.Contains(<span style=\"color: #006080\">&quot;JUNK&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>     });</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithDEF(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>     <span style=\"color: #0000ff\">return</span> GetDataWithFilter(dataSource, <span style=\"color: #0000ff\">delegate</span>(<span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span>)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span>         <span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">value</span>.Contains(<span style=\"color: #006080\">&quot;BLAH&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  32:</span>     });</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  33:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  34:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  35:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithXYZ(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  36:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  37:</span>     <span style=\"color: #0000ff\">return</span> GetDataWithFilter(dataSource, <span style=\"color: #0000ff\">delegate</span>(<span style=\"color: #0000ff\">string</span> <span style=\"color: #0000ff\">value</span>)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  38:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  39:</span>         <span style=\"color: #0000ff\">return</span> CheckAboutXYZ(<span style=\"color: #0000ff\">value</span>) &amp;&amp; CheckSomethingElseXYZ(<span style=\"color: #0000ff\">value</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  40:</span>     });</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  41:</span> }</pre>\n  </div>\n</div>\nI love this approach. There is no duplication of code anymore. If something changes with the boilerplate code, it can be changed in one spot. I have saved lines of code and everything is more compact. \n\nUnfortunately, I think that the code has become less readable. First, it becomes difficult to discern what is going on there at first glance. The use of the inline delegate is a bit confusing and can trip up people who read this for the first time. Second, the double return is confusing. The inner return returns a bool where the method returns an ICollection. I have seen this trip up experienced developers who glance at the method. It is also more difficult to debug. \n\nI could always strip the delegates out into separate methods, but I believe that is even more unreadable. Whats worse, is that we didn't really save many lines of code. Only 9 lines of code were saved. (more were saved in my real-world scenario) \n\nSo what is better? Readability or Maintainability? \n\nA colleague whom I have a lot of respect for told me &quot;<span class=\"entry-content\">Always go with readable</span>&quot;. I guess, in this case, I have to disagree with him and go with Maintainability. Duplication of code, for me, is a real big no-no. Duplication 10 times is an even bigger no-no. In this case, I think the maintainability gain outweighs the readability loss. I will even argue that as you shorten the length of each individual method, the aggregated file becomes more readable as a whole. \n\nAs a side note, it turns out that in C# 3.0, you can use lambda functions to make it a bit more readable. Unfortunately, we aren't using 3.0 yet: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> ICollection&lt;<span style=\"color: #0000ff\">string</span>&gt; GetDataWithABC(IDataSource dataSource)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     <span style=\"color: #0000ff\">return</span> GetDataWithFilter(dataSource, <span style=\"color: #0000ff\">value</span> =&gt; CheckAboutABC(<span style=\"color: #0000ff\">value</span>) &amp;&amp; <span style=\"color: #0000ff\">value</span>.Contains(<span style=\"color: #006080\">&quot;JUNK&quot;</span>));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> }</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp\" name=\"code\">&#160;</pre>","slug":"on-readability-and-maintainability","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9dk00066eul4iwi9czo"},{"title":"Pretty code in blogs","id":"15","date":"2008-06-28T17:51:00.000Z","_content":"\nI love Blogger. I have been using it for about 2 years in my [personal blog](http://maia.genisio.org/) and it has done me really well. When I decided to start up a tech blog, I figured that Blogger would work great for that as well. Unfortunately, in my last two posts, I had a bear of a time getting my code to format. Once I thought I had it, Blogger would re-format my code enough that my formatting got all screwed up again.   \n\nI had gotten so frustrated, I was almost ready to switch blog software all together. Then I came across this Google Code project called [SyntaxHighlighter](http://code.google.com/p/syntaxhighlighter/). It is the tool I am using to make the source code on my blog look all pretty and shiny. It took me a bit of work to get it all set up, but [this blog post](http://yacoding.blogspot.com/2008/05/how-to-add-syntax-highlight-to-blogger.html) helped me along.   \n\nNow, I can't say that I LOVE the usage here... I still need to bust into HTML in order to add a &lt;pre name=&quot;code&quot; class=&quot;c-sharp&quot;&gt; block, but it is a heck of a lot easier than what I had before. Thank you SyntaxHighlighter, you saved my day.   ","source":"_posts/2008-06-28-pretty-code-in-blogs.md","raw":"---\ntitle: Pretty code in blogs\nid: 15\ncategories:\n  - Uncategorized\ndate: 2008-06-28 13:51:00\ntags:\n---\n\nI love Blogger. I have been using it for about 2 years in my [personal blog](http://maia.genisio.org/) and it has done me really well. When I decided to start up a tech blog, I figured that Blogger would work great for that as well. Unfortunately, in my last two posts, I had a bear of a time getting my code to format. Once I thought I had it, Blogger would re-format my code enough that my formatting got all screwed up again.   \n\nI had gotten so frustrated, I was almost ready to switch blog software all together. Then I came across this Google Code project called [SyntaxHighlighter](http://code.google.com/p/syntaxhighlighter/). It is the tool I am using to make the source code on my blog look all pretty and shiny. It took me a bit of work to get it all set up, but [this blog post](http://yacoding.blogspot.com/2008/05/how-to-add-syntax-highlight-to-blogger.html) helped me along.   \n\nNow, I can't say that I LOVE the usage here... I still need to bust into HTML in order to add a &lt;pre name=&quot;code&quot; class=&quot;c-sharp&quot;&gt; block, but it is a heck of a lot easier than what I had before. Thank you SyntaxHighlighter, you saved my day.   ","slug":"pretty-code-in-blogs","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9do00076eul0dtf3ott"},{"title":"Castle Active Record","id":"20","date":"2008-07-08T17:57:00.000Z","_content":"\nI have recently gotten into databases at work. I HATE programming against databases. I have spent the majority of my career avoiding jobs where I need to program against them. I just don't like doing it. I mean, they are great for persistence and retrieval, but I hate how muddy they make the code... all the [CRUD](http://en.wikipedia.org/wiki/Create%2C_read%2C_update_and_delete) (Create, Retrieve, Update and Delete) code that needs to be written... all the special queries... yuck.   \n\nWhich is why in my current project (a re-architecture of an existing system) when it came time to include a database instead in place of the dreaded XML files, I found myself in a tough spot. I really like the active record pattern, so I implemented my business object persistence using that pattern.   \n\nWhile doing this, I came across an amazing open-source product called [Castle ActiveRecord](http://www.castleproject.org/activerecord/index.html) (part of the [Castle Project](http://www.castleproject.org/index.html)). Coincidentally, I got to see a talk by [Michael Eaton](http://michaeleatonconsulting.com/blog/) at Lansing Day of .NET a few weeks later. It is a simple framework that abstracts away all database programming. WOW! What could be better? It is amazingly simple to use and I barely touch the database. I don't even need to create the database schema. Castle ActiveRecord does it all for me.   \n\nSo I did what I often do when I want to learn a new technology... I signed up for a tech talk to my developer team on the topic. I gave an hour-long talk on the Active Record pattern and the Castle ActiveRecord framework. With it, I came up with a fully functional (albeit toy-like) demo project.   \n\nThe project is a Recipe Box application. My business objects and database schema look like this:   \n  <div style=\"text-align: left\">[![](http://bp2.blogger.com/_28yJ_7iJX7o/SHQXxFn4mMI/AAAAAAAAAA8/-0GeHfXiiuQ/s320/bo.jpg)](http://bp2.blogger.com/_28yJ_7iJX7o/SHQXxFn4mMI/AAAAAAAAAA8/-0GeHfXiiuQ/s1600-h/bo.jpg)[&#160;&#160;&#160;&#160;&#160;&#160; ![](http://bp0.blogger.com/_28yJ_7iJX7o/SHQYCHDOZUI/AAAAAAAAABE/zpEdwwNXp_A/s320/schema.jpg)](http://bp0.blogger.com/_28yJ_7iJX7o/SHQYCHDOZUI/AAAAAAAAABE/zpEdwwNXp_A/s1600-h/schema.jpg)</div>  \nThey are freakishly similar. The beauty is that I never had to write the schema. ActiveRecord did it for me.   \n\nHere is the guts of my business object code:   \n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [ActiveRecord]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Recipe : ActiveRecordBase&lt;Recipe&gt;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>   [PrimaryKey]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">int</span> Id { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> Title { get; set;}</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> Description { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> Author { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>   [HasMany(Inverse = <span style=\"color: #0000ff\">true</span>, Cascade = ManyRelationCascadeEnum.AllDeleteOrphan)]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>   <span style=\"color: #0000ff\">public</span> IList&lt;Step&gt; Steps { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span>   [HasMany(Inverse = <span style=\"color: #0000ff\">true</span>, Cascade = ManyRelationCascadeEnum.AllDeleteOrphan)]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>   <span style=\"color: #0000ff\">public</span> IList&lt;Quantity&gt; Quantities { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span> [ActiveRecord]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Step : ActiveRecordBase&lt;Step&gt;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>   [PrimaryKey]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">int</span> Id { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> Command { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  32:</span>   [BelongsTo(<span style=\"color: #006080\">&quot;RecipeId&quot;</span>)]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  33:</span>   <span style=\"color: #0000ff\">public</span> Recipe Recipe { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  34:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  35:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  36:</span> [ActiveRecord]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  37:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Quantity : ActiveRecordBase&lt;Quantity&gt;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  38:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  39:</span>   [PrimaryKey]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  40:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">int</span> Id { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  41:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  42:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  43:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">double</span> Value { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  44:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  45:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  46:</span>   <span style=\"color: #0000ff\">public</span> Units Units { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  47:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  48:</span>   [BelongsTo(<span style=\"color: #006080\">&quot;IngredientId&quot;</span>)]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  49:</span>   <span style=\"color: #0000ff\">public</span> Ingredient Ingredient { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  50:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  51:</span>   [BelongsTo(<span style=\"color: #006080\">&quot;RecipeId&quot;</span>)]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  52:</span>   <span style=\"color: #0000ff\">public</span> Recipe Recipe { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  53:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  54:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  55:</span> [ActiveRecord]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  56:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Ingredient : ActiveRecordBase&lt;Ingredient&gt;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  57:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  58:</span>   [PrimaryKey]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  59:</span>   <span style=\"color: #0000ff\">int</span> Id { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  60:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  61:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  62:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> Name { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  63:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  64:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  65:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> Description { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  66:</span> }</pre>\n  </div>\n</div>\n\nIt is that simple (I left out constructors, ToString() and other logic for this post. I load it up and start programming against the objects: \n\n<span style=\"font-weight: bold\">Create:</span> \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> var ingredient = <span style=\"color: #0000ff\">new</span> Ingredient(<span style=\"color: #006080\">&quot;Milk&quot;</span>, <span style=\"color: #006080\">&quot;A drink made from mammals&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> ingredient.Save();</pre>\n  </div>\n</div>\n\n<span style=\"font-weight: bold\"></span>&#160;\n\n<span style=\"font-weight: bold\">Retrieve:</span>\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100.14%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; height: 17px; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> Ingredient.FindAll();</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp:nogutter\" name=\"code\">&#160;</pre>\n<span style=\"font-weight: bold\">Update:</span> \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> ingredient.Description = <span style=\"color: #006080\">&quot;A white liquid&quot;</span>;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> ingredient.Save();</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp:nogutter\" name=\"code\">&#160;</pre>\n<span style=\"font-weight: bold\">Delete:</span> \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> ingredient.Description = <span style=\"color: #006080\">&quot;A white liquid&quot;</span>;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> ingredient.Save();</pre>\n  </div>\n</div>\n\n&#160;\n\nIt couldn't be any easier, as far as I am concerned. Delete, Save, FindAll and many other methods like those were created for me when I inherited my objects from ActiveRecordBase. This gives me a ton more time to be coding my features, and forgetting about my persistence mechanism. \n\nAs much praise as I have given to ActiveRecord, there are some weaknesses. Here are the ones I can point out: \n\n*   You have less control over your database*   It is not as performant as direct SQL and stored procedures can be*   You loose your one shot at inheritance. If your business objects already derive from something, you are out of luck*   It cause an even bigger rift between Devs and DBAs*   You are forced to write classes with strong dependencies with each other*   You need to deploy at least 6 Dlls at 1.6 MB in size\n\nFinally, I want to make a quick mention to [Microsoft's Entity Framework](http://msdn.microsoft.com/en-us/library/aa697427%28VS.80%29.aspx). It is supposed to do a lot of what Casltle ActiveRecord already does. It is currently in CTP, and I will probably play with it soon. Unfortunately, many in the development community have given it a vote of &quot;[No Confidence](http://efvote.wufoo.com/forms/ado-net-entity-framework-vote-of-no-confidence/)&quot;. I am not qualified to judge here, but I hope that when EF comes out later this year, the community is a bit more positive about it. We'll see. ","source":"_posts/2008-07-08-castle-active-record.md","raw":"---\ntitle: Castle Active Record\nid: 20\ncategories:\n  - Uncategorized\ndate: 2008-07-08 13:57:00\ntags:\n---\n\nI have recently gotten into databases at work. I HATE programming against databases. I have spent the majority of my career avoiding jobs where I need to program against them. I just don't like doing it. I mean, they are great for persistence and retrieval, but I hate how muddy they make the code... all the [CRUD](http://en.wikipedia.org/wiki/Create%2C_read%2C_update_and_delete) (Create, Retrieve, Update and Delete) code that needs to be written... all the special queries... yuck.   \n\nWhich is why in my current project (a re-architecture of an existing system) when it came time to include a database instead in place of the dreaded XML files, I found myself in a tough spot. I really like the active record pattern, so I implemented my business object persistence using that pattern.   \n\nWhile doing this, I came across an amazing open-source product called [Castle ActiveRecord](http://www.castleproject.org/activerecord/index.html) (part of the [Castle Project](http://www.castleproject.org/index.html)). Coincidentally, I got to see a talk by [Michael Eaton](http://michaeleatonconsulting.com/blog/) at Lansing Day of .NET a few weeks later. It is a simple framework that abstracts away all database programming. WOW! What could be better? It is amazingly simple to use and I barely touch the database. I don't even need to create the database schema. Castle ActiveRecord does it all for me.   \n\nSo I did what I often do when I want to learn a new technology... I signed up for a tech talk to my developer team on the topic. I gave an hour-long talk on the Active Record pattern and the Castle ActiveRecord framework. With it, I came up with a fully functional (albeit toy-like) demo project.   \n\nThe project is a Recipe Box application. My business objects and database schema look like this:   \n  <div style=\"text-align: left\">[![](http://bp2.blogger.com/_28yJ_7iJX7o/SHQXxFn4mMI/AAAAAAAAAA8/-0GeHfXiiuQ/s320/bo.jpg)](http://bp2.blogger.com/_28yJ_7iJX7o/SHQXxFn4mMI/AAAAAAAAAA8/-0GeHfXiiuQ/s1600-h/bo.jpg)[&#160;&#160;&#160;&#160;&#160;&#160; ![](http://bp0.blogger.com/_28yJ_7iJX7o/SHQYCHDOZUI/AAAAAAAAABE/zpEdwwNXp_A/s320/schema.jpg)](http://bp0.blogger.com/_28yJ_7iJX7o/SHQYCHDOZUI/AAAAAAAAABE/zpEdwwNXp_A/s1600-h/schema.jpg)</div>  \nThey are freakishly similar. The beauty is that I never had to write the schema. ActiveRecord did it for me.   \n\nHere is the guts of my business object code:   \n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [ActiveRecord]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Recipe : ActiveRecordBase&lt;Recipe&gt;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>   [PrimaryKey]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">int</span> Id { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> Title { get; set;}</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> Description { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> Author { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>   [HasMany(Inverse = <span style=\"color: #0000ff\">true</span>, Cascade = ManyRelationCascadeEnum.AllDeleteOrphan)]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>   <span style=\"color: #0000ff\">public</span> IList&lt;Step&gt; Steps { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span>   [HasMany(Inverse = <span style=\"color: #0000ff\">true</span>, Cascade = ManyRelationCascadeEnum.AllDeleteOrphan)]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>   <span style=\"color: #0000ff\">public</span> IList&lt;Quantity&gt; Quantities { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span> [ActiveRecord]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Step : ActiveRecordBase&lt;Step&gt;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>   [PrimaryKey]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">int</span> Id { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> Command { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  32:</span>   [BelongsTo(<span style=\"color: #006080\">&quot;RecipeId&quot;</span>)]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  33:</span>   <span style=\"color: #0000ff\">public</span> Recipe Recipe { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  34:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  35:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  36:</span> [ActiveRecord]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  37:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Quantity : ActiveRecordBase&lt;Quantity&gt;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  38:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  39:</span>   [PrimaryKey]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  40:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">int</span> Id { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  41:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  42:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  43:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">double</span> Value { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  44:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  45:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  46:</span>   <span style=\"color: #0000ff\">public</span> Units Units { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  47:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  48:</span>   [BelongsTo(<span style=\"color: #006080\">&quot;IngredientId&quot;</span>)]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  49:</span>   <span style=\"color: #0000ff\">public</span> Ingredient Ingredient { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  50:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  51:</span>   [BelongsTo(<span style=\"color: #006080\">&quot;RecipeId&quot;</span>)]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  52:</span>   <span style=\"color: #0000ff\">public</span> Recipe Recipe { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  53:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  54:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  55:</span> [ActiveRecord]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  56:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Ingredient : ActiveRecordBase&lt;Ingredient&gt;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  57:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  58:</span>   [PrimaryKey]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  59:</span>   <span style=\"color: #0000ff\">int</span> Id { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  60:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  61:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  62:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> Name { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  63:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  64:</span>   [Property]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  65:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> Description { get; set; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  66:</span> }</pre>\n  </div>\n</div>\n\nIt is that simple (I left out constructors, ToString() and other logic for this post. I load it up and start programming against the objects: \n\n<span style=\"font-weight: bold\">Create:</span> \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> var ingredient = <span style=\"color: #0000ff\">new</span> Ingredient(<span style=\"color: #006080\">&quot;Milk&quot;</span>, <span style=\"color: #006080\">&quot;A drink made from mammals&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> ingredient.Save();</pre>\n  </div>\n</div>\n\n<span style=\"font-weight: bold\"></span>&#160;\n\n<span style=\"font-weight: bold\">Retrieve:</span>\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100.14%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; height: 17px; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> Ingredient.FindAll();</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp:nogutter\" name=\"code\">&#160;</pre>\n<span style=\"font-weight: bold\">Update:</span> \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> ingredient.Description = <span style=\"color: #006080\">&quot;A white liquid&quot;</span>;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> ingredient.Save();</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp:nogutter\" name=\"code\">&#160;</pre>\n<span style=\"font-weight: bold\">Delete:</span> \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> ingredient.Description = <span style=\"color: #006080\">&quot;A white liquid&quot;</span>;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> ingredient.Save();</pre>\n  </div>\n</div>\n\n&#160;\n\nIt couldn't be any easier, as far as I am concerned. Delete, Save, FindAll and many other methods like those were created for me when I inherited my objects from ActiveRecordBase. This gives me a ton more time to be coding my features, and forgetting about my persistence mechanism. \n\nAs much praise as I have given to ActiveRecord, there are some weaknesses. Here are the ones I can point out: \n\n*   You have less control over your database*   It is not as performant as direct SQL and stored procedures can be*   You loose your one shot at inheritance. If your business objects already derive from something, you are out of luck*   It cause an even bigger rift between Devs and DBAs*   You are forced to write classes with strong dependencies with each other*   You need to deploy at least 6 Dlls at 1.6 MB in size\n\nFinally, I want to make a quick mention to [Microsoft's Entity Framework](http://msdn.microsoft.com/en-us/library/aa697427%28VS.80%29.aspx). It is supposed to do a lot of what Casltle ActiveRecord already does. It is currently in CTP, and I will probably play with it soon. Unfortunately, many in the development community have given it a vote of &quot;[No Confidence](http://efvote.wufoo.com/forms/ado-net-entity-framework-vote-of-no-confidence/)&quot;. I am not qualified to judge here, but I hope that when EF comes out later this year, the community is a bit more positive about it. We'll see. ","slug":"castle-active-record","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ds00096eulwlcqsdsm"},{"title":"PDC 2008","id":"21","date":"2008-07-10T18:00:00.000Z","_content":"\n&#160; \nI just signed up for [PDC ](http://microsoftpdc.com/Default.aspx)this year and reserved my airline ticket. I am excited to go to this, as it will be the highest profile development conference I have ever attended... by far. It will suck being away from my wife and 18 month old daughter for that long, but I think this conference will be a good thing for me.   \n\nBefore I started my .NET job 2.5 years ago, I only had 1 year of Windows development experience. Before that, it was all cross-platform, unix-like environments. Windows is still relatively new to me as a platform. Because of this, I certainly have never been to anything so [M$](http://www.microsoft.com) focused. I am going with a colleague from my office, so it should be a good time. If you are going, I will see you there!   ","source":"_posts/2008-07-10-pdc-2008.md","raw":"---\ntitle: PDC 2008\nid: 21\ncategories:\n  - Uncategorized\ndate: 2008-07-10 14:00:00\ntags:\n---\n\n&#160; \nI just signed up for [PDC ](http://microsoftpdc.com/Default.aspx)this year and reserved my airline ticket. I am excited to go to this, as it will be the highest profile development conference I have ever attended... by far. It will suck being away from my wife and 18 month old daughter for that long, but I think this conference will be a good thing for me.   \n\nBefore I started my .NET job 2.5 years ago, I only had 1 year of Windows development experience. Before that, it was all cross-platform, unix-like environments. Windows is still relatively new to me as a platform. Because of this, I certainly have never been to anything so [M$](http://www.microsoft.com) focused. I am going with a colleague from my office, so it should be a good time. If you are going, I will see you there!   ","slug":"pdc-2008","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9dw000b6eulhqwjisku"},{"title":"Active Record Talk","id":"23","date":"2008-07-11T18:01:00.000Z","_content":"\nSo at the [Ann Arbor .NET Developer's Group ](http://www.aadnd.org/)meeting the other night, I decided to give a 10 minute &quot;[lightning talk](http://en.wikipedia.org/wiki/Lightning_talk)&quot; version of my [Castle ActiveRecord ](http://www.castleproject.org/activerecord/index.html)talk. People seemed very interested in the concept and I will be giving a full-length talk on the topic on September 10th.   \n\nUnfortunately, my company considers my first demo and presentation to be their [IP](http://en.wikipedia.org/wiki/Intellectual_property) and I can't use it for a public talk. Because of this, I need to come up with a new demo and a new PowerPoint stack. I suppose this is not the worst thing in the world, as it will force me to think about the holes and questions from my internal talk.   \n\nMy wife and I give each other alternating Fridays to get out of the house and do &quot;our thing&quot; while the other stays home while our child sleeps. So, I am at the coffee shop tonight, listening to music and playing more with ActiveRecord. I am thinking of a full-blown [Silverlight ](http://silverlight.net/default.aspx)application for recipe management as my demo.   ","source":"_posts/2008-07-11-active-record-talk.md","raw":"---\ntitle: Active Record Talk\nid: 23\ncategories:\n  - Uncategorized\ndate: 2008-07-11 14:01:00\ntags:\n---\n\nSo at the [Ann Arbor .NET Developer's Group ](http://www.aadnd.org/)meeting the other night, I decided to give a 10 minute &quot;[lightning talk](http://en.wikipedia.org/wiki/Lightning_talk)&quot; version of my [Castle ActiveRecord ](http://www.castleproject.org/activerecord/index.html)talk. People seemed very interested in the concept and I will be giving a full-length talk on the topic on September 10th.   \n\nUnfortunately, my company considers my first demo and presentation to be their [IP](http://en.wikipedia.org/wiki/Intellectual_property) and I can't use it for a public talk. Because of this, I need to come up with a new demo and a new PowerPoint stack. I suppose this is not the worst thing in the world, as it will force me to think about the holes and questions from my internal talk.   \n\nMy wife and I give each other alternating Fridays to get out of the house and do &quot;our thing&quot; while the other stays home while our child sleeps. So, I am at the coffee shop tonight, listening to music and playing more with ActiveRecord. I am thinking of a full-blown [Silverlight ](http://silverlight.net/default.aspx)application for recipe management as my demo.   ","slug":"active-record-talk","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9dy000e6eulyxjd2ui9"},{"title":"Comments","id":"25","date":"2008-07-19T16:20:00.000Z","_content":"\nRecently, while refactoring an old mess of code, I came across the following:   \n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> ArrayList result = <span style=\"color: #0000ff\">new</span> ArrayList(dictionary.Count);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> <span style=\"color: #008000\">// Loop through the dictionary and add it to the ArrayList</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> <span style=\"color: #0000ff\">for</span>(<span style=\"color: #0000ff\">int</span> iNdx = 0; iNdx &lt; dictionary.Count; iNdx++)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>   DictionaryItem dictionaryItemValue = dictionary[iNdx];</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>   result.Add(dictionaryItemValue);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span> }</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp\" name=\"code\">&#160;</pre>\nWhat is wrong with this code? For me, I see following: \n\n*   ArrayList when we should be using a List&lt;&gt;\n*   &quot;for&quot; when we should be using &quot;foreach&quot;*   A difficult to read loop counter*   An ugly temporary variable when we should be using none*   If we used List&lt;&gt;, we would be able to use &quot;AddRange&quot; and bypass the loop entirely.\nBUT, none of these are what I find most objectionable. The thing that smells the worst to me is the comment. Yup, that line above the &quot;for&quot; loop. What is it there for? What is its purpose in life? If somebody were to come along and read this code, the comment would only waste their time. It is obvious. Duh. \n\nComments, by themselves, are a code smell. They muddy the code in a way that makes it harder to read and less maintainable. In fact, I have this poster hanging in my cube at work to remind me in case I am feeling lazy: \n\n[![](http://brianstestsite.googlepages.com/comments.JPG)](http://brianstestsite.googlepages.com/comments.JPG)To illustrate my point, consider the following inane example: What if I fixed everything about the code that I mentioned preiously: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> List&lt;DictionaryItem&gt; result = <span style=\"color: #0000ff\">new</span> List&lt;DictionaryItem&gt;();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> <span style=\"color: #008000\">// Loop through the dictionary and add it to the ArrayList</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> result.AddRange(dictionary);</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp\" name=\"code\">&#160;</pre>\n\nNow I have a comment that doesn't even make sense anymore. You may say &quot;If you made that change, you would change the comment as well.&quot; This is false. I am VERY likely to ignore the comment and leave the bad comment in place. Why? \n\n1.  The comment was useless to begin with, so I ignored it.2.  Most single-line comments are useless, so I ignore it.3.  The compiler won't tell you that the comment doesn't make sense anymore.4.  I might be using a tool like ReSharper where most the work is done for me. It ignores comments too.\nIT HAPPENS ALL THE TIME. \n\nAs far as I am concerned, comments are <span style=\"font-style: italic\">usually</span> a cheap replacement for readable code. It is easy to slap a comment in and walk away, but it takes thought and effort to make the code readable without the comment. \n\nNow, I am the first to admit... my code readability needs work. More specifically, the way I write code needs work to be readable by others. It is kind of like when I cook (my biggest non-tech hobby). I almost always make food that tastes good... to me. Making it taste as good for others is the thing I am constantly trying to make better. \n\nHere are the categories of comments that I see on a regular basis: \n\n<span style=\"font-weight: bold\">Incorrect Comments</span> \n\nThese comments creep int a code base over time as as the code is refactored. If you comment often, then it is inevitable that many of your comments will morph into incorrect comments. These should be eliminated whenever they are found, as they do nothing but confuse the reader. If the code needs a comment, consider refactoring to eliminate the need. \n\n<span style=\"font-weight: bold\">Obvious Comments \n\n</span>So often, a comment is telling you exactly what the code is doing... \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #008000\">// Check For Null</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">if</span>(item == <span style=\"color: #0000ff\">null</span>)</pre>\n  </div>\n</div>\nThese comments will quickly become <span style=\"font-weight: bold\">incorrect comments</span> because they are so useless that nobody pays attention to them anyways. They should be removed whenever they are found. \n\n<span style=\"font-weight: bold\">Comments that Replace Readable Code</span> \n\nIt takes a lot more effort and creativity to write readable code than it does to comment your code. The problem, again, is that code often changes while comments are often not updated. When this happens, you are left with hard-to-read code with incorrect comments. The author should have encapsulated the code into a concise method that does one thing -- the thing that the comment says that it does. \n\nWhen you see something like: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> List&lt;<span style=\"color: #0000ff\">string</span>&gt; keyData = <span style=\"color: #0000ff\">new</span> List&lt;<span style=\"color: #0000ff\">string</span>&gt;();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> <span style=\"color: #008000\">// If the file version is old, then parse the old keyed data from the list</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> <span style=\"color: #0000ff\">if</span> (<span style=\"color: #0000ff\">string</span>.IsNullOrEmpty(v) ||v.StartsWith(<span style=\"color: #006080\">&quot;1.&quot;</span>) ||v.StartsWith(<span style=\"color: #006080\">&quot;2.&quot;</span>) &amp;&amp; v.EndsWith(<span style=\"color: #006080\">&quot;b&quot;</span>)))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     <span style=\"color: #0000ff\">foreach</span> (<span style=\"color: #0000ff\">string</span> stuff <span style=\"color: #0000ff\">in</span> ReadStuffFromFile(fh))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>         <span style=\"color: #0000ff\">if</span> (stuff.Contains(_specialKey))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>             <span style=\"color: #0000ff\">string</span> keyItem = stuff.Split(_specialKey.ToCharArray())[1];</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>             keyData.Add(keyItem.Substring(3, 8));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span> }</pre>\n  </div>\n</div>\nIt is so much easier to read if you bust the condition and the block into separate methods: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">if</span> (FileVersionIsLegacy(v))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span>     keyData = ParseLegacyData(fh);</pre>\n  </div>\n</div>\n<span style=\"font-weight: bold\">Comments that excuse bad code \n\n</span>I am fairly guilty of this one. Comments that say &quot;I know this is bad form, but it is more performant to so it this way&quot; or &quot;Working around a Microsoft bug&quot; are <span style=\"font-style: italic\">sometimes</span> excusable. Instead, though, a colleague of mine once suggested that I write a method that is named something like HandleListPerformantly() or WorkAroundMicrosoftDisplayBug_3334495() instead. You at least make it obvious to everyone involved what you are doing. Why write a comment when you can use code?<span style=\"font-weight: bold\"> \n\n</span>\n\n<span style=\"font-weight: bold\">Multi-line comments describing complex behavior \n\n</span>The answer to my last question might be &quot;Because it takes me several lines to describe why I am doing something&quot;. I have a hard time arguing with this one. <strike>I remember reading in someone's blog recently (I can't remember who, or else I would cite it)</strike> Jeff Atwood wrote a [post](http://www.codinghorror.com/blog/archives/000749.html) once that code is the &quot;how&quot; and comments are the &quot;why&quot;. This is a case where I agree with that statement. I like to stick to the general rule that if a comment is 2 lines or less, I can probably re-write it to be more readable. If it is longer, then my comment is probably useful. Unfortunately, large comment blocks fall victim to accuracy over time even quicker, due to the fact that the nobody who knows the code tends to read those long comments, so they tend to overlook them when they refactor. Consider ways to avoid these blocks as well. \n\n<span style=\"font-weight: bold\">Auto-Documentation comments \n\n</span>I am bringing up this type of comment because every time I have an argument with a staunch comment supporter, they always bring up this case. I will say it now: this doesn't count. It doesn't count because documentation in comments has its own language and stucture. They aren't really comments, but inline documentation meant for external consumers. They get parsed and compiled with a tool, reviewed by a human before delivery and they tend to stay up to date as well as any other documentation method. When I say &quot;Don't write comments in your code&quot;, I am not talking about this type of comment. \n\nI may have missed a few prototypes of comments, but for the most part, I think I got them all. I know this is a controversial topic, but the more I argue it, the more I believe I am right on this. The anti-comment sentiment is not new, and it is certainly not unique to me, but I wanted to document my thoughts on it anyway, as it has changed about 179 degrees in the last 3 years. My blog is inteneded to document my thoughts and attitudes about my craft. ","source":"_posts/2008-07-19-comments.md","raw":"---\ntitle: Comments\nid: 25\ncategories:\n  - Uncategorized\ndate: 2008-07-19 12:20:00\ntags:\n---\n\nRecently, while refactoring an old mess of code, I came across the following:   \n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> ArrayList result = <span style=\"color: #0000ff\">new</span> ArrayList(dictionary.Count);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> <span style=\"color: #008000\">// Loop through the dictionary and add it to the ArrayList</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> <span style=\"color: #0000ff\">for</span>(<span style=\"color: #0000ff\">int</span> iNdx = 0; iNdx &lt; dictionary.Count; iNdx++)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>   DictionaryItem dictionaryItemValue = dictionary[iNdx];</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>   result.Add(dictionaryItemValue);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span> }</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp\" name=\"code\">&#160;</pre>\nWhat is wrong with this code? For me, I see following: \n\n*   ArrayList when we should be using a List&lt;&gt;\n*   &quot;for&quot; when we should be using &quot;foreach&quot;*   A difficult to read loop counter*   An ugly temporary variable when we should be using none*   If we used List&lt;&gt;, we would be able to use &quot;AddRange&quot; and bypass the loop entirely.\nBUT, none of these are what I find most objectionable. The thing that smells the worst to me is the comment. Yup, that line above the &quot;for&quot; loop. What is it there for? What is its purpose in life? If somebody were to come along and read this code, the comment would only waste their time. It is obvious. Duh. \n\nComments, by themselves, are a code smell. They muddy the code in a way that makes it harder to read and less maintainable. In fact, I have this poster hanging in my cube at work to remind me in case I am feeling lazy: \n\n[![](http://brianstestsite.googlepages.com/comments.JPG)](http://brianstestsite.googlepages.com/comments.JPG)To illustrate my point, consider the following inane example: What if I fixed everything about the code that I mentioned preiously: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> List&lt;DictionaryItem&gt; result = <span style=\"color: #0000ff\">new</span> List&lt;DictionaryItem&gt;();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> <span style=\"color: #008000\">// Loop through the dictionary and add it to the ArrayList</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> result.AddRange(dictionary);</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp\" name=\"code\">&#160;</pre>\n\nNow I have a comment that doesn't even make sense anymore. You may say &quot;If you made that change, you would change the comment as well.&quot; This is false. I am VERY likely to ignore the comment and leave the bad comment in place. Why? \n\n1.  The comment was useless to begin with, so I ignored it.2.  Most single-line comments are useless, so I ignore it.3.  The compiler won't tell you that the comment doesn't make sense anymore.4.  I might be using a tool like ReSharper where most the work is done for me. It ignores comments too.\nIT HAPPENS ALL THE TIME. \n\nAs far as I am concerned, comments are <span style=\"font-style: italic\">usually</span> a cheap replacement for readable code. It is easy to slap a comment in and walk away, but it takes thought and effort to make the code readable without the comment. \n\nNow, I am the first to admit... my code readability needs work. More specifically, the way I write code needs work to be readable by others. It is kind of like when I cook (my biggest non-tech hobby). I almost always make food that tastes good... to me. Making it taste as good for others is the thing I am constantly trying to make better. \n\nHere are the categories of comments that I see on a regular basis: \n\n<span style=\"font-weight: bold\">Incorrect Comments</span> \n\nThese comments creep int a code base over time as as the code is refactored. If you comment often, then it is inevitable that many of your comments will morph into incorrect comments. These should be eliminated whenever they are found, as they do nothing but confuse the reader. If the code needs a comment, consider refactoring to eliminate the need. \n\n<span style=\"font-weight: bold\">Obvious Comments \n\n</span>So often, a comment is telling you exactly what the code is doing... \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #008000\">// Check For Null</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">if</span>(item == <span style=\"color: #0000ff\">null</span>)</pre>\n  </div>\n</div>\nThese comments will quickly become <span style=\"font-weight: bold\">incorrect comments</span> because they are so useless that nobody pays attention to them anyways. They should be removed whenever they are found. \n\n<span style=\"font-weight: bold\">Comments that Replace Readable Code</span> \n\nIt takes a lot more effort and creativity to write readable code than it does to comment your code. The problem, again, is that code often changes while comments are often not updated. When this happens, you are left with hard-to-read code with incorrect comments. The author should have encapsulated the code into a concise method that does one thing -- the thing that the comment says that it does. \n\nWhen you see something like: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> List&lt;<span style=\"color: #0000ff\">string</span>&gt; keyData = <span style=\"color: #0000ff\">new</span> List&lt;<span style=\"color: #0000ff\">string</span>&gt;();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> <span style=\"color: #008000\">// If the file version is old, then parse the old keyed data from the list</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> <span style=\"color: #0000ff\">if</span> (<span style=\"color: #0000ff\">string</span>.IsNullOrEmpty(v) ||v.StartsWith(<span style=\"color: #006080\">&quot;1.&quot;</span>) ||v.StartsWith(<span style=\"color: #006080\">&quot;2.&quot;</span>) &amp;&amp; v.EndsWith(<span style=\"color: #006080\">&quot;b&quot;</span>)))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     <span style=\"color: #0000ff\">foreach</span> (<span style=\"color: #0000ff\">string</span> stuff <span style=\"color: #0000ff\">in</span> ReadStuffFromFile(fh))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>         <span style=\"color: #0000ff\">if</span> (stuff.Contains(_specialKey))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>             <span style=\"color: #0000ff\">string</span> keyItem = stuff.Split(_specialKey.ToCharArray())[1];</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>             keyData.Add(keyItem.Substring(3, 8));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span> }</pre>\n  </div>\n</div>\nIt is so much easier to read if you bust the condition and the block into separate methods: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">if</span> (FileVersionIsLegacy(v))</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span>     keyData = ParseLegacyData(fh);</pre>\n  </div>\n</div>\n<span style=\"font-weight: bold\">Comments that excuse bad code \n\n</span>I am fairly guilty of this one. Comments that say &quot;I know this is bad form, but it is more performant to so it this way&quot; or &quot;Working around a Microsoft bug&quot; are <span style=\"font-style: italic\">sometimes</span> excusable. Instead, though, a colleague of mine once suggested that I write a method that is named something like HandleListPerformantly() or WorkAroundMicrosoftDisplayBug_3334495() instead. You at least make it obvious to everyone involved what you are doing. Why write a comment when you can use code?<span style=\"font-weight: bold\"> \n\n</span>\n\n<span style=\"font-weight: bold\">Multi-line comments describing complex behavior \n\n</span>The answer to my last question might be &quot;Because it takes me several lines to describe why I am doing something&quot;. I have a hard time arguing with this one. <strike>I remember reading in someone's blog recently (I can't remember who, or else I would cite it)</strike> Jeff Atwood wrote a [post](http://www.codinghorror.com/blog/archives/000749.html) once that code is the &quot;how&quot; and comments are the &quot;why&quot;. This is a case where I agree with that statement. I like to stick to the general rule that if a comment is 2 lines or less, I can probably re-write it to be more readable. If it is longer, then my comment is probably useful. Unfortunately, large comment blocks fall victim to accuracy over time even quicker, due to the fact that the nobody who knows the code tends to read those long comments, so they tend to overlook them when they refactor. Consider ways to avoid these blocks as well. \n\n<span style=\"font-weight: bold\">Auto-Documentation comments \n\n</span>I am bringing up this type of comment because every time I have an argument with a staunch comment supporter, they always bring up this case. I will say it now: this doesn't count. It doesn't count because documentation in comments has its own language and stucture. They aren't really comments, but inline documentation meant for external consumers. They get parsed and compiled with a tool, reviewed by a human before delivery and they tend to stay up to date as well as any other documentation method. When I say &quot;Don't write comments in your code&quot;, I am not talking about this type of comment. \n\nI may have missed a few prototypes of comments, but for the most part, I think I got them all. I know this is a controversial topic, but the more I argue it, the more I believe I am right on this. The anti-comment sentiment is not new, and it is certainly not unique to me, but I wanted to document my thoughts on it anyway, as it has changed about 179 degrees in the last 3 years. My blog is inteneded to document my thoughts and attitudes about my craft. ","slug":"comments","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9e0000g6eul6cwlqd8k"},{"title":"Response to \"Self Promotions vs Other Relations\"","id":"24","date":"2008-07-21T16:19:00.000Z","_content":"\n<span>I had an interesting conversation with someone on [Twitter](http://www.twitter.com) today. He spoke up while I was giving a playful response to someone else. I felt like from there forward, he was misrepresenting me by misquoting me (&quot;everything we do on Twitter&quot;, for instance, was a quote I didn't say) and inflating my language by using &quot;everyone&quot;, &quot;all the time&quot; and &quot;everything&quot;. It ultimately ended up in a blog post of his criticizing my position. I don't know this guy. He might be a troll... he might not... but I felt like I should post my response     \n\nI am doing this because I want to make it clear what I think about blogging and being in a community such as Twitter. I believe that there is a spectrum of self promotion, that starts at the core of what Twitter is and ends in the world of fembots.     \n\n<span style=\"font-style: italic\"><span style=\"font-weight: bold\">Here was the Twitter conversation:</span></span> </span><span style=\"font-weight: bold\">   \n\nsbellware:</span> the only thing more despicable about self-promotion on twitter is not having the guts to do it in the clear   \n<span style=\"font-weight: bold\">BrianGenisio @sbellware: </span>Aren't we all, in one way or another, promoting ourselves on Twitter? The act of blogging or micro-blogging is self promotion   \n<span style=\"font-weight: bold\">vaspersthegrate @briangenisio</span>: - Self promo means pushing links to product pages, blog posts, other sales or self-interest objects. Not altruistic sharing.   \n<span style=\"font-weight: bold\">vaspersthegrate</span>: Self promotion is not &quot;everything we do on Twitter&quot;. There is also selfless interactions and sharing that may not benefit you much at all.   \n<span style=\"font-weight: bold\">BrianGenisio @vaspersthegrate</span>: Self promotion means a lot more than what you said. Self promotion also means &quot;promoting your ideas&quot;. Many others as well   \n<span style=\"font-weight: bold\">vaspersthegrate @BrianGenisio</span>: - If you think everything everyone does all the time is ultimately selfish, then you can also justify all acts as survival.   \n<span style=\"font-weight: bold\">BrianGenisio @vaspersthegrate</span>: If you think that you are special enough to &quot;altruistically share&quot;, then you are promoting your ego.   \n<span style=\"font-weight: bold\">vaspersthegrate @BrianGenisio</span>: Helping others on Twitter is not self-promotional, it is other-relational. We know the difference between mktg &amp; helping   \n<span style=\"font-weight: bold\">BrianGenisio @vaspersthegrate</span>: Just to be clear, I never suggested that you are marketing. I also never used the word &quot;everything&quot;. Those are your words   \n\n<span style=\"font-style: italic\"><span style=\"font-weight: bold\">Here is his [blog post](http://pluperfecter.blogspot.com/2008/07/self-promotions-vs-other-relations.html)       \n<span style=\"font-style: italic\"><span style=\"font-weight: bold\"><span style=\"font-style: italic\"><span style=\"font-weight: bold\"></span></span></span></span>      \n<span style=\"font-weight: bold\">Here is my response:        \n</span></span></span>My original statement, which I stand by, was meant to be more of a reflection on our existence on Twitter... I really do understand what the Twitter community means when they say &quot;Self Promotional&quot;. I was merely playing with it (the moral relativism of the topic), as my language clearly states.   \n\nWhen we, bloggers, tweeps, professionals and individuals make a blog post or tweet, we are essentially promoting ourselves in one way or another. It may not be in the sense that the Twitter community is referring to, but it certainly is by the meaning of the word. If you look up the word &quot;promote&quot; in the [dictionary](http://tinyurl.com/5nf8vo) you will find that what I am saying is true in the first two meanings.   \n\nIn order to be a member of a community (any community), one must promote themselves in some way... be it through helping others, casual conversation or spouting their opinions. If you do not promote yourself, you are ignored by the [emergent](http://tinyurl.com/76mk7) community.   \n\nFurther, a blog is a perfect example of promoting one's ego. I have two blogs -- one personal and a newer, more professional blog. I am not trying to say anything bad about promoting an ego... but instead I am trying to point out that if you are writing something that you think might be useful to others, your ego is being promoted by you -- thus &quot;self promotion&quot;.   \n\nI urge you to look deeper into what I was saying and not think I am trying to compare you to a fembot on Twitter. I understand the difference.   \n\n<span style=\"font-style: italic\"><span style=\"font-weight: bold\"><span style=\"font-weight: bold\">       \n</span></span></span>","source":"_posts/2008-07-21-response-to-self-promotions-vs-other-relations.md","raw":"---\ntitle: 'Response to \"Self Promotions vs Other Relations\"'\nid: 24\ncategories:\n  - Uncategorized\ndate: 2008-07-21 12:19:00\ntags:\n---\n\n<span>I had an interesting conversation with someone on [Twitter](http://www.twitter.com) today. He spoke up while I was giving a playful response to someone else. I felt like from there forward, he was misrepresenting me by misquoting me (&quot;everything we do on Twitter&quot;, for instance, was a quote I didn't say) and inflating my language by using &quot;everyone&quot;, &quot;all the time&quot; and &quot;everything&quot;. It ultimately ended up in a blog post of his criticizing my position. I don't know this guy. He might be a troll... he might not... but I felt like I should post my response     \n\nI am doing this because I want to make it clear what I think about blogging and being in a community such as Twitter. I believe that there is a spectrum of self promotion, that starts at the core of what Twitter is and ends in the world of fembots.     \n\n<span style=\"font-style: italic\"><span style=\"font-weight: bold\">Here was the Twitter conversation:</span></span> </span><span style=\"font-weight: bold\">   \n\nsbellware:</span> the only thing more despicable about self-promotion on twitter is not having the guts to do it in the clear   \n<span style=\"font-weight: bold\">BrianGenisio @sbellware: </span>Aren't we all, in one way or another, promoting ourselves on Twitter? The act of blogging or micro-blogging is self promotion   \n<span style=\"font-weight: bold\">vaspersthegrate @briangenisio</span>: - Self promo means pushing links to product pages, blog posts, other sales or self-interest objects. Not altruistic sharing.   \n<span style=\"font-weight: bold\">vaspersthegrate</span>: Self promotion is not &quot;everything we do on Twitter&quot;. There is also selfless interactions and sharing that may not benefit you much at all.   \n<span style=\"font-weight: bold\">BrianGenisio @vaspersthegrate</span>: Self promotion means a lot more than what you said. Self promotion also means &quot;promoting your ideas&quot;. Many others as well   \n<span style=\"font-weight: bold\">vaspersthegrate @BrianGenisio</span>: - If you think everything everyone does all the time is ultimately selfish, then you can also justify all acts as survival.   \n<span style=\"font-weight: bold\">BrianGenisio @vaspersthegrate</span>: If you think that you are special enough to &quot;altruistically share&quot;, then you are promoting your ego.   \n<span style=\"font-weight: bold\">vaspersthegrate @BrianGenisio</span>: Helping others on Twitter is not self-promotional, it is other-relational. We know the difference between mktg &amp; helping   \n<span style=\"font-weight: bold\">BrianGenisio @vaspersthegrate</span>: Just to be clear, I never suggested that you are marketing. I also never used the word &quot;everything&quot;. Those are your words   \n\n<span style=\"font-style: italic\"><span style=\"font-weight: bold\">Here is his [blog post](http://pluperfecter.blogspot.com/2008/07/self-promotions-vs-other-relations.html)       \n<span style=\"font-style: italic\"><span style=\"font-weight: bold\"><span style=\"font-style: italic\"><span style=\"font-weight: bold\"></span></span></span></span>      \n<span style=\"font-weight: bold\">Here is my response:        \n</span></span></span>My original statement, which I stand by, was meant to be more of a reflection on our existence on Twitter... I really do understand what the Twitter community means when they say &quot;Self Promotional&quot;. I was merely playing with it (the moral relativism of the topic), as my language clearly states.   \n\nWhen we, bloggers, tweeps, professionals and individuals make a blog post or tweet, we are essentially promoting ourselves in one way or another. It may not be in the sense that the Twitter community is referring to, but it certainly is by the meaning of the word. If you look up the word &quot;promote&quot; in the [dictionary](http://tinyurl.com/5nf8vo) you will find that what I am saying is true in the first two meanings.   \n\nIn order to be a member of a community (any community), one must promote themselves in some way... be it through helping others, casual conversation or spouting their opinions. If you do not promote yourself, you are ignored by the [emergent](http://tinyurl.com/76mk7) community.   \n\nFurther, a blog is a perfect example of promoting one's ego. I have two blogs -- one personal and a newer, more professional blog. I am not trying to say anything bad about promoting an ego... but instead I am trying to point out that if you are writing something that you think might be useful to others, your ego is being promoted by you -- thus &quot;self promotion&quot;.   \n\nI urge you to look deeper into what I was saying and not think I am trying to compare you to a fembot on Twitter. I understand the difference.   \n\n<span style=\"font-style: italic\"><span style=\"font-weight: bold\"><span style=\"font-weight: bold\">       \n</span></span></span>","slug":"response-to-self-promotions-vs-other-relations","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9e2000i6eulygr4gfzs"},{"title":"How not to TDD","id":"26","date":"2008-08-15T16:22:00.000Z","_content":"\nI recently sat in on a teleconference with some developers of a testing and automation framework who were trying to get us to use their product. One of the big components is a tool that you write test specifications with. There are two outputs: A long, formatted testing specification PDF and an XML file that specifies your tests. You then pass the XML file through a translator that outputs NUnit test stubs for your to fill in.   \n\nI was curious... I had to ask &quot;Why would I want to do this?&quot; Their answer was two fold:   \n1\\. Because the PDF is used for quality tracking   \n2\\. Because some developers like to write their tests before they write their software. It's called &quot;Test Driven Development&quot;   \n\nI was rather shocked by this answer so I just shut up and listened to the rest of the pitch. I really wanted to respond, but it wasn't professional in this particular venue. What I would have said may have gone something like this:   \n\nNo No No No No!!!!! That is NOT Test Driven Development. That does not help you track quality.   \n\nTest Driven Development is something that I have been practicing rather religiously for about a year now. I have reaped the many benefits of TDD and I can say with confidence that what they were describing was NOT TDD.   \n\nTDD is a tool that developers use to design software. You write a SINGLE test, you make the test pass, and then you write another test, refactoring your code as you go such that the software lives for the tests. As you refactor your software, you are also refactoring your tests. As your software evolves, so do the tests. The tests, by themselves, is your quality tracking document. Your IDE is your design/specification tool. I really don't need to complicate my life with these other tools.   \n\nIf you have ever developed using TDD, imagine writing all of your tests up-front in a tool external from your IDE. Then, you pass the output of that tool through another tool to generate your tests. THEN, you open your IDE and fill in the test stubss. When it is time to write new tests, open the external tool again, pass the output through another tool, and fill in the new tests.   \n\nOne of the greatest feelings I get while coding is when I am in the TDD groove -- where I am going from Red to Green to Red to Green to Red to Green... etc etc. My software is evolving in a way that is very natural for my brain. The thought alone of breaking that groove with extra tools for the purpose of a PDF document that NOBODY will ever read stresses me out.   \n\nI will pass on this particular workflow, thank you.   ","source":"_posts/2008-08-15-how-not-to-tdd.md","raw":"---\ntitle: How not to TDD\nid: 26\ncategories:\n  - Uncategorized\ndate: 2008-08-15 12:22:00\ntags:\n---\n\nI recently sat in on a teleconference with some developers of a testing and automation framework who were trying to get us to use their product. One of the big components is a tool that you write test specifications with. There are two outputs: A long, formatted testing specification PDF and an XML file that specifies your tests. You then pass the XML file through a translator that outputs NUnit test stubs for your to fill in.   \n\nI was curious... I had to ask &quot;Why would I want to do this?&quot; Their answer was two fold:   \n1\\. Because the PDF is used for quality tracking   \n2\\. Because some developers like to write their tests before they write their software. It's called &quot;Test Driven Development&quot;   \n\nI was rather shocked by this answer so I just shut up and listened to the rest of the pitch. I really wanted to respond, but it wasn't professional in this particular venue. What I would have said may have gone something like this:   \n\nNo No No No No!!!!! That is NOT Test Driven Development. That does not help you track quality.   \n\nTest Driven Development is something that I have been practicing rather religiously for about a year now. I have reaped the many benefits of TDD and I can say with confidence that what they were describing was NOT TDD.   \n\nTDD is a tool that developers use to design software. You write a SINGLE test, you make the test pass, and then you write another test, refactoring your code as you go such that the software lives for the tests. As you refactor your software, you are also refactoring your tests. As your software evolves, so do the tests. The tests, by themselves, is your quality tracking document. Your IDE is your design/specification tool. I really don't need to complicate my life with these other tools.   \n\nIf you have ever developed using TDD, imagine writing all of your tests up-front in a tool external from your IDE. Then, you pass the output of that tool through another tool to generate your tests. THEN, you open your IDE and fill in the test stubss. When it is time to write new tests, open the external tool again, pass the output through another tool, and fill in the new tests.   \n\nOne of the greatest feelings I get while coding is when I am in the TDD groove -- where I am going from Red to Green to Red to Green to Red to Green... etc etc. My software is evolving in a way that is very natural for my brain. The thought alone of breaking that groove with extra tools for the purpose of a PDF document that NOBODY will ever read stresses me out.   \n\nI will pass on this particular workflow, thank you.   ","slug":"how-not-to-tdd","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9e3000k6eultkhw9nuy"},{"title":"Castle Active Record Slides and Links","id":"27","date":"2008-09-11T16:23:00.000Z","_content":"\nLast night (9/10/08), I had the pleasure of speaking at the [Ann Arbor .NET Developers Group](http://www.aadnd.org/). This was my first public talk in several years, and my first since switching my career focus from Linux to Windows. I had a great time, and I want to thank the group for giving me the opportunity to talk.   \n\nAs promised, I am posting the slides from my talk[ (PDF)](http://brianstestsite.googlepages.com/ActiveRecord.pdf). In addition, here are several links that I included in my talk:   \n\n*   [The Castle Project](http://castleproject.org/)*   [Castle ActiveRecord](http://castleproject.org/activerecord)*   [NHibernate](http://www.hibernate.org/343.html)*   [ActiveWriter](http://altinoren.com/activewriter)*   [Mock Backend for ActiveRecord](http://brian.genisio.org/2008/07/active-record-mock-framework.html)*   [A Fluent Interface for NHibernate](http://blogs.hibernatingrhinos.com/nhibernate)*   [Michael Eaton (Thanks for getting me interested ActiveRecord)](http://michaeleatonconsulting.com/blog/)","source":"_posts/2008-09-11-castle-active-record-slides-and-links.md","raw":"---\ntitle: Castle Active Record Slides and Links\nid: 27\ncategories:\n  - Uncategorized\ndate: 2008-09-11 12:23:00\ntags:\n---\n\nLast night (9/10/08), I had the pleasure of speaking at the [Ann Arbor .NET Developers Group](http://www.aadnd.org/). This was my first public talk in several years, and my first since switching my career focus from Linux to Windows. I had a great time, and I want to thank the group for giving me the opportunity to talk.   \n\nAs promised, I am posting the slides from my talk[ (PDF)](http://brianstestsite.googlepages.com/ActiveRecord.pdf). In addition, here are several links that I included in my talk:   \n\n*   [The Castle Project](http://castleproject.org/)*   [Castle ActiveRecord](http://castleproject.org/activerecord)*   [NHibernate](http://www.hibernate.org/343.html)*   [ActiveWriter](http://altinoren.com/activewriter)*   [Mock Backend for ActiveRecord](http://brian.genisio.org/2008/07/active-record-mock-framework.html)*   [A Fluent Interface for NHibernate](http://blogs.hibernatingrhinos.com/nhibernate)*   [Michael Eaton (Thanks for getting me interested ActiveRecord)](http://michaeleatonconsulting.com/blog/)","slug":"castle-active-record-slides-and-links","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9e6000m6eulx6ye9blm"},{"title":"Have you seen the new ANTS profiler?","id":"29","date":"2008-09-12T16:28:00.000Z","_content":"\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f08%2fhave-you-seen-new-ants-profiler.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f08%2fhave-you-seen-new-ants-profiler.html)   \nBefore I write anything, I want to make it clear: I am not a Red-Gate shill. They have not paid me to say this... in fact, my team pays them for their software. I just feel that sometimes, you just need to recognize superior work.   \n\n<font color=\"#ff0000\">Edit: Since writing this post, Red-Gate has sent me a [SWAG](http://www.urbandictionary.com/define.php?term=swag) package with a T-Shirt, coffee mug and 1 GB USB drive. They did this to thank me for the [testimonial](http://www.red-gate.com/products/ants_profiler/testimonials.htm) of mine that they published. Again, this happened AFTER this post, and I am still not a Red-Gate shill.</font>   \n\n<span style=\"font-weight: bold\">ANTS of the Past</span>   \nMy team has been using the [.Net ANTS Profiler](http://www.red-gate.com/products/ants_profiler/index.htm) for years. It has always been a useful tool in our arsenal for finding performance bottlenecks. In the past, I have always liked the product, but have never felt like it was anything extremely special. One of the biggest reasons for this is the often mis-represented hot spots.   \n\nI often found that methods that got called many times (hundreds of thousands) would show up as hot spots in ANTS. When I worked to reduce the number of calls, my app would fail to show improvement. ANTS would show me the next hot spot and I would be fooled again.   \n\nThe reason for this (as I theorized) was that ANTS was measuring the profile time in addition to the method time. The profile time outweighed the execution time, thus erroneously pointed out a hot spot. Admittedly, reducing the call count was good for my software but it wasn't my primary goal for profiling. Eventually, I would find the real bottleneck and fix it. Ultimately, the tool did a lot of good for our software.   \n\n<span style=\"font-weight: bold\">The New ANTS 4.0</span>   \nWhen version 4.0 of ANTS came out, I was very interested to see what they had to offer. I was pleasantly surprised with what I found. The ANTS team completely re-wrote their profiling engine AND the UI. Both of these re-writes have been a home run thus far.   \n\n<span style=\"font-weight: bold\">Accuracy    \n</span>The most important improvement is the accuracy of the results. I have used the new product to find several hot spots. This time around, it is extremely accurate. For instance, when I profiled a particular action, ANTS found a hot spot that was taking 27% of the time. When I implemented caching for that particular code and timed the action again, I got a 26% improvement from my fix. This is the type of accuracy I have been waiting for. I have had several other successful finds like that.   \n\nOne other notable feature: recognition of the JIT compile time. In one particular action with a rather deep call stack, ANTS was able to tell me that 38% of my time was spent in the JIT compilation. It was useful to know where the time was being spent.   \n\n<span style=\"font-weight: bold\">The Timeline</span>   \nOK, now to the UI improvements. ANTS 4.0 features an interactive time line of the execution. You have the ability to track any system counters, but it tracks the processor utilization by default. As it goes, it marks the important events such as button clicks and window events. At any given time, you can select any subset of the time to profile. You can even bookmark those subsets so you can look at it later. They even allow you to zoom in to the graph. In all, this is a GREAT feature.   \n![](http://bilzmoude.googlepages.com/Ants.Navigation.GIF)   \n<span style=\"font-weight: bold\">Tree View</span>   \nIn the previous versions, the primary view of the data was a data grid. The data grid has not been removed in 4.0, but it is no longer the primary view. Instead, it is a tree view. This is great as it is a much more natural visualization of the data.   \n![](http://bilzmoude.googlepages.com/Ants.TreeView.GIF)   \n\n<span style=\"font-weight: bold\">Graph View</span>   \nAs nice as the tree view is for finding problems, the graph view is best for communicating bottlenecks to others. You have control over which nodes in this graph are shown. Take a look:   \n![](http://bilzmoude.googlepages.com/Ants.GraphView.GIF)   \n\n<span style=\"font-weight: bold\">Code View</span>   \nFinally, the code view is similar to previous versions of ANTS. One notable new feature is the ability to navigate the code from this view. You can now click on the methods in the view and it will take you to that method. I have found myself using it a lot.   \n![](http://bilzmoude.googlepages.com/Ants.CodeView.GIF)   \n\n<span style=\"font-weight: bold\">Conclusion</span>   \nIn all, this is more than a version upgrade. It is mostly a new tool. You can find several similarities with the old tool, but you will find more differences... in a good way. Kudos to the team that put this together. It has become one of my favorite tools in my development tool belt. <span style=\"font-weight: bold\">   \n</span>","source":"_posts/2008-09-12-have-you-seen-the-new-ants-profiler.md","raw":"---\ntitle: Have you seen the new ANTS profiler?\nid: 29\ncategories:\n  - Uncategorized\ndate: 2008-09-12 12:28:00\ntags:\n---\n\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f08%2fhave-you-seen-new-ants-profiler.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f08%2fhave-you-seen-new-ants-profiler.html)   \nBefore I write anything, I want to make it clear: I am not a Red-Gate shill. They have not paid me to say this... in fact, my team pays them for their software. I just feel that sometimes, you just need to recognize superior work.   \n\n<font color=\"#ff0000\">Edit: Since writing this post, Red-Gate has sent me a [SWAG](http://www.urbandictionary.com/define.php?term=swag) package with a T-Shirt, coffee mug and 1 GB USB drive. They did this to thank me for the [testimonial](http://www.red-gate.com/products/ants_profiler/testimonials.htm) of mine that they published. Again, this happened AFTER this post, and I am still not a Red-Gate shill.</font>   \n\n<span style=\"font-weight: bold\">ANTS of the Past</span>   \nMy team has been using the [.Net ANTS Profiler](http://www.red-gate.com/products/ants_profiler/index.htm) for years. It has always been a useful tool in our arsenal for finding performance bottlenecks. In the past, I have always liked the product, but have never felt like it was anything extremely special. One of the biggest reasons for this is the often mis-represented hot spots.   \n\nI often found that methods that got called many times (hundreds of thousands) would show up as hot spots in ANTS. When I worked to reduce the number of calls, my app would fail to show improvement. ANTS would show me the next hot spot and I would be fooled again.   \n\nThe reason for this (as I theorized) was that ANTS was measuring the profile time in addition to the method time. The profile time outweighed the execution time, thus erroneously pointed out a hot spot. Admittedly, reducing the call count was good for my software but it wasn't my primary goal for profiling. Eventually, I would find the real bottleneck and fix it. Ultimately, the tool did a lot of good for our software.   \n\n<span style=\"font-weight: bold\">The New ANTS 4.0</span>   \nWhen version 4.0 of ANTS came out, I was very interested to see what they had to offer. I was pleasantly surprised with what I found. The ANTS team completely re-wrote their profiling engine AND the UI. Both of these re-writes have been a home run thus far.   \n\n<span style=\"font-weight: bold\">Accuracy    \n</span>The most important improvement is the accuracy of the results. I have used the new product to find several hot spots. This time around, it is extremely accurate. For instance, when I profiled a particular action, ANTS found a hot spot that was taking 27% of the time. When I implemented caching for that particular code and timed the action again, I got a 26% improvement from my fix. This is the type of accuracy I have been waiting for. I have had several other successful finds like that.   \n\nOne other notable feature: recognition of the JIT compile time. In one particular action with a rather deep call stack, ANTS was able to tell me that 38% of my time was spent in the JIT compilation. It was useful to know where the time was being spent.   \n\n<span style=\"font-weight: bold\">The Timeline</span>   \nOK, now to the UI improvements. ANTS 4.0 features an interactive time line of the execution. You have the ability to track any system counters, but it tracks the processor utilization by default. As it goes, it marks the important events such as button clicks and window events. At any given time, you can select any subset of the time to profile. You can even bookmark those subsets so you can look at it later. They even allow you to zoom in to the graph. In all, this is a GREAT feature.   \n![](http://bilzmoude.googlepages.com/Ants.Navigation.GIF)   \n<span style=\"font-weight: bold\">Tree View</span>   \nIn the previous versions, the primary view of the data was a data grid. The data grid has not been removed in 4.0, but it is no longer the primary view. Instead, it is a tree view. This is great as it is a much more natural visualization of the data.   \n![](http://bilzmoude.googlepages.com/Ants.TreeView.GIF)   \n\n<span style=\"font-weight: bold\">Graph View</span>   \nAs nice as the tree view is for finding problems, the graph view is best for communicating bottlenecks to others. You have control over which nodes in this graph are shown. Take a look:   \n![](http://bilzmoude.googlepages.com/Ants.GraphView.GIF)   \n\n<span style=\"font-weight: bold\">Code View</span>   \nFinally, the code view is similar to previous versions of ANTS. One notable new feature is the ability to navigate the code from this view. You can now click on the methods in the view and it will take you to that method. I have found myself using it a lot.   \n![](http://bilzmoude.googlepages.com/Ants.CodeView.GIF)   \n\n<span style=\"font-weight: bold\">Conclusion</span>   \nIn all, this is more than a version upgrade. It is mostly a new tool. You can find several similarities with the old tool, but you will find more differences... in a good way. Kudos to the team that put this together. It has become one of my favorite tools in my development tool belt. <span style=\"font-weight: bold\">   \n</span>","slug":"have-you-seen-the-new-ants-profiler","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9e9000o6eulgw9c44ok"},{"title":"Active Record \"Mock\" Framework","id":"28","date":"2008-07-22T16:26:00.000Z","_content":"\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f07%2factive-record-mock-framework.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f07%2factive-record-mock-framework.html)   \nRecently, I have been working on my Castle ActiveRecord talk. I am writing some WCF services that will be consumed by a Silverlight client. Because I write my code using TDD, I needed to be able to write tests against the WCF services. I wanted to mock out the backing store for my objects, but with ActiveRecord and NHibernate, this is not so straight-forward. Instead, I came across a post about [mocking the backing store for NHibernate tests](http://www.ayende.com/Blog/archive/2006/10/14/7183.aspx).   \n\nThe idea is that you use SQLite in &quot;memory-mode&quot; as your database. This makes it so the database vanishes as soon as your connection is destroyed. This is great for testing! No database server... no database file... pure database interfaces. It is not a mock in the traditional sense of the word, but it lets me write tests as if I had a mock framework.   \n\nSo, I modified the code to work for ActiveRecord. Note that I am overriding the DriverConnectionProvider to keep the connection alive. This is because the in-memory database gets destroyed when the connection closes.   \n\nIf you want to use this class, add the following class to your test project. You will need to download and add [System.Data.SQLite](http://sqlite.phxsoftware.com/) as a project reference.   \n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">namespace</span> ActiveRecordTestHelper</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>  <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> ActiveRecordMockConnectionProvider : NHibernate.Connection.DriverConnectionProvider</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>  {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>      <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> IDbConnection _connection;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>      <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">override</span> IDbConnection GetConnection()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>          <span style=\"color: #0000ff\">if</span> (_connection == <span style=\"color: #0000ff\">null</span>)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>              _connection = <span style=\"color: #0000ff\">base</span>.GetConnection();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>          <span style=\"color: #0000ff\">return</span> _connection;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>      <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">override</span> <span style=\"color: #0000ff\">void</span> CloseConnection(IDbConnection conn)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>      <span style=\"color: #008000\">/// &lt;summary&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span>      <span style=\"color: #008000\">/// Destroys the connection that is kept open in order to keep the in-memory database alive.  Destroying</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>      <span style=\"color: #008000\">/// the connection will destroy all of the data stored in the mock database.  Call this method when the</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>      <span style=\"color: #008000\">/// test is complete.</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>      <span style=\"color: #008000\">/// &lt;/summary&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>      <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">void</span> ExplicitlyDestroyConnection()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span>          <span style=\"color: #0000ff\">if</span> (_connection != <span style=\"color: #0000ff\">null</span>)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>          {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span>              _connection.Close();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span>              _connection = <span style=\"color: #0000ff\">null</span>;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>          }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  32:</span>      <span style=\"color: #008000\">/// &lt;summary&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  33:</span>      <span style=\"color: #008000\">/// Initializes ActiveRecord and the Database that ActiveRecord uses to store the data.  Call this method</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  34:</span>      <span style=\"color: #008000\">/// before the test executes.</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  35:</span>      <span style=\"color: #008000\">/// &lt;/summary&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  36:</span>      <span style=\"color: #008000\">/// &lt;param name=&quot;types&quot;&gt;A list of ActiveRecord types that will be created in the database&lt;/param&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  37:</span>      <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">void</span> InitializeActiveRecord(<span style=\"color: #0000ff\">params</span> Type[] types)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  38:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  39:</span>          ActiveRecordStarter.ResetInitializationFlag();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  40:</span>          ActiveRecordStarter.Initialize(GetMockConfiguration(), types);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  41:</span>          ActiveRecordStarter.CreateSchema();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  42:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  43:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  44:</span>      <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> IConfigurationSource GetMockConfiguration()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  45:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  46:</span>          var properties = <span style=\"color: #0000ff\">new</span> Hashtable{</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  47:</span>                                  {<span style=\"color: #006080\">&quot;hibernate.connection.driver_class&quot;</span>, <span style=\"color: #006080\">&quot;NHibernate.Driver.SQLite20Driver&quot;</span>},</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  48:</span>                                  {<span style=\"color: #006080\">&quot;hibernate.dialect&quot;</span>, <span style=\"color: #006080\">&quot;NHibernate.Dialect.SQLiteDialect&quot;</span>},</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  49:</span>                                  {<span style=\"color: #006080\">&quot;hibernate.connection.provider&quot;</span>, ConnectionProviderLocator},</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  50:</span>                                  {<span style=\"color: #006080\">&quot;hibernate.connection.connection_string&quot;</span>, <span style=\"color: #006080\">&quot;Data Source=:memory:;Version=3;New=True;&quot;</span>}};</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  51:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  52:</span>          var source = <span style=\"color: #0000ff\">new</span> InPlaceConfigurationSource();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  53:</span>          source.Add(<span style=\"color: #0000ff\">typeof</span>(ActiveRecordBase), properties);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  54:</span>          <span style=\"color: #0000ff\">return</span> source;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  55:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  56:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  57:</span>      <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">string</span> ConnectionProviderLocator</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  58:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  59:</span>          get { <span style=\"color: #0000ff\">return</span> String.Format(<span style=\"color: #006080\">&quot;{0}, {1}&quot;</span>, TypeOfEnclosingClass.FullName, EnclosingAssemblyName.Split(<span style=\"color: #006080\">','</span>)[0]); }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  60:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  61:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  62:</span>      <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> Type TypeOfEnclosingClass</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  63:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  64:</span>          get { <span style=\"color: #0000ff\">return</span> MethodInfo.GetCurrentMethod().DeclaringType; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  65:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  66:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  67:</span>      <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">string</span> EnclosingAssemblyName</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  68:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  69:</span>          get { <span style=\"color: #0000ff\">return</span> Assembly.GetAssembly(TypeOfEnclosingClass).FullName; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  70:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  71:</span>  }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  72:</span> }</pre>\n  </div>\n</div>\nBy using this class, you simply need to initialize ActiveRecord in your test StartUp method, and destroy the connection in the test TearDown Method. Here is an example of a test fixture that takes advantage of my class: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [TestFixture]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> IngredientServiceTests</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>   <span style=\"color: #0000ff\">private</span> IRecipeBoxService _recipeBoxService;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>   [SetUp]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> SetUp()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>   {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>       ActiveRecordMockConnectionProvider.InitializeActiveRecord(<span style=\"color: #0000ff\">typeof</span>(Ingredient));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>       _recipeBoxService = <span style=\"color: #0000ff\">new</span> RecipeBoxService();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>   }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>   [TearDown]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> TearDown()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>   {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>       ActiveRecordMockConnectionProvider.ExplicitlyDestroyConnection();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>   }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span>   [Test]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Test_Get_Ingredients()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>   {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>       Ingredient mockIngredient = <span style=\"color: #0000ff\">new</span> Ingredient(<span style=\"color: #006080\">&quot;ABCD&quot;</span>, <span style=\"color: #006080\">&quot;DEF&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>       mockIngredient.Save();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span>       IList&lt;Ingredient&gt; ingredients = <span style=\"color: #0000ff\">new</span> List&lt;Ingredient&gt;(_recipeBoxService.AllIngredients());</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span>       Assert.That(ingredients.Count, Is.EqualTo(1));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span>       Assert.That(ingredients[0].Name, Is.EqualTo(<span style=\"color: #006080\">&quot;ABCD&quot;</span>));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>       Assert.That(ingredients[0].Description, Is.EqualTo(<span style=\"color: #006080\">&quot;DEF&quot;</span>));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>   }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span> }</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp\" name=\"code\">\n</pre>","source":"_posts/2008-07-22-active-record-mock-framework.md","raw":"---\ntitle: 'Active Record \"Mock\" Framework'\nid: 28\ncategories:\n  - Uncategorized\ndate: 2008-07-22 12:26:00\ntags:\n---\n\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f07%2factive-record-mock-framework.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f07%2factive-record-mock-framework.html)   \nRecently, I have been working on my Castle ActiveRecord talk. I am writing some WCF services that will be consumed by a Silverlight client. Because I write my code using TDD, I needed to be able to write tests against the WCF services. I wanted to mock out the backing store for my objects, but with ActiveRecord and NHibernate, this is not so straight-forward. Instead, I came across a post about [mocking the backing store for NHibernate tests](http://www.ayende.com/Blog/archive/2006/10/14/7183.aspx).   \n\nThe idea is that you use SQLite in &quot;memory-mode&quot; as your database. This makes it so the database vanishes as soon as your connection is destroyed. This is great for testing! No database server... no database file... pure database interfaces. It is not a mock in the traditional sense of the word, but it lets me write tests as if I had a mock framework.   \n\nSo, I modified the code to work for ActiveRecord. Note that I am overriding the DriverConnectionProvider to keep the connection alive. This is because the in-memory database gets destroyed when the connection closes.   \n\nIf you want to use this class, add the following class to your test project. You will need to download and add [System.Data.SQLite](http://sqlite.phxsoftware.com/) as a project reference.   \n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">namespace</span> ActiveRecordTestHelper</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>  <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> ActiveRecordMockConnectionProvider : NHibernate.Connection.DriverConnectionProvider</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>  {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>      <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> IDbConnection _connection;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>      <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">override</span> IDbConnection GetConnection()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>          <span style=\"color: #0000ff\">if</span> (_connection == <span style=\"color: #0000ff\">null</span>)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>              _connection = <span style=\"color: #0000ff\">base</span>.GetConnection();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>          <span style=\"color: #0000ff\">return</span> _connection;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>      <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">override</span> <span style=\"color: #0000ff\">void</span> CloseConnection(IDbConnection conn)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>      <span style=\"color: #008000\">/// &lt;summary&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span>      <span style=\"color: #008000\">/// Destroys the connection that is kept open in order to keep the in-memory database alive.  Destroying</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>      <span style=\"color: #008000\">/// the connection will destroy all of the data stored in the mock database.  Call this method when the</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>      <span style=\"color: #008000\">/// test is complete.</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>      <span style=\"color: #008000\">/// &lt;/summary&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>      <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">void</span> ExplicitlyDestroyConnection()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span>          <span style=\"color: #0000ff\">if</span> (_connection != <span style=\"color: #0000ff\">null</span>)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>          {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span>              _connection.Close();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span>              _connection = <span style=\"color: #0000ff\">null</span>;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>          }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  32:</span>      <span style=\"color: #008000\">/// &lt;summary&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  33:</span>      <span style=\"color: #008000\">/// Initializes ActiveRecord and the Database that ActiveRecord uses to store the data.  Call this method</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  34:</span>      <span style=\"color: #008000\">/// before the test executes.</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  35:</span>      <span style=\"color: #008000\">/// &lt;/summary&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  36:</span>      <span style=\"color: #008000\">/// &lt;param name=&quot;types&quot;&gt;A list of ActiveRecord types that will be created in the database&lt;/param&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  37:</span>      <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">void</span> InitializeActiveRecord(<span style=\"color: #0000ff\">params</span> Type[] types)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  38:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  39:</span>          ActiveRecordStarter.ResetInitializationFlag();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  40:</span>          ActiveRecordStarter.Initialize(GetMockConfiguration(), types);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  41:</span>          ActiveRecordStarter.CreateSchema();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  42:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  43:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  44:</span>      <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> IConfigurationSource GetMockConfiguration()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  45:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  46:</span>          var properties = <span style=\"color: #0000ff\">new</span> Hashtable{</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  47:</span>                                  {<span style=\"color: #006080\">&quot;hibernate.connection.driver_class&quot;</span>, <span style=\"color: #006080\">&quot;NHibernate.Driver.SQLite20Driver&quot;</span>},</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  48:</span>                                  {<span style=\"color: #006080\">&quot;hibernate.dialect&quot;</span>, <span style=\"color: #006080\">&quot;NHibernate.Dialect.SQLiteDialect&quot;</span>},</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  49:</span>                                  {<span style=\"color: #006080\">&quot;hibernate.connection.provider&quot;</span>, ConnectionProviderLocator},</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  50:</span>                                  {<span style=\"color: #006080\">&quot;hibernate.connection.connection_string&quot;</span>, <span style=\"color: #006080\">&quot;Data Source=:memory:;Version=3;New=True;&quot;</span>}};</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  51:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  52:</span>          var source = <span style=\"color: #0000ff\">new</span> InPlaceConfigurationSource();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  53:</span>          source.Add(<span style=\"color: #0000ff\">typeof</span>(ActiveRecordBase), properties);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  54:</span>          <span style=\"color: #0000ff\">return</span> source;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  55:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  56:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  57:</span>      <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">string</span> ConnectionProviderLocator</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  58:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  59:</span>          get { <span style=\"color: #0000ff\">return</span> String.Format(<span style=\"color: #006080\">&quot;{0}, {1}&quot;</span>, TypeOfEnclosingClass.FullName, EnclosingAssemblyName.Split(<span style=\"color: #006080\">','</span>)[0]); }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  60:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  61:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  62:</span>      <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> Type TypeOfEnclosingClass</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  63:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  64:</span>          get { <span style=\"color: #0000ff\">return</span> MethodInfo.GetCurrentMethod().DeclaringType; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  65:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  66:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  67:</span>      <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">string</span> EnclosingAssemblyName</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  68:</span>      {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  69:</span>          get { <span style=\"color: #0000ff\">return</span> Assembly.GetAssembly(TypeOfEnclosingClass).FullName; }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  70:</span>      }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  71:</span>  }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  72:</span> }</pre>\n  </div>\n</div>\nBy using this class, you simply need to initialize ActiveRecord in your test StartUp method, and destroy the connection in the test TearDown Method. Here is an example of a test fixture that takes advantage of my class: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [TestFixture]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> IngredientServiceTests</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>   <span style=\"color: #0000ff\">private</span> IRecipeBoxService _recipeBoxService;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>   [SetUp]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> SetUp()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>   {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>       ActiveRecordMockConnectionProvider.InitializeActiveRecord(<span style=\"color: #0000ff\">typeof</span>(Ingredient));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>       _recipeBoxService = <span style=\"color: #0000ff\">new</span> RecipeBoxService();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>   }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>   [TearDown]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> TearDown()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>   {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>       ActiveRecordMockConnectionProvider.ExplicitlyDestroyConnection();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>   }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span>   [Test]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Test_Get_Ingredients()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>   {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>       Ingredient mockIngredient = <span style=\"color: #0000ff\">new</span> Ingredient(<span style=\"color: #006080\">&quot;ABCD&quot;</span>, <span style=\"color: #006080\">&quot;DEF&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>       mockIngredient.Save();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span>       IList&lt;Ingredient&gt; ingredients = <span style=\"color: #0000ff\">new</span> List&lt;Ingredient&gt;(_recipeBoxService.AllIngredients());</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span>       Assert.That(ingredients.Count, Is.EqualTo(1));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span>       Assert.That(ingredients[0].Name, Is.EqualTo(<span style=\"color: #006080\">&quot;ABCD&quot;</span>));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>       Assert.That(ingredients[0].Description, Is.EqualTo(<span style=\"color: #006080\">&quot;DEF&quot;</span>));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>   }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span> }</pre>\n  </div>\n</div>\n\n<pre class=\"c-sharp\" name=\"code\">\n</pre>","slug":"active-record-mock-framework","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ea000q6eulgypdcqj7"},{"title":"Day of .NET -- Ann Arbor","id":"33","date":"2008-09-24T16:36:00.000Z","_content":"\nI got word this morning that I will be speaking at the [Ann Arbor Day of .NET.](http://www.dayofdotnet.org/AnnArbor/Fall2008/)   \n\nI am excited about this since it is my first conference. I have given public seminars, and recently gave a talk at the [Ann Arbor .NET Users' Group](http://www.aadnd.org/), but this is my first conference.   \n\nMy talk will be about testing WinForms apps using NUnit. I have been developing my technique for testing WinForms GUIs for over a year now and I have learned a lot about the topic. It should be fun!   \n\nThis conference is free, so get registered soon!   ","source":"_posts/2008-09-24-day-of-net-ann-arbor.md","raw":"---\ntitle: Day of .NET -- Ann Arbor\nid: 33\ncategories:\n  - Uncategorized\ndate: 2008-09-24 12:36:00\ntags:\n---\n\nI got word this morning that I will be speaking at the [Ann Arbor Day of .NET.](http://www.dayofdotnet.org/AnnArbor/Fall2008/)   \n\nI am excited about this since it is my first conference. I have given public seminars, and recently gave a talk at the [Ann Arbor .NET Users' Group](http://www.aadnd.org/), but this is my first conference.   \n\nMy talk will be about testing WinForms apps using NUnit. I have been developing my technique for testing WinForms GUIs for over a year now and I have learned a lot about the topic. It should be fun!   \n\nThis conference is free, so get registered soon!   ","slug":"day-of-net-ann-arbor","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ec000s6eul6h26dmwt"},{"title":"Why you REALLY need to think about your interfaces","id":"30","date":"2008-09-22T16:29:00.000Z","_content":"\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f09%2fwhy-you-really-need-to-think-about-your.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f09%2fwhy-you-really-need-to-think-about-your.html)   \n\nI was working on performance tuning an application the other day.&#160; The code in this post is a rough approximation of the problem I had to solve.&#160; The application defines a plug-in interface that the plug-in developers can implement.&#160; The plug-in gets initialized with a dictionary and and the application talks through the rest of the interface.\n\n   <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:d6b6dda9-3e31-4ffc-a589-076ad08d52be\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IPlugin   \n{        \n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Initialize(Dictionary</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">, Information</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> dataLibrary);\n    </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> TalkToMe(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message);\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThe initialization from the application is simple:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:0e1639c0-a9ef-43ac-9ef7-0d4cf68082ae\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetUpPlugin(IPlugin plugin)   \n{\n    Dictionary</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">, Information</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> data </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> PopulateDictionary();\n    plugin.Initialize(data);    \n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nWhen this interface was originally written, the dictionary was populated using XML files.&#160; The dictionary only included about two hundred items, but over time, this dictionary became more complex.&#160; It grew out of the XML files, and into a database.&#160; It grew into tens of thousands of items.&#160; It is not hard to tell that there is a performance bottleneck here as the application populates this many items from the database.&#160; It turns out that the plug-ins don't tend to need a lot of the data in the dictionary, though I cannot predict what it will need to lookup.&#160; To populate the entire dictionary takes a TON of time, and it is completely unnecessary.\n\nUnfortunately, I am bound to this interface, which is already published to our plug-in developers.&#160; My first inclination was to write a custom Dictionary&lt;&gt; class.&#160; It would be really nice if .NET would let me do something like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:f513dde0-453a-4a29-80f3-e5c3e02ee1e0\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> DataLibrary : Dictionary</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">, Information</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">   \n{    \n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> IApplicationLogic _logic;    \n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> DataLibrary(IApplicationLogic logic)    \n    {        \n        _logic </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> logic;    \n    }     \n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">override</span><span style=\"color: #000000;\"> Information </span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">[</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> key]    \n    {        \n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">        \n        {            \n            </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> _logic.LookupInformation(key);        \n        }    \n    }    \n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">override</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Count    \n    {        \n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">        \n        {            \n            </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> _logic.InformationCount;        \n        }    \n    }    \n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> etc</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis would solve my needs completely if only methods were not sealed by default in C#.&#160; Unfortunately, they are, and .NET didn't make the Dictionary members virtual.&#160; In fact, it turns out, I am completely coded into a corner since I can't change the interface.&#160; If only the IPlugin interface were thought through a bit further, I wouldn't be in this predicament.&#160; \n\nAll that really needed to happen was for IPlugin.Initialize to take an IDictionary&lt;string, Information&gt; instead of a Dictionary&lt;string, Information&gt; (notice the 'I' in front of the Dictionary, indicating that it is an interface as opposed to a concrete class.)&#160; If this were only the case, I would be able to implement the interface using a database lookup and move on with my life.\n\nNow, I really don't have any solution other than asking for an interface change to all of the plug-in writers for my application.&#160; This not only looks bad, but it IS bad.&#160; I suppose might be able to come up with something crazy using Dynamic Proxies, but that would get rather ugly rather quickly.\n\nThe more you think about it, the choice of Dictionary&lt;string, Information&gt; was bad for other reasons as well.&#160; The Dictionary class is a read/write class.&#160; We do not want our plug-in authors to modify the dictionary -- we only want them to look up data.&#160; We don't need them to iterate over the data, and we don't need to give them a vectored view of the keys or the values.\n\nThe message I am trying to get through here is simple:&#160; When you are creating an interface for public use, you need to think hard about what that interface looks like.&#160; Avoid concrete data passing when interfaces are available (IDictionary instead of Dictionary).&#160; These interfaces don't get to change much.&#160; They aren't as flexible as the internal code.&#160; Please, think about your interfaces.","source":"_posts/2008-09-22-why-you-really-need-to-think-about-your-interfaces.md","raw":"---\ntitle: Why you REALLY need to think about your interfaces\nid: 30\ncategories:\n  - Uncategorized\ndate: 2008-09-22 12:29:00\ntags:\n---\n\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f09%2fwhy-you-really-need-to-think-about-your.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f09%2fwhy-you-really-need-to-think-about-your.html)   \n\nI was working on performance tuning an application the other day.&#160; The code in this post is a rough approximation of the problem I had to solve.&#160; The application defines a plug-in interface that the plug-in developers can implement.&#160; The plug-in gets initialized with a dictionary and and the application talks through the rest of the interface.\n\n   <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:d6b6dda9-3e31-4ffc-a589-076ad08d52be\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IPlugin   \n{        \n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Initialize(Dictionary</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">, Information</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> dataLibrary);\n    </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> TalkToMe(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message);\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThe initialization from the application is simple:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:0e1639c0-a9ef-43ac-9ef7-0d4cf68082ae\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetUpPlugin(IPlugin plugin)   \n{\n    Dictionary</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">, Information</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> data </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> PopulateDictionary();\n    plugin.Initialize(data);    \n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nWhen this interface was originally written, the dictionary was populated using XML files.&#160; The dictionary only included about two hundred items, but over time, this dictionary became more complex.&#160; It grew out of the XML files, and into a database.&#160; It grew into tens of thousands of items.&#160; It is not hard to tell that there is a performance bottleneck here as the application populates this many items from the database.&#160; It turns out that the plug-ins don't tend to need a lot of the data in the dictionary, though I cannot predict what it will need to lookup.&#160; To populate the entire dictionary takes a TON of time, and it is completely unnecessary.\n\nUnfortunately, I am bound to this interface, which is already published to our plug-in developers.&#160; My first inclination was to write a custom Dictionary&lt;&gt; class.&#160; It would be really nice if .NET would let me do something like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:f513dde0-453a-4a29-80f3-e5c3e02ee1e0\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> DataLibrary : Dictionary</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">, Information</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">   \n{    \n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> IApplicationLogic _logic;    \n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> DataLibrary(IApplicationLogic logic)    \n    {        \n        _logic </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> logic;    \n    }     \n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">override</span><span style=\"color: #000000;\"> Information </span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">[</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> key]    \n    {        \n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">        \n        {            \n            </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> _logic.LookupInformation(key);        \n        }    \n    }    \n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">override</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Count    \n    {        \n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">        \n        {            \n            </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> _logic.InformationCount;        \n        }    \n    }    \n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> etc</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis would solve my needs completely if only methods were not sealed by default in C#.&#160; Unfortunately, they are, and .NET didn't make the Dictionary members virtual.&#160; In fact, it turns out, I am completely coded into a corner since I can't change the interface.&#160; If only the IPlugin interface were thought through a bit further, I wouldn't be in this predicament.&#160; \n\nAll that really needed to happen was for IPlugin.Initialize to take an IDictionary&lt;string, Information&gt; instead of a Dictionary&lt;string, Information&gt; (notice the 'I' in front of the Dictionary, indicating that it is an interface as opposed to a concrete class.)&#160; If this were only the case, I would be able to implement the interface using a database lookup and move on with my life.\n\nNow, I really don't have any solution other than asking for an interface change to all of the plug-in writers for my application.&#160; This not only looks bad, but it IS bad.&#160; I suppose might be able to come up with something crazy using Dynamic Proxies, but that would get rather ugly rather quickly.\n\nThe more you think about it, the choice of Dictionary&lt;string, Information&gt; was bad for other reasons as well.&#160; The Dictionary class is a read/write class.&#160; We do not want our plug-in authors to modify the dictionary -- we only want them to look up data.&#160; We don't need them to iterate over the data, and we don't need to give them a vectored view of the keys or the values.\n\nThe message I am trying to get through here is simple:&#160; When you are creating an interface for public use, you need to think hard about what that interface looks like.&#160; Avoid concrete data passing when interfaces are available (IDictionary instead of Dictionary).&#160; These interfaces don't get to change much.&#160; They aren't as flexible as the internal code.&#160; Please, think about your interfaces.","slug":"why-you-really-need-to-think-about-your-interfaces","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9eg000u6euljjf0w6fp"},{"title":"UI Automation Not Fit for Command!","id":"34","date":"2008-10-04T16:39:00.000Z","_content":"\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fui-automation-not-fit-for-command.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fui-automation-not-fit-for-command.html)   \nI have been spending a lot of time exploring automation testing frameworks that can be driven using NUnit. I am exploring the following:   \n\n*   Roll Your Own*   [NUnit Forms](http://nunitforms.sourceforge.net/)*   [Ranorex](http://www.ranorex.net/)*   [Microsoft UI Automation](http://msdn.microsoft.com/en-us/library/ms747327.aspx) I am finding that the &quot;Roll Your Own&quot; method is the most versatile method. I will write about this method later. Today, I feel like a more negative tone. I will say it now:   \n\n<span style=\"font-weight: bold\">Microsoft's UI Automation Framework is NOT fit for command.</span>   \n\nDon't get me wrong... there are a lot of easy-to-use systems in .NET. BUT, I find the Code DOM easier to use than the UI Automation tools. If you have ever used the Code DOM, you know that I am saying a lot with this.   \n\nHere are my issues with the UI Automation Framework:   \n\n*   UI Spy Doesn't Ship with Visual Studio 2008\\. If you want UI Spy, you need to download the[ SDK for Windows Vista](http://www.microsoft.com/downloads/details.aspx?familyid=4377F86D-C913-4B5C-B87E-EF72E5B4E065&amp;displaylang=en). Don't try to use this framework without it. You will fail.*   The UI Spy tool is buggy and crashy and slow. Did I mention that this tool is essential?*   As much as I research it, I can't figure out how to do the first two things I tried to do: Click on a LinkLabel and enter text into a RichTextBox. I know how to click on a button and enter text into a TextBox, but the more complicated versions of this are too difficult, aparently.*   The API is terribly difficult to write AND read. Not intuitive at all!*   Finding controls using the NameProperty doesn't use the &quot;Name&quot; property. It uses the &quot;Text&quot; property. If you want to search for a control using the &quot;Name&quot; property, you need to use AutomationIdProperty. Did I mention that the API is awful? This is why you need the UI Spy tool.*   The framework itself is slow*   You need a separate thread to catch modal dialogs. Have you ever tried to write tests that utilize multiple threads? These are the problems I have run into with just a few hours of use. I need to mention that NUnit Forms, Ranorex and &quot;Roll Your Own&quot; tests were all easier to write/read/execute with the same level of effort.  ","source":"_posts/2008-10-04-ui-automation-not-fit-for-command.md","raw":"---\ntitle: 'UI Automation Not Fit for Command!'\nid: 34\ncategories:\n  - Uncategorized\ndate: 2008-10-04 12:39:00\ntags:\n---\n\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fui-automation-not-fit-for-command.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fui-automation-not-fit-for-command.html)   \nI have been spending a lot of time exploring automation testing frameworks that can be driven using NUnit. I am exploring the following:   \n\n*   Roll Your Own*   [NUnit Forms](http://nunitforms.sourceforge.net/)*   [Ranorex](http://www.ranorex.net/)*   [Microsoft UI Automation](http://msdn.microsoft.com/en-us/library/ms747327.aspx) I am finding that the &quot;Roll Your Own&quot; method is the most versatile method. I will write about this method later. Today, I feel like a more negative tone. I will say it now:   \n\n<span style=\"font-weight: bold\">Microsoft's UI Automation Framework is NOT fit for command.</span>   \n\nDon't get me wrong... there are a lot of easy-to-use systems in .NET. BUT, I find the Code DOM easier to use than the UI Automation tools. If you have ever used the Code DOM, you know that I am saying a lot with this.   \n\nHere are my issues with the UI Automation Framework:   \n\n*   UI Spy Doesn't Ship with Visual Studio 2008\\. If you want UI Spy, you need to download the[ SDK for Windows Vista](http://www.microsoft.com/downloads/details.aspx?familyid=4377F86D-C913-4B5C-B87E-EF72E5B4E065&amp;displaylang=en). Don't try to use this framework without it. You will fail.*   The UI Spy tool is buggy and crashy and slow. Did I mention that this tool is essential?*   As much as I research it, I can't figure out how to do the first two things I tried to do: Click on a LinkLabel and enter text into a RichTextBox. I know how to click on a button and enter text into a TextBox, but the more complicated versions of this are too difficult, aparently.*   The API is terribly difficult to write AND read. Not intuitive at all!*   Finding controls using the NameProperty doesn't use the &quot;Name&quot; property. It uses the &quot;Text&quot; property. If you want to search for a control using the &quot;Name&quot; property, you need to use AutomationIdProperty. Did I mention that the API is awful? This is why you need the UI Spy tool.*   The framework itself is slow*   You need a separate thread to catch modal dialogs. Have you ever tried to write tests that utilize multiple threads? These are the problems I have run into with just a few hours of use. I need to mention that NUnit Forms, Ranorex and &quot;Roll Your Own&quot; tests were all easier to write/read/execute with the same level of effort.  ","slug":"ui-automation-not-fit-for-command","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ei000w6eulcnbjh39i"},{"title":"I'm speechless...","id":"35","date":"2008-10-06T16:43:00.000Z","_content":"\nAre you going to PDC in a few weeks? Looking forward to the free hard drive with &quot;all the bits?&quot; Then THIS is for you...   \n\n<object width=\"425\" height=\"344\"><param name=\"movie\" value=\"http://www.youtube.com/v/Vv2M4aIMc-8&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en&amp;fs=1\" /><param name=\"allowFullScreen\" value=\"true\" /><embed src=\"http://www.youtube.com/v/Vv2M4aIMc-8&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en&amp;fs=1\" type=\"application/x-shockwave-flash\" allowfullscreen=\"true\" width=\"425\" height=\"344\"></embed></object>","source":"_posts/2008-10-06-im-speechless-2.md","raw":"---\ntitle: \"I'm speechless...\"\nid: 35\ncategories:\n  - Uncategorized\ndate: 2008-10-06 12:43:00\ntags:\n---\n\nAre you going to PDC in a few weeks? Looking forward to the free hard drive with &quot;all the bits?&quot; Then THIS is for you...   \n\n<object width=\"425\" height=\"344\"><param name=\"movie\" value=\"http://www.youtube.com/v/Vv2M4aIMc-8&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en&amp;fs=1\" /><param name=\"allowFullScreen\" value=\"true\" /><embed src=\"http://www.youtube.com/v/Vv2M4aIMc-8&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en&amp;fs=1\" type=\"application/x-shockwave-flash\" allowfullscreen=\"true\" width=\"425\" height=\"344\"></embed></object>","slug":"im-speechless-2","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ej000y6eulsw442437"},{"title":"Winforms Automation Extensions","id":"36","date":"2008-10-12T16:49:00.000Z","_content":"\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fwinforms-automation-extensions.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fwinforms-automation-extensions.html)   \nIn preparation for my [talk next Saturday](http://www.dayofdotnet.org/AnnArbor/Fall2008/Sessions.aspx#10), I am publishing the code that I use to help drive my WinForms application via NUnit tests. The idea is simple -- instantiate the form and use extension methods on the controls to find the controls and drive from there.   \n\nThis is a preliminary release. I will update this file as I find more functionality s needed. It turns out that you don't need much (besides some creativity) to automate WinForms UIs. This set of extension methods will help you get started.   \n\nDownload [WAX -- Winforms Automation Extensions](http://bilzmoude.googlepages.com/FormExtensions.cs)   \n\nTo run your forms in NUnit, you just need create/show it in the setup and close it in the teardown:   \n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [SetUp]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> SetUp()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     _testForm = <span style=\"color: #0000ff\">new</span> FormToTest();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     _testForm.Show();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span> [TearDown]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> TearDown()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>     _testForm.Close();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span> }</pre>\n  </div>\n</div>\n\nHere is an example of finding a button by name, clicking on it and validating that the app changed the text of the label: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [Test]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Test_That_Button_Click_Changes_Text()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>    var button = _testForm.FindByName&lt;Button&gt;(<span style=\"color: #006080\">&quot;Button1&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>    var label = _testForm.FindByName&lt;Label&gt;(<span style=\"color: #006080\">&quot;Label1&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>    button.SimulateClick();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>    Assert.That(label.Text, Is.EqualTo(<span style=\"color: #006080\">&quot;Hello World&quot;</span>));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span> }</pre>\n  </div>\n</div>\nNote that the <span style=\"font-weight: bold\">FindByName</span> method is just a specialization of the <span style=\"font-weight: bold\">Find </span>method. The <span style=\"font-weight: bold\">Find</span> method takes a delegate you can use to find your controls using any method you wish. For instance, say you want to find a control with a known tag: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [Test]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Test_Find_With_Custom_Filter()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     var l1 = _testForm.Find&lt;Control&gt;(target =&gt; (target.Tag <span style=\"color: #0000ff\">as</span> <span style=\"color: #0000ff\">string</span>) == <span style=\"color: #006080\">&quot;FindTag&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     Assert.That(l1.Name, Is.EqualTo(<span style=\"color: #006080\">&quot;ListBox1&quot;</span>));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span> }</pre>\n  </div>\n</div>\nIn my experience, driving the controls directly is the easiest way to automate the UI. For instance, if you have a list control that you want to set, you might write code like this: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [Test]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Test_Setting_ListBox()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     var listBox = _testForm.FindByName&lt;ListBox&gt;(<span style=\"color: #006080\">&quot;ListBox1&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     listBox.SelectedIndex = 1;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>     Assert.That(listBox.SelectedItem.ToString(), Is.EqualTo(<span style=\"color: #006080\">&quot;The Test&quot;</span>));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span> }</pre>\n  </div>\n</div>\nIf you have any questions or thoughts about this code, please contact me. I want to grow this code over time, and feedback is very welcome. ","source":"_posts/2008-10-12-winforms-automation-extensions.md","raw":"---\ntitle: Winforms Automation Extensions\nid: 36\ncategories:\n  - Uncategorized\ndate: 2008-10-12 12:49:00\ntags:\n---\n\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fwinforms-automation-extensions.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fwinforms-automation-extensions.html)   \nIn preparation for my [talk next Saturday](http://www.dayofdotnet.org/AnnArbor/Fall2008/Sessions.aspx#10), I am publishing the code that I use to help drive my WinForms application via NUnit tests. The idea is simple -- instantiate the form and use extension methods on the controls to find the controls and drive from there.   \n\nThis is a preliminary release. I will update this file as I find more functionality s needed. It turns out that you don't need much (besides some creativity) to automate WinForms UIs. This set of extension methods will help you get started.   \n\nDownload [WAX -- Winforms Automation Extensions](http://bilzmoude.googlepages.com/FormExtensions.cs)   \n\nTo run your forms in NUnit, you just need create/show it in the setup and close it in the teardown:   \n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [SetUp]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> SetUp()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     _testForm = <span style=\"color: #0000ff\">new</span> FormToTest();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     _testForm.Show();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span> }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span> [TearDown]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> TearDown()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>     _testForm.Close();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span> }</pre>\n  </div>\n</div>\n\nHere is an example of finding a button by name, clicking on it and validating that the app changed the text of the label: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [Test]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Test_That_Button_Click_Changes_Text()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>    var button = _testForm.FindByName&lt;Button&gt;(<span style=\"color: #006080\">&quot;Button1&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>    var label = _testForm.FindByName&lt;Label&gt;(<span style=\"color: #006080\">&quot;Label1&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>    button.SimulateClick();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>    Assert.That(label.Text, Is.EqualTo(<span style=\"color: #006080\">&quot;Hello World&quot;</span>));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span> }</pre>\n  </div>\n</div>\nNote that the <span style=\"font-weight: bold\">FindByName</span> method is just a specialization of the <span style=\"font-weight: bold\">Find </span>method. The <span style=\"font-weight: bold\">Find</span> method takes a delegate you can use to find your controls using any method you wish. For instance, say you want to find a control with a known tag: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [Test]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Test_Find_With_Custom_Filter()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     var l1 = _testForm.Find&lt;Control&gt;(target =&gt; (target.Tag <span style=\"color: #0000ff\">as</span> <span style=\"color: #0000ff\">string</span>) == <span style=\"color: #006080\">&quot;FindTag&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     Assert.That(l1.Name, Is.EqualTo(<span style=\"color: #006080\">&quot;ListBox1&quot;</span>));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span> }</pre>\n  </div>\n</div>\nIn my experience, driving the controls directly is the easiest way to automate the UI. For instance, if you have a list control that you want to set, you might write code like this: \n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [Test]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Test_Setting_ListBox()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     var listBox = _testForm.FindByName&lt;ListBox&gt;(<span style=\"color: #006080\">&quot;ListBox1&quot;</span>);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     listBox.SelectedIndex = 1;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>     Assert.That(listBox.SelectedItem.ToString(), Is.EqualTo(<span style=\"color: #006080\">&quot;The Test&quot;</span>));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span> }</pre>\n  </div>\n</div>\nIf you have any questions or thoughts about this code, please contact me. I want to grow this code over time, and feedback is very welcome. ","slug":"winforms-automation-extensions","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9el00106eulpde5554x"},{"title":"Getting Your NUnit Tests to Run as STA","id":"37","date":"2008-10-14T16:46:00.000Z","_content":"\nAs a follow-up to my recent post on my [Winforms Automation Extensisons](http://brian.genisio.org/2008/10/winforms-automation-extensions.html) post, I realized that I forgot to mention a very important detail.   \n\nIn many cases, WinForms require to be executed in a Single Threaded Apartment (STA). I write all of my tests in the TestDriven.NET test runner, which runs in the STA by default, but NUnit does not. Resharper also uses the NUnit test runner, so it also runs in MTA by default.   \n\nTo tell NUnit to run in the STA (and therefore, Resharper), you need to add some data to your app.config file. If you do not already have one, create a file in your test assembly called app.config. Add the following XML:   \n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">&lt;?</span><span style=\"color: #800000\">xml</span> <span style=\"color: #ff0000\">version</span><span style=\"color: #0000ff\">=&quot;1.0&quot;</span> <span style=\"color: #ff0000\">encoding</span><span style=\"color: #0000ff\">=&quot;utf-8&quot;</span> ?<span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">configuration</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>   <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">configSections</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">sectionGroup</span> <span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=&quot;NUnit&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>       <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">section</span> <span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=&quot;TestRunner&quot;</span> <span style=\"color: #ff0000\">type</span><span style=\"color: #0000ff\">=&quot;System.Configuration.NameValueSectionHandler&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">sectionGroup</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>   <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">configSections</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>   <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">NUnit</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TestRunner</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>       <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">add</span> <span style=\"color: #ff0000\">key</span><span style=\"color: #0000ff\">=&quot;ApartmentState&quot;</span> <span style=\"color: #ff0000\">value</span><span style=\"color: #0000ff\">=&quot;STA&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">TestRunner</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>   <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">NUnit</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span> <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">configuration</span><span style=\"color: #0000ff\">&gt;</span></pre>\n  </div>\n</div>\nPresto! Tests will run in the STA from now on. ","source":"_posts/2008-10-14-getting-your-nunit-tests-to-run-as-sta.md","raw":"---\ntitle: Getting Your NUnit Tests to Run as STA\nid: 37\ncategories:\n  - Uncategorized\ndate: 2008-10-14 12:46:00\ntags:\n---\n\nAs a follow-up to my recent post on my [Winforms Automation Extensisons](http://brian.genisio.org/2008/10/winforms-automation-extensions.html) post, I realized that I forgot to mention a very important detail.   \n\nIn many cases, WinForms require to be executed in a Single Threaded Apartment (STA). I write all of my tests in the TestDriven.NET test runner, which runs in the STA by default, but NUnit does not. Resharper also uses the NUnit test runner, so it also runs in MTA by default.   \n\nTo tell NUnit to run in the STA (and therefore, Resharper), you need to add some data to your app.config file. If you do not already have one, create a file in your test assembly called app.config. Add the following XML:   \n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">&lt;?</span><span style=\"color: #800000\">xml</span> <span style=\"color: #ff0000\">version</span><span style=\"color: #0000ff\">=&quot;1.0&quot;</span> <span style=\"color: #ff0000\">encoding</span><span style=\"color: #0000ff\">=&quot;utf-8&quot;</span> ?<span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">configuration</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>   <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">configSections</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">sectionGroup</span> <span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=&quot;NUnit&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>       <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">section</span> <span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=&quot;TestRunner&quot;</span> <span style=\"color: #ff0000\">type</span><span style=\"color: #0000ff\">=&quot;System.Configuration.NameValueSectionHandler&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">sectionGroup</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>   <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">configSections</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>   <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">NUnit</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TestRunner</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>       <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">add</span> <span style=\"color: #ff0000\">key</span><span style=\"color: #0000ff\">=&quot;ApartmentState&quot;</span> <span style=\"color: #ff0000\">value</span><span style=\"color: #0000ff\">=&quot;STA&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">TestRunner</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>   <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">NUnit</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span> <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">configuration</span><span style=\"color: #0000ff\">&gt;</span></pre>\n  </div>\n</div>\nPresto! Tests will run in the STA from now on. ","slug":"getting-your-nunit-tests-to-run-as-sta","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9en00126eulcj3xqsoj"},{"title":"GUI Testing Resources","id":"39","date":"2008-10-18T16:48:00.000Z","_content":"\nSo, I just gave my GUI Testing in .NET talk for the first time. I think it went pretty well. If you have any feedback, please feel free to comment or email me. I'd love to hear how to make the talk better.   \n\nI am providing the demo code and the talk slides. I have a few more posts on GUI Testing .NET apps that I wrote over the past few weeks. Please feel free to read what I have to say!   \n\n[Presentation Slides](http://bilzmoude.googlepages.com/TestingWinForms.pdf)   \n[Demo Code](http://bilzmoude.googlepages.com/RecipeBox.zip)","source":"_posts/2008-10-18-gui-testing-resources.md","raw":"---\ntitle: GUI Testing Resources\nid: 39\ncategories:\n  - Uncategorized\ndate: 2008-10-18 12:48:00\ntags:\n---\n\nSo, I just gave my GUI Testing in .NET talk for the first time. I think it went pretty well. If you have any feedback, please feel free to comment or email me. I'd love to hear how to make the talk better.   \n\nI am providing the demo code and the talk slides. I have a few more posts on GUI Testing .NET apps that I wrote over the past few weeks. Please feel free to read what I have to say!   \n\n[Presentation Slides](http://bilzmoude.googlepages.com/TestingWinForms.pdf)   \n[Demo Code](http://bilzmoude.googlepages.com/RecipeBox.zip)","slug":"gui-testing-resources","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ep00146eulkzez6gwu"},{"title":"My Year With TDD","id":"41","date":"2008-10-23T16:50:00.000Z","_content":"\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fmy-year-with-tdd.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fmy-year-with-tdd.html)   \n\nIt's been over a year now since I have been developing using TDD (Test Driven Development) as my primary development practice. I wanted to reflect on what it has done for me professionally. In reality, the past year has been great for my professional career in many ways. \n\nI started out in August of 2007 with what I THOUGHT was TDD. Sure, I wrote my tests before my code, but the philosophy behind it wasn't enough to be effective. It wasn't until I went to Boston for a 3-day seminar on TDD taught by [Rob Myers](http://www.netobjectives.com/bio-rob-myers) of [NetObjectives](http://www.netobjectives.com/) that I really understood the power and relevance of TDD. His challenge was simple -- Try it completely for 30 days. If you don't find the value in it, then move along and look for something else.\n\nSo, this is what I did. I spent 30 days practicing TDD the way Rob taught us. I followed the following algorithm:\n\n[![usb-cross](http://lh5.ggpht.com/Bilzmoude/SQEnDRlW46I/AAAAAAAAACQ/O82MfMyfz_0/usb-cross_thumb%5B1%5D.jpg?imgmax=800)](http://lh3.ggpht.com/Bilzmoude/SQEnDHyduNI/AAAAAAAAACM/jWzh3S0Rv7o/s1600-h/usb-cross[3].jpg) \n\n1.  Write a test2.  Watch it fail3.  Write the MINIMUM necessary to make it pass4.  Watch it go green5.  Refactor if necessary6.  Repeat  \n\nTo be honest, it was a real exercise in self control. I wanted to take shortcuts. I wanted to write some behavior while I was there, and write the tests afterwards. But I promised myself that I would stick through it and write all of my new code in this way. \n\nThe benefits were immediate and profound. My methods were smaller. My classes were cohesive. My design is more extensible. My code was more readable. My classes were not tightly coupled. My units were testable, and my tests ran fast. It was amazing how quickly the prophecies of TDD came true. \n\nAfter a year of this practice, I can honestly state that my code has less bugs. Moreover, when a bug is found in my code, I am able to write a new test immediately (due to the heightened testability of the code) that exercises the bug. Fixes happen quickly and I have a great deal of confidence that my fix doesn't break something else. I certainly can't say that about my legacy non-TDD code. \n\nIt is funny. I often feel like a born-again evangelical when it comes to TDD. Like a wide-eyed Christian who is eager to spread &quot;the good news&quot; every time somebody has a personal problem, I am quick to suggest TDD whenever I hear somebody talk about a coding problem. I am not the first (nor the last) to liken TDD to religion. It is fitting:\n\n&quot;For Kent Beck so loved the developers, that he gave his most precious tool (TDD), that whosoever believeth in it should not write legacy code, but have everlasting code.&quot; -- Agile 3:16\n\nAll kidding aside, TDD has really changed my professional life. In the past year, I have met many colleagues who share my beliefs and there is a real community out there. I have become so passionate about the topic that I am even giving public talks on testing and TDD. Without TDD, I would probably be stuck on the plateau where I sat -- stagnant and stale. TDD was the kick in the ass I needed to grow as a developer. \n\nLooking back, I couldn't be happier with my experience in Rob's class. He taught me what I was doing wrong, and helped me do it right. It takes someone who really KNOWS TDD to teach it to someone who doesn't. I would recommend this experience to any developer in a heartbeat.\n\nAmen","source":"_posts/2008-10-23-my-year-with-tdd.md","raw":"---\ntitle: My Year With TDD\nid: 41\ncategories:\n  - Uncategorized\ndate: 2008-10-23 12:50:00\ntags:\n---\n\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fmy-year-with-tdd.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fmy-year-with-tdd.html)   \n\nIt's been over a year now since I have been developing using TDD (Test Driven Development) as my primary development practice. I wanted to reflect on what it has done for me professionally. In reality, the past year has been great for my professional career in many ways. \n\nI started out in August of 2007 with what I THOUGHT was TDD. Sure, I wrote my tests before my code, but the philosophy behind it wasn't enough to be effective. It wasn't until I went to Boston for a 3-day seminar on TDD taught by [Rob Myers](http://www.netobjectives.com/bio-rob-myers) of [NetObjectives](http://www.netobjectives.com/) that I really understood the power and relevance of TDD. His challenge was simple -- Try it completely for 30 days. If you don't find the value in it, then move along and look for something else.\n\nSo, this is what I did. I spent 30 days practicing TDD the way Rob taught us. I followed the following algorithm:\n\n[![usb-cross](http://lh5.ggpht.com/Bilzmoude/SQEnDRlW46I/AAAAAAAAACQ/O82MfMyfz_0/usb-cross_thumb%5B1%5D.jpg?imgmax=800)](http://lh3.ggpht.com/Bilzmoude/SQEnDHyduNI/AAAAAAAAACM/jWzh3S0Rv7o/s1600-h/usb-cross[3].jpg) \n\n1.  Write a test2.  Watch it fail3.  Write the MINIMUM necessary to make it pass4.  Watch it go green5.  Refactor if necessary6.  Repeat  \n\nTo be honest, it was a real exercise in self control. I wanted to take shortcuts. I wanted to write some behavior while I was there, and write the tests afterwards. But I promised myself that I would stick through it and write all of my new code in this way. \n\nThe benefits were immediate and profound. My methods were smaller. My classes were cohesive. My design is more extensible. My code was more readable. My classes were not tightly coupled. My units were testable, and my tests ran fast. It was amazing how quickly the prophecies of TDD came true. \n\nAfter a year of this practice, I can honestly state that my code has less bugs. Moreover, when a bug is found in my code, I am able to write a new test immediately (due to the heightened testability of the code) that exercises the bug. Fixes happen quickly and I have a great deal of confidence that my fix doesn't break something else. I certainly can't say that about my legacy non-TDD code. \n\nIt is funny. I often feel like a born-again evangelical when it comes to TDD. Like a wide-eyed Christian who is eager to spread &quot;the good news&quot; every time somebody has a personal problem, I am quick to suggest TDD whenever I hear somebody talk about a coding problem. I am not the first (nor the last) to liken TDD to religion. It is fitting:\n\n&quot;For Kent Beck so loved the developers, that he gave his most precious tool (TDD), that whosoever believeth in it should not write legacy code, but have everlasting code.&quot; -- Agile 3:16\n\nAll kidding aside, TDD has really changed my professional life. In the past year, I have met many colleagues who share my beliefs and there is a real community out there. I have become so passionate about the topic that I am even giving public talks on testing and TDD. Without TDD, I would probably be stuck on the plateau where I sat -- stagnant and stale. TDD was the kick in the ass I needed to grow as a developer. \n\nLooking back, I couldn't be happier with my experience in Rob's class. He taught me what I was doing wrong, and helped me do it right. It takes someone who really KNOWS TDD to teach it to someone who doesn't. I would recommend this experience to any developer in a heartbeat.\n\nAmen","slug":"my-year-with-tdd","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9eq00166eulwmlra7z3"},{"title":"Build Your Own Spy Utility","id":"38","date":"2008-10-14T16:47:00.000Z","_content":"\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fbuild-your-own-spy-utility.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fbuild-your-own-spy-utility.html)   \n  <div>In support of my talk on Saturday, I wanted to publish another little bit of code that I have found extremely useful. There are a lot of spy utilities out there: Spy++, ManagedSpy, UISpy, etc. They all work OK, but I have found on many occasions that I wanted my spy utility to do X, Y or Z.    \n\nSo, I built my own spy utility. Start with this form, and add any spy functionality that you need to it. Here is the code:</div>  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 96.66%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; height: 426px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">using</span> System.Drawing;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">using</span> System.Windows.Forms;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> <span style=\"color: #0000ff\">namespace</span> RecipeBox.Tests.GUI_Tests</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Spy : Form</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>         <span style=\"color: #0000ff\">readonly</span> SplitContainer _splitContainer = <span style=\"color: #0000ff\">new</span> SplitContainer {Dock = DockStyle.Fill};</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>         <span style=\"color: #0000ff\">readonly</span> TreeView _controlTree = <span style=\"color: #0000ff\">new</span> TreeView {Dock = DockStyle.Fill};</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>         <span style=\"color: #0000ff\">readonly</span> PropertyGrid _properties = <span style=\"color: #0000ff\">new</span> PropertyGrid {Dock = DockStyle.Fill};</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>         <span style=\"color: #0000ff\">public</span> Spy()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>             Size = <span style=\"color: #0000ff\">new</span> Size(640, 480);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>             _splitContainer.Panel1.Controls.Add(_controlTree);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>             _splitContainer.Panel2.Controls.Add(_properties);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>             Controls.Add(_splitContainer);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>             _controlTree.NodeMouseClick += (sender, e) =&gt; _properties.SelectedObject = e.Node.Tag;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>         <span style=\"color: #0000ff\">public</span> Spy(Control rootControl) : <span style=\"color: #0000ff\">this</span>()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>             _controlTree.Nodes.Add(GetTreeNode(rootControl));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>         <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> TreeNode GetTreeNode(Control control)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span>             var node = <span style=\"color: #0000ff\">new</span> TreeNode(control + <span style=\"color: #006080\">&quot; (&quot;</span> + control.Name + <span style=\"color: #006080\">&quot;)&quot;</span>) {Tag = control};</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>             <span style=\"color: #0000ff\">foreach</span> (Control childControl <span style=\"color: #0000ff\">in</span> control.Controls)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>                 node.Nodes.Add(GetTreeNode(childControl));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span>             <span style=\"color: #0000ff\">return</span> node;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  32:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  33:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  34:</span> }</pre>\n  </div>\n</div>\n\n<div>And here is how you might use the custom spy: \n\n</div>\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [Test, Explicit]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Spy_On_TestForm()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     var testForm = <span style=\"color: #0000ff\">new</span> TestForm();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     testForm.Show();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>     var spy = <span style=\"color: #0000ff\">new</span> Spy(testForm);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>     spy.Show();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>     <span style=\"color: #0000ff\">while</span> (<span style=\"color: #0000ff\">true</span>)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>         Application.DoEvents();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span> }</pre>\n  </div>\n</div>\n\n<div>And this is what it looks like: </div>\n\n<div>[![](http://4.bp.blogspot.com/_28yJ_7iJX7o/SPVIMZzbCaI/AAAAAAAAABk/pXS48C0qVIM/s800/Spy.GIF)](http://4.bp.blogspot.com/_28yJ_7iJX7o/SPVIMZzbCaI/AAAAAAAAABk/pXS48C0qVIM/s1600-h/Spy.GIF)</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div>\n\n</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div></div>","source":"_posts/2008-10-14-build-your-own-spy-utility.md","raw":"---\ntitle: Build Your Own Spy Utility\nid: 38\ncategories:\n  - Uncategorized\ndate: 2008-10-14 12:47:00\ntags:\n---\n\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fbuild-your-own-spy-utility.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fbuild-your-own-spy-utility.html)   \n  <div>In support of my talk on Saturday, I wanted to publish another little bit of code that I have found extremely useful. There are a lot of spy utilities out there: Spy++, ManagedSpy, UISpy, etc. They all work OK, but I have found on many occasions that I wanted my spy utility to do X, Y or Z.    \n\nSo, I built my own spy utility. Start with this form, and add any spy functionality that you need to it. Here is the code:</div>  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 96.66%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; height: 426px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">using</span> System.Drawing;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">using</span> System.Windows.Forms;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> <span style=\"color: #0000ff\">namespace</span> RecipeBox.Tests.GUI_Tests</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Spy : Form</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>         <span style=\"color: #0000ff\">readonly</span> SplitContainer _splitContainer = <span style=\"color: #0000ff\">new</span> SplitContainer {Dock = DockStyle.Fill};</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>         <span style=\"color: #0000ff\">readonly</span> TreeView _controlTree = <span style=\"color: #0000ff\">new</span> TreeView {Dock = DockStyle.Fill};</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>         <span style=\"color: #0000ff\">readonly</span> PropertyGrid _properties = <span style=\"color: #0000ff\">new</span> PropertyGrid {Dock = DockStyle.Fill};</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>         <span style=\"color: #0000ff\">public</span> Spy()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>             Size = <span style=\"color: #0000ff\">new</span> Size(640, 480);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>             _splitContainer.Panel1.Controls.Add(_controlTree);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>             _splitContainer.Panel2.Controls.Add(_properties);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>             Controls.Add(_splitContainer);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>             _controlTree.NodeMouseClick += (sender, e) =&gt; _properties.SelectedObject = e.Node.Tag;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>         <span style=\"color: #0000ff\">public</span> Spy(Control rootControl) : <span style=\"color: #0000ff\">this</span>()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>             _controlTree.Nodes.Add(GetTreeNode(rootControl));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>         <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> TreeNode GetTreeNode(Control control)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span>             var node = <span style=\"color: #0000ff\">new</span> TreeNode(control + <span style=\"color: #006080\">&quot; (&quot;</span> + control.Name + <span style=\"color: #006080\">&quot;)&quot;</span>) {Tag = control};</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>             <span style=\"color: #0000ff\">foreach</span> (Control childControl <span style=\"color: #0000ff\">in</span> control.Controls)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>                 node.Nodes.Add(GetTreeNode(childControl));</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span>             <span style=\"color: #0000ff\">return</span> node;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  32:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  33:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  34:</span> }</pre>\n  </div>\n</div>\n\n<div>And here is how you might use the custom spy: \n\n</div>\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [Test, Explicit]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Spy_On_TestForm()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     var testForm = <span style=\"color: #0000ff\">new</span> TestForm();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     testForm.Show();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>     var spy = <span style=\"color: #0000ff\">new</span> Spy(testForm);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>     spy.Show();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>     <span style=\"color: #0000ff\">while</span> (<span style=\"color: #0000ff\">true</span>)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>         Application.DoEvents();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span> }</pre>\n  </div>\n</div>\n\n<div>And this is what it looks like: </div>\n\n<div>[![](http://4.bp.blogspot.com/_28yJ_7iJX7o/SPVIMZzbCaI/AAAAAAAAABk/pXS48C0qVIM/s800/Spy.GIF)](http://4.bp.blogspot.com/_28yJ_7iJX7o/SPVIMZzbCaI/AAAAAAAAABk/pXS48C0qVIM/s1600-h/Spy.GIF)</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div>\n\n</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div>&#160;</div>\n\n<div></div>","slug":"build-your-own-spy-utility","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ez00186euldh3bqmq3"},{"title":"PDC -- Microsoft Azure","id":"42","date":"2008-10-27T16:51:00.000Z","_content":"\nPDC has commenced. Herds of people flocked to the keynote where the topic was infrastructure. It may not be the most sexy of topics, but it is certainly the way that Microsoft is moving with their business plan. Specifically, they talked about their new cloud OS dubbed “Microsoft Azure”. Azure is going to be a scalable infrastructure for hosting cloud applications.   \n\nOne of the most interesting parts of this talk for me was the actual coding demo. They have included an embedded Azure simulator for debugging. It will let you develop your cloud app in your IDE without uploading it to their servers.   \n\nAnother important aspect of Azure is the ability to easily add more resources to your application. Whether it be ASP.NET or Silverlight, you will be able to run your app from their Azure cloud server and scale the resources as you see fit. Need to add resources for the Christmas season? No problem. In January, you can just reduce the resources assigned.   \n\nDeployment is another important aspect of the Azure system. It is very easy to deploy your application to their servers via a single upload. Because I am here at PDC, I will have access to the Azure server today. I think I will go sign up now!   ","source":"_posts/2008-10-27-pdc-microsoft-azure.md","raw":"---\ntitle: PDC -- Microsoft Azure\nid: 42\ncategories:\n  - Uncategorized\ndate: 2008-10-27 12:51:00\ntags:\n---\n\nPDC has commenced. Herds of people flocked to the keynote where the topic was infrastructure. It may not be the most sexy of topics, but it is certainly the way that Microsoft is moving with their business plan. Specifically, they talked about their new cloud OS dubbed “Microsoft Azure”. Azure is going to be a scalable infrastructure for hosting cloud applications.   \n\nOne of the most interesting parts of this talk for me was the actual coding demo. They have included an embedded Azure simulator for debugging. It will let you develop your cloud app in your IDE without uploading it to their servers.   \n\nAnother important aspect of Azure is the ability to easily add more resources to your application. Whether it be ASP.NET or Silverlight, you will be able to run your app from their Azure cloud server and scale the resources as you see fit. Need to add resources for the Christmas season? No problem. In January, you can just reduce the resources assigned.   \n\nDeployment is another important aspect of the Azure system. It is very easy to deploy your application to their servers via a single upload. Because I am here at PDC, I will have access to the Azure server today. I think I will go sign up now!   ","slug":"pdc-microsoft-azure","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9f2001a6eulqm1yfqc4"},{"title":"The Excitement that is C# 4.0","id":"43","date":"2008-10-28T04:53:00.000Z","_content":"\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fexcitement-that-is-c-40.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fexcitement-that-is-c-40.html)   \nI just got back from the &quot;Future of C#&quot; talk at PDC by Anders Hejlsberg. This was a truly inspiring talk for a geek like me. C# is evolving into a much more dynamic language. I have always been a believer of strong typing... except when I'm not... and I have been wishing for something more dynamic (such as Duck Typing). In C# 4.0, we will be seeing some significant dynamic features.   \n\nIn reality, the thing that has kept me away from using languages such as IronPython and IronRuby is their interoperability with strongly typed languages. I really believe in the concept of &quot;The right language for the job&quot;, but I hate the idea of sticking to that one language for the entire project. With the dynamic capabilities in C#, it will be MUCH easier to talk to Python or Ruby code. If I need to implement something really loosely (like a calculation engine), I will be able to jump into something loose. Then, when I want to work with that code in my more strongly typed environment, I will have that ability. The &quot;Right Language for the Job&quot; paradigm has just become much finer grained.   \n\nSo here are the details.   \n\n<span style=\"font-weight: bold\">Dynamic Keyword</span>   \nFirst and foremost is the <span style=\"font-weight: bold\">dynamic</span> keyword. This is kind of like using the <span style=\"font-weight: bold\">object</span> keyword, but you are saying that all of your binding will be at runtime. You will loose your intelisense, of course, but you will now be able to call into methods that have not been previously defined.   \n\nThe neat thing about this is that you can make your statically defined classes be dynamic by implementing the IDynamicObject interface, which allows you to have access to the late binding calls.   \n\n<span style=\"font-weight: bold\">Named and Optional Parameters</span>   \nNext is something that C++ has and C# has needed for a long time â€“ Optional Parameters. You can set defaults in your method declaration and the caller doesn't need to specify the parameters. In addition, you can name the parameters in the method calls. This is really great for readability... especially when you are passing a bool into a method that you have no idea what it does.   \n\n<span style=\"font-weight: bold\">Better COM Interoperability</span>   \nThese previous features (Optional and Named Parameters) are really useful to add to the new COM Interoperability features. Basically, pairing the dynamic and parameter features, talking to COM controls looks very natural.   \n\n<span style=\"font-weight: bold\">Covariants and Contravariants</span>   \nFinally, but certainly not least, we are getting covariance and contravariance. This is something that has bugged me since I have started with C#. Currently, if a method takes IEnumerable&lt;BaseType&gt;, you can't pass IEnumerable&lt;DerivedType&gt;. I Hate having to convert the derived set to a base set just to pass it in. In C# 4.0, this will be fixed.   \n\n<span style=\"font-weight: bold\">Looking Forward</span>   \nIn future version of C#, we will start to see hooks into the compiler. This will open the door for Domain Specific Languages (DSL) and Meta Programming. We will also see the C# compiler as an embedded service within .NET. This means that we can run Eval(&quot;doSomething()&quot;). It also means that we can start to think about embedding C# as a scripting language for our application... much like Javascript in the HTML DOM.   \n\nI am hoping to see C# 4.0 soon. Better yet, I am hoping to see C# 4.0 in the bits we get tomorrow!   ","source":"_posts/2008-10-28-the-excitement-that-is-c-4-0.md","raw":"---\ntitle: 'The Excitement that is C# 4.0'\nid: 43\ncategories:\n  - Uncategorized\ndate: 2008-10-28 00:53:00\ntags:\n---\n\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fexcitement-that-is-c-40.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f10%2fexcitement-that-is-c-40.html)   \nI just got back from the &quot;Future of C#&quot; talk at PDC by Anders Hejlsberg. This was a truly inspiring talk for a geek like me. C# is evolving into a much more dynamic language. I have always been a believer of strong typing... except when I'm not... and I have been wishing for something more dynamic (such as Duck Typing). In C# 4.0, we will be seeing some significant dynamic features.   \n\nIn reality, the thing that has kept me away from using languages such as IronPython and IronRuby is their interoperability with strongly typed languages. I really believe in the concept of &quot;The right language for the job&quot;, but I hate the idea of sticking to that one language for the entire project. With the dynamic capabilities in C#, it will be MUCH easier to talk to Python or Ruby code. If I need to implement something really loosely (like a calculation engine), I will be able to jump into something loose. Then, when I want to work with that code in my more strongly typed environment, I will have that ability. The &quot;Right Language for the Job&quot; paradigm has just become much finer grained.   \n\nSo here are the details.   \n\n<span style=\"font-weight: bold\">Dynamic Keyword</span>   \nFirst and foremost is the <span style=\"font-weight: bold\">dynamic</span> keyword. This is kind of like using the <span style=\"font-weight: bold\">object</span> keyword, but you are saying that all of your binding will be at runtime. You will loose your intelisense, of course, but you will now be able to call into methods that have not been previously defined.   \n\nThe neat thing about this is that you can make your statically defined classes be dynamic by implementing the IDynamicObject interface, which allows you to have access to the late binding calls.   \n\n<span style=\"font-weight: bold\">Named and Optional Parameters</span>   \nNext is something that C++ has and C# has needed for a long time â€“ Optional Parameters. You can set defaults in your method declaration and the caller doesn't need to specify the parameters. In addition, you can name the parameters in the method calls. This is really great for readability... especially when you are passing a bool into a method that you have no idea what it does.   \n\n<span style=\"font-weight: bold\">Better COM Interoperability</span>   \nThese previous features (Optional and Named Parameters) are really useful to add to the new COM Interoperability features. Basically, pairing the dynamic and parameter features, talking to COM controls looks very natural.   \n\n<span style=\"font-weight: bold\">Covariants and Contravariants</span>   \nFinally, but certainly not least, we are getting covariance and contravariance. This is something that has bugged me since I have started with C#. Currently, if a method takes IEnumerable&lt;BaseType&gt;, you can't pass IEnumerable&lt;DerivedType&gt;. I Hate having to convert the derived set to a base set just to pass it in. In C# 4.0, this will be fixed.   \n\n<span style=\"font-weight: bold\">Looking Forward</span>   \nIn future version of C#, we will start to see hooks into the compiler. This will open the door for Domain Specific Languages (DSL) and Meta Programming. We will also see the C# compiler as an embedded service within .NET. This means that we can run Eval(&quot;doSomething()&quot;). It also means that we can start to think about embedding C# as a scripting language for our application... much like Javascript in the HTML DOM.   \n\nI am hoping to see C# 4.0 soon. Better yet, I am hoping to see C# 4.0 in the bits we get tomorrow!   ","slug":"the-excitement-that-is-c-4-0","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9f5001c6eulbbmuz0f3"},{"title":"Focusing on Functional","id":"45","date":"2008-10-30T21:29:00.000Z","_content":"\nI have been toying with functional programming a bit lately. I have been using lambdas and Linq when it has made sense in my code. I downloaded the F# compiler tools and mucked around with it a tiny bit. I read a few blogs that talk about functional programming concepts, etc. I have enjoyed reading the elegance of the paradigm, but never really got into it much. \n\nBut then I sat in on an &quot;Open Space&quot; session where Scott Guthrie was talking. Most of it strayed from the standard &quot;Open Space&quot; format and was more of a Q&amp;A, but I guess this happens sometimes when big names show up. Anyways, one thing he said really stuck with me. It may not be a new idea, but it really resonated with me... I just hadn't thought about it this way before. \n\nHe said that in functional programming, you are declaring WHAT you want to do, instead of HOW you want to do it. In other words, in a functional language, you might describe a pattern to select from a collection (WHAT). In a more procedural language, you would do the same thing with a &quot;foreach&quot; loop (HOW). \n\nThis distinction isn't just semantic. It is extremely important for parallel programming. A loop is very hard to run in parallel since the compiler has a difficult time determining side effects. When you describe what you want done in a functional language, your compiler/framework CAN add parallelism. You let your tools figure out how to do the work in a parallel way. \n\nIt became clear to me that I need to take functional programming more seriously. Our hardware is no longer increasing in speed. Instead, the number of processors increase our computing power. If we can't figure out how to spread the work over multiple workers, we will never be able to take advantage of that power. \n\nFunctional languages have the potential to execute in parallel much more than procedural languages. I am making a promise to myself that I will become much more proficient in the functional paradigm. It seems to be the responsible thing to do.","source":"_posts/2008-10-30-focusing-on-functional.md","raw":"---\ntitle: Focusing on Functional\nid: 45\ncategories:\n  - Uncategorized\ndate: 2008-10-30 17:29:00\ntags:\n---\n\nI have been toying with functional programming a bit lately. I have been using lambdas and Linq when it has made sense in my code. I downloaded the F# compiler tools and mucked around with it a tiny bit. I read a few blogs that talk about functional programming concepts, etc. I have enjoyed reading the elegance of the paradigm, but never really got into it much. \n\nBut then I sat in on an &quot;Open Space&quot; session where Scott Guthrie was talking. Most of it strayed from the standard &quot;Open Space&quot; format and was more of a Q&amp;A, but I guess this happens sometimes when big names show up. Anyways, one thing he said really stuck with me. It may not be a new idea, but it really resonated with me... I just hadn't thought about it this way before. \n\nHe said that in functional programming, you are declaring WHAT you want to do, instead of HOW you want to do it. In other words, in a functional language, you might describe a pattern to select from a collection (WHAT). In a more procedural language, you would do the same thing with a &quot;foreach&quot; loop (HOW). \n\nThis distinction isn't just semantic. It is extremely important for parallel programming. A loop is very hard to run in parallel since the compiler has a difficult time determining side effects. When you describe what you want done in a functional language, your compiler/framework CAN add parallelism. You let your tools figure out how to do the work in a parallel way. \n\nIt became clear to me that I need to take functional programming more seriously. Our hardware is no longer increasing in speed. Instead, the number of processors increase our computing power. If we can't figure out how to spread the work over multiple workers, we will never be able to take advantage of that power. \n\nFunctional languages have the potential to execute in parallel much more than procedural languages. I am making a promise to myself that I will become much more proficient in the functional paradigm. It seems to be the responsible thing to do.","slug":"focusing-on-functional","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9f6001e6eulny6po1jx"},{"title":"Speaking at GLUG.NET Lansing","id":"44","date":"2008-11-02T22:26:00.000Z","_content":"\nI will be speaking at [GLUG.NET](javascript:void(0);/*1225681004271*/) Lansing on November 20th, 2008.&#160; My topic will be a talk I have given once before -- Castle Active Record (Don't Get Good at a CRUDy Job).&#160; Thanks to [Jeff McWherter](javascript:void(0);/*1225681105164*/) for signing me up for this gig.&#160; I look forward to meeting those in the Lansing area.   ","source":"_posts/2008-11-02-speaking-at-glug-net-lansing.md","raw":"---\ntitle: Speaking at GLUG.NET Lansing\nid: 44\ncategories:\n  - Uncategorized\ndate: 2008-11-02 17:26:00\ntags:\n---\n\nI will be speaking at [GLUG.NET](javascript:void(0);/*1225681004271*/) Lansing on November 20th, 2008.&#160; My topic will be a talk I have given once before -- Castle Active Record (Don't Get Good at a CRUDy Job).&#160; Thanks to [Jeff McWherter](javascript:void(0);/*1225681105164*/) for signing me up for this gig.&#160; I look forward to meeting those in the Lansing area.   ","slug":"speaking-at-glug-net-lansing","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9f7001g6eul6behtm8m"},{"title":"Writing Tests to Catch Memory Leaks in .NET","id":"46","date":"2008-11-11T22:30:00.000Z","_content":"\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f11%2fwriting-tests-to-catch-memory-leaks-in.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f11%2fwriting-tests-to-catch-memory-leaks-in.html)   \n\nAlthough Microsoft will claim that it is [&quot;not possible to have a memory leak in managed code&quot;](http://support.microsoft.com/kb/318263), most seasoned .NET developers will laugh at that statement.&#160; It turns out that it is very easy to leak memory -- just keep a referencing object around longer than the referenced object, and you can leak.&#160; There at least two tools on the market that are designed specifically to seek out memory leaks of this kind ([Scitech](http://memprofiler.com/) and [ANTS](http://www.red-gate.com/products/ants_profiler/index.htm)).\n\nThe most common case of this happens with events in C#.&#160; Take the following example:\n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Observable</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">delegate</span> <span style=\"color: #0000ff\">void</span> SomethingHappenedDelegate();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">event</span> SomethingHappenedDelegate SomethingHappened;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     <span style=\"color: #008000\">// Rest of the class</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span> }</pre>\n  </div>\n</div>\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Observer </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">readonly</span> Observable _observable;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     <span style=\"color: #0000ff\">public</span> Observer(Observable observable)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>         _observable = observable;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>         _observable.SomethingHappened += UhOh_SomethingHappened;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>     <span style=\"color: #0000ff\">void</span> UhOh_SomethingHappened()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>         <span style=\"color: #008000\">// Handle the event</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span> }</pre>\n  </div>\n</div>\n\nIn this example, the Observer class will hook the event on the Observable class during construction.&#160; Because of the way that events work in C#, the Observable object has a reference to the Observer.&#160; In the following example, the Observer will be alive (at least) as long as the Observable class is alive.&#160; For this reason, the following method will cause a memory leak:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> LeakAnObserver()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     var observer = <span style=\"color: #0000ff\">new</span> Observer(_observable);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> }</pre>\n  </div>\n</div>\n\nIn most cases, the Observer instance would be garbage collected as it went out of scope.&#160; Instead, since it is kept alive through the event handler of the Observable, we leak memory.\n\nThere is a pretty easy way to solve this.&#160; Simply unhook the event in the disposal event (actual &quot;Dispose Pattern&quot; removed for brevity).\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Observer : IDisposable</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     <span style=\"color: #008000\">// Existing code</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Dispose()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>         _observable.SomethingHappened -= UhOh_SomethingHappened;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span> }</pre>\n  </div>\n</div>\n\nGreat!&#160; Now, as long as we dispose the Observer, all references will be removed and the object will get garbage collected.&#160; Unfortunately, it is VERY easy to forget to call the Dispose method.&#160; I want to write some tests to make sure that these objects are garbage collected.\n\nThis is a tall order to fill.&#160; Having a reference to the object will cause it to stay alive.&#160; How do you ask an object if it is alive without actually having a reference to the object?&#160; This is where the WeakReference class comes in.&#160; It is a magical class that keeps a reference to an object without the garbage collector knowing about the reference.&#160; I wrote the following class to help me monitor and test if it still alive:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> LeakMonitor&lt;T&gt;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">readonly</span> WeakReference _reference;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     <span style=\"color: #0000ff\">public</span> LeakMonitor(T itemToWatch)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>         _reference = <span style=\"color: #0000ff\">new</span> WeakReference(itemToWatch);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">bool</span> ItemIsAlive()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>         GC.Collect();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>         GC.WaitForPendingFinalizers();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>         <span style=\"color: #0000ff\">return</span> _reference.IsAlive;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>     <span style=\"color: #0000ff\">public</span> T Item</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>         get</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>             <span style=\"color: #0000ff\">return</span> (T)_reference.Target;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span> }</pre>\n  </div>\n</div>\n\nHere are two examples of tests that illustrate the use of LeakMonitor.&#160; These are over-simplified unit test examples for this blog post, but you can see how this can be extended to integration and functional tests to verify that inner objects are not leaked.&#160; Be creative!\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [TestFixture]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> MemTests</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     <span style=\"color: #0000ff\">private</span> Observable _observable;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     [SetUp]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">virtual</span> <span style=\"color: #0000ff\">void</span> SetUp()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>         _observable = <span style=\"color: #0000ff\">new</span> Observable();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>     [Test]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Test_That_Observer_Leaks()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>         var monitor = <span style=\"color: #0000ff\">new</span> LeakMonitor&lt;Observer&gt;(LeakMemory());</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>         Assert.That(monitor.ItemIsAlive(), Is.True);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>     [Test]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Test_That_Disposing_Observer_Does_Not_Leak()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>         var monitor = <span style=\"color: #0000ff\">new</span> LeakMonitor&lt;Observer&gt;(LeakMemory());</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>         monitor.Item.Dispose();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>         Assert.That(monitor.ItemIsAlive(), Is.False);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>     <span style=\"color: #0000ff\">private</span> Observer LeakMemory()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span>         <span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">new</span> Observer(_observable);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  32:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  33:</span> }</pre>\n  </div>\n</div>","source":"_posts/2008-11-11-writing-tests-to-catch-memory-leaks-in-net.md","raw":"---\ntitle: Writing Tests to Catch Memory Leaks in .NET\nid: 46\ncategories:\n  - Uncategorized\ndate: 2008-11-11 17:30:00\ntags:\n---\n\n[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f11%2fwriting-tests-to-catch-memory-leaks-in.html)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fbrian.genisio.org%2f2008%2f11%2fwriting-tests-to-catch-memory-leaks-in.html)   \n\nAlthough Microsoft will claim that it is [&quot;not possible to have a memory leak in managed code&quot;](http://support.microsoft.com/kb/318263), most seasoned .NET developers will laugh at that statement.&#160; It turns out that it is very easy to leak memory -- just keep a referencing object around longer than the referenced object, and you can leak.&#160; There at least two tools on the market that are designed specifically to seek out memory leaks of this kind ([Scitech](http://memprofiler.com/) and [ANTS](http://www.red-gate.com/products/ants_profiler/index.htm)).\n\nThe most common case of this happens with events in C#.&#160; Take the following example:\n  <div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">   <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">     <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Observable</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">delegate</span> <span style=\"color: #0000ff\">void</span> SomethingHappenedDelegate();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">event</span> SomethingHappenedDelegate SomethingHappened;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     <span style=\"color: #008000\">// Rest of the class</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span> }</pre>\n  </div>\n</div>\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Observer </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">readonly</span> Observable _observable;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     <span style=\"color: #0000ff\">public</span> Observer(Observable observable)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>         _observable = observable;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>         _observable.SomethingHappened += UhOh_SomethingHappened;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>     <span style=\"color: #0000ff\">void</span> UhOh_SomethingHappened()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>         <span style=\"color: #008000\">// Handle the event</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span> }</pre>\n  </div>\n</div>\n\nIn this example, the Observer class will hook the event on the Observable class during construction.&#160; Because of the way that events work in C#, the Observable object has a reference to the Observer.&#160; In the following example, the Observer will be alive (at least) as long as the Observable class is alive.&#160; For this reason, the following method will cause a memory leak:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> LeakAnObserver()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     var observer = <span style=\"color: #0000ff\">new</span> Observer(_observable);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span> }</pre>\n  </div>\n</div>\n\nIn most cases, the Observer instance would be garbage collected as it went out of scope.&#160; Instead, since it is kept alive through the event handler of the Observable, we leak memory.\n\nThere is a pretty easy way to solve this.&#160; Simply unhook the event in the disposal event (actual &quot;Dispose Pattern&quot; removed for brevity).\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> Observer : IDisposable</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     <span style=\"color: #008000\">// Existing code</span></pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Dispose()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>         _observable.SomethingHappened -= UhOh_SomethingHappened;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span> }</pre>\n  </div>\n</div>\n\nGreat!&#160; Now, as long as we dispose the Observer, all references will be removed and the object will get garbage collected.&#160; Unfortunately, it is VERY easy to forget to call the Dispose method.&#160; I want to write some tests to make sure that these objects are garbage collected.\n\nThis is a tall order to fill.&#160; Having a reference to the object will cause it to stay alive.&#160; How do you ask an object if it is alive without actually having a reference to the object?&#160; This is where the WeakReference class comes in.&#160; It is a magical class that keeps a reference to an object without the garbage collector knowing about the reference.&#160; I wrote the following class to help me monitor and test if it still alive:\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> LeakMonitor&lt;T&gt;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span>     <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">readonly</span> WeakReference _reference;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>     <span style=\"color: #0000ff\">public</span> LeakMonitor(T itemToWatch)</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>         _reference = <span style=\"color: #0000ff\">new</span> WeakReference(itemToWatch);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">bool</span> ItemIsAlive()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>         GC.Collect();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>         GC.WaitForPendingFinalizers();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>         <span style=\"color: #0000ff\">return</span> _reference.IsAlive;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>     <span style=\"color: #0000ff\">public</span> T Item</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>         get</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>         {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>             <span style=\"color: #0000ff\">return</span> (T)_reference.Target;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>         }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span> }</pre>\n  </div>\n</div>\n\nHere are two examples of tests that illustrate the use of LeakMonitor.&#160; These are over-simplified unit test examples for this blog post, but you can see how this can be extended to integration and functional tests to verify that inner objects are not leaked.&#160; Be creative!\n\n<div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\">\n  <div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\">\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   1:</span> [TestFixture]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   2:</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> MemTests</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   3:</span> {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   4:</span>     <span style=\"color: #0000ff\">private</span> Observable _observable;</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   5:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   6:</span>     [SetUp]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   7:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">virtual</span> <span style=\"color: #0000ff\">void</span> SetUp()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   8:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">   9:</span>         _observable = <span style=\"color: #0000ff\">new</span> Observable();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  10:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  11:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  12:</span>     [Test]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  13:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Test_That_Observer_Leaks()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  14:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  15:</span>         var monitor = <span style=\"color: #0000ff\">new</span> LeakMonitor&lt;Observer&gt;(LeakMemory());</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  16:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  17:</span>         Assert.That(monitor.ItemIsAlive(), Is.True);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  18:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  19:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  20:</span>     [Test]</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  21:</span>     <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> Test_That_Disposing_Observer_Does_Not_Leak()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  22:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  23:</span>         var monitor = <span style=\"color: #0000ff\">new</span> LeakMonitor&lt;Observer&gt;(LeakMemory());</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  24:</span>         monitor.Item.Dispose();</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  25:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  26:</span>         Assert.That(monitor.ItemIsAlive(), Is.False);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  27:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  28:</span>&#160; </pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  29:</span>     <span style=\"color: #0000ff\">private</span> Observer LeakMemory()</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  30:</span>     {</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  31:</span>         <span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">new</span> Observer(_observable);</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  32:</span>     }</pre>\n\n    <pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\">  33:</span> }</pre>\n  </div>\n</div>","slug":"writing-tests-to-catch-memory-leaks-in-net","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9f9001i6eulb6vx4v1c"},{"title":"Registered for CodeMash '09","id":"48","date":"2008-11-17T22:33:00.000Z","_content":"\n[![CodeMash](https://www.codemash.org/images/bloggerbadge2008.gif)](javascript:void(0);/*1226945716395*/) It is official.&#160; I have registered for CodeMash '09.&#160; I have been told that this is the single-most important conference to go to.&#160; Many people have told me this.&#160; I have also been told that all the cool kids will be there.&#160; In fact, almost everyone I know in the community is planning to go...I HAVE to see what all the hype is about.   \n\nThe neat thing about this conference is how focused it is on being unfocused.&#160; There are a ton of languages and platforms being talked about... lots of hands-on labs... Open Spaces, etc.&#160; Anything goes.&#160; It seems really interesting, actually.   \n\nSo I am hitting this conference on my own dime.&#160; I am taking 3 days off work and heading down to Sandusky, Ohio in early January&#160; (7-9) for this nerdfest.&#160; \n\nThe only question I have now, is... Are YOU going?   ","source":"_posts/2008-11-17-registered-for-codemash-09.md","raw":"---\ntitle: \"Registered for CodeMash '09\"\nid: 48\ncategories:\n  - Uncategorized\ndate: 2008-11-17 17:33:00\ntags:\n---\n\n[![CodeMash](https://www.codemash.org/images/bloggerbadge2008.gif)](javascript:void(0);/*1226945716395*/) It is official.&#160; I have registered for CodeMash '09.&#160; I have been told that this is the single-most important conference to go to.&#160; Many people have told me this.&#160; I have also been told that all the cool kids will be there.&#160; In fact, almost everyone I know in the community is planning to go...I HAVE to see what all the hype is about.   \n\nThe neat thing about this conference is how focused it is on being unfocused.&#160; There are a ton of languages and platforms being talked about... lots of hands-on labs... Open Spaces, etc.&#160; Anything goes.&#160; It seems really interesting, actually.   \n\nSo I am hitting this conference on my own dime.&#160; I am taking 3 days off work and heading down to Sandusky, Ohio in early January&#160; (7-9) for this nerdfest.&#160; \n\nThe only question I have now, is... Are YOU going?   ","slug":"registered-for-codemash-09","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9fa001k6eulcsa7dofp"},{"title":"Testing WCF Service Apps (Part 0 of 4)","id":"49","date":"2008-11-18T22:33:00.000Z","_content":"\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2FHouseOfBilz%2Farchive%2F2008%2F11%2F18%2Ftesting-wcf-service-apps-part-0-of-4.aspx)](http://dotnetshoutout.com/Testing-WCF-Services)   \n\nWhen you are writing automated tests for your application, it is important that the tests do not rely on the file system or external services.&#160; The only problem is that when you write applications using WCF, you are writing code that relies on external services.&#160; It is very tempting to create service references in your test DLL and test against them, but please refrain.&#160; There is a better way, I promise!\n\nThis series will focus on testing every part of your application -- including round-trip functional tests -- without employing the WCF framework directly.&#160; We need to remember that the WCF framework is code that we do not control.&#160; We need to trust that it does what it claims to and focus on our code directly.&#160; In addition, the WCF framework is configurable via XML files, so we don't need to worry about having configuration working directly.&#160; Writing tests for your code needs to be about your code, not the WCF framework.\n\nSo, let's look at the application that I am using in this series.&#160; I have a WCF service named RecipeBoxService that stores and retrieves recipes.&#160; The service is used as a back end for many possible clients: WinForms, ASP.NET, MVC, Silverlight, etc.&#160; In this series, I will be writing a data mining application to demonstrate the testing techniques.\n\n&#160;[![RecipeBox](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/TestingWCFServiceAppsPart1of4_13D06/RecipeBox_thumb.png)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/TestingWCFServiceAppsPart1of4_13D06/RecipeBox_2.png)\n\nThis post is just the introduction.&#160; The actual parts will be laid out something like this:\n\n1.  [Testing the WCF service](http://geekswithblogs.net/HouseOfBilz/archive/2008/11/24/testing-wcf-service-apps-part-1-of-4.aspx)2.  [Testing the synchronous client](http://houseofbilz.com/archive/2008/11/29/testing-wcf-service-apps-part-2-of-4.aspx)3.  [Testing the asynchronous client](http://www.houseofbilz.com/archive/2008/12/19/testing-wcf-service-apps-part-3-of-4.aspx)4.  [Functional testing front-to-back](http://www.houseofbilz.com/archive/2009/01/05/testing-wcf-service-apps-part-4-of-4.aspx)","source":"_posts/2008-11-18-testing-wcf-service-apps-part-0-of-4.md","raw":"---\ntitle: Testing WCF Service Apps (Part 0 of 4)\nid: 49\ncategories:\n  - Uncategorized\ndate: 2008-11-18 17:33:00\ntags:\n---\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2FHouseOfBilz%2Farchive%2F2008%2F11%2F18%2Ftesting-wcf-service-apps-part-0-of-4.aspx)](http://dotnetshoutout.com/Testing-WCF-Services)   \n\nWhen you are writing automated tests for your application, it is important that the tests do not rely on the file system or external services.&#160; The only problem is that when you write applications using WCF, you are writing code that relies on external services.&#160; It is very tempting to create service references in your test DLL and test against them, but please refrain.&#160; There is a better way, I promise!\n\nThis series will focus on testing every part of your application -- including round-trip functional tests -- without employing the WCF framework directly.&#160; We need to remember that the WCF framework is code that we do not control.&#160; We need to trust that it does what it claims to and focus on our code directly.&#160; In addition, the WCF framework is configurable via XML files, so we don't need to worry about having configuration working directly.&#160; Writing tests for your code needs to be about your code, not the WCF framework.\n\nSo, let's look at the application that I am using in this series.&#160; I have a WCF service named RecipeBoxService that stores and retrieves recipes.&#160; The service is used as a back end for many possible clients: WinForms, ASP.NET, MVC, Silverlight, etc.&#160; In this series, I will be writing a data mining application to demonstrate the testing techniques.\n\n&#160;[![RecipeBox](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/TestingWCFServiceAppsPart1of4_13D06/RecipeBox_thumb.png)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/TestingWCFServiceAppsPart1of4_13D06/RecipeBox_2.png)\n\nThis post is just the introduction.&#160; The actual parts will be laid out something like this:\n\n1.  [Testing the WCF service](http://geekswithblogs.net/HouseOfBilz/archive/2008/11/24/testing-wcf-service-apps-part-1-of-4.aspx)2.  [Testing the synchronous client](http://houseofbilz.com/archive/2008/11/29/testing-wcf-service-apps-part-2-of-4.aspx)3.  [Testing the asynchronous client](http://www.houseofbilz.com/archive/2008/12/19/testing-wcf-service-apps-part-3-of-4.aspx)4.  [Functional testing front-to-back](http://www.houseofbilz.com/archive/2009/01/05/testing-wcf-service-apps-part-4-of-4.aspx)","slug":"testing-wcf-service-apps-part-0-of-4","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9fc001m6eulw6bbmq1v"},{"title":"Update for the ActiveRecord \"Mock\" Framework","id":"47","date":"2008-11-14T22:31:00.000Z","_content":"\nBack in July, I posted an article on how to [mock out the database in ActiveRecord](http://www.houseofbilz.com/archive/2008/07/22/active-record-mock-framework.aspx).&#160; The approach is simple, but is not mocking in the strict sense.&#160; I use SQLite in &quot;memory&quot; mode, creating a temporal database for testing.&#160; My colleague, [Jay Harris](http://www.cptloadtest.com/), has updated my code to allow for configuration in two ways.&#160; He has preserved my &quot;drop-in&quot; mode via the &quot;useDynamicConfiguration&quot; flag but when the flag is false, you can use a configuration from the app.config file. \n\nHere is the newest version of the code:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:404a40ca-5332-4e06-bfd1-5faf4b472e82\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> System;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> System.Collections;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> System.Data;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> System.Reflection;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> Castle.ActiveRecord;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> Castle.ActiveRecord.Framework;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> Castle.ActiveRecord.Framework.Config;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> NHibernate.Connection;  \n\n</span><span style=\"color: #0000FF;\">namespace</span><span style=\"color: #000000;\"> ActiveRecordTestHelper  \n{  \n  </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ActiveRecordMockConnectionProvider : DriverConnectionProvider  \n  {  \n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> IDbConnection _connection;  \n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> IConfigurationSource MockConfiguration  \n    {  \n      </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">  \n      {  \n        var properties </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Hashtable  \n            {  \n              {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">hibernate.connection.driver_class</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,  \n                </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">NHibernate.Driver.SQLite20Driver</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">},  \n              {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">hibernate.dialect</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">NHibernate.Dialect.SQLiteDialect</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">},  \n              {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">hibernate.connection.provider</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ConnectionProviderLocator},  \n              {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">hibernate.connection.connection_string</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,  \n                </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data Source=:memory:;Version=3;New=True;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}  \n            };  \n\n        var source </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> InPlaceConfigurationSource();  \n        source.Add(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\"> (ActiveRecordBase), properties);  \n\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> source;  \n      }  \n    }  \n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> ConnectionProviderLocator  \n    {  \n      </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> String.Format(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">{0}, {1}</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, TypeOfEnclosingClass.FullName,  \n                                    EnclosingAssemblyName.Split(</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">,</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]); }  \n    }  \n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> Type TypeOfEnclosingClass  \n    {  \n      </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> MethodBase.GetCurrentMethod().DeclaringType; }  \n    }  \n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> EnclosingAssemblyName  \n    {  \n      </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> Assembly.GetAssembly(TypeOfEnclosingClass).FullName; }  \n    }  \n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">override</span><span style=\"color: #000000;\"> IDbConnection GetConnection()  \n    {  \n      </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (_connection </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)  \n        _connection </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">base</span><span style=\"color: #000000;\">.GetConnection();  \n\n      </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> _connection;  \n    }  \n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">override</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> CloseConnection(IDbConnection conn) {}  \n\n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;summary&gt;</span><span style=\"color: #008000;\"> \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> Destroys the connection that is kept open in order to keep the  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> in-memory database alive. Destroying the connection will destroy  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> all of the data stored in the mock database. Call this method when  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> the test is complete.  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;/summary&gt;</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">\n</span><span style=\"color: #000000;\">    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> ExplicitlyDestroyConnection()  \n    {  \n      </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (_connection </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)  \n      {  \n        _connection.Close();  \n        _connection </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">;  \n      }  \n    }  \n\n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;summary&gt;</span><span style=\"color: #008000;\"> \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> Initializes ActiveRecord and the Database that ActiveRecord uses to  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> store the data. Call this method before the test executes.  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;/summary&gt;</span><span style=\"color: #008000;\">\n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;param name=\"useDynamicConfiguration\"&gt;</span><span style=\"color: #008000;\"> \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> Use reflection to build configuration, rather than the Configuration  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> file.  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;/param&gt;</span><span style=\"color: #008000;\"> \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;param name=\"types\"&gt;</span><span style=\"color: #008000;\">  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> A list of ActiveRecord types that will be created in the database  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;/param&gt;</span><span style=\"color: #008000;\">  </span><span style=\"color: #808080;\">\n</span><span style=\"color: #000000;\">    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> InitializeActiveRecord(</span><span style=\"color: #0000FF;\">bool</span><span style=\"color: #000000;\"> useDynamicConfiguration,  \n                                              </span><span style=\"color: #0000FF;\">params</span><span style=\"color: #000000;\"> Type[] types)  \n    {  \n      ActiveRecordStarter.ResetInitializationFlag();  \n      IConfigurationSource configurationSource </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> useDynamicConfiguration  \n                                       </span><span style=\"color: #000000;\">?</span><span style=\"color: #000000;\"> MockConfiguration  \n                                       : ActiveRecordSectionHandler.Instance;  \n      ActiveRecordStarter.Initialize(configurationSource, types);  \n      ActiveRecordStarter.CreateSchema();  \n    }  \n\n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;summary&gt;</span><span style=\"color: #008000;\"> \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> Initializes ActiveRecord and the Database that ActiveRecord uses to  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> store the data based. Configuration is dynamically generated using  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> reflection. Call this method before the test executes.  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;/summary&gt;</span><span style=\"color: #008000;\">  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;param name=\"types\"&gt;</span><span style=\"color: #008000;\"> \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> A list of ActiveRecord types that will be created in the database  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;/param&gt;</span><span style=\"color: #008000;\">  </span><span style=\"color: #808080;\">\n</span><span style=\"color: #000000;\">    [Obsolete(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Use InitializeActiveRecord(bool, params Type[])</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]  \n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> InitializeActiveRecord(</span><span style=\"color: #0000FF;\">params</span><span style=\"color: #000000;\"> Type[] types)  \n    {  \n      InitializeActiveRecord(</span><span style=\"color: #0000FF;\">true</span><span style=\"color: #000000;\">, types);  \n    }  \n  }  \n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nIt can be downloaded from [Jay's site](http://www.cptloadtest.com/2008/10/30/UnitTestingActiveRecordApplicationsUsingMockDatabases.aspx): [ActiveRecordMockConfigurationProvider.zip](http://www.cptloadtest.com/ct.ashx?id=31b3c96d-5f73-4a20-bc3c-c155b5238071&amp;url=http%3a%2f%2fwww.cptloadtest.com%2fcontent%2fbinary%2fActiveRecordMockConnectionProvider.zip)","source":"_posts/2008-11-14-update-for-the-activerecord-mock-framework.md","raw":"---\ntitle: 'Update for the ActiveRecord \"Mock\" Framework'\nid: 47\ncategories:\n  - Uncategorized\ndate: 2008-11-14 17:31:00\ntags:\n---\n\nBack in July, I posted an article on how to [mock out the database in ActiveRecord](http://www.houseofbilz.com/archive/2008/07/22/active-record-mock-framework.aspx).&#160; The approach is simple, but is not mocking in the strict sense.&#160; I use SQLite in &quot;memory&quot; mode, creating a temporal database for testing.&#160; My colleague, [Jay Harris](http://www.cptloadtest.com/), has updated my code to allow for configuration in two ways.&#160; He has preserved my &quot;drop-in&quot; mode via the &quot;useDynamicConfiguration&quot; flag but when the flag is false, you can use a configuration from the app.config file. \n\nHere is the newest version of the code:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:404a40ca-5332-4e06-bfd1-5faf4b472e82\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> System;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> System.Collections;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> System.Data;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> System.Reflection;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> Castle.ActiveRecord;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> Castle.ActiveRecord.Framework;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> Castle.ActiveRecord.Framework.Config;  \n</span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> NHibernate.Connection;  \n\n</span><span style=\"color: #0000FF;\">namespace</span><span style=\"color: #000000;\"> ActiveRecordTestHelper  \n{  \n  </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ActiveRecordMockConnectionProvider : DriverConnectionProvider  \n  {  \n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> IDbConnection _connection;  \n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> IConfigurationSource MockConfiguration  \n    {  \n      </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">  \n      {  \n        var properties </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Hashtable  \n            {  \n              {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">hibernate.connection.driver_class</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,  \n                </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">NHibernate.Driver.SQLite20Driver</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">},  \n              {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">hibernate.dialect</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">NHibernate.Dialect.SQLiteDialect</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">},  \n              {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">hibernate.connection.provider</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ConnectionProviderLocator},  \n              {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">hibernate.connection.connection_string</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,  \n                </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data Source=:memory:;Version=3;New=True;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}  \n            };  \n\n        var source </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> InPlaceConfigurationSource();  \n        source.Add(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\"> (ActiveRecordBase), properties);  \n\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> source;  \n      }  \n    }  \n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> ConnectionProviderLocator  \n    {  \n      </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> String.Format(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">{0}, {1}</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, TypeOfEnclosingClass.FullName,  \n                                    EnclosingAssemblyName.Split(</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">,</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]); }  \n    }  \n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> Type TypeOfEnclosingClass  \n    {  \n      </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> MethodBase.GetCurrentMethod().DeclaringType; }  \n    }  \n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> EnclosingAssemblyName  \n    {  \n      </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> Assembly.GetAssembly(TypeOfEnclosingClass).FullName; }  \n    }  \n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">override</span><span style=\"color: #000000;\"> IDbConnection GetConnection()  \n    {  \n      </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (_connection </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)  \n        _connection </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">base</span><span style=\"color: #000000;\">.GetConnection();  \n\n      </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> _connection;  \n    }  \n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">override</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> CloseConnection(IDbConnection conn) {}  \n\n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;summary&gt;</span><span style=\"color: #008000;\"> \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> Destroys the connection that is kept open in order to keep the  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> in-memory database alive. Destroying the connection will destroy  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> all of the data stored in the mock database. Call this method when  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> the test is complete.  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;/summary&gt;</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">\n</span><span style=\"color: #000000;\">    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> ExplicitlyDestroyConnection()  \n    {  \n      </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (_connection </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)  \n      {  \n        _connection.Close();  \n        _connection </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">;  \n      }  \n    }  \n\n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;summary&gt;</span><span style=\"color: #008000;\"> \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> Initializes ActiveRecord and the Database that ActiveRecord uses to  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> store the data. Call this method before the test executes.  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;/summary&gt;</span><span style=\"color: #008000;\">\n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;param name=\"useDynamicConfiguration\"&gt;</span><span style=\"color: #008000;\"> \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> Use reflection to build configuration, rather than the Configuration  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> file.  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;/param&gt;</span><span style=\"color: #008000;\"> \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;param name=\"types\"&gt;</span><span style=\"color: #008000;\">  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> A list of ActiveRecord types that will be created in the database  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;/param&gt;</span><span style=\"color: #008000;\">  </span><span style=\"color: #808080;\">\n</span><span style=\"color: #000000;\">    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> InitializeActiveRecord(</span><span style=\"color: #0000FF;\">bool</span><span style=\"color: #000000;\"> useDynamicConfiguration,  \n                                              </span><span style=\"color: #0000FF;\">params</span><span style=\"color: #000000;\"> Type[] types)  \n    {  \n      ActiveRecordStarter.ResetInitializationFlag();  \n      IConfigurationSource configurationSource </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> useDynamicConfiguration  \n                                       </span><span style=\"color: #000000;\">?</span><span style=\"color: #000000;\"> MockConfiguration  \n                                       : ActiveRecordSectionHandler.Instance;  \n      ActiveRecordStarter.Initialize(configurationSource, types);  \n      ActiveRecordStarter.CreateSchema();  \n    }  \n\n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;summary&gt;</span><span style=\"color: #008000;\"> \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> Initializes ActiveRecord and the Database that ActiveRecord uses to  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> store the data based. Configuration is dynamically generated using  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> reflection. Call this method before the test executes.  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;/summary&gt;</span><span style=\"color: #008000;\">  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;param name=\"types\"&gt;</span><span style=\"color: #008000;\"> \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> A list of ActiveRecord types that will be created in the database  \n    </span><span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> </span><span style=\"color: #808080;\">&lt;/param&gt;</span><span style=\"color: #008000;\">  </span><span style=\"color: #808080;\">\n</span><span style=\"color: #000000;\">    [Obsolete(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Use InitializeActiveRecord(bool, params Type[])</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]  \n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> InitializeActiveRecord(</span><span style=\"color: #0000FF;\">params</span><span style=\"color: #000000;\"> Type[] types)  \n    {  \n      InitializeActiveRecord(</span><span style=\"color: #0000FF;\">true</span><span style=\"color: #000000;\">, types);  \n    }  \n  }  \n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nIt can be downloaded from [Jay's site](http://www.cptloadtest.com/2008/10/30/UnitTestingActiveRecordApplicationsUsingMockDatabases.aspx): [ActiveRecordMockConfigurationProvider.zip](http://www.cptloadtest.com/ct.ashx?id=31b3c96d-5f73-4a20-bc3c-c155b5238071&amp;url=http%3a%2f%2fwww.cptloadtest.com%2fcontent%2fbinary%2fActiveRecordMockConnectionProvider.zip)","slug":"update-for-the-activerecord-mock-framework","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ff001o6eulyn2rjbkm"},{"title":"Testing WCF Service Apps (Part 2 of 4)","id":"51","date":"2008-11-29T22:35:00.000Z","_content":"\nPrevious posts:    \n[Part 0 of 4: Introduction](http://houseofbilz.com/HouseOfBilz/archive/2008/11/18/testing-wcf-service-apps-part-0-of-4.aspx)     \n[Part 1 of 4: Testing the Service](http://houseofbilz.com/archive/2008/11/24/testing-wcf-service-apps-part-1-of-4.aspx)     \n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2FHouseOfBilz%2Farchive%2F2008%2F11%2F18%2Ftesting-wcf-service-apps-part-0-of-4.aspx)](http://dotnetshoutout.com/Testing-WCF-Services) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2008%2f11%2f29%2ftesting-wcf-service-apps-part-2-of-4.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2008%2f11%2f29%2ftesting-wcf-service-apps-part-2-of-4.aspx)\n\n### **Testing the Client**\n\nSo far, I outlined how to test your WCF service.&#160; I simply took advantage or the WCF architecture and tested the service directly outside of the actual service harness.&#160; Now I need to set my sights on the client.&#160; This becomes a bit more difficult, but I wouldn't say that it is necessarily hard.&#160; I will start by giving a typical textbook example of hooking up to our service, and then I will tell you what is wrong with it.&#160; I will continue by modifying the code to be more testable so that the service can be mocked.&#160; \n\n### **A Textbook Example**\n\nMost WCF tutorials and books have you start by adding a service reference to your service.&#160; Doing this will generate a proxy client that you can use in your application.&#160; My client application is a very simple data mining application.&#160; You can give it the ingredient name and the application will return all recipes that include the ingredient of choice.&#160; The first step is creating the service reference.&#160; Right-click on the project and select &quot;Add Service Reference&quot;.\n\n[![AddServiceReference](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/TestingWCFServiceAppsPart2of4_8A59/AddServiceReference_thumb.gif)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/TestingWCFServiceAppsPart2of4_8A59/AddServiceReference_2.gif) \n\nOnce the service has been added, I can use it in my code:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:cabbd96d-8ff9-4a13-a648-cb34f4477913\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> IngredientFinder\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> IEnumerable</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> GetRecipes(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> ingredientName)\n    {\n        var recipeService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeBoxServiceClient();\n\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> from recipe </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> recipeService.AllRecipes() \n               </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> recipe.ContainsIngredient(ingredientName) \n               select recipe;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis is all I need to get my app up and running. My main function just calls into this code and prints the results.&#160; There is, however, one major flaw with this code: **it is not testable!**&#160; This is because if I were to instantiate an instance of IngredientFinder, I would be required to hook up to a WCF service via the RecipeBoxServiceClient.&#160; Technically I could write this code but I wouldn't recommend it.&#160; For one, it requires a lot of setup to harness the service.&#160; Secondly, it drifts away from being a unit test and becomes more of a functional or integration test (more on this in part 4).&#160; Thirdly, you can't always assume that you control the service.&#160; Assume, for instance, that you are writing an application that connects to a service like Twitter.&#160; You certainly don't want your unit tests hitting the only instance of the service: the live one.\n\nWe need to do something about this...\n\n### Making it Testable\n\nIf you were to inspect the RecipeBoxServiceClient class that was generated for you from the service specification, you would find one very important detail:&#160; RecipeBoxServiceClient implements the auto-generated interface IRecipeBoxService.&#160; Let us make a modification to the IngredientFinder to make it testable:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:d02efa0b-32d8-4786-861b-1ab4a13a10c3\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> IngredientFinder\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> IRecipeBoxService _recipeService;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> IngredientFinder(IRecipeBoxService recipeService)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(recipeService </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">) </span><span style=\"color: #0000FF;\">throw</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ArgumentNullException(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">recipeService</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        _recipeService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipeService;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> IEnumerable</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> GetRecipes(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> ingredientName)\n    {\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> from recipe </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> _recipeService.AllRecipes() \n               </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> recipe.ContainsIngredient(ingredientName) \n               select recipe;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis is a classic example of dependency injection.&#160; The user of the class (in our case, the main method) is now responsible for defining the service to use.&#160; This way, the IngredientFinder doesn't need to know anything about the connection details.&#160; In addition, I can write tests that mock out the service completely.\n\n### **Writing Tests Against the Client**\n\nIn my example, I am using [Rhino Mocks](http://ayende.com/projects/rhino-mocks.aspx), but you can use any mock/fake/stub framework/method you wish. \n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:53be3351-f34e-4891-a8de-9b84d33b5c0a\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[TestFixture]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> TestIngredientFinder\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> MockRepository _mocks;\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> IRecipeBoxService _mockService;\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> IngredientFinder _finder;\n\n    [SetUp]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetUp()\n    {\n        _mocks </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> MockRepository();\n        _mockService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> _mocks.CreateMock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IRecipeBoxService</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        _finder </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientFinder(_mockService);\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_IngredientFinder_With_Cheese()\n    {\n        Expect.Call(_mockService.AllRecipes()).\n            Return(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">[] {Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)});\n        _mocks.ReplayAll();        \n\n        var recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> _finder.GetRecipes(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToArray();\n\n        Assert.That(recipes.Length, Is.EqualTo(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n        Assert.That(recipes[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_IngredientFinder_With_Two_Recipes_That_Have_Cheese()\n    {\n        Expect.Call(_mockService.AllRecipes()).Return(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">[]{\n                                                              Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),\n                                                              Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n                                                          });\n        _mocks.ReplayAll();\n\n        var recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> _finder.GetRecipes(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToArray();\n\n        Assert.That(recipes.Length, Is.EqualTo(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">));\n        Assert.That(recipes[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n        Assert.That(recipes[</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_IngredientFinder_Finding_Nothing()\n    {\n        Expect.Call(_mockService.AllRecipes()).Return(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">[]{\n                                                              Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),\n                                                              Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n                                                          });\n        _mocks.ReplayAll();\n\n        var recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> _finder.GetRecipes(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">chicken</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToArray();\n\n        Assert.That(recipes.Length, Is.EqualTo(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n    }\n\n    [Test, ExpectedException(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ArgumentNullException))]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_For_Null()\n    {\n        _finder.GetRecipes(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n\n    [Test, ExpectedException(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ArgumentNullException))]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_Constructor_With_Null_Service_Interface()\n    {\n        var junk </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientFinder(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nWith this test suite, I have full coverage on my IngredientFinder class and I never needed to instantiate the actual service.&#160; \n\n### Next time\n\nI will discuss how to test your client code with asynchronous service references.&#160; It turns out that it is not as straight-forward as the synchronous approach (this post), so I will devote an entire post to the asynchronous case. [(Part 3 of 4)](http://www.houseofbilz.com/archive/2008/12/19/testing-wcf-service-apps-part-3-of-4.aspx)","source":"_posts/2008-11-29-testing-wcf-service-apps-part-2-of-4.md","raw":"---\ntitle: Testing WCF Service Apps (Part 2 of 4)\nid: 51\ncategories:\n  - Uncategorized\ndate: 2008-11-29 17:35:00\ntags:\n---\n\nPrevious posts:    \n[Part 0 of 4: Introduction](http://houseofbilz.com/HouseOfBilz/archive/2008/11/18/testing-wcf-service-apps-part-0-of-4.aspx)     \n[Part 1 of 4: Testing the Service](http://houseofbilz.com/archive/2008/11/24/testing-wcf-service-apps-part-1-of-4.aspx)     \n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2FHouseOfBilz%2Farchive%2F2008%2F11%2F18%2Ftesting-wcf-service-apps-part-0-of-4.aspx)](http://dotnetshoutout.com/Testing-WCF-Services) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2008%2f11%2f29%2ftesting-wcf-service-apps-part-2-of-4.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2008%2f11%2f29%2ftesting-wcf-service-apps-part-2-of-4.aspx)\n\n### **Testing the Client**\n\nSo far, I outlined how to test your WCF service.&#160; I simply took advantage or the WCF architecture and tested the service directly outside of the actual service harness.&#160; Now I need to set my sights on the client.&#160; This becomes a bit more difficult, but I wouldn't say that it is necessarily hard.&#160; I will start by giving a typical textbook example of hooking up to our service, and then I will tell you what is wrong with it.&#160; I will continue by modifying the code to be more testable so that the service can be mocked.&#160; \n\n### **A Textbook Example**\n\nMost WCF tutorials and books have you start by adding a service reference to your service.&#160; Doing this will generate a proxy client that you can use in your application.&#160; My client application is a very simple data mining application.&#160; You can give it the ingredient name and the application will return all recipes that include the ingredient of choice.&#160; The first step is creating the service reference.&#160; Right-click on the project and select &quot;Add Service Reference&quot;.\n\n[![AddServiceReference](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/TestingWCFServiceAppsPart2of4_8A59/AddServiceReference_thumb.gif)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/TestingWCFServiceAppsPart2of4_8A59/AddServiceReference_2.gif) \n\nOnce the service has been added, I can use it in my code:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:cabbd96d-8ff9-4a13-a648-cb34f4477913\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> IngredientFinder\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> IEnumerable</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> GetRecipes(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> ingredientName)\n    {\n        var recipeService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeBoxServiceClient();\n\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> from recipe </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> recipeService.AllRecipes() \n               </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> recipe.ContainsIngredient(ingredientName) \n               select recipe;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis is all I need to get my app up and running. My main function just calls into this code and prints the results.&#160; There is, however, one major flaw with this code: **it is not testable!**&#160; This is because if I were to instantiate an instance of IngredientFinder, I would be required to hook up to a WCF service via the RecipeBoxServiceClient.&#160; Technically I could write this code but I wouldn't recommend it.&#160; For one, it requires a lot of setup to harness the service.&#160; Secondly, it drifts away from being a unit test and becomes more of a functional or integration test (more on this in part 4).&#160; Thirdly, you can't always assume that you control the service.&#160; Assume, for instance, that you are writing an application that connects to a service like Twitter.&#160; You certainly don't want your unit tests hitting the only instance of the service: the live one.\n\nWe need to do something about this...\n\n### Making it Testable\n\nIf you were to inspect the RecipeBoxServiceClient class that was generated for you from the service specification, you would find one very important detail:&#160; RecipeBoxServiceClient implements the auto-generated interface IRecipeBoxService.&#160; Let us make a modification to the IngredientFinder to make it testable:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:d02efa0b-32d8-4786-861b-1ab4a13a10c3\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> IngredientFinder\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> IRecipeBoxService _recipeService;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> IngredientFinder(IRecipeBoxService recipeService)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(recipeService </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">) </span><span style=\"color: #0000FF;\">throw</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ArgumentNullException(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">recipeService</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        _recipeService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipeService;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> IEnumerable</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> GetRecipes(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> ingredientName)\n    {\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> from recipe </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> _recipeService.AllRecipes() \n               </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> recipe.ContainsIngredient(ingredientName) \n               select recipe;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis is a classic example of dependency injection.&#160; The user of the class (in our case, the main method) is now responsible for defining the service to use.&#160; This way, the IngredientFinder doesn't need to know anything about the connection details.&#160; In addition, I can write tests that mock out the service completely.\n\n### **Writing Tests Against the Client**\n\nIn my example, I am using [Rhino Mocks](http://ayende.com/projects/rhino-mocks.aspx), but you can use any mock/fake/stub framework/method you wish. \n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:53be3351-f34e-4891-a8de-9b84d33b5c0a\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[TestFixture]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> TestIngredientFinder\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> MockRepository _mocks;\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> IRecipeBoxService _mockService;\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> IngredientFinder _finder;\n\n    [SetUp]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetUp()\n    {\n        _mocks </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> MockRepository();\n        _mockService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> _mocks.CreateMock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IRecipeBoxService</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        _finder </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientFinder(_mockService);\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_IngredientFinder_With_Cheese()\n    {\n        Expect.Call(_mockService.AllRecipes()).\n            Return(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">[] {Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)});\n        _mocks.ReplayAll();        \n\n        var recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> _finder.GetRecipes(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToArray();\n\n        Assert.That(recipes.Length, Is.EqualTo(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n        Assert.That(recipes[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_IngredientFinder_With_Two_Recipes_That_Have_Cheese()\n    {\n        Expect.Call(_mockService.AllRecipes()).Return(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">[]{\n                                                              Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),\n                                                              Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n                                                          });\n        _mocks.ReplayAll();\n\n        var recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> _finder.GetRecipes(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToArray();\n\n        Assert.That(recipes.Length, Is.EqualTo(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">));\n        Assert.That(recipes[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n        Assert.That(recipes[</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_IngredientFinder_Finding_Nothing()\n    {\n        Expect.Call(_mockService.AllRecipes()).Return(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">[]{\n                                                              Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),\n                                                              Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n                                                          });\n        _mocks.ReplayAll();\n\n        var recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> _finder.GetRecipes(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">chicken</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToArray();\n\n        Assert.That(recipes.Length, Is.EqualTo(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n    }\n\n    [Test, ExpectedException(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ArgumentNullException))]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_For_Null()\n    {\n        _finder.GetRecipes(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n\n    [Test, ExpectedException(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ArgumentNullException))]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_Constructor_With_Null_Service_Interface()\n    {\n        var junk </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientFinder(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nWith this test suite, I have full coverage on my IngredientFinder class and I never needed to instantiate the actual service.&#160; \n\n### Next time\n\nI will discuss how to test your client code with asynchronous service references.&#160; It turns out that it is not as straight-forward as the synchronous approach (this post), so I will devote an entire post to the asynchronous case. [(Part 3 of 4)](http://www.houseofbilz.com/archive/2008/12/19/testing-wcf-service-apps-part-3-of-4.aspx)","slug":"testing-wcf-service-apps-part-2-of-4","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9fh001q6eulcrjrenxk"},{"title":"Ann Arbor Nerd Lunch -- Are You Going?","id":"52","date":"2008-12-09T22:37:00.000Z","_content":"\nI am organizing a monthly lunch where local software developers from the Ann Arbor, MI area will get together to talk shop.&#160; It will be a very informal meeting where anyone is invited.&#160; We will meet on the third Thursday of every month, which means this month will be on December 18th at 12:00 PM.\n\nIf you are interested in the updates for this group, please subscribe to the Google Group: [http://tinyurl.com/AANerdLunch](http://tinyurl.com/AANerdLunch).&#160; \n\nFor the first meeting, I will challenge you to bring a nerd with you!&#160;&#160; Bring someone who doesn't normally come to the community events, but is interested in being a part of the community if you can.&#160; Also, come with ideas about what you want this lunch to be.&#160; Do we want to keep it casual?&#160; Do we want to bring in &quot;special guests&quot; to help spur conversation?&#160; Do we want to keep it a software group?&#160; Or do we want to branch out to other nerds?&#160; What do YOU want in a nerd lunch? \n\n**Details:**     \n**Who:** The software nerds of Ann Arbor     \n**What:** Lunch -- a place to talk tech and socialize     \n**When:** Thursday, December 18th at 12:00 PM     \n**Where:** Mahek Resturant, Ann Arbor -- [http://tinyurl.com/6hg7mb](http://tinyurl.com/6hg7mb)\n\nPlease respond to the Google Group if you are planning to attend, so we can get the proper sized table at the resturant","source":"_posts/2008-12-09-ann-arbor-nerd-lunch-are-you-going.md","raw":"---\ntitle: Ann Arbor Nerd Lunch -- Are You Going?\nid: 52\ncategories:\n  - Uncategorized\ndate: 2008-12-09 17:37:00\ntags:\n---\n\nI am organizing a monthly lunch where local software developers from the Ann Arbor, MI area will get together to talk shop.&#160; It will be a very informal meeting where anyone is invited.&#160; We will meet on the third Thursday of every month, which means this month will be on December 18th at 12:00 PM.\n\nIf you are interested in the updates for this group, please subscribe to the Google Group: [http://tinyurl.com/AANerdLunch](http://tinyurl.com/AANerdLunch).&#160; \n\nFor the first meeting, I will challenge you to bring a nerd with you!&#160;&#160; Bring someone who doesn't normally come to the community events, but is interested in being a part of the community if you can.&#160; Also, come with ideas about what you want this lunch to be.&#160; Do we want to keep it casual?&#160; Do we want to bring in &quot;special guests&quot; to help spur conversation?&#160; Do we want to keep it a software group?&#160; Or do we want to branch out to other nerds?&#160; What do YOU want in a nerd lunch? \n\n**Details:**     \n**Who:** The software nerds of Ann Arbor     \n**What:** Lunch -- a place to talk tech and socialize     \n**When:** Thursday, December 18th at 12:00 PM     \n**Where:** Mahek Resturant, Ann Arbor -- [http://tinyurl.com/6hg7mb](http://tinyurl.com/6hg7mb)\n\nPlease respond to the Google Group if you are planning to attend, so we can get the proper sized table at the resturant","slug":"ann-arbor-nerd-lunch-are-you-going","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9fk001s6eul5dxu379u"},{"title":"Brian's Goals for 2009","id":"55","date":"2009-01-19T22:44:00.000Z","_content":"\nIt seems everyone is publishing their goals for the year.&#160; I had some goals in my head, but I thought I would [mind map](http://en.wikipedia.org/wiki/Mindmap) them and publish them as well.&#160; I learned about this thought-organization technique at [Codemash](http://www.codemash.org/) and I really got a lot out of the exercise.&#160; My goals are broken down into four main categories: Health, Profession, Family and Enrichment.&#160; Many elements of these categories bleed into other categories, but here is my best attempt to unravel my mind-mapped goals for 2009.\n\n**Health**\n\n1.  Exercise\n        1.  Swim 50 miles2.  Run occasionally3.  Lift weights often4.  Bicycle with Maia and Cara in the spring/summer/fall5.  Ride my bike to work at least 20 times2.  Food\n        1.  Bake more bread2.  Eat less meat3.  Snack less at work3.  Loose 35 pounds  \n\n**Profession**\n\n1.  Learning\n        1.  ASP.NET\n            1.  MVC2.  jQuery2.  MEF3.  Ruby4.  F#5.  Pragmatic thinking2.  Community\n        1.  Blog 50 times (professional or [personal](http://maia.genisio.org))2.  Speak publicly at least 5 times (conferences or user groups)3.  Get to know more people better  \n\n**Family**\n\n1.  Maia\n        1.  Free swim and swimming lessons2.  Bike with her in the seat3.  More music (drums, guitar and CDs).&#160; Attend some live shows4.  More library trips5.  Read more2.  Cara\n        1.  Reconnect2.  More dates3.  Show her I love her more4.  Read more3.  More visits with friends  \n\n**Personal Enrichment**\n\n1.  Less Television\n        1.  Cancel cable2.  Watch less than 100 hours2.  Listen to more podcasts3.  Read more -- at least 10 non-technical books4.  Brew more beer5.  Learn guitar -- at least 50 chords6.  Join a sailing club7.  Write more (mostly in blog form)  \n\nWow... looking at this as an outline makes these goals seem extremely ambitious.&#160; Each individual goal is achievable, but the achieving aggregated list feels untenable.&#160; I suppose that when I look back on 2009, I will feel successful if I met about 2/3 of these goals.&#160; ","source":"_posts/2009-01-19-brians-goals-for-2009.md","raw":"---\ntitle: \"Brian's Goals for 2009\"\nid: 55\ncategories:\n  - Uncategorized\ndate: 2009-01-19 17:44:00\ntags:\n---\n\nIt seems everyone is publishing their goals for the year.&#160; I had some goals in my head, but I thought I would [mind map](http://en.wikipedia.org/wiki/Mindmap) them and publish them as well.&#160; I learned about this thought-organization technique at [Codemash](http://www.codemash.org/) and I really got a lot out of the exercise.&#160; My goals are broken down into four main categories: Health, Profession, Family and Enrichment.&#160; Many elements of these categories bleed into other categories, but here is my best attempt to unravel my mind-mapped goals for 2009.\n\n**Health**\n\n1.  Exercise\n        1.  Swim 50 miles2.  Run occasionally3.  Lift weights often4.  Bicycle with Maia and Cara in the spring/summer/fall5.  Ride my bike to work at least 20 times2.  Food\n        1.  Bake more bread2.  Eat less meat3.  Snack less at work3.  Loose 35 pounds  \n\n**Profession**\n\n1.  Learning\n        1.  ASP.NET\n            1.  MVC2.  jQuery2.  MEF3.  Ruby4.  F#5.  Pragmatic thinking2.  Community\n        1.  Blog 50 times (professional or [personal](http://maia.genisio.org))2.  Speak publicly at least 5 times (conferences or user groups)3.  Get to know more people better  \n\n**Family**\n\n1.  Maia\n        1.  Free swim and swimming lessons2.  Bike with her in the seat3.  More music (drums, guitar and CDs).&#160; Attend some live shows4.  More library trips5.  Read more2.  Cara\n        1.  Reconnect2.  More dates3.  Show her I love her more4.  Read more3.  More visits with friends  \n\n**Personal Enrichment**\n\n1.  Less Television\n        1.  Cancel cable2.  Watch less than 100 hours2.  Listen to more podcasts3.  Read more -- at least 10 non-technical books4.  Brew more beer5.  Learn guitar -- at least 50 chords6.  Join a sailing club7.  Write more (mostly in blog form)  \n\nWow... looking at this as an outline makes these goals seem extremely ambitious.&#160; Each individual goal is achievable, but the achieving aggregated list feels untenable.&#160; I suppose that when I look back on 2009, I will feel successful if I met about 2/3 of these goals.&#160; ","slug":"brians-goals-for-2009","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9fm001u6eulkup1r76g"},{"title":"Testing WCF Service Apps (Part 3 of 4)","id":"53","date":"2008-12-19T22:37:00.000Z","_content":"\nPrevious Posts:    \n[Part 0 of 4: Introduction](http://houseofbilz.com/HouseOfBilz/archive/2008/11/18/testing-wcf-service-apps-part-0-of-4.aspx)     \n[Part 1 of 4: Testing the Service](http://houseofbilz.com/archive/2008/11/24/testing-wcf-service-apps-part-1-of-4.aspx)     \n[Part 2 of 4: Testing the Client](http://www.houseofbilz.com/archive/2008/11/29/testing-wcf-service-apps-part-2-of-4.aspx)\n [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2FHouseOfBilz%2Farchive%2F2008%2F11%2F18%2Ftesting-wcf-service-apps-part-0-of-4.aspx)](http://dotnetshoutout.com/Testing-WCF-Services)   \n\n### Testing Asynchronous Clients\n\nUp to this point, we have tested the service and we have tested the client -- both in isolation.&#160; We have written unit tests and our code&#160; has good coverage.&#160; Unfortunately, my clients are not always synchronous.&#160; In Silverlight client, for instance, the framework will not permit you to make synchronous service requests.&#160; As it turns out, writing tests for asynchronous service clients is not straight-forward.&#160; Thankfully, there are some hacks that you can take advantage of to write effective asynchronous tests.\n\n### Generating Asynchronous Service Clients\n\nWhen you generate your service reference in Visual Studio, the advanced options allow you to specify an asynchronous proxy.&#160; \n\n[![Async](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/TestingWCFServiceAppsPart3of4_12EF1/Async_thumb.png)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/TestingWCFServiceAppsPart3of4_12EF1/Async_2.png) \n\nIn a textbook example, your is a bit more complicated but it is still pretty easy to follow.&#160; Instead of calling **AllRecipes** (as in the previous post), the class hooks the **AllRecipesCompleted** event and calls **AllRecipesAsync()**.&#160; When the service returns the results, the event is fired and the results are processed.\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:ae876ec9-bb83-4eaf-94a7-35cc8c59e8d7\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> IngredientFinder\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IngredentFinderCompleteArgs</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> ProcessingComplete;\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> _ingredientName;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> FindRecipes(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> ingredientName)\n    {\n        var recipeService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeBoxServiceClient();\n\n        _ingredientName </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> ingredientName;\n        recipeService.AllRecipesCompleted </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> AllRecipes_Completed;\n        recipeService.AllRecipesAsync();\n    }\n\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> AllRecipes_Completed(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, AllRecipesCompletedEventArgs e)\n    {\n        var recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> from recipe </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> e.Result\n                      </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> recipe.ContainsIngredient(_ingredientName)\n                      select recipe;\n\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (ProcessingComplete </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            ProcessingComplete(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredentFinderCompleteArgs { Recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipes });\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Making it Testable\n\nJust like in [part 2](http://www.houseofbilz.com/archive/2008/11/29/testing-wcf-service-apps-part-2-of-4.aspx), the code works great but it is not at all testable.&#160; **IngredientFinder** is tightly coupled to the **RecipeBoxServiceClient**.&#160; In a unit testing environment, you cannot rely on WCF to host the service.&#160; Unlike part 2, it is not as simple as replacing the concrete service with **IRecipeBoxService**.&#160; The interface that is generated looks like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:86030e47-7127-4e90-9dd9-085a835e5587\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IRecipeBoxService\n{\n    RecipeData[] AllRecipes();\n    IAsyncResult BeginAllRecipes(AsyncCallback callback, </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> asyncState);\n    RecipeData[] EndAllRecipes(IAsyncResult result);\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nI have no idea why Microsoft did this, but the interface does not include the interface that the concrete class implements.&#160; Neither the **AllRecipesCompleted** event or the **AllRecipesAsync** method are found in the interface!&#160; It includes the begin/end calls but those are some messy methods to use.&#160; I don't want to require my **IngredientFinder** class to be required to use messy methods just to make my code testable.&#160; This is where my hack comes in.&#160; It takes advantage of the fact that the **RecipeBoxServiceClient** is a partial class:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:6e1e6c7b-4dd6-410e-b069-4090e61e0bf9\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IRecipeBoxServiceAsync : IRecipeBoxService\n{\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> AllRecipesAsync();\n    </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> System.EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">AllRecipesCompletedEventArgs</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> AllRecipesCompleted;\n}\n\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">partial</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> RecipeBoxServiceClient : IRecipeBoxServiceAsync\n{}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nSo what did I do here?&#160; I created a new, asynchronous interface that includes the **IRecipeBoxService** interface and also includes the event and async method that is implemented in the concrete class.&#160; After that, I tell the class to implement the asynchronous interface via the partial keyword.&#160; I don't have to write any implementation code because it has already been done for me -- the interface simply didn't include it.\n\nNow that this is in place, we can modify the class slightly to pass the interface in via dependency injection:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:5283173b-9af7-4595-a72e-1a756f151436\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> IngredientFinder\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IngredentFinderCompleteArgs</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> ProcessingComplete;\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> IRecipeBoxServiceAsync _recipeService;\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> _ingredientName;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> IngredientFinder(IRecipeBoxServiceAsync service)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (service </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">) </span><span style=\"color: #0000FF;\">throw</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ArgumentNullException(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">service</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        _recipeService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> service;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> FindRecipes(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> ingredientName)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">.IsNullOrEmpty(ingredientName)) </span><span style=\"color: #0000FF;\">throw</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ArgumentNullException(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ingredientName</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        _ingredientName </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> ingredientName;\n        _recipeService.AllRecipesCompleted </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> AllRecipes_Completed;\n        _recipeService.AllRecipesAsync();\n    }\n\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> AllRecipes_Completed(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, AllRecipesCompletedEventArgs e)\n    {\n        var recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> from recipe </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> e.Result\n                      </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> recipe.ContainsIngredient(_ingredientName)\n                      select recipe;\n\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (ProcessingComplete </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            ProcessingComplete(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredentFinderCompleteArgs { Recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipes });\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### The Tests\n\nThe tests are also more complex.&#160; The test needs to simulate an asynchronous service and fire events.&#160; I am using [Moq](http://code.google.com/p/moq/) to mock out the service.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:a2b3d153-9f5c-4bae-953c-c9b86b7728d1\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[TestFixture]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> TestIngredientFinder\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IRecipeBoxServiceAsync</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> _mockService;\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> IngredientFinder _finder;\n\n    [SetUp]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetUp()\n    {\n        _mockService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IRecipeBoxServiceAsync</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(MockBehavior.Strict);\n        _finder </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientFinder(_mockService.Object);\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> RecipeData Recipe(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> recipeName, </span><span style=\"color: #0000FF;\">params</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">[] ingredientNames)\n    {\n        var result </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeData {Title </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipeName};\n\n        var quantities </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QuantityData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        </span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> ingredientName </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> ingredientNames)\n            quantities.Add(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> QuantityData{Ingredient </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientData{ Name </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> ingredientName}});\n\n        result.Quantities </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> quantities.ToArray();\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> result;\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> AllRecipesCompletedEventArgs RecipeCompletedArgs(</span><span style=\"color: #0000FF;\">params</span><span style=\"color: #000000;\"> RecipeData[] results)\n    {\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> AllRecipesCompletedEventArgs(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\">[] {results}, </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">false</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> MockedEvent</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">AllRecipesCompletedEventArgs</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> RegisterCompletedHandler(Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IRecipeBoxServiceAsync</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> mockService)\n    {\n        var serviceCompletedHandler </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> mockService.CreateEventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">AllRecipesCompletedEventArgs</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        mockService.Object.AllRecipesCompleted </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> serviceCompletedHandler;\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> serviceCompletedHandler;\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_IngredientFinder_With_One_Recipe_That_Has_Cheese()\n    {\n        var serviceCompletedHandler </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> RegisterCompletedHandler(_mockService);\n        _mockService.Expect(service </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> service.AllRecipesAsync());\n\n        IEnumerable</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">;\n        _finder.ProcessingComplete </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> (sender, args) </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> args.Recipes;\n\n        _finder.FindRecipes(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n        serviceCompletedHandler.Raise(RecipeCompletedArgs(Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)));\n\n        Assert.That(recipes.Count(), Is.EqualTo(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n        Assert.That(recipes.ToList()[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_IngredientFinder_With_Two_Recipes_That_Have_Cheese()\n    {\n        var serviceCompletedHandler </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> RegisterCompletedHandler(_mockService);\n        _mockService.Expect(service </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> service.AllRecipesAsync());\n\n        IEnumerable</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">;\n        _finder.ProcessingComplete </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> (sender, args) </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> args.Recipes;\n\n        _finder.FindRecipes(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n        serviceCompletedHandler.Raise(RecipeCompletedArgs(\n                                          Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),\n                                          Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)));\n\n        Assert.That(recipes.Count(), Is.EqualTo(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">));\n        Assert.That(recipes.ToList()[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n        Assert.That(recipes.ToList()[</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_IngredientFinder_Finding_Nothing()\n    {\n        var serviceCompletedHandler </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> RegisterCompletedHandler(_mockService);\n        _mockService.Expect(service </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> service.AllRecipesAsync());\n\n        IEnumerable</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">;\n        _finder.ProcessingComplete </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> (sender, args) </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> args.Recipes;\n\n        _finder.FindRecipes(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">chicken</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n        serviceCompletedHandler.Raise(RecipeCompletedArgs(\n                                          Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),\n                                          Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)));\n\n        Assert.That(recipes.Count(), Is.EqualTo(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n    }\n\n    [Test, ExpectedException(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ArgumentNullException))]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_For_Null()\n    {\n        _finder.FindRecipes(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n\n    [Test, ExpectedException(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ArgumentNullException))]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_Constructor_With_Null_Service_Interface()\n    {\n        var junk </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientFinder(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Next Time\n\nIn the last post of this series, I will discuss functional testing.&#160; How do you test the round-trip functionality of your application?&#160; I will re-visit the synchronous client and show some tricks that allow you to test all points of your application without requiring the WCF infrastructure to be running. [(part 4 of 4)](http://www.houseofbilz.com/archive/2009/01/05/testing-wcf-service-apps-part-4-of-4.aspx)","source":"_posts/2008-12-19-testing-wcf-service-apps-part-3-of-4.md","raw":"---\ntitle: Testing WCF Service Apps (Part 3 of 4)\nid: 53\ncategories:\n  - Uncategorized\ndate: 2008-12-19 17:37:00\ntags:\n---\n\nPrevious Posts:    \n[Part 0 of 4: Introduction](http://houseofbilz.com/HouseOfBilz/archive/2008/11/18/testing-wcf-service-apps-part-0-of-4.aspx)     \n[Part 1 of 4: Testing the Service](http://houseofbilz.com/archive/2008/11/24/testing-wcf-service-apps-part-1-of-4.aspx)     \n[Part 2 of 4: Testing the Client](http://www.houseofbilz.com/archive/2008/11/29/testing-wcf-service-apps-part-2-of-4.aspx)\n [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2FHouseOfBilz%2Farchive%2F2008%2F11%2F18%2Ftesting-wcf-service-apps-part-0-of-4.aspx)](http://dotnetshoutout.com/Testing-WCF-Services)   \n\n### Testing Asynchronous Clients\n\nUp to this point, we have tested the service and we have tested the client -- both in isolation.&#160; We have written unit tests and our code&#160; has good coverage.&#160; Unfortunately, my clients are not always synchronous.&#160; In Silverlight client, for instance, the framework will not permit you to make synchronous service requests.&#160; As it turns out, writing tests for asynchronous service clients is not straight-forward.&#160; Thankfully, there are some hacks that you can take advantage of to write effective asynchronous tests.\n\n### Generating Asynchronous Service Clients\n\nWhen you generate your service reference in Visual Studio, the advanced options allow you to specify an asynchronous proxy.&#160; \n\n[![Async](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/TestingWCFServiceAppsPart3of4_12EF1/Async_thumb.png)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/TestingWCFServiceAppsPart3of4_12EF1/Async_2.png) \n\nIn a textbook example, your is a bit more complicated but it is still pretty easy to follow.&#160; Instead of calling **AllRecipes** (as in the previous post), the class hooks the **AllRecipesCompleted** event and calls **AllRecipesAsync()**.&#160; When the service returns the results, the event is fired and the results are processed.\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:ae876ec9-bb83-4eaf-94a7-35cc8c59e8d7\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> IngredientFinder\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IngredentFinderCompleteArgs</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> ProcessingComplete;\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> _ingredientName;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> FindRecipes(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> ingredientName)\n    {\n        var recipeService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeBoxServiceClient();\n\n        _ingredientName </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> ingredientName;\n        recipeService.AllRecipesCompleted </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> AllRecipes_Completed;\n        recipeService.AllRecipesAsync();\n    }\n\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> AllRecipes_Completed(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, AllRecipesCompletedEventArgs e)\n    {\n        var recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> from recipe </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> e.Result\n                      </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> recipe.ContainsIngredient(_ingredientName)\n                      select recipe;\n\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (ProcessingComplete </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            ProcessingComplete(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredentFinderCompleteArgs { Recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipes });\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Making it Testable\n\nJust like in [part 2](http://www.houseofbilz.com/archive/2008/11/29/testing-wcf-service-apps-part-2-of-4.aspx), the code works great but it is not at all testable.&#160; **IngredientFinder** is tightly coupled to the **RecipeBoxServiceClient**.&#160; In a unit testing environment, you cannot rely on WCF to host the service.&#160; Unlike part 2, it is not as simple as replacing the concrete service with **IRecipeBoxService**.&#160; The interface that is generated looks like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:86030e47-7127-4e90-9dd9-085a835e5587\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IRecipeBoxService\n{\n    RecipeData[] AllRecipes();\n    IAsyncResult BeginAllRecipes(AsyncCallback callback, </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> asyncState);\n    RecipeData[] EndAllRecipes(IAsyncResult result);\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nI have no idea why Microsoft did this, but the interface does not include the interface that the concrete class implements.&#160; Neither the **AllRecipesCompleted** event or the **AllRecipesAsync** method are found in the interface!&#160; It includes the begin/end calls but those are some messy methods to use.&#160; I don't want to require my **IngredientFinder** class to be required to use messy methods just to make my code testable.&#160; This is where my hack comes in.&#160; It takes advantage of the fact that the **RecipeBoxServiceClient** is a partial class:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:6e1e6c7b-4dd6-410e-b069-4090e61e0bf9\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IRecipeBoxServiceAsync : IRecipeBoxService\n{\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> AllRecipesAsync();\n    </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> System.EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">AllRecipesCompletedEventArgs</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> AllRecipesCompleted;\n}\n\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">partial</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> RecipeBoxServiceClient : IRecipeBoxServiceAsync\n{}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nSo what did I do here?&#160; I created a new, asynchronous interface that includes the **IRecipeBoxService** interface and also includes the event and async method that is implemented in the concrete class.&#160; After that, I tell the class to implement the asynchronous interface via the partial keyword.&#160; I don't have to write any implementation code because it has already been done for me -- the interface simply didn't include it.\n\nNow that this is in place, we can modify the class slightly to pass the interface in via dependency injection:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:5283173b-9af7-4595-a72e-1a756f151436\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> IngredientFinder\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IngredentFinderCompleteArgs</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> ProcessingComplete;\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> IRecipeBoxServiceAsync _recipeService;\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> _ingredientName;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> IngredientFinder(IRecipeBoxServiceAsync service)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (service </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">) </span><span style=\"color: #0000FF;\">throw</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ArgumentNullException(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">service</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        _recipeService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> service;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> FindRecipes(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> ingredientName)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">.IsNullOrEmpty(ingredientName)) </span><span style=\"color: #0000FF;\">throw</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ArgumentNullException(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ingredientName</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        _ingredientName </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> ingredientName;\n        _recipeService.AllRecipesCompleted </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> AllRecipes_Completed;\n        _recipeService.AllRecipesAsync();\n    }\n\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> AllRecipes_Completed(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, AllRecipesCompletedEventArgs e)\n    {\n        var recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> from recipe </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> e.Result\n                      </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> recipe.ContainsIngredient(_ingredientName)\n                      select recipe;\n\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (ProcessingComplete </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            ProcessingComplete(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredentFinderCompleteArgs { Recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipes });\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### The Tests\n\nThe tests are also more complex.&#160; The test needs to simulate an asynchronous service and fire events.&#160; I am using [Moq](http://code.google.com/p/moq/) to mock out the service.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:a2b3d153-9f5c-4bae-953c-c9b86b7728d1\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[TestFixture]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> TestIngredientFinder\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IRecipeBoxServiceAsync</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> _mockService;\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> IngredientFinder _finder;\n\n    [SetUp]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetUp()\n    {\n        _mockService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IRecipeBoxServiceAsync</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(MockBehavior.Strict);\n        _finder </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientFinder(_mockService.Object);\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> RecipeData Recipe(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> recipeName, </span><span style=\"color: #0000FF;\">params</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">[] ingredientNames)\n    {\n        var result </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeData {Title </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipeName};\n\n        var quantities </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QuantityData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        </span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> ingredientName </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> ingredientNames)\n            quantities.Add(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> QuantityData{Ingredient </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientData{ Name </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> ingredientName}});\n\n        result.Quantities </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> quantities.ToArray();\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> result;\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> AllRecipesCompletedEventArgs RecipeCompletedArgs(</span><span style=\"color: #0000FF;\">params</span><span style=\"color: #000000;\"> RecipeData[] results)\n    {\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> AllRecipesCompletedEventArgs(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\">[] {results}, </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">false</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> MockedEvent</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">AllRecipesCompletedEventArgs</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> RegisterCompletedHandler(Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IRecipeBoxServiceAsync</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> mockService)\n    {\n        var serviceCompletedHandler </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> mockService.CreateEventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">AllRecipesCompletedEventArgs</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        mockService.Object.AllRecipesCompleted </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> serviceCompletedHandler;\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> serviceCompletedHandler;\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_IngredientFinder_With_One_Recipe_That_Has_Cheese()\n    {\n        var serviceCompletedHandler </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> RegisterCompletedHandler(_mockService);\n        _mockService.Expect(service </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> service.AllRecipesAsync());\n\n        IEnumerable</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">;\n        _finder.ProcessingComplete </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> (sender, args) </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> args.Recipes;\n\n        _finder.FindRecipes(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n        serviceCompletedHandler.Raise(RecipeCompletedArgs(Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)));\n\n        Assert.That(recipes.Count(), Is.EqualTo(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n        Assert.That(recipes.ToList()[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_IngredientFinder_With_Two_Recipes_That_Have_Cheese()\n    {\n        var serviceCompletedHandler </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> RegisterCompletedHandler(_mockService);\n        _mockService.Expect(service </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> service.AllRecipesAsync());\n\n        IEnumerable</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">;\n        _finder.ProcessingComplete </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> (sender, args) </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> args.Recipes;\n\n        _finder.FindRecipes(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n        serviceCompletedHandler.Raise(RecipeCompletedArgs(\n                                          Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),\n                                          Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)));\n\n        Assert.That(recipes.Count(), Is.EqualTo(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">));\n        Assert.That(recipes.ToList()[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n        Assert.That(recipes.ToList()[</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_IngredientFinder_Finding_Nothing()\n    {\n        var serviceCompletedHandler </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> RegisterCompletedHandler(_mockService);\n        _mockService.Expect(service </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> service.AllRecipesAsync());\n\n        IEnumerable</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">;\n        _finder.ProcessingComplete </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> (sender, args) </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> args.Recipes;\n\n        _finder.FindRecipes(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">chicken</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n        serviceCompletedHandler.Raise(RecipeCompletedArgs(\n                                          Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac&amp;Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),\n                                          Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)));\n\n        Assert.That(recipes.Count(), Is.EqualTo(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n    }\n\n    [Test, ExpectedException(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ArgumentNullException))]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_For_Null()\n    {\n        _finder.FindRecipes(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n\n    [Test, ExpectedException(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ArgumentNullException))]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_Constructor_With_Null_Service_Interface()\n    {\n        var junk </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientFinder(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Next Time\n\nIn the last post of this series, I will discuss functional testing.&#160; How do you test the round-trip functionality of your application?&#160; I will re-visit the synchronous client and show some tricks that allow you to test all points of your application without requiring the WCF infrastructure to be running. [(part 4 of 4)](http://www.houseofbilz.com/archive/2009/01/05/testing-wcf-service-apps-part-4-of-4.aspx)","slug":"testing-wcf-service-apps-part-3-of-4","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9fn001w6eulisdq28gh"},{"title":"Testing WCF Service Apps (part 4 of 4)","id":"54","date":"2009-01-05T22:39:00.000Z","_content":"\nPrevious Posts:    \n[Part 0 of 4: Introduction](http://houseofbilz.com/HouseOfBilz/archive/2008/11/18/testing-wcf-service-apps-part-0-of-4.aspx)     \n[Part 1 of 4: Testing the Service](http://houseofbilz.com/archive/2008/11/24/testing-wcf-service-apps-part-1-of-4.aspx)     \n[Part 2 of 4: Testing the Client](http://www.houseofbilz.com/archive/2008/11/29/testing-wcf-service-apps-part-2-of-4.aspx)     \n[Part 3 of 4: Testing the Asynchronous Client](http://www.houseofbilz.com/archive/2008/12/19/testing-wcf-service-apps-part-3-of-4.aspx) \n [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2FHouseOfBilz%2Farchive%2F2008%2F11%2F18%2Ftesting-wcf-service-apps-part-0-of-4.aspx)](http://dotnetshoutout.com/Testing-WCF-Services)   \n\n### Functional Testing the WCF Application\n\nIn functional testing, the goal is to test as much of the application that you can to determine that it does what you want from a functional perspective.&#160; It differs greatly from unit testing in that a unit test is only concerned with an individual class.&#160; Functional tests are concerned with testing the interactions of the objects in the system from the user input to the user output.\n\nI thought it would be easiest to draw out what the data mining application is doing in terms of data flow.&#160; This particular application is a data mining application which queries a service to pull out data that the user wants.&#160; In this case, the question that the user wants answered is &quot;What recipes exist in the database that include a given ingredient?&quot;&#160; The data flow goes like this:\n\n[![App.Diagram](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/a0b52042f47e_BD87/App.Diagram_thumb.png)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/a0b52042f47e_BD87/App.Diagram_2.png) \n\nThe user types an ingredient into the console.&#160; The console launches our application and calls &quot;**Main**&quot; with the arguments that include the ingredient in question.&#160; The &quot;**Main**&quot; routine creates an **IngredientFinder** object which requests a list of all recipes known to the service.&#160; It does this by asking the service proxy which uses WCF to ask the actual **RecipeService**, which may exist anywhere on the planet.&#160; The actual **RecipeService** asks the **Business Objects** which in turn queries the database for all known recipes.&#160; The database returns the results to the **Business Objects** which in turn returns the results to the **RecipeService**.&#160; Those results travel through the WCF infrastructure back to the service proxy in the client.&#160; The **IngredientFinder** filters the recipes for the requested ingredient and returns the results to the &quot;**Main**&quot; method which then writes the results back to the console for the user to read.\n\nFrom a testing perspective, the only code we are responsible for in this system is **Main, IngredientFinder, RecipeService** and **Business Objects**.&#160; The user and console are completely external to our application.&#160; The service proxy is auto-generated by Visual Studio and the WCF framework is part of the .NET framework.&#160; We do not need to test these parts.&#160; Finally, the database is also a Microsoft product (SQL Server) and we can trust that it works correctly as well.&#160; We need to eliminate all components in this system that we do not control, thus focus on testing the code in which we do control.\n\n### Eliminating the User and Console\n\nTraditionally our &quot;**Main**&quot; method would instantiate our IngredientFinder (see part 1) with the service proxy, get the result and write it out to the console:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:34ddc18b-05e4-4ee0-8677-1d54c16aba48\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Main(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">[] args)\n{\n    var finder </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientFinder(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeBoxServiceClient());\n\n    </span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (RecipeData recipe </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> finder.GetRecipes(args[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]))\n        Console.WriteLine(recipe.Title);\n\n    Console.ReadKey();\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThe problem with this is that **Console** is a static class and cannot be replaced as-is.&#160; Instead, we need to extract this as an interface and pass the interface in:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b9c0323a-cda8-45b2-a2a8-4d6a6f650351\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IConsoleOutput\n{\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> WriteLine(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> line);\n    ConsoleKeyInfo ReadKey();\n}\n\n</span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ConsoleOutput : IConsoleOutput\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> WriteLine(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> line) { Console.WriteLine(line); }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ConsoleKeyInfo ReadKey() { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> Console.ReadKey(); }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nBy doing this, we can now replace the **Console.WriteLine** static method with a spy in our test (later).&#160; We will create a new static method named **Execute** which passes in the **IConsoleOutput** and **IRecipeBoxService** interfaces. Our new &quot;**Main**&quot; routine will look like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:e44be4f5-77c7-4229-ba51-42ed84bb231b\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Main(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">[] args)\n{\n    Execute(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ConsoleOutput(), </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeBoxServiceClient(), args);\n}\n\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Execute(IConsoleOutput console, IRecipeBoxService service, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">[] args)\n{\n    var finder </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientFinder(service);\n\n    </span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (RecipeData recipe </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> finder.GetRecipes(args[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]))\n        console.WriteLine(recipe.Title);\n\n    console.ReadKey();\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Eliminating the WCF Infrastructure\n\nNow that the user and console have been abstracted out, we can start thinking about testing the **Execute** method.&#160; The problem we have now is that **IRecipeBoxService** is an automatically generated interface within the client's namespace.&#160; We have an implementation of this interface in the service, but it is defined in the service's namespace.&#160; The two interfaces are not compatible.&#160; We want to eliminate the need for WCF, so we cannot use the generated proxy class.&#160; What we need here is a bridge class:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:a328000e-4801-40d1-99af-8328cae6b68c\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ServiceWrapper : DataMining.RecipeBoxService.IRecipeBoxService\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> Services.IRecipeBoxService _source;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ServiceWrapper(Services.IRecipeBoxService source)\n    {\n        _source </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> source;\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> ToType TranslateData</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">FromType, ToType</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(FromType source) </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> ToType : </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\">\n    {\n        var serverSerializer </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> DataContractSerializer(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(FromType));\n        var clientSerializer </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> DataContractSerializer(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ToType));\n\n        </span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> (var stream </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> MemoryStream())\n        {\n            serverSerializer.WriteObject(stream, source);\n            stream.Flush();\n            stream.Position </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n\n            </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> clientSerializer.ReadObject(stream) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ToType;\n        }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> DataMining.RecipeBoxService.RecipeData[] AllRecipes()\n    {\n        var result </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">DataMining.RecipeBoxService.RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        </span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (var data </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> _source.AllRecipes())\n            result.Add(TranslateData</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Services.DataContracts.RecipeData, DataMining.RecipeBoxService.RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(data));\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> result.ToArray();\n    }\n\n    ...\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis class bridges the client interface over to the service interface.&#160; WCF interfaces are made up of Service Contracts and Data Contracts.&#160; The Service Contract is the functional interface where the Data Contract defines what the data looks like.&#160; The WCF framework uses the **System.Runtime.Serialization.DataContractSerializer** to transfer the data in plain-text.&#160; In this **ServiceWrapper** class, the **TranslateData** function uses the **DataContractSerializer** to serialize the data to and from the client and service data types.&#160; This class is the glue that replaces WCF from the testing process.&#160; In a sense, this class is a very simple implementation of the WCF concepts.\n\n### Putting it all Together\n\nThe only piece of functionality still out of our control is the database.&#160; I am going to replace the SQL Server with a temporal, in-memory database for testing.&#160; This post will not go into the details, but my previous post on Blah Blah Blah talks about how to do this.&#160; Now, our diagram looks shows a system where every piece of code is in our control:\n\n[![App.Testing](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/a0b52042f47e_BD87/App.Testing_thumb.png)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/a0b52042f47e_BD87/App.Testing_2.png) \n\n### **Writing our Functional Tests**\n\nThe only code we still need before we start writing functional tests is the **ConsoleOutputSpy**.&#160; It captures the output in a list of strings that we can verify against.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:33ae001e-174b-47fb-962c-11f3b9ffca43\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ConsoleOutputSpy : Program.IConsoleOutput\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Output { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ConsoleOutputSpy()          { Output </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(); }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> WriteLine(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> line) { Output.Add(line); }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ConsoleKeyInfo ReadKey()    { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ConsoleKeyInfo(); }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNow that we have our console output spy, we can look at our test **SetUp**:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:bb5cedd5-0b32-4f1a-b20e-5f53895b4aa9\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> ConsoleOutputSpy _consoleOutput;\n</span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> DataMining.RecipeBoxService.IRecipeBoxService _service;\n\n[SetUp]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetUp()\n{\n    _service </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ServiceWrapper(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeBoxService(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> MockBackEndConfiguration()));\n    _consoleOutput </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ConsoleOutputSpy();\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nFinally, we can write our tests.&#160; This test will populate the mock database with four ingredients and three recipes.&#160; Only two of the recipes include the &quot;Cheese&quot; ingredient, so we can test that our data miner will return only those two recipes that contain &quot;Cheese&quot;:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:0f75cc33-24b2-4ae1-bc2f-7b8af140daed\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[Test]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SimpleTest()\n{\n    AddIngredients(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Peanut Butter</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n    AddRecipeToDatabase(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac &amp; Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n    AddRecipeToDatabase(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n    AddRecipeToDatabase(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Peanut Butter Sandwich</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Peanut Butter</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n    Program.Execute(_consoleOutput, _service, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> [] {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">});\n\n    Assert.That(_consoleOutput.Output.Count, Is.EqualTo(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">));\n    Assert.That(_consoleOutput.Output[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">], Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac &amp; Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    Assert.That(_consoleOutput.Output[</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">], Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### **Conclusion**\n\nThis concludes my four-part series on testing WCF applications.&#160; I have covered unit testing the service, unit testing the client, unit testing an asynchronous client and finally, functional testing the entire application.&#160; \n\nIt is important for me to note that these techniques have served me very well in the real-world.&#160; I have a Silverlight application which communicates asynchronously with a back-end WCF service.&#160; These techniques have allowed us to write tests that cover our application from all aspects.&#160; The tests we have in place run extremely quickly and are robust because they do not rely on any services running on a separate machine.","source":"_posts/2009-01-05-testing-wcf-service-apps-part-4-of-4.md","raw":"---\ntitle: Testing WCF Service Apps (part 4 of 4)\nid: 54\ncategories:\n  - Uncategorized\ndate: 2009-01-05 17:39:00\ntags:\n---\n\nPrevious Posts:    \n[Part 0 of 4: Introduction](http://houseofbilz.com/HouseOfBilz/archive/2008/11/18/testing-wcf-service-apps-part-0-of-4.aspx)     \n[Part 1 of 4: Testing the Service](http://houseofbilz.com/archive/2008/11/24/testing-wcf-service-apps-part-1-of-4.aspx)     \n[Part 2 of 4: Testing the Client](http://www.houseofbilz.com/archive/2008/11/29/testing-wcf-service-apps-part-2-of-4.aspx)     \n[Part 3 of 4: Testing the Asynchronous Client](http://www.houseofbilz.com/archive/2008/12/19/testing-wcf-service-apps-part-3-of-4.aspx) \n [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2FHouseOfBilz%2Farchive%2F2008%2F11%2F18%2Ftesting-wcf-service-apps-part-0-of-4.aspx)](http://dotnetshoutout.com/Testing-WCF-Services)   \n\n### Functional Testing the WCF Application\n\nIn functional testing, the goal is to test as much of the application that you can to determine that it does what you want from a functional perspective.&#160; It differs greatly from unit testing in that a unit test is only concerned with an individual class.&#160; Functional tests are concerned with testing the interactions of the objects in the system from the user input to the user output.\n\nI thought it would be easiest to draw out what the data mining application is doing in terms of data flow.&#160; This particular application is a data mining application which queries a service to pull out data that the user wants.&#160; In this case, the question that the user wants answered is &quot;What recipes exist in the database that include a given ingredient?&quot;&#160; The data flow goes like this:\n\n[![App.Diagram](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/a0b52042f47e_BD87/App.Diagram_thumb.png)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/a0b52042f47e_BD87/App.Diagram_2.png) \n\nThe user types an ingredient into the console.&#160; The console launches our application and calls &quot;**Main**&quot; with the arguments that include the ingredient in question.&#160; The &quot;**Main**&quot; routine creates an **IngredientFinder** object which requests a list of all recipes known to the service.&#160; It does this by asking the service proxy which uses WCF to ask the actual **RecipeService**, which may exist anywhere on the planet.&#160; The actual **RecipeService** asks the **Business Objects** which in turn queries the database for all known recipes.&#160; The database returns the results to the **Business Objects** which in turn returns the results to the **RecipeService**.&#160; Those results travel through the WCF infrastructure back to the service proxy in the client.&#160; The **IngredientFinder** filters the recipes for the requested ingredient and returns the results to the &quot;**Main**&quot; method which then writes the results back to the console for the user to read.\n\nFrom a testing perspective, the only code we are responsible for in this system is **Main, IngredientFinder, RecipeService** and **Business Objects**.&#160; The user and console are completely external to our application.&#160; The service proxy is auto-generated by Visual Studio and the WCF framework is part of the .NET framework.&#160; We do not need to test these parts.&#160; Finally, the database is also a Microsoft product (SQL Server) and we can trust that it works correctly as well.&#160; We need to eliminate all components in this system that we do not control, thus focus on testing the code in which we do control.\n\n### Eliminating the User and Console\n\nTraditionally our &quot;**Main**&quot; method would instantiate our IngredientFinder (see part 1) with the service proxy, get the result and write it out to the console:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:34ddc18b-05e4-4ee0-8677-1d54c16aba48\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Main(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">[] args)\n{\n    var finder </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientFinder(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeBoxServiceClient());\n\n    </span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (RecipeData recipe </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> finder.GetRecipes(args[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]))\n        Console.WriteLine(recipe.Title);\n\n    Console.ReadKey();\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThe problem with this is that **Console** is a static class and cannot be replaced as-is.&#160; Instead, we need to extract this as an interface and pass the interface in:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b9c0323a-cda8-45b2-a2a8-4d6a6f650351\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IConsoleOutput\n{\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> WriteLine(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> line);\n    ConsoleKeyInfo ReadKey();\n}\n\n</span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ConsoleOutput : IConsoleOutput\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> WriteLine(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> line) { Console.WriteLine(line); }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ConsoleKeyInfo ReadKey() { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> Console.ReadKey(); }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nBy doing this, we can now replace the **Console.WriteLine** static method with a spy in our test (later).&#160; We will create a new static method named **Execute** which passes in the **IConsoleOutput** and **IRecipeBoxService** interfaces. Our new &quot;**Main**&quot; routine will look like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:e44be4f5-77c7-4229-ba51-42ed84bb231b\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Main(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">[] args)\n{\n    Execute(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ConsoleOutput(), </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeBoxServiceClient(), args);\n}\n\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Execute(IConsoleOutput console, IRecipeBoxService service, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">[] args)\n{\n    var finder </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> IngredientFinder(service);\n\n    </span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (RecipeData recipe </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> finder.GetRecipes(args[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]))\n        console.WriteLine(recipe.Title);\n\n    console.ReadKey();\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Eliminating the WCF Infrastructure\n\nNow that the user and console have been abstracted out, we can start thinking about testing the **Execute** method.&#160; The problem we have now is that **IRecipeBoxService** is an automatically generated interface within the client's namespace.&#160; We have an implementation of this interface in the service, but it is defined in the service's namespace.&#160; The two interfaces are not compatible.&#160; We want to eliminate the need for WCF, so we cannot use the generated proxy class.&#160; What we need here is a bridge class:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:a328000e-4801-40d1-99af-8328cae6b68c\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ServiceWrapper : DataMining.RecipeBoxService.IRecipeBoxService\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> Services.IRecipeBoxService _source;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ServiceWrapper(Services.IRecipeBoxService source)\n    {\n        _source </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> source;\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> ToType TranslateData</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">FromType, ToType</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(FromType source) </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> ToType : </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\">\n    {\n        var serverSerializer </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> DataContractSerializer(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(FromType));\n        var clientSerializer </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> DataContractSerializer(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ToType));\n\n        </span><span style=\"color: #0000FF;\">using</span><span style=\"color: #000000;\"> (var stream </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> MemoryStream())\n        {\n            serverSerializer.WriteObject(stream, source);\n            stream.Flush();\n            stream.Position </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n\n            </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> clientSerializer.ReadObject(stream) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ToType;\n        }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> DataMining.RecipeBoxService.RecipeData[] AllRecipes()\n    {\n        var result </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">DataMining.RecipeBoxService.RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        </span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (var data </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> _source.AllRecipes())\n            result.Add(TranslateData</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Services.DataContracts.RecipeData, DataMining.RecipeBoxService.RecipeData</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(data));\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> result.ToArray();\n    }\n\n    ...\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis class bridges the client interface over to the service interface.&#160; WCF interfaces are made up of Service Contracts and Data Contracts.&#160; The Service Contract is the functional interface where the Data Contract defines what the data looks like.&#160; The WCF framework uses the **System.Runtime.Serialization.DataContractSerializer** to transfer the data in plain-text.&#160; In this **ServiceWrapper** class, the **TranslateData** function uses the **DataContractSerializer** to serialize the data to and from the client and service data types.&#160; This class is the glue that replaces WCF from the testing process.&#160; In a sense, this class is a very simple implementation of the WCF concepts.\n\n### Putting it all Together\n\nThe only piece of functionality still out of our control is the database.&#160; I am going to replace the SQL Server with a temporal, in-memory database for testing.&#160; This post will not go into the details, but my previous post on Blah Blah Blah talks about how to do this.&#160; Now, our diagram looks shows a system where every piece of code is in our control:\n\n[![App.Testing](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/a0b52042f47e_BD87/App.Testing_thumb.png)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/a0b52042f47e_BD87/App.Testing_2.png) \n\n### **Writing our Functional Tests**\n\nThe only code we still need before we start writing functional tests is the **ConsoleOutputSpy**.&#160; It captures the output in a list of strings that we can verify against.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:33ae001e-174b-47fb-962c-11f3b9ffca43\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ConsoleOutputSpy : Program.IConsoleOutput\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Output { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ConsoleOutputSpy()          { Output </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(); }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> WriteLine(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> line) { Output.Add(line); }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ConsoleKeyInfo ReadKey()    { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ConsoleKeyInfo(); }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNow that we have our console output spy, we can look at our test **SetUp**:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:bb5cedd5-0b32-4f1a-b20e-5f53895b4aa9\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> ConsoleOutputSpy _consoleOutput;\n</span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> DataMining.RecipeBoxService.IRecipeBoxService _service;\n\n[SetUp]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetUp()\n{\n    _service </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ServiceWrapper(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeBoxService(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> MockBackEndConfiguration()));\n    _consoleOutput </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ConsoleOutputSpy();\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nFinally, we can write our tests.&#160; This test will populate the mock database with four ingredients and three recipes.&#160; Only two of the recipes include the &quot;Cheese&quot; ingredient, so we can test that our data miner will return only those two recipes that contain &quot;Cheese&quot;:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:0f75cc33-24b2-4ae1-bc2f-7b8af140daed\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[Test]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SimpleTest()\n{\n    AddIngredients(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Peanut Butter</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n    AddRecipeToDatabase(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac &amp; Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Macaroni</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n    AddRecipeToDatabase(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n    AddRecipeToDatabase(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Peanut Butter Sandwich</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Bread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Peanut Butter</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n    Program.Execute(_consoleOutput, _service, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> [] {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">});\n\n    Assert.That(_consoleOutput.Output.Count, Is.EqualTo(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">));\n    Assert.That(_consoleOutput.Output[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">], Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Mac &amp; Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    Assert.That(_consoleOutput.Output[</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">], Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Grilled Cheese</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### **Conclusion**\n\nThis concludes my four-part series on testing WCF applications.&#160; I have covered unit testing the service, unit testing the client, unit testing an asynchronous client and finally, functional testing the entire application.&#160; \n\nIt is important for me to note that these techniques have served me very well in the real-world.&#160; I have a Silverlight application which communicates asynchronously with a back-end WCF service.&#160; These techniques have allowed us to write tests that cover our application from all aspects.&#160; The tests we have in place run extremely quickly and are robust because they do not rely on any services running on a separate machine.","slug":"testing-wcf-service-apps-part-4-of-4","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9fq001y6eullfp9071t"},{"title":"Drag and Drop with Silverlight","id":"56","date":"2009-02-10T22:45:00.000Z","_content":"\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F02%2F10%2Fdrag-and-drop-with-silverlight.aspx)](http://dotnetshoutout.com/Drag-and-Drop-with-Silverlight) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f02%2f10%2fdrag-and-drop-with-silverlight.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f02%2f10%2fdrag-and-drop-with-silverlight.aspx)   \n\n### The Problem\n\nI have been developing with Silverlight for a few months now, and I have really been enjoying myself.&#160; It has been the enabling technology my project and we have been extremely productive in the environment.&#160; Unfortunately, Silverlight is still in version 2.0 and there are some missing capabilities.\n\nOne such hole in the framework is &quot;Drag and Drop&quot;.&#160; There is no support for it directly.&#160; There are several blog examples on the web, but I have yet to find a fully encapsulated, generic solution to the &quot;Drag and Drop&quot; problem.&#160; For instance, how soon after dragging do you really want to be dragging?&#160; You don't want to drag immediately, as that will affect normal clicking on an element.&#160; How do you handle drags from one distinct control to another that are not aware of each other?&#160; How do you clue the user in that a given control is droppable?&#160; How do you add animation to cue the user that the item is being dropped?\n\n### Introducing DragNDrop\n\nTo answer these questions, I created the **DragNDrop** class.&#160; It is a manager of sorts, and watches a &quot;Drag Source&quot; for the mouse down events.&#160; The &quot;Drag Source&quot; implements an interface and the &quot;Drop Spot&quot; implements a complimentary interface.&#160; This allows for the &quot;Drag Source&quot; and &quot;Drop Spot&quot; to be blissfully unaware of each other.\n\n### Usage\n\nThe assumption made with this class is that there is some sort of a payload.&#160; This payload is picked up from the &quot;Drag Source&quot; and dropped into the &quot;Drop Spot&quot;.&#160; The &quot;Drop Spot&quot; can accept a payload of any types that it implements from any &quot;Drag Source&quot; that implements the complementary interface.&#160; Lets take a look at the interfaces:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:0b342a59-bca7-4daa-bfe0-7e2312fca29b\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> DragNDrop</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">PayloadType</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IThumbnailDragSource\n    {\n        FrameworkElement DragCursor { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; }\n        PayloadType Payload { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IThumbnailDropSpot\n    {\n        </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DragDropEnter();\n        </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DragDropExit();  \n        </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> ThumbnailDroping(PayloadType dataContext, FrameworkElement cursor, Point cursorPosition);\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nFor instance, if a &quot;Drag Source&quot; wanted to allow dragging with a string payload, it would implement **DragNDrop&lt;string&gt;.IThumbnailDragSource**.&#160; Any &quot;Drop Spot&quot; that wants to accept a string payload would implement **DragNDrop&lt;string&gt;.IThumbnailDropSpot**.&#160; The **DragNDrop** class is then constructed with an instance of the &quot;Drag Source&quot; and the **DragNDrop** class handles everything else.\n\nIn addition to the payload, the &quot;Drag Source&quot; needs to provide the **DragNDrop** class with the cursor that will be displayed and dragged across the screen.&#160; This can be anything; an image, a user control, a rectangle, etc.\n\nThe &quot;Drop Spot&quot; will be notified when the cursor is entering and exiting its space, so it can react appropriately.&#160; It will also be notified when the payload is dropped with the instance of the cursor and the absolute position.&#160; This is necessary in case the &quot;Drop Spot&quot; wants to animate the drop in any way.\n\n### The Demo\n\nI created the [Twitter Search Tool](http://brianstestsite.googlepages.com/DragAndDrop.html) to prove out this concept.&#160; The idea is that search for a term and it returns a list of tweets. When you find a tweet that you like, you can drop it on to the second list to keep track of it.&#160; It is not the most functional app in the world, but it illustrates the usage of the **DragNDrop** class nicely.&#160; Take a moment to try it out.\n\nNow that you have seen it in action, lets take a look at how I use the **DragNDrop** class.&#160; This application uses a small data structure called **Tweet**.&#160; It contains all of the information about a given tweet (user name, user image, text, etc).&#160; The **Tweet** is the payload.\n\nIn the Silverlight UI, I created a user control to represent each item in the list called **ListItem**.&#160; The XAML is available in the full source if you are curious.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:28ee7663-19ed-43fd-9701-c0b058d3c912\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">partial</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ListItem : UserControl, DragNDrop</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tweet</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">.IThumbnailDragSource\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> DragNDrop</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tweet</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> _dragNDrop;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ListItem()\n    {\n        InitializeComponent();\n\n        _dragNDrop </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> DragNDrop</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tweet</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">);\n        _dragNDrop.DraggingEnabledDistance </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">5.0</span><span style=\"color: #000000;\">;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> FrameworkElement DragCursor\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">\n        {\n            </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Image\n            {\n                Width </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> TweetImage.ActualWidth,\n                Height </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> TweetImage.ActualHeight,\n                Source </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> TweetImage.Source,\n                Opacity </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">\n            };\n        }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Tweet Payload\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> DataContext </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> Tweet; }\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis code is pretty straight-forward.&#160; The DragCursor returns a new image with the picture of the user.&#160; The payload is the actual Tweet.&#160; The constructor creates an instance of **DragNDrop** and passes itself in as the source.&#160; It also sets the **DraggingEnabledDistance**.&#160; This is the distance (in pixels) that the user must drag before the dragging really begins.&#160; The default is 10 pixels.\n\nNext, lets take a look at the &quot;Drop Spot&quot; code.&#160; It is also a user control, **TweetDropList,** which includes a ListBox control.&#160; It also includes an opaque canvas that gives the effect of highlighting when it is made visible.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:dff8e087-a3c4-46f8-b573-f73c39305ea8\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">partial</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> TweetDropList : DragNDrop</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tweet</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">.IThumbnailDropSpot\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> ObservableCollection</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tweet</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> _savedTweets </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ObservableCollection</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tweet</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> TweetDropList()\n    {\n        InitializeComponent();\n        DropList.ItemsSource </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> _savedTweets;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DragDropEnter()\n    {\n        Highlight.Visibility </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Visibility.Visible;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DragDropExit()\n    {\n        Highlight.Visibility </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Visibility.Collapsed;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> ThumbnailDroping(Tweet dataContext, FrameworkElement cursor, Point cursorPosition)\n    {\n        DragDropExit();\n        AnimateCursor(cursor, cursorPosition, () </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> _savedTweets.Add(dataContext));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nI have left out the **AnimateCursor** code, but it simply generates a storyboard on the cursor and quickly morphs it down to a size of zero.&#160; That code can be found in the source bundle.&#160; The rest of this implementation is extremely simple.&#160; **DragDropEnter** and **DragDropExit** simply hides and shows the highlight layer.&#160; **ThumbnailDropping** will remove the highlighting layer and animate the cursor to give the effect of the item being dropped.&#160; When the animation completes, the new tweet is added to the **_savedTweets** collection, which will cause the** **user control to display the new tweet.\n\n### Thats It!\n\nI designed the **DragNDrop** class to be as simple to use as possible.&#160; I have been using a version of this class in my product and I have had great results.&#160; The &quot;Drop Spots&quot; can implement as many versions of **IThumbnailDropSpot** as it needs to allow different types of items to be dragged.&#160; The **DragNDrop** class can be instantiated as many times as necessary, for every &quot;Drag Source&quot;.&#160; \n\nPlease play with this class and give me feedback.&#160; I'd love to hear how it is being used.\n\n[DragNDrop Twitter Demo](http://brianstestsite.googlepages.com/DragAndDrop.html) \n\n[DragNDrop Twitter Demo Source](http://brianstestsite.googlepages.com/DragNDrop_Source.zip) \n\n[DragNDrop.cs](http://brianstestsite.googlepages.com/DragNDrop.cs) \n\n[Extensions.cs](http://brianstestsite.googlepages.com/Extensisons.cs) (a handful of extension methods that DragNDrop uses)","source":"_posts/2009-02-10-drag-and-drop-with-silverlight.md","raw":"---\ntitle: Drag and Drop with Silverlight\nid: 56\ncategories:\n  - Uncategorized\ndate: 2009-02-10 17:45:00\ntags:\n---\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F02%2F10%2Fdrag-and-drop-with-silverlight.aspx)](http://dotnetshoutout.com/Drag-and-Drop-with-Silverlight) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f02%2f10%2fdrag-and-drop-with-silverlight.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f02%2f10%2fdrag-and-drop-with-silverlight.aspx)   \n\n### The Problem\n\nI have been developing with Silverlight for a few months now, and I have really been enjoying myself.&#160; It has been the enabling technology my project and we have been extremely productive in the environment.&#160; Unfortunately, Silverlight is still in version 2.0 and there are some missing capabilities.\n\nOne such hole in the framework is &quot;Drag and Drop&quot;.&#160; There is no support for it directly.&#160; There are several blog examples on the web, but I have yet to find a fully encapsulated, generic solution to the &quot;Drag and Drop&quot; problem.&#160; For instance, how soon after dragging do you really want to be dragging?&#160; You don't want to drag immediately, as that will affect normal clicking on an element.&#160; How do you handle drags from one distinct control to another that are not aware of each other?&#160; How do you clue the user in that a given control is droppable?&#160; How do you add animation to cue the user that the item is being dropped?\n\n### Introducing DragNDrop\n\nTo answer these questions, I created the **DragNDrop** class.&#160; It is a manager of sorts, and watches a &quot;Drag Source&quot; for the mouse down events.&#160; The &quot;Drag Source&quot; implements an interface and the &quot;Drop Spot&quot; implements a complimentary interface.&#160; This allows for the &quot;Drag Source&quot; and &quot;Drop Spot&quot; to be blissfully unaware of each other.\n\n### Usage\n\nThe assumption made with this class is that there is some sort of a payload.&#160; This payload is picked up from the &quot;Drag Source&quot; and dropped into the &quot;Drop Spot&quot;.&#160; The &quot;Drop Spot&quot; can accept a payload of any types that it implements from any &quot;Drag Source&quot; that implements the complementary interface.&#160; Lets take a look at the interfaces:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:0b342a59-bca7-4daa-bfe0-7e2312fca29b\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> DragNDrop</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">PayloadType</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IThumbnailDragSource\n    {\n        FrameworkElement DragCursor { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; }\n        PayloadType Payload { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IThumbnailDropSpot\n    {\n        </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DragDropEnter();\n        </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DragDropExit();  \n        </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> ThumbnailDroping(PayloadType dataContext, FrameworkElement cursor, Point cursorPosition);\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nFor instance, if a &quot;Drag Source&quot; wanted to allow dragging with a string payload, it would implement **DragNDrop&lt;string&gt;.IThumbnailDragSource**.&#160; Any &quot;Drop Spot&quot; that wants to accept a string payload would implement **DragNDrop&lt;string&gt;.IThumbnailDropSpot**.&#160; The **DragNDrop** class is then constructed with an instance of the &quot;Drag Source&quot; and the **DragNDrop** class handles everything else.\n\nIn addition to the payload, the &quot;Drag Source&quot; needs to provide the **DragNDrop** class with the cursor that will be displayed and dragged across the screen.&#160; This can be anything; an image, a user control, a rectangle, etc.\n\nThe &quot;Drop Spot&quot; will be notified when the cursor is entering and exiting its space, so it can react appropriately.&#160; It will also be notified when the payload is dropped with the instance of the cursor and the absolute position.&#160; This is necessary in case the &quot;Drop Spot&quot; wants to animate the drop in any way.\n\n### The Demo\n\nI created the [Twitter Search Tool](http://brianstestsite.googlepages.com/DragAndDrop.html) to prove out this concept.&#160; The idea is that search for a term and it returns a list of tweets. When you find a tweet that you like, you can drop it on to the second list to keep track of it.&#160; It is not the most functional app in the world, but it illustrates the usage of the **DragNDrop** class nicely.&#160; Take a moment to try it out.\n\nNow that you have seen it in action, lets take a look at how I use the **DragNDrop** class.&#160; This application uses a small data structure called **Tweet**.&#160; It contains all of the information about a given tweet (user name, user image, text, etc).&#160; The **Tweet** is the payload.\n\nIn the Silverlight UI, I created a user control to represent each item in the list called **ListItem**.&#160; The XAML is available in the full source if you are curious.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:28ee7663-19ed-43fd-9701-c0b058d3c912\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">partial</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ListItem : UserControl, DragNDrop</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tweet</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">.IThumbnailDragSource\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> DragNDrop</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tweet</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> _dragNDrop;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ListItem()\n    {\n        InitializeComponent();\n\n        _dragNDrop </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> DragNDrop</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tweet</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">);\n        _dragNDrop.DraggingEnabledDistance </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">5.0</span><span style=\"color: #000000;\">;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> FrameworkElement DragCursor\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">\n        {\n            </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Image\n            {\n                Width </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> TweetImage.ActualWidth,\n                Height </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> TweetImage.ActualHeight,\n                Source </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> TweetImage.Source,\n                Opacity </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">\n            };\n        }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Tweet Payload\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> DataContext </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> Tweet; }\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis code is pretty straight-forward.&#160; The DragCursor returns a new image with the picture of the user.&#160; The payload is the actual Tweet.&#160; The constructor creates an instance of **DragNDrop** and passes itself in as the source.&#160; It also sets the **DraggingEnabledDistance**.&#160; This is the distance (in pixels) that the user must drag before the dragging really begins.&#160; The default is 10 pixels.\n\nNext, lets take a look at the &quot;Drop Spot&quot; code.&#160; It is also a user control, **TweetDropList,** which includes a ListBox control.&#160; It also includes an opaque canvas that gives the effect of highlighting when it is made visible.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:dff8e087-a3c4-46f8-b573-f73c39305ea8\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">partial</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> TweetDropList : DragNDrop</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tweet</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">.IThumbnailDropSpot\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> ObservableCollection</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tweet</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> _savedTweets </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> ObservableCollection</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tweet</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> TweetDropList()\n    {\n        InitializeComponent();\n        DropList.ItemsSource </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> _savedTweets;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DragDropEnter()\n    {\n        Highlight.Visibility </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Visibility.Visible;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DragDropExit()\n    {\n        Highlight.Visibility </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Visibility.Collapsed;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> ThumbnailDroping(Tweet dataContext, FrameworkElement cursor, Point cursorPosition)\n    {\n        DragDropExit();\n        AnimateCursor(cursor, cursorPosition, () </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> _savedTweets.Add(dataContext));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nI have left out the **AnimateCursor** code, but it simply generates a storyboard on the cursor and quickly morphs it down to a size of zero.&#160; That code can be found in the source bundle.&#160; The rest of this implementation is extremely simple.&#160; **DragDropEnter** and **DragDropExit** simply hides and shows the highlight layer.&#160; **ThumbnailDropping** will remove the highlighting layer and animate the cursor to give the effect of the item being dropped.&#160; When the animation completes, the new tweet is added to the **_savedTweets** collection, which will cause the** **user control to display the new tweet.\n\n### Thats It!\n\nI designed the **DragNDrop** class to be as simple to use as possible.&#160; I have been using a version of this class in my product and I have had great results.&#160; The &quot;Drop Spots&quot; can implement as many versions of **IThumbnailDropSpot** as it needs to allow different types of items to be dragged.&#160; The **DragNDrop** class can be instantiated as many times as necessary, for every &quot;Drag Source&quot;.&#160; \n\nPlease play with this class and give me feedback.&#160; I'd love to hear how it is being used.\n\n[DragNDrop Twitter Demo](http://brianstestsite.googlepages.com/DragAndDrop.html) \n\n[DragNDrop Twitter Demo Source](http://brianstestsite.googlepages.com/DragNDrop_Source.zip) \n\n[DragNDrop.cs](http://brianstestsite.googlepages.com/DragNDrop.cs) \n\n[Extensions.cs](http://brianstestsite.googlepages.com/Extensisons.cs) (a handful of extension methods that DragNDrop uses)","slug":"drag-and-drop-with-silverlight","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9fs00206eulzbduhaz5"},{"title":"Ann Arbor .NET Developers Group Has New Leadership!","id":"57","date":"2009-02-12T22:46:00.000Z","_content":"\nLast night, the [Ann Arbor .Net Developers](http://www.aadnd.org/) group held annual elections, and made new director appointments.&#160; The new leadership team is:     \n\n<span style=\"font-weight: bold\">President: </span>[Jay Harris](javascript:void(0);/*1234450632574*/)     \n<span style=\"font-weight: bold\">Vice President: </span>[Scott Zischerk](javascript:void(0);/*1234450693017*/)<span style=\"font-weight: bold\">      \n<span style=\"font-weight: bold\">Secretary: </span></span>[Darrell Hawley](javascript:void(0);/*1234450722209*/)     \n<span style=\"font-weight: bold\">Treasurer: </span>Eric Bratton     \n\n<span style=\"font-weight: bold\">Director of Programming: </span>[Mike Woelmer](javascript:void(0);/*1234450740770*/)     \n<span style=\"font-weight: bold\">Director of Membership: </span>[Dennis Burton](javascript:void(0);/*1234450654547*/)     \n<span style=\"font-weight: bold\">Director of Sponsorship: </span>[Brian Genisio](javascript:void(0);/*1234450758584*/) (me!)     \n\nWith my new role, I will be soliciting companies for sponsorship.&#160; This will require me to get out there a bit more than I am used to, which is something that I have been pushing myself to do for about a year now.&#160; I am excited to be a more significant part of the group, as this group means a lot to me.&#160; I can't say that I know that I will be good in this role, but what the heck?&#160; Lets give it a try.     \n\nNow, who wants to give me some money? :)&#160;&#160; <span style=\"font-weight: bold\"></span>","source":"_posts/2009-02-12-ann-arbor-net-developers-group-has-new-leadership.md","raw":"---\ntitle: 'Ann Arbor .NET Developers Group Has New Leadership!'\nid: 57\ncategories:\n  - Uncategorized\ndate: 2009-02-12 17:46:00\ntags:\n---\n\nLast night, the [Ann Arbor .Net Developers](http://www.aadnd.org/) group held annual elections, and made new director appointments.&#160; The new leadership team is:     \n\n<span style=\"font-weight: bold\">President: </span>[Jay Harris](javascript:void(0);/*1234450632574*/)     \n<span style=\"font-weight: bold\">Vice President: </span>[Scott Zischerk](javascript:void(0);/*1234450693017*/)<span style=\"font-weight: bold\">      \n<span style=\"font-weight: bold\">Secretary: </span></span>[Darrell Hawley](javascript:void(0);/*1234450722209*/)     \n<span style=\"font-weight: bold\">Treasurer: </span>Eric Bratton     \n\n<span style=\"font-weight: bold\">Director of Programming: </span>[Mike Woelmer](javascript:void(0);/*1234450740770*/)     \n<span style=\"font-weight: bold\">Director of Membership: </span>[Dennis Burton](javascript:void(0);/*1234450654547*/)     \n<span style=\"font-weight: bold\">Director of Sponsorship: </span>[Brian Genisio](javascript:void(0);/*1234450758584*/) (me!)     \n\nWith my new role, I will be soliciting companies for sponsorship.&#160; This will require me to get out there a bit more than I am used to, which is something that I have been pushing myself to do for about a year now.&#160; I am excited to be a more significant part of the group, as this group means a lot to me.&#160; I can't say that I know that I will be good in this role, but what the heck?&#160; Lets give it a try.     \n\nNow, who wants to give me some money? :)&#160;&#160; <span style=\"font-weight: bold\"></span>","slug":"ann-arbor-net-developers-group-has-new-leadership","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ft00226eulrm5ds5cc"},{"title":"Re-Thinking C# Events","id":"58","date":"2009-02-15T22:47:00.000Z","_content":"\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F02%2F15%2Fre-thinking-c-events.aspx) ](http://dotnetshoutout.com/Re-Thinking-C-Events)[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f02%2f15%2fre-thinking-c-events.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f02%2f15%2fre-thinking-c-events.aspx)   \n\nBack when I was learning C#, I was taught a pattern for events that went something like this:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:c8b7f72c-ad98-491f-a770-94a820ed6b54\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Tribe\n{\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> For demonstration only.  Please do not write code like this.</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> TribesmanAddedEventArgs : EventArgs\n    {\n        </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> Tribesman _tribesman;\n        </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> TribesmanAddedEventArgs(Tribesman tribesman)\n        {\n            _tribesman </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> tribesman;\n        }\n\n        </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Tribesman NewTribesman\n        {\n            </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> _tribesman; }\n        }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">delegate</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> TribesmanAddedDelegate(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, TribesmanAddedEventArgs args);\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> TribesmanAddedDelegate TribesmanAdded;\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnTribesmanAdded(Tribesman tribesman)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(TribesmanAdded </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            TribesmanAdded(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> TribesmanAddedEventArgs(tribesman));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNeedless to say, this is a pretty awful pattern.&#160; Add a few more events to this class (TribesmanRemoved, TribesmanModified, etc) and your code becomes a complete mess really quickly.\n\nWith some of the advances that C# language has made, and the EventHandler&lt;&gt; generic delegate, we can thankfully clean this up a bit:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:159ca3fe-e3f3-4f51-8bbb-13ecd5a1fa65\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Tribe\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> TribesmanAddedEventArgs : EventArgs\n    {\n        </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> TribesmanAddedEventArgs(Tribesman tribesman)\n        {\n            NewTribesman </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> tribesman;\n        }\n\n        </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Tribesman NewTribesman { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TribesmanAddedEventArgs</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> TribesmanAdded;\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnTribesmanAdded(Tribesman tribesman)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(TribesmanAdded </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            TribesmanAdded(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> TribesmanAddedEventArgs(tribesman));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nCan we take this any further? You bet. The EventArgs classes tend to be very boilerplate. Lets generalize it so we only have to write this code once:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:ea8133ff-6ba4-4416-a516-08a25688e2e5\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> EventArgs</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">PayloadType</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> : EventArgs\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> EventArgs(PayloadType payload)\n    {\n        Payload </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> payload;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> PayloadType Payload { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNow that we have that out of the way, the event pattern can be drastically reduced:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b4bfcdfb-33ef-4077-8992-2261a961c404\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Tribe\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">EventArgs</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tribesman</span><span style=\"color: #000000;\">&gt;&gt;</span><span style=\"color: #000000;\"> TribesmanAdded;\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnTribesmanAdded(Tribesman tribesman)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(TribesmanAdded </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            TribesmanAdded(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> EventArgs</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tribesman</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(tribesman));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis code is really starting to look better.&#160; Next, through the magic of extension methods, we can eliminate the &quot;OnTribesmanAdded&quot; method as well:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:9e12f09e-39d2-4434-a665-5c075bc5a46b\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> EventExtensions\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Fire</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">T</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\"> EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">EventArgs</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">T</span><span style=\"color: #000000;\">&gt;&gt;</span><span style=\"color: #000000;\"> handler, </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, T payload)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(handler </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            handler(sender, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> EventArgs</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">T</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(payload));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThere we go!&#160; Now, anywhere in the class that you want to fire the event, you can just call TribesmanAdded.Fire(this, newTribesman) and not worry if the event has been subscribed to. This is a case where you can call a method on a null object safely, because &quot;Fire&quot; is actually a static method.&#160; Even better, the event code in our class can be reduced to this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:36a5a49d-1c32-48f1-b96e-5e8648c57607\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Tribe\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">EventArgs</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tribesman</span><span style=\"color: #000000;\">&gt;&gt;</span><span style=\"color: #000000;\"> TribesmanAdded;\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nIn my opinion, this is the way we should be writing events in C# 3.0 and beyond.&#160; What do you think?","source":"_posts/2009-02-15-re-thinking-c-events.md","raw":"---\ntitle: 'Re-Thinking C# Events'\nid: 58\ncategories:\n  - Uncategorized\ndate: 2009-02-15 17:47:00\ntags:\n---\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F02%2F15%2Fre-thinking-c-events.aspx) ](http://dotnetshoutout.com/Re-Thinking-C-Events)[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f02%2f15%2fre-thinking-c-events.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f02%2f15%2fre-thinking-c-events.aspx)   \n\nBack when I was learning C#, I was taught a pattern for events that went something like this:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:c8b7f72c-ad98-491f-a770-94a820ed6b54\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Tribe\n{\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> For demonstration only.  Please do not write code like this.</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> TribesmanAddedEventArgs : EventArgs\n    {\n        </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> Tribesman _tribesman;\n        </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> TribesmanAddedEventArgs(Tribesman tribesman)\n        {\n            _tribesman </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> tribesman;\n        }\n\n        </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Tribesman NewTribesman\n        {\n            </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> _tribesman; }\n        }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">delegate</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> TribesmanAddedDelegate(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, TribesmanAddedEventArgs args);\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> TribesmanAddedDelegate TribesmanAdded;\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnTribesmanAdded(Tribesman tribesman)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(TribesmanAdded </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            TribesmanAdded(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> TribesmanAddedEventArgs(tribesman));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNeedless to say, this is a pretty awful pattern.&#160; Add a few more events to this class (TribesmanRemoved, TribesmanModified, etc) and your code becomes a complete mess really quickly.\n\nWith some of the advances that C# language has made, and the EventHandler&lt;&gt; generic delegate, we can thankfully clean this up a bit:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:159ca3fe-e3f3-4f51-8bbb-13ecd5a1fa65\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Tribe\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> TribesmanAddedEventArgs : EventArgs\n    {\n        </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> TribesmanAddedEventArgs(Tribesman tribesman)\n        {\n            NewTribesman </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> tribesman;\n        }\n\n        </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Tribesman NewTribesman { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TribesmanAddedEventArgs</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> TribesmanAdded;\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnTribesmanAdded(Tribesman tribesman)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(TribesmanAdded </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            TribesmanAdded(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> TribesmanAddedEventArgs(tribesman));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nCan we take this any further? You bet. The EventArgs classes tend to be very boilerplate. Lets generalize it so we only have to write this code once:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:ea8133ff-6ba4-4416-a516-08a25688e2e5\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> EventArgs</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">PayloadType</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> : EventArgs\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> EventArgs(PayloadType payload)\n    {\n        Payload </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> payload;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> PayloadType Payload { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNow that we have that out of the way, the event pattern can be drastically reduced:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b4bfcdfb-33ef-4077-8992-2261a961c404\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Tribe\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">EventArgs</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tribesman</span><span style=\"color: #000000;\">&gt;&gt;</span><span style=\"color: #000000;\"> TribesmanAdded;\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnTribesmanAdded(Tribesman tribesman)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(TribesmanAdded </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            TribesmanAdded(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> EventArgs</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tribesman</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(tribesman));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis code is really starting to look better.&#160; Next, through the magic of extension methods, we can eliminate the &quot;OnTribesmanAdded&quot; method as well:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:9e12f09e-39d2-4434-a665-5c075bc5a46b\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> EventExtensions\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Fire</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">T</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\"> EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">EventArgs</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">T</span><span style=\"color: #000000;\">&gt;&gt;</span><span style=\"color: #000000;\"> handler, </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, T payload)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(handler </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            handler(sender, </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> EventArgs</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">T</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(payload));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThere we go!&#160; Now, anywhere in the class that you want to fire the event, you can just call TribesmanAdded.Fire(this, newTribesman) and not worry if the event has been subscribed to. This is a case where you can call a method on a null object safely, because &quot;Fire&quot; is actually a static method.&#160; Even better, the event code in our class can be reduced to this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:36a5a49d-1c32-48f1-b96e-5e8648c57607\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Tribe\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> EventHandler</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">EventArgs</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Tribesman</span><span style=\"color: #000000;\">&gt;&gt;</span><span style=\"color: #000000;\"> TribesmanAdded;\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nIn my opinion, this is the way we should be writing events in C# 3.0 and beyond.&#160; What do you think?","slug":"re-thinking-c-events","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9fu00246eulg9cykmut"},{"title":"My Silverlight 3 Wish List","id":"60","date":"2009-03-06T22:51:00.000Z","_content":"\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2009%2F03%2F06%2Fmy-silverlight-3-wish-list.aspx)](http://dotnetshoutout.com/My-Silverlight-3-Wish-List) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f06%2fmy-silverlight-3-wish-list.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f06%2fmy-silverlight-3-wish-list.aspx)   \n\nI have been developing full time in Silverlight 2 for a few months now.&#160; I must say, it is the most fun environment I have ever programmed in.&#160; It has been an enabling technology in our product, and I am rather excited to see what comes next.&#160; If the pattern continues as I expect it probably will, we will hear all about the features of Silverlight 3 in a few weeks at [Mix 09](http://visitmix.com/).&#160; I will not be attending this conference, but I fully expect to be watching the important sessions virtually.&#160; I am hoping for a lot.&#160; You see, as much as I like the SIlverlight framework, it is missing some significant features that I can really use.\n\nSo, I figured I would publish my Silverlight 3 wish list.&#160; Some of these things are more important than others, but all of them are things that would make my &quot;Rich Internet Application&quot; more rich. **I don't want this list to sound like I am just a big complainer.&#160; **I think I am exercising the framework pretty hard, and Microsoft can only make the framework better with this list.&#160; \n\n**MediaElement frame rate control: **The Silverlight media element is missing the ability to control the frame rate.&#160; This keeps us from controlling the playback for slow-motion or fast-forward.&#160; I have to imagine that the sports domain wants this as well.\n\n**MediaElement loop control: **The current media element does not support looping of video content.&#160; It can be programmed by hooking the &quot;MediaEnded&quot; event, putting the position at zero, and playing again, but this causes a noticeable pause.&#160; This pause keeps looping play from being fluid.&#160; It would be nice if the media element supported it directly.\n\n**Native video rendering: **Silverlight 2 does not use any hardware capabilities for video playback -- it is all done in software.&#160; Therefore, the playback takes a lot of processor power.&#160; This is really noticeable when four videos are playing simultaneously.&#160; Any more on modern hardware is often choppy.&#160; I would like to be able to play as many as nine videos at once.\n\n**3D support: **Similar to the previous wish, Silverlight 2 does not use the video hardware directly.&#160; This means that there is no 3D support.&#160; It would be nice to see some 3D capabilities in Silverlight 3 -- preferably handled by hardware.\n\n**Direct bitmap manipulation: **Silverlight 2 does not support this, and there are certain types of effects and manipulations that are not possible in Silverlight.&#160; I would love to see some bitmap manipulation capabilities\n\n**Support for other data transports: **Currently, only HTTP requests are made available through the SIlverlight plug-in.&#160; This limits the use of more sophisticated WCF bindings.&#160; At a very minimum, it would be nice to be able to use TCP bindings via WCF.\n\n**Better mouse support: **Currently, we need to [hack in right-click](http://www.houseofbilz.com/archive/2009/03/01/right-clicking-in-silverlight-2----a-refinement.aspx), double-click and scroll-wheel capabilities.&#160; It would be nice to have native support.\n\n**Support for drag-and-drop: **This is another case where I have [hacked something together](http://www.houseofbilz.com/archive/2009/02/10/drag-and-drop-with-silverlight.aspx), but it would be great if I were able to rely on the framework.\n\n**Native support for the MVVM pattern: **As far as I have figured, the MVVM pattern is the most suitable pattern for most large-scale Silverlight development.&#160; It allows us to test the majority of our code and keep it out of the view.&#160; Unfortunately, I haven't found MVVM to be well supported in the framework.\n\n*   Commands -- They gave us ICommand, but nothing else.&#160; I have hacked something in, but native support would be nice.*   See what [Silverlight.FX](http://projects.nikhilk.net/SilverlightFX/) and [Cliburn](http://www.codeplex.com/caliburn) have done.&#160; Can we get something like this in the framework?*   Some sort of &quot;Inversion of Control&quot; or similar decoupling support?&#160; Might MEF or Prism show up in SIlverlight 3?*   Stand-alone binding -- As far as I can tell, binding is only available in controls.&#160; I can't write tests against controls.&#160; I often want to bind data in my model to my view model.&#160; I have written my own binder for this, but it would be nice to have some built-in support*   Better property notification.&#160; INotifyPropertyChanged creates a lot of boiler-plate code in the view model.&#160; I have minimized this by using a &quot;property bag&quot;, but some utilities that make view models easier to write would be nice.  \n\n**Interprocess communication: **I would like the ability to talk to other non-silverlight processes.&#160; This seems like a tall order, but I have some business cases for this.\n\nThat is all I have for now.&#160; I am sure there is more that I am not thinking of.&#160; I come across different needs every day.&#160; For most cases, I have been able to hack some sort of support in when I need it.&#160; In some cases, like the video playback support, I can't hack my wan out of the limitations.&#160; \n\nThis list looks like a lot now that I have written it down.&#160; I am very curious to know if I will be getting any of these features.","source":"_posts/2009-03-06-my-silverlight-3-wish-list.md","raw":"---\ntitle: My Silverlight 3 Wish List\nid: 60\ncategories:\n  - Uncategorized\ndate: 2009-03-06 17:51:00\ntags:\n---\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2009%2F03%2F06%2Fmy-silverlight-3-wish-list.aspx)](http://dotnetshoutout.com/My-Silverlight-3-Wish-List) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f06%2fmy-silverlight-3-wish-list.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f06%2fmy-silverlight-3-wish-list.aspx)   \n\nI have been developing full time in Silverlight 2 for a few months now.&#160; I must say, it is the most fun environment I have ever programmed in.&#160; It has been an enabling technology in our product, and I am rather excited to see what comes next.&#160; If the pattern continues as I expect it probably will, we will hear all about the features of Silverlight 3 in a few weeks at [Mix 09](http://visitmix.com/).&#160; I will not be attending this conference, but I fully expect to be watching the important sessions virtually.&#160; I am hoping for a lot.&#160; You see, as much as I like the SIlverlight framework, it is missing some significant features that I can really use.\n\nSo, I figured I would publish my Silverlight 3 wish list.&#160; Some of these things are more important than others, but all of them are things that would make my &quot;Rich Internet Application&quot; more rich. **I don't want this list to sound like I am just a big complainer.&#160; **I think I am exercising the framework pretty hard, and Microsoft can only make the framework better with this list.&#160; \n\n**MediaElement frame rate control: **The Silverlight media element is missing the ability to control the frame rate.&#160; This keeps us from controlling the playback for slow-motion or fast-forward.&#160; I have to imagine that the sports domain wants this as well.\n\n**MediaElement loop control: **The current media element does not support looping of video content.&#160; It can be programmed by hooking the &quot;MediaEnded&quot; event, putting the position at zero, and playing again, but this causes a noticeable pause.&#160; This pause keeps looping play from being fluid.&#160; It would be nice if the media element supported it directly.\n\n**Native video rendering: **Silverlight 2 does not use any hardware capabilities for video playback -- it is all done in software.&#160; Therefore, the playback takes a lot of processor power.&#160; This is really noticeable when four videos are playing simultaneously.&#160; Any more on modern hardware is often choppy.&#160; I would like to be able to play as many as nine videos at once.\n\n**3D support: **Similar to the previous wish, Silverlight 2 does not use the video hardware directly.&#160; This means that there is no 3D support.&#160; It would be nice to see some 3D capabilities in Silverlight 3 -- preferably handled by hardware.\n\n**Direct bitmap manipulation: **Silverlight 2 does not support this, and there are certain types of effects and manipulations that are not possible in Silverlight.&#160; I would love to see some bitmap manipulation capabilities\n\n**Support for other data transports: **Currently, only HTTP requests are made available through the SIlverlight plug-in.&#160; This limits the use of more sophisticated WCF bindings.&#160; At a very minimum, it would be nice to be able to use TCP bindings via WCF.\n\n**Better mouse support: **Currently, we need to [hack in right-click](http://www.houseofbilz.com/archive/2009/03/01/right-clicking-in-silverlight-2----a-refinement.aspx), double-click and scroll-wheel capabilities.&#160; It would be nice to have native support.\n\n**Support for drag-and-drop: **This is another case where I have [hacked something together](http://www.houseofbilz.com/archive/2009/02/10/drag-and-drop-with-silverlight.aspx), but it would be great if I were able to rely on the framework.\n\n**Native support for the MVVM pattern: **As far as I have figured, the MVVM pattern is the most suitable pattern for most large-scale Silverlight development.&#160; It allows us to test the majority of our code and keep it out of the view.&#160; Unfortunately, I haven't found MVVM to be well supported in the framework.\n\n*   Commands -- They gave us ICommand, but nothing else.&#160; I have hacked something in, but native support would be nice.*   See what [Silverlight.FX](http://projects.nikhilk.net/SilverlightFX/) and [Cliburn](http://www.codeplex.com/caliburn) have done.&#160; Can we get something like this in the framework?*   Some sort of &quot;Inversion of Control&quot; or similar decoupling support?&#160; Might MEF or Prism show up in SIlverlight 3?*   Stand-alone binding -- As far as I can tell, binding is only available in controls.&#160; I can't write tests against controls.&#160; I often want to bind data in my model to my view model.&#160; I have written my own binder for this, but it would be nice to have some built-in support*   Better property notification.&#160; INotifyPropertyChanged creates a lot of boiler-plate code in the view model.&#160; I have minimized this by using a &quot;property bag&quot;, but some utilities that make view models easier to write would be nice.  \n\n**Interprocess communication: **I would like the ability to talk to other non-silverlight processes.&#160; This seems like a tall order, but I have some business cases for this.\n\nThat is all I have for now.&#160; I am sure there is more that I am not thinking of.&#160; I come across different needs every day.&#160; For most cases, I have been able to hack some sort of support in when I need it.&#160; In some cases, like the video playback support, I can't hack my wan out of the limitations.&#160; \n\nThis list looks like a lot now that I have written it down.&#160; I am very curious to know if I will be getting any of these features.","slug":"my-silverlight-3-wish-list","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9fv00266eulzrsywofp"},{"title":"Right-Clicking in Silverlight 2 -- A Refinement","id":"59","date":"2009-03-01T22:49:00.000Z","_content":"\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2009%2F03%2F01%2Fright-clicking-in-silverlight-2----a-refinement.aspx)](http://dotnetshoutout.com/Right-Clicking-in-Silverlight-2-A-Refinement) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f01%2fright-clicking-in-silverlight-2----a-refinement.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f01%2fright-clicking-in-silverlight-2----a-refinement.aspx)   \n\n### The Problem\n\nIf you search for &quot;[Right Click Silverlight 2](http://www.google.com/search?client=safari&amp;rls=en-us&amp;q=right+click+silverlight+2&amp;ie=UTF-8&amp;oe=UTF-8)&quot; in Google, you will get several hits.&#160; There are several ways to achieve this functionality, and they all have two things in common that I object to: \n\n1\\. They use Javascript to send a message to the Silverlight application.&#160; While there is no way (that I know of) around this,&#160; requiring the hosting HTML to include this code is what I object to.&#160; Moving the app to a new page requires the same hookups that the developer may or may not remember to do.\n\n2\\. They send events around that require a hacky feel -- violating encapsulation and separations of concern (SOC) in a way that makes my skin itch.&#160;&#160; Any complex application with user controls strewn throughout will feel the pain of these approaches.\n\nThis article solves both of these problems:\n\nFirst, don't require the user to write the Javascript every time.&#160; Instead let the Silverlight code execute the javascript that includes the necessary browser functionality. \n\nSecond, instead of sending events around, or passing arguments through your user controls, use reflection to find the controls that care about right-clicks.&#160; This is the fun part.&#160; There exists a neat little static method called VisualTreeHelper.FindElementsInHostCoordinates().&#160; You pass it the mouse coordinates, and it returns a list of all of the controls that occupy space at that point.&#160; Then, just find any controls that implement the interface IRightClickable and call the method. \n\n### The Code\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b0eaf7d2-f123-455a-aee0-cc8acd820a2e\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> RightClickHandler\n{\n   </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IRightClickable\n   {\n       </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnRightClick(Point point);\n   }\n\n   </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> RightClickHandler()\n   {}\n\n   </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> RightClickHandler Instance </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RightClickHandler();\n\n   </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">bool</span><span style=\"color: #000000;\"> Initialized { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n   </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Initialize()\n   {\n       </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(Initialized)\n           </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">;\n\n       HtmlPage.Window.Eval(\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">function OnClick(e) {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\">\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">    if (!e) e = window.event;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\">\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">    var silverlightControl = document.getElementById('</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> HtmlPage.Plugin.Id </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">');</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\">\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">    if (silverlightControl) silverlightControl.Content.RightClickListener.ProcessMouseEvent(e);</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\">\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">}</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\">\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">document.onmousedown = OnClick;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\">\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">document.oncontextmenu = function() { return false; }</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n       HtmlPage.RegisterScriptableObject(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">RightClickListener</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, Instance);\n\n       Initialized </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">true</span><span style=\"color: #000000;\">;\n   }\n\n   [ScriptableMember]\n   </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> ProcessMouseEvent(ScriptObject evt)\n   {\n       </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> button </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">.Parse(evt.GetProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">button</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToString());\n       </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (button </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">)\n       {\n           var location </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Point\n           {\n               X </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">double</span><span style=\"color: #000000;\">.Parse(evt.GetProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">clientX</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToString()),\n               Y </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">double</span><span style=\"color: #000000;\">.Parse(evt.GetProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">clientY</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToString())\n           };\n\n           </span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (IRightClickable element </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> FindElements</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IRightClickable</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(location))\n               element.OnRightClick(location);\n       }\n   }\n\n   </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> IEnumerable</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">T</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> FindElements</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">pT</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(Point absoluteLocation) </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> T : </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\">\n   {\n       </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> from element </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> VisualTreeHelper.FindElementsInHostCoordinates(absoluteLocation, Application.Current.RootVisual)\n              </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> element </span><span style=\"color: #0000FF;\">is</span><span style=\"color: #000000;\"> T\n              select element </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> T;\n   }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### The Usage\n\nSimply initialize the RightClickHandler code somewhere (It can be called more than once without any ill effects), and implement the interface.&#160; If the control is right-clicked, OnRightClick() will be called! \n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:49e0ed9e-fdc5-447f-8bc1-4f2b89924a4c\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">partial</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> TestControl : UserControl, RightClickHandler.IRightClickable\n{\n   </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> TestControl()\n   {\n       RightClickHandler.Initialize();\n       InitializeComponent();\n   }\n\n   </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnRightClick(Point point)\n   {\n       Input.Text </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Clicked: (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> point.X </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> point.Y </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">)</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\n   }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Windowless Mode \n\nIt seems that there is no way around this.&#160; The Silverlight plugin must be created as &quot;Windowless&quot; in order to receive right clicks.&#160; I would have loved to encapsulate this in the RightClickHandler class, but it seems that there is no way.&#160; In your aspx, you would have: \n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b244a652-97a8-4932-ae57-de1cbd265e43\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">asp:Silverlight </span><span style=\"color: #FF0000;\">Windowless</span><span style=\"color: #0000FF;\">=\"true\"</span><span style=\"color: #FF0000;\"> runat</span><span style=\"color: #0000FF;\">=\"server\"</span><span style=\"color: #FF0000;\"> ... </span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nIf you are using straight HTML, you would add this parameter: \n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:37308b64-99a2-45c6-a9d2-94d1ee27e2b9\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">param </span><span style=\"color: #FF0000;\">name</span><span style=\"color: #0000FF;\">=\"windowless\"</span><span style=\"color: #FF0000;\"> value</span><span style=\"color: #0000FF;\">=\"true\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>","source":"_posts/2009-03-01-right-clicking-in-silverlight-2-a-refinement.md","raw":"---\ntitle: Right-Clicking in Silverlight 2 -- A Refinement\nid: 59\ncategories:\n  - Uncategorized\ndate: 2009-03-01 17:49:00\ntags:\n---\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2009%2F03%2F01%2Fright-clicking-in-silverlight-2----a-refinement.aspx)](http://dotnetshoutout.com/Right-Clicking-in-Silverlight-2-A-Refinement) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f01%2fright-clicking-in-silverlight-2----a-refinement.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f01%2fright-clicking-in-silverlight-2----a-refinement.aspx)   \n\n### The Problem\n\nIf you search for &quot;[Right Click Silverlight 2](http://www.google.com/search?client=safari&amp;rls=en-us&amp;q=right+click+silverlight+2&amp;ie=UTF-8&amp;oe=UTF-8)&quot; in Google, you will get several hits.&#160; There are several ways to achieve this functionality, and they all have two things in common that I object to: \n\n1\\. They use Javascript to send a message to the Silverlight application.&#160; While there is no way (that I know of) around this,&#160; requiring the hosting HTML to include this code is what I object to.&#160; Moving the app to a new page requires the same hookups that the developer may or may not remember to do.\n\n2\\. They send events around that require a hacky feel -- violating encapsulation and separations of concern (SOC) in a way that makes my skin itch.&#160;&#160; Any complex application with user controls strewn throughout will feel the pain of these approaches.\n\nThis article solves both of these problems:\n\nFirst, don't require the user to write the Javascript every time.&#160; Instead let the Silverlight code execute the javascript that includes the necessary browser functionality. \n\nSecond, instead of sending events around, or passing arguments through your user controls, use reflection to find the controls that care about right-clicks.&#160; This is the fun part.&#160; There exists a neat little static method called VisualTreeHelper.FindElementsInHostCoordinates().&#160; You pass it the mouse coordinates, and it returns a list of all of the controls that occupy space at that point.&#160; Then, just find any controls that implement the interface IRightClickable and call the method. \n\n### The Code\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b0eaf7d2-f123-455a-aee0-cc8acd820a2e\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> RightClickHandler\n{\n   </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IRightClickable\n   {\n       </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnRightClick(Point point);\n   }\n\n   </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> RightClickHandler()\n   {}\n\n   </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> RightClickHandler Instance </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RightClickHandler();\n\n   </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">bool</span><span style=\"color: #000000;\"> Initialized { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n   </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Initialize()\n   {\n       </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(Initialized)\n           </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">;\n\n       HtmlPage.Window.Eval(\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">function OnClick(e) {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\">\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">    if (!e) e = window.event;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\">\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">    var silverlightControl = document.getElementById('</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> HtmlPage.Plugin.Id </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">');</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\">\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">    if (silverlightControl) silverlightControl.Content.RightClickListener.ProcessMouseEvent(e);</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\">\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">}</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\">\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">document.onmousedown = OnClick;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\">\n              </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">document.oncontextmenu = function() { return false; }</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n       HtmlPage.RegisterScriptableObject(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">RightClickListener</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, Instance);\n\n       Initialized </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">true</span><span style=\"color: #000000;\">;\n   }\n\n   [ScriptableMember]\n   </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> ProcessMouseEvent(ScriptObject evt)\n   {\n       </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> button </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">.Parse(evt.GetProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">button</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToString());\n       </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (button </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">)\n       {\n           var location </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Point\n           {\n               X </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">double</span><span style=\"color: #000000;\">.Parse(evt.GetProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">clientX</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToString()),\n               Y </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">double</span><span style=\"color: #000000;\">.Parse(evt.GetProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">clientY</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToString())\n           };\n\n           </span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (IRightClickable element </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> FindElements</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IRightClickable</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(location))\n               element.OnRightClick(location);\n       }\n   }\n\n   </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> IEnumerable</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">T</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> FindElements</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">pT</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(Point absoluteLocation) </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> T : </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\">\n   {\n       </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> from element </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> VisualTreeHelper.FindElementsInHostCoordinates(absoluteLocation, Application.Current.RootVisual)\n              </span><span style=\"color: #0000FF;\">where</span><span style=\"color: #000000;\"> element </span><span style=\"color: #0000FF;\">is</span><span style=\"color: #000000;\"> T\n              select element </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> T;\n   }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### The Usage\n\nSimply initialize the RightClickHandler code somewhere (It can be called more than once without any ill effects), and implement the interface.&#160; If the control is right-clicked, OnRightClick() will be called! \n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:49e0ed9e-fdc5-447f-8bc1-4f2b89924a4c\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">partial</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> TestControl : UserControl, RightClickHandler.IRightClickable\n{\n   </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> TestControl()\n   {\n       RightClickHandler.Initialize();\n       InitializeComponent();\n   }\n\n   </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnRightClick(Point point)\n   {\n       Input.Text </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Clicked: (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> point.X </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> point.Y </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">)</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\n   }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Windowless Mode \n\nIt seems that there is no way around this.&#160; The Silverlight plugin must be created as &quot;Windowless&quot; in order to receive right clicks.&#160; I would have loved to encapsulate this in the RightClickHandler class, but it seems that there is no way.&#160; In your aspx, you would have: \n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b244a652-97a8-4932-ae57-de1cbd265e43\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">asp:Silverlight </span><span style=\"color: #FF0000;\">Windowless</span><span style=\"color: #0000FF;\">=\"true\"</span><span style=\"color: #FF0000;\"> runat</span><span style=\"color: #0000FF;\">=\"server\"</span><span style=\"color: #FF0000;\"> ... </span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nIf you are using straight HTML, you would add this parameter: \n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:37308b64-99a2-45c6-a9d2-94d1ee27e2b9\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">param </span><span style=\"color: #FF0000;\">name</span><span style=\"color: #0000FF;\">=\"windowless\"</span><span style=\"color: #FF0000;\"> value</span><span style=\"color: #0000FF;\">=\"true\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>","slug":"right-clicking-in-silverlight-2-a-refinement","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9fw00286eul5v9y8nz2"},{"title":"Testing WCF Service Apps (Part 1 of 4)","id":"50","date":"2008-11-24T22:34:00.000Z","_content":"\nPrevious posts: [Part 0 of 4: Introduction](http://houseofbilz.com/HouseOfBilz/archive/2008/11/18/testing-wcf-service-apps-part-0-of-4.aspx)\n [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2FHouseOfBilz%2Farchive%2F2008%2F11%2F18%2Ftesting-wcf-service-apps-part-0-of-4.aspx)](http://dotnetshoutout.com/Testing-WCF-Services)&#160;[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2008%2f11%2f24%2ftesting-wcf-service-apps-part-1-of-4.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2008%2f11%2f24%2ftesting-wcf-service-apps-part-1-of-4.aspx)   \n\n### **Testing the Service**\n\nOf the four posts, testing the service is by far the easiest.\n\nOne of the most beautiful things about the WCF framework is the way it was designed to be more testable than ASPX services.&#160; When you design your WCF interface, you are mostly just designing an interface with the WCF ServiceContract attributes.&#160; The WCF framework uses your interface to determine the actual contract and transport mechanism so you don't have to.&#160; \n\nThis is the key to testing WCF services:&#160; YOU DON'T HAVE TO WORRY ABOUT THE WCF FRAMEWORK.&#160; This means that you can simply instantiate your service directly and start calling public methods on it.&#160; You never need to worry about hitting the service through the transport layer.&#160; You can focus on what is important: your code.\n\n### **Recipe Box Service Interface**\n\nThis is the interface that my WCF service publishes:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:fb50163d-8fc2-4d94-a74d-84fce328259c\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[ServiceContract]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IRecipeBoxService\n{\n    [OperationContract] \n    RecipeData[] AllRecipes();\n\n    [OperationContract]\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SaveRecipe(RecipeData recipe);\n\n    [OperationContract]\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DeleteRecipe(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> id);\n\n    [OperationContract]\n    IngredientData[] AllIngredients();\n\n    [OperationContract]\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SaveIngredient(IngredientData ingredient);\n\n    [OperationContract]\n    IngredientData[] FindIngredients(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> nameIsLike);\n\n    [OperationContract]  \n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DeleteIngredient(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> id);\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### **The Tests**\n\nThe actual implementation is named RecipeBoxService, and that is the class I am interested in testing.&#160;&#160; A test might look something like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:2ccaecdd-4f6e-4454-aab1-af9994bccea9\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[Test]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_Get_All_Recipes_Returns_SingleRecipe()\n{\n    PopulateDatabase(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">AAA</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">BBB</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CCC</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n\n    var recipeBoxService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeBoxService();\n    var recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipeBoxService.AllRecipes();\n\n    Assert.That(recipes.Length, Is.EqualTo(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n    Assert.That(recipes[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">AAA</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    Assert.That(recipes[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Description, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">BBB</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    Assert.That(recipes[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Author, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CCC</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nIt is that simple.&#160; YOU SHOULD NEVER NEED TO CREATE A SERVICE REFERENCE IN YOUR TEST PROJECT.&#160; Forget about WCF and test your service logic directly.\n\n### **Abstracting the back end**\n\nNote: I am using a database abstraction product called [Castle Active Record](http://castleproject.org/activerecord/index.html) in my service which gives me a lot of great features.&#160; From a testing perspective, the most important feature is that you can swap out the actual database for a more testable back end.&#160; Good unit tests (usually) do not rely on external databases, external services, file systems or any other environment-specific requirements.&#160; In my approach, I am using an in-memory, temporal database that only lives as long as the test does.&#160; Please see my post on [mocking out the database](http://www.houseofbilz.com/archive/2008/07/22/active-record-mock-framework.aspx) with ActiveRecord or more information on this. \n\n### Next time\n\nI will talk about how you test the client without connecting to the service. [(Part 2 or 4)](http://houseofbilz.com/archive/2008/11/29/testing-wcf-service-apps-part-2-of-4.aspx)","source":"_posts/2008-11-24-testing-wcf-service-apps-part-1-of-4.md","raw":"---\ntitle: Testing WCF Service Apps (Part 1 of 4)\nid: 50\ncategories:\n  - Uncategorized\ndate: 2008-11-24 17:34:00\ntags:\n---\n\nPrevious posts: [Part 0 of 4: Introduction](http://houseofbilz.com/HouseOfBilz/archive/2008/11/18/testing-wcf-service-apps-part-0-of-4.aspx)\n [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2FHouseOfBilz%2Farchive%2F2008%2F11%2F18%2Ftesting-wcf-service-apps-part-0-of-4.aspx)](http://dotnetshoutout.com/Testing-WCF-Services)&#160;[![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2008%2f11%2f24%2ftesting-wcf-service-apps-part-1-of-4.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2008%2f11%2f24%2ftesting-wcf-service-apps-part-1-of-4.aspx)   \n\n### **Testing the Service**\n\nOf the four posts, testing the service is by far the easiest.\n\nOne of the most beautiful things about the WCF framework is the way it was designed to be more testable than ASPX services.&#160; When you design your WCF interface, you are mostly just designing an interface with the WCF ServiceContract attributes.&#160; The WCF framework uses your interface to determine the actual contract and transport mechanism so you don't have to.&#160; \n\nThis is the key to testing WCF services:&#160; YOU DON'T HAVE TO WORRY ABOUT THE WCF FRAMEWORK.&#160; This means that you can simply instantiate your service directly and start calling public methods on it.&#160; You never need to worry about hitting the service through the transport layer.&#160; You can focus on what is important: your code.\n\n### **Recipe Box Service Interface**\n\nThis is the interface that my WCF service publishes:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:fb50163d-8fc2-4d94-a74d-84fce328259c\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[ServiceContract]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> IRecipeBoxService\n{\n    [OperationContract] \n    RecipeData[] AllRecipes();\n\n    [OperationContract]\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SaveRecipe(RecipeData recipe);\n\n    [OperationContract]\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DeleteRecipe(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> id);\n\n    [OperationContract]\n    IngredientData[] AllIngredients();\n\n    [OperationContract]\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SaveIngredient(IngredientData ingredient);\n\n    [OperationContract]\n    IngredientData[] FindIngredients(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> nameIsLike);\n\n    [OperationContract]  \n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DeleteIngredient(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> id);\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### **The Tests**\n\nThe actual implementation is named RecipeBoxService, and that is the class I am interested in testing.&#160;&#160; A test might look something like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:2ccaecdd-4f6e-4454-aab1-af9994bccea9\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[Test]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_Get_All_Recipes_Returns_SingleRecipe()\n{\n    PopulateDatabase(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Recipe(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">AAA</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">BBB</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CCC</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n\n    var recipeBoxService </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> RecipeBoxService();\n    var recipes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipeBoxService.AllRecipes();\n\n    Assert.That(recipes.Length, Is.EqualTo(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n    Assert.That(recipes[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Title, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">AAA</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    Assert.That(recipes[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Description, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">BBB</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    Assert.That(recipes[</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].Author, Is.EqualTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CCC</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nIt is that simple.&#160; YOU SHOULD NEVER NEED TO CREATE A SERVICE REFERENCE IN YOUR TEST PROJECT.&#160; Forget about WCF and test your service logic directly.\n\n### **Abstracting the back end**\n\nNote: I am using a database abstraction product called [Castle Active Record](http://castleproject.org/activerecord/index.html) in my service which gives me a lot of great features.&#160; From a testing perspective, the most important feature is that you can swap out the actual database for a more testable back end.&#160; Good unit tests (usually) do not rely on external databases, external services, file systems or any other environment-specific requirements.&#160; In my approach, I am using an in-memory, temporal database that only lives as long as the test does.&#160; Please see my post on [mocking out the database](http://www.houseofbilz.com/archive/2008/07/22/active-record-mock-framework.aspx) with ActiveRecord or more information on this. \n\n### Next time\n\nI will talk about how you test the client without connecting to the service. [(Part 2 or 4)](http://houseofbilz.com/archive/2008/11/29/testing-wcf-service-apps-part-2-of-4.aspx)","slug":"testing-wcf-service-apps-part-1-of-4","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9fz002a6eulm93vygye"},{"title":"Binding to Resources in Silverlight/WPF","id":"61","date":"2009-03-15T21:51:00.000Z","_content":"\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2009%2F03%2F15%2Fbinding-to-resources-in-silverlightwpf.aspx)](http://dotnetshoutout.com/Binding-to-Resources-in-SilverlightWPF) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f15%2fbinding-to-resources-in-silverlightwpf.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f15%2fbinding-to-resources-in-silverlightwpf.aspx)   \n\nThis article is describing how to solve the problem in SIlverlight, but the problem can be solved in WPF using the exact same technique.\n\nSo, now it is time to internationalize our application.&#160; I want to use the [built-in &quot;resx&quot; mechanism](http://msdn.microsoft.com/en-us/magazine/cc163609.aspx) for i18n in .net, so I create myself a resource file and start adding strings to the table:\n\n[![image](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/BindingtoResourcesinSilverlightWPF_C384/image_thumb_1.png)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/BindingtoResourcesinSilverlightWPF_C384/image_4.png) \n\nVisual Studio automatically generates the resource class for me, and I am ready to bind to the data in my XAML:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:f3950845-d6c0-4751-81df-2d232083ed5e\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">UserControl.Resources</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">l:i18n </span><span style=\"color: #FF0000;\">x:Key</span><span style=\"color: #0000FF;\">=\"i18n\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">UserControl.Resources</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n\n</span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">StackPanel </span><span style=\"color: #FF0000;\">x:Name</span><span style=\"color: #0000FF;\">=\"LayoutRoot\"</span><span style=\"color: #FF0000;\"> Orientation</span><span style=\"color: #0000FF;\">=\"Horizontal\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBox </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">Button </span><span style=\"color: #FF0000;\">Content</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Path=SearchButton, Source={StaticResource i18n}}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nBut I run my application and I get this exception: **Unhandled Error in Silverlight 2 Application AG_E_PARSER_BAD_TYPE**.&#160; I get this error message because the resx file is set to create my resource class as an &quot;internal&quot; class.&#160; Essentially, the SIlverlight engine doesn't have permission to instantiate a new i18n object, and it dies.\n\nFortunately, in Visual Studio 2008, they have given us a way to solve this problem.&#160; In the Resx editor, you can change the protection of the class it generates from internal to public.&#160; So, I do exactly that:\n\n[![image](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/BindingtoResourcesinSilverlightWPF_C384/image_thumb_2.png)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/BindingtoResourcesinSilverlightWPF_C384/image_6.png) \n\nNow my XAML should be able to bind to the resource, right?&#160; Wrong: **Unhandled Error in Silverlight 2 Application AG_E_PARSER_UNKNOWN_TYPE**.&#160; This time, it is complaining because the constructor to this public class that Visual Studio generated is internal!&#160; The class is public, but the constructor is internal, so the Silverlight/WPF engine still can't instantiate the object.\n\nI searched the interwebs, and I'm not alone with this problem.&#160; Most people solve the problem by adding a custom build step that modifies the code.&#160; Some even suggest changing the constructor to public by hand every time you update the resource table.&#160; I am here to say: THERE IS A BETTER WAY!&#160; I just created a public class with a single property that exposes the class:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:d72a67d8-3810-4c9e-b2e7-9145f735e5fa\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> i18nPublic\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> i18n resources </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> i18n();\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> i18n Strings { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> resources; } }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nBy adding this class, I can make a slight modification to the resource type and the binding path and I am now binding directly to the resources.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:8a94aeba-54bf-42d5-aa9a-4db30b09348f\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">UserControl.Resources</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">l:i18nPublic </span><span style=\"color: #FF0000;\">x:Key</span><span style=\"color: #0000FF;\">=\"i18n\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">UserControl.Resources</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n\n</span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">StackPanel </span><span style=\"color: #FF0000;\">x:Name</span><span style=\"color: #0000FF;\">=\"LayoutRoot\"</span><span style=\"color: #FF0000;\"> Orientation</span><span style=\"color: #0000FF;\">=\"Horizontal\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBox </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">Button </span><span style=\"color: #FF0000;\">Content</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Path=Strings.SearchButton, Source={StaticResource i18n}}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>","source":"_posts/2009-03-15-binding-to-resources-in-silverlightwpf.md","raw":"---\ntitle: Binding to Resources in Silverlight/WPF\nid: 61\ncategories:\n  - Uncategorized\ndate: 2009-03-15 17:51:00\ntags:\n---\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2009%2F03%2F15%2Fbinding-to-resources-in-silverlightwpf.aspx)](http://dotnetshoutout.com/Binding-to-Resources-in-SilverlightWPF) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f15%2fbinding-to-resources-in-silverlightwpf.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f15%2fbinding-to-resources-in-silverlightwpf.aspx)   \n\nThis article is describing how to solve the problem in SIlverlight, but the problem can be solved in WPF using the exact same technique.\n\nSo, now it is time to internationalize our application.&#160; I want to use the [built-in &quot;resx&quot; mechanism](http://msdn.microsoft.com/en-us/magazine/cc163609.aspx) for i18n in .net, so I create myself a resource file and start adding strings to the table:\n\n[![image](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/BindingtoResourcesinSilverlightWPF_C384/image_thumb_1.png)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/BindingtoResourcesinSilverlightWPF_C384/image_4.png) \n\nVisual Studio automatically generates the resource class for me, and I am ready to bind to the data in my XAML:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:f3950845-d6c0-4751-81df-2d232083ed5e\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">UserControl.Resources</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">l:i18n </span><span style=\"color: #FF0000;\">x:Key</span><span style=\"color: #0000FF;\">=\"i18n\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">UserControl.Resources</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n\n</span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">StackPanel </span><span style=\"color: #FF0000;\">x:Name</span><span style=\"color: #0000FF;\">=\"LayoutRoot\"</span><span style=\"color: #FF0000;\"> Orientation</span><span style=\"color: #0000FF;\">=\"Horizontal\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBox </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">Button </span><span style=\"color: #FF0000;\">Content</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Path=SearchButton, Source={StaticResource i18n}}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nBut I run my application and I get this exception: **Unhandled Error in Silverlight 2 Application AG_E_PARSER_BAD_TYPE**.&#160; I get this error message because the resx file is set to create my resource class as an &quot;internal&quot; class.&#160; Essentially, the SIlverlight engine doesn't have permission to instantiate a new i18n object, and it dies.\n\nFortunately, in Visual Studio 2008, they have given us a way to solve this problem.&#160; In the Resx editor, you can change the protection of the class it generates from internal to public.&#160; So, I do exactly that:\n\n[![image](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/BindingtoResourcesinSilverlightWPF_C384/image_thumb_2.png)](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/BindingtoResourcesinSilverlightWPF_C384/image_6.png) \n\nNow my XAML should be able to bind to the resource, right?&#160; Wrong: **Unhandled Error in Silverlight 2 Application AG_E_PARSER_UNKNOWN_TYPE**.&#160; This time, it is complaining because the constructor to this public class that Visual Studio generated is internal!&#160; The class is public, but the constructor is internal, so the Silverlight/WPF engine still can't instantiate the object.\n\nI searched the interwebs, and I'm not alone with this problem.&#160; Most people solve the problem by adding a custom build step that modifies the code.&#160; Some even suggest changing the constructor to public by hand every time you update the resource table.&#160; I am here to say: THERE IS A BETTER WAY!&#160; I just created a public class with a single property that exposes the class:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:d72a67d8-3810-4c9e-b2e7-9145f735e5fa\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> i18nPublic\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> i18n resources </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> i18n();\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> i18n Strings { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> resources; } }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nBy adding this class, I can make a slight modification to the resource type and the binding path and I am now binding directly to the resources.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:8a94aeba-54bf-42d5-aa9a-4db30b09348f\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">UserControl.Resources</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">l:i18nPublic </span><span style=\"color: #FF0000;\">x:Key</span><span style=\"color: #0000FF;\">=\"i18n\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">UserControl.Resources</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n\n</span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">StackPanel </span><span style=\"color: #FF0000;\">x:Name</span><span style=\"color: #0000FF;\">=\"LayoutRoot\"</span><span style=\"color: #FF0000;\"> Orientation</span><span style=\"color: #0000FF;\">=\"Horizontal\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBox </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">Button </span><span style=\"color: #FF0000;\">Content</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Path=Strings.SearchButton, Source={StaticResource i18n}}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>","slug":"binding-to-resources-in-silverlightwpf","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9g0002c6euly4hginel"},{"title":"My Silverlight Testing Rig","id":"62","date":"2009-03-28T21:53:00.000Z","_content":"\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2009%2F03%2F28%2Fmy-silverlight-testing-rig.aspx)](http://dotnetshoutout.com/My-Silverlight-Testing-Rig) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f28%2fmy-silverlight-testing-rig.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f28%2fmy-silverlight-testing-rig.aspx)   \n\nI was recently asked by someone on Twitter to describe my setup for writing tests against my Silverlight application.&#160; I thought I would write them down here in case others might find this information useful.\n\n**Testing Framework: **A slightly [modified version of NUnit](http://weblogs.asp.net/nunitaddin/archive/2008/05/01/silverlight-nunit-projects.aspx) that works with SIlverlight.\n\n**Mocking Framework:** [Moq 3.0](http://code.google.com/p/moq/) includes support for Silverlight.&#160; This is my favorite mocking framework, so I am happy that it now supports Silverlight.\n\n**Test Runner: **I use [TestDriven.NET](http://testdriven.net/) to run all of my tests locally.&#160; I use [Cruise Control](http://confluence.public.thoughtworks.org/display/CCNET/Welcome+to+CruiseControl.NET) to run the tests on the “Continuous Integration” system.\n\n**Making testing easier: **This is not specific to Silverlight testing, but I use [ReSharper](http://www.jetbrains.com/resharper/index.html) templates that I have customized to aid in writing tests quickly.\n\n**The MVVM Pattern: **This is not a tool, but I the majority of my SIlverlight code would be un-testable if I didn’t know the [MVVM](http://www.orbifold.net/default/?p=550) pattern.&#160; I highly recommend using this pattern with Silverlight.&#160; None of the view code can be tested using NUnit, so testing the ViewModel is essential.\n\n**UI Automation: **I am just starting to play with this.&#160; [White](http://www.codeplex.com/white) is a layer on top of Microsoft’s UI Automation (UIA) framework.&#160; UIA is much to hard to use without a “helper” layer.&#160; It lets you run fully automated UI tests.&#160; I only want to use this to make sure my data bindings are correct.&#160; My unit tests are really the bulk of my testing efforts.","source":"_posts/2009-03-28-my-silverlight-testing-rig.md","raw":"---\ntitle: My Silverlight Testing Rig\nid: 62\ncategories:\n  - Uncategorized\ndate: 2009-03-28 17:53:00\ntags:\n---\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2009%2F03%2F28%2Fmy-silverlight-testing-rig.aspx)](http://dotnetshoutout.com/My-Silverlight-Testing-Rig) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f28%2fmy-silverlight-testing-rig.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f03%2f28%2fmy-silverlight-testing-rig.aspx)   \n\nI was recently asked by someone on Twitter to describe my setup for writing tests against my Silverlight application.&#160; I thought I would write them down here in case others might find this information useful.\n\n**Testing Framework: **A slightly [modified version of NUnit](http://weblogs.asp.net/nunitaddin/archive/2008/05/01/silverlight-nunit-projects.aspx) that works with SIlverlight.\n\n**Mocking Framework:** [Moq 3.0](http://code.google.com/p/moq/) includes support for Silverlight.&#160; This is my favorite mocking framework, so I am happy that it now supports Silverlight.\n\n**Test Runner: **I use [TestDriven.NET](http://testdriven.net/) to run all of my tests locally.&#160; I use [Cruise Control](http://confluence.public.thoughtworks.org/display/CCNET/Welcome+to+CruiseControl.NET) to run the tests on the “Continuous Integration” system.\n\n**Making testing easier: **This is not specific to Silverlight testing, but I use [ReSharper](http://www.jetbrains.com/resharper/index.html) templates that I have customized to aid in writing tests quickly.\n\n**The MVVM Pattern: **This is not a tool, but I the majority of my SIlverlight code would be un-testable if I didn’t know the [MVVM](http://www.orbifold.net/default/?p=550) pattern.&#160; I highly recommend using this pattern with Silverlight.&#160; None of the view code can be tested using NUnit, so testing the ViewModel is essential.\n\n**UI Automation: **I am just starting to play with this.&#160; [White](http://www.codeplex.com/white) is a layer on top of Microsoft’s UI Automation (UIA) framework.&#160; UIA is much to hard to use without a “helper” layer.&#160; It lets you run fully automated UI tests.&#160; I only want to use this to make sure my data bindings are correct.&#160; My unit tests are really the bulk of my testing efforts.","slug":"my-silverlight-testing-rig","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9g1002e6eulqnf3aeb6"},{"title":"My ReSharper NUnit Test Templates","id":"63","date":"2009-03-29T21:54:00.000Z","_content":"\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F03%2F29%2Fmy-resharper-test-templates.aspx)](http://dotnetshoutout.com/My-ReSharper-NUnit-Test-Templates)   \n\nMuch like my previous post about what I use for testing in Silverlight, I was recently asked on Twitter for my ReSharper NUnit templates.&#160; I am posting them here if anyone finds them useful.\n\nBasically, I write a LOT of tests every day.&#160; These templates allow me to write tests faster.\n\n**New Test File Template**\n\nThis file template adds a new “Test” target when you say tell Visual Studio to create a new file from template.&#160; It populates your file with the correct namespaces and decorations to get you started.\n\n**Coding Templates**\n\nThese are shortcuts that create new tests, setups, teardowns or assertions.&#160; You just type the shortcut, hit tab, and the method or lines are created for you with your mouse cursor in the next place to type.&#160; The shortcuts are:\n\n*   test – Create a new [Test] method*   setup – Create a [SetUp] method*   teardown – Create a new [TearDown] method*   ise – Assert that condition is equal to value*   ist – Assert that condition is true*   isf – Assert that condition is false*   isn – Assert that condition is null*   isnn – Assert that condition is not null  \n\n[Download my ReSharper 4 NUnit templates.](http://brianstestsite.googlepages.com/ResharperTemplates.zip)","source":"_posts/2009-03-29-my-resharper-nunit-test-templates.md","raw":"---\ntitle: My ReSharper NUnit Test Templates\nid: 63\ncategories:\n  - Uncategorized\ndate: 2009-03-29 17:54:00\ntags:\n---\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F03%2F29%2Fmy-resharper-test-templates.aspx)](http://dotnetshoutout.com/My-ReSharper-NUnit-Test-Templates)   \n\nMuch like my previous post about what I use for testing in Silverlight, I was recently asked on Twitter for my ReSharper NUnit templates.&#160; I am posting them here if anyone finds them useful.\n\nBasically, I write a LOT of tests every day.&#160; These templates allow me to write tests faster.\n\n**New Test File Template**\n\nThis file template adds a new “Test” target when you say tell Visual Studio to create a new file from template.&#160; It populates your file with the correct namespaces and decorations to get you started.\n\n**Coding Templates**\n\nThese are shortcuts that create new tests, setups, teardowns or assertions.&#160; You just type the shortcut, hit tab, and the method or lines are created for you with your mouse cursor in the next place to type.&#160; The shortcuts are:\n\n*   test – Create a new [Test] method*   setup – Create a [SetUp] method*   teardown – Create a new [TearDown] method*   ise – Assert that condition is equal to value*   ist – Assert that condition is true*   isf – Assert that condition is false*   isn – Assert that condition is null*   isnn – Assert that condition is not null  \n\n[Download my ReSharper 4 NUnit templates.](http://brianstestsite.googlepages.com/ResharperTemplates.zip)","slug":"my-resharper-nunit-test-templates","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9g2002g6eul68i86pn4"},{"title":"My Summer Speaking Gigs","id":"66","date":"2009-05-19T21:59:00.000Z","_content":"\nI have been busy lining up opportunities to talk about Model-View-ViewModel (MVVM) in the context of WPF and SIlverlight.&#160; The good news is that I have some great gigs lined up this summer:\n\n*   June 11th, 2009 – [Greater Lansing .Net Users Group](http://www.glugnet.org/) – Flint, MI*   June 17th, 2009 – [Great Lakes Area .Net Users Group](http://www.migang.org/home.aspx) – Southfield, MI*   June 26/27, 2009 – [CodeStock](http://codestock.org/) – Knoxville, TN*   August 11th, 2009 – [West Michigan .Net Users Group](http://www.wmdotnet.org/) – Grand Rapids, MI (MVVM or Prism 2 TBD)  \n\nIn addition to that, I will be attending the [Ann Arbor Give Camp](http://michigangivecamp.org/cms/annarbor/) July 17-19.\n\nIn preparation for my MVVM talks, I will be honing my knowledge of the pattern by blogging here, so check back often if you are interested in MVVM!","source":"_posts/2009-05-19-my-summer-speaking-gigs.md","raw":"---\ntitle: My Summer Speaking Gigs\nid: 66\ncategories:\n  - Uncategorized\ndate: 2009-05-19 17:59:00\ntags:\n---\n\nI have been busy lining up opportunities to talk about Model-View-ViewModel (MVVM) in the context of WPF and SIlverlight.&#160; The good news is that I have some great gigs lined up this summer:\n\n*   June 11th, 2009 – [Greater Lansing .Net Users Group](http://www.glugnet.org/) – Flint, MI*   June 17th, 2009 – [Great Lakes Area .Net Users Group](http://www.migang.org/home.aspx) – Southfield, MI*   June 26/27, 2009 – [CodeStock](http://codestock.org/) – Knoxville, TN*   August 11th, 2009 – [West Michigan .Net Users Group](http://www.wmdotnet.org/) – Grand Rapids, MI (MVVM or Prism 2 TBD)  \n\nIn addition to that, I will be attending the [Ann Arbor Give Camp](http://michigangivecamp.org/cms/annarbor/) July 17-19.\n\nIn preparation for my MVVM talks, I will be honing my knowledge of the pattern by blogging here, so check back often if you are interested in MVVM!","slug":"my-summer-speaking-gigs","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9g3002i6eulo2pzwszg"},{"title":"Introducing Html Utilities for Silverlight","id":"64","date":"2009-04-26T21:54:00.000Z","_content":"\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F04%2F26%2Fintroducing-html-utilities-for-silverlight.aspx)](http://dotnetshoutout.com/Introducing-Html-Utilities-for-Silverlight) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f04%2f26%2fintroducing-html-utilities-for-silverlight.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f04%2f26%2fintroducing-html-utilities-for-silverlight.aspx)   \n\nI have just released an early version of [Html Utilties for Silverlight](http://htmlpageutil.codeplex.com/) on [CodePlex](http://www.codeplex.com/).&#160; This article will explain the whats and hows of this library.\n\n### Who is this library for?\n\nThe primary target for this library is someone who:\n\n1.  Develops software in Silverlight2.  Uses the Html DOM libraries in Silverlight  \n\n### What problem does this library solve?\n\nIn the first version of this library, it is all about testability.&#160; Lets say I have a (very simple) method I want to test.&#160; The code looks like this:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:a895c8f8-9bbf-4fa0-9ab7-6e32c78a7965\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> HtmlGenerator\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> HtmlElement CreateImage(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> url)\n    {\n        var img </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> HtmlPage.Document.CreateElement(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">img</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n        img.SetAttribute(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">src</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, url);\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> img;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nTrying to write a test for this becomes very difficult.&#160; There are two problems here:\n\n1.  HtmlPage is static, and testing CreateImage with this static is not a unit test.&#160; It relies on the browser.2.  Unless your tests are executing in the browser, there is no browser to fall back on.&#160; HtmlPage.Document fails with an exception that the HtmlPage is not enabled.\n\nThe test I WANT to write includes the ability to stub out the call to CreateElement and verify that the source was set.&#160; Using [NUnit](http://nunit.com/index.php) and [Moq](http://code.google.com/p/moq/), it would look something like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1003e424-78dc-412b-ae49-292124deeee3\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> JUST AN EXAMPLE OF WHAT I WANT TO DO.  SEE ACTUAL TEST FURTHER DOWN</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">[Test]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_Create_Image_Creates_Element_And_Sets_Src()\n{\n    var mockImage </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">HtmlElement</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n    HtmlPage_Document.Setup(doc </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> doc.CreateElement(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">img</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n        .Returns(mockImage.Object);\n\n    var newImage </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> TableGenerator.CreateImage(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">AbcDef.png</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n    Assert.That(newImage, Is.EqualTo(mockImage.Object));\n    mockImage.Verify(img </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> img.SetAttribute(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">src</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">AbcDef.png</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nI can’t do anything like this because the HtmlPage is static and there are no interfaces on any of the classes in the DOM.\n\nThis is a very contrived example for the purpose of illustration, but I have had to use this approach in many cases from loading new windows, to inserting data into the DOM.\n\n### What does this library do?\n\nThis library wraps all of the HtmlPage classes with wrappers that implement interfaces.&#160; For instance, HtmlPage is wrapped around a proxy that implements IHtmlPage.&#160; HtmlElement has a proxy wrapper that implements IHtmlElement.&#160; By using this approach, you can substitute anything you want in the Html DOM when you test.&#160; This may be any test object that implements the interfaces.&#160; I prefer to use Moq, but there are several other approaches to testing now that the system has interfaces to replace.\n\n### How do I use the library?\n\nIn an attempt to make the migration as simple as possible, any code that uses HtmlPage.* is just replaced with Html.Page.* (notice the dot after Html).&#160; \n\nSo, in the example above, the code would look like this now:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:d9020002-7d34-40c2-b26a-3a99999b715a\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> HtmlGenerator\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> IHtmlElement CreateImage(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> url)\n    {\n        var img </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Html.Page.Document.CreateElement(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">img</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n        img.SetAttribute(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">src</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, url);\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> img;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\nNotice that the only differences between these two methods are: \n\n1.  The return type is IHtmlElement instead of HtmlElement2.  HtmlPage.Document is replaced with Html.Page.Document\n\nNext, my entire test fixture looks like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b5799bc2-918a-4eec-a6e2-1aac3d657f45\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> HtmlGeneratorTests\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> MockHtml _mockHtml;\n\n    [SetUp]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">virtual</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetUp()\n    {\n        _mockHtml </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> MockHtml();\n    }\n\n    [TearDown]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">virtual</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> TearDown()\n    {\n        _mockHtml.TearDown();\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_Create_Image_Creates_Element_And_Sets_Src()\n    {\n        var mockImage </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlElement</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        _mockHtml.Document.Setup(doc </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> doc.CreateElement(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">img</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n            .Returns(mockImage.Object);\n\n        var newImage </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> HtmlGenerator.CreateImage(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">AbcDef.png</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        Assert.That(newImage, Is.EqualTo(mockImage.Object));\n        mockImage.Verify(img </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> img.SetAttribute(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">src</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">AbcDef.png</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nYou may be noticing that this test references a class named MockHtml.&#160; This is a class that implements the HtmlPage system using Moq, but you can do this in any way.&#160; \n\nThe most important thing to notice in this class is that we inject the IHtmlPage into the system using Html.SetHtmlPageForTesting() when we construct the object, and we set it back to null when we are complete.&#160; This is required so that when Html.Page is called, it calls your test implementation of IHtmlPage instead of the wrapper around the actual browser.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:fdaa3ae5-4215-4454-8e0a-e62a69a0ec95\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> MockHtml\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlPage</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Page { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IBrowserInformation</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> BrowserInformation { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlDocment</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Document { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlWindow</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Window { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> MockHtml()\n    {\n        Page </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlPage</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        BrowserInformation </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IBrowserInformation</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        Document </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlDocment</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        Window </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlWindow</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n\n        Page.SetupGet(page </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> page.BrowserInformation).Returns(BrowserInformation.Object);\n        Page.SetupGet(page </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> page.Document).Returns(Document.Object);\n        Page.SetupGet(page </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> page.Window).Returns(Window.Object);\n\n        Html.SetHtmlPageForTesting(Page.Object);\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> TearDown()\n    {\n        Html.SetHtmlPageForTesting(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### How do I get it?\n\nVersion 0.1 has been released on [CodePlex](http://htmlpageutil.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=26667).&#160; The source code is available on this site, along with the release DLL.&#160; The Source project is broken into 4 projects: The HtmlUtilities project, a Silverlight test, a Web Site to host the Silverlight test, and a set of unit tests, showing how to mock out everything you would want to do with the library.\n\n### Future plans\n\nI have some thoughts for where this library should go.&#160; I want to aim towards a very easy to use API for manipulating the DOM through Silverlight.&#160; My original thought was that the roadmap might look something like:\n\n0.1 -- Wrappers around existing objects \n\n0.2 -- Extensions to existing objects (HtmlLink, HtmlImage, HtmlDiv, etc) \n\n0.3 -- Helper utilities for doing more complex actions on the HTML \n\n0.4 -- Cross-browser issues abstracted away? \n\n0.5 -- Anything else?? \n\n1.0 -- World domination???\n\nAt least, in the next few versions, it would be nice to be able to do something like create a table using code that is much more clear than what it takes now.&#160; Possibly something that looks more like:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:c11076f5-8794-47d1-b174-e1907a12a9c6\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Table</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Border=1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n    Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">THead</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(\n        Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TR</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TH</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Header 1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">), Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TH</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Header 2</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)),\n    Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TBody</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(\n        Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TR</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TD</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data 1.1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">), Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TD</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data 1.2</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)),\n        Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TR</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TD</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data 2.1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">), Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TD</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data 2.2</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)))));</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThe Table type would have static properties on it instead of the more awkward way of doing it now. I dunno... I'm just playing at this poing. Would that be useful?","source":"_posts/2009-04-26-introducing-html-utilities-for-silverlight.md","raw":"---\ntitle: Introducing Html Utilities for Silverlight\nid: 64\ncategories:\n  - Uncategorized\ndate: 2009-04-26 17:54:00\ntags:\n---\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F04%2F26%2Fintroducing-html-utilities-for-silverlight.aspx)](http://dotnetshoutout.com/Introducing-Html-Utilities-for-Silverlight) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f04%2f26%2fintroducing-html-utilities-for-silverlight.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f04%2f26%2fintroducing-html-utilities-for-silverlight.aspx)   \n\nI have just released an early version of [Html Utilties for Silverlight](http://htmlpageutil.codeplex.com/) on [CodePlex](http://www.codeplex.com/).&#160; This article will explain the whats and hows of this library.\n\n### Who is this library for?\n\nThe primary target for this library is someone who:\n\n1.  Develops software in Silverlight2.  Uses the Html DOM libraries in Silverlight  \n\n### What problem does this library solve?\n\nIn the first version of this library, it is all about testability.&#160; Lets say I have a (very simple) method I want to test.&#160; The code looks like this:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:a895c8f8-9bbf-4fa0-9ab7-6e32c78a7965\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> HtmlGenerator\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> HtmlElement CreateImage(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> url)\n    {\n        var img </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> HtmlPage.Document.CreateElement(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">img</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n        img.SetAttribute(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">src</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, url);\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> img;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nTrying to write a test for this becomes very difficult.&#160; There are two problems here:\n\n1.  HtmlPage is static, and testing CreateImage with this static is not a unit test.&#160; It relies on the browser.2.  Unless your tests are executing in the browser, there is no browser to fall back on.&#160; HtmlPage.Document fails with an exception that the HtmlPage is not enabled.\n\nThe test I WANT to write includes the ability to stub out the call to CreateElement and verify that the source was set.&#160; Using [NUnit](http://nunit.com/index.php) and [Moq](http://code.google.com/p/moq/), it would look something like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1003e424-78dc-412b-ae49-292124deeee3\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> JUST AN EXAMPLE OF WHAT I WANT TO DO.  SEE ACTUAL TEST FURTHER DOWN</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">[Test]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_Create_Image_Creates_Element_And_Sets_Src()\n{\n    var mockImage </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">HtmlElement</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n    HtmlPage_Document.Setup(doc </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> doc.CreateElement(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">img</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n        .Returns(mockImage.Object);\n\n    var newImage </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> TableGenerator.CreateImage(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">AbcDef.png</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n    Assert.That(newImage, Is.EqualTo(mockImage.Object));\n    mockImage.Verify(img </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> img.SetAttribute(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">src</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">AbcDef.png</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nI can’t do anything like this because the HtmlPage is static and there are no interfaces on any of the classes in the DOM.\n\nThis is a very contrived example for the purpose of illustration, but I have had to use this approach in many cases from loading new windows, to inserting data into the DOM.\n\n### What does this library do?\n\nThis library wraps all of the HtmlPage classes with wrappers that implement interfaces.&#160; For instance, HtmlPage is wrapped around a proxy that implements IHtmlPage.&#160; HtmlElement has a proxy wrapper that implements IHtmlElement.&#160; By using this approach, you can substitute anything you want in the Html DOM when you test.&#160; This may be any test object that implements the interfaces.&#160; I prefer to use Moq, but there are several other approaches to testing now that the system has interfaces to replace.\n\n### How do I use the library?\n\nIn an attempt to make the migration as simple as possible, any code that uses HtmlPage.* is just replaced with Html.Page.* (notice the dot after Html).&#160; \n\nSo, in the example above, the code would look like this now:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:d9020002-7d34-40c2-b26a-3a99999b715a\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> HtmlGenerator\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> IHtmlElement CreateImage(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> url)\n    {\n        var img </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Html.Page.Document.CreateElement(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">img</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n        img.SetAttribute(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">src</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, url);\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> img;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\nNotice that the only differences between these two methods are: \n\n1.  The return type is IHtmlElement instead of HtmlElement2.  HtmlPage.Document is replaced with Html.Page.Document\n\nNext, my entire test fixture looks like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b5799bc2-918a-4eec-a6e2-1aac3d657f45\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> HtmlGeneratorTests\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> MockHtml _mockHtml;\n\n    [SetUp]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">virtual</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetUp()\n    {\n        _mockHtml </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> MockHtml();\n    }\n\n    [TearDown]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">virtual</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> TearDown()\n    {\n        _mockHtml.TearDown();\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_Create_Image_Creates_Element_And_Sets_Src()\n    {\n        var mockImage </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlElement</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        _mockHtml.Document.Setup(doc </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> doc.CreateElement(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">img</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n            .Returns(mockImage.Object);\n\n        var newImage </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> HtmlGenerator.CreateImage(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">AbcDef.png</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        Assert.That(newImage, Is.EqualTo(mockImage.Object));\n        mockImage.Verify(img </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> img.SetAttribute(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">src</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">AbcDef.png</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nYou may be noticing that this test references a class named MockHtml.&#160; This is a class that implements the HtmlPage system using Moq, but you can do this in any way.&#160; \n\nThe most important thing to notice in this class is that we inject the IHtmlPage into the system using Html.SetHtmlPageForTesting() when we construct the object, and we set it back to null when we are complete.&#160; This is required so that when Html.Page is called, it calls your test implementation of IHtmlPage instead of the wrapper around the actual browser.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:fdaa3ae5-4215-4454-8e0a-e62a69a0ec95\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> MockHtml\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlPage</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Page { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IBrowserInformation</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> BrowserInformation { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlDocment</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Document { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlWindow</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Window { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> MockHtml()\n    {\n        Page </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlPage</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        BrowserInformation </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IBrowserInformation</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        Document </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlDocment</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n        Window </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Mock</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IHtmlWindow</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\n\n        Page.SetupGet(page </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> page.BrowserInformation).Returns(BrowserInformation.Object);\n        Page.SetupGet(page </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> page.Document).Returns(Document.Object);\n        Page.SetupGet(page </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> page.Window).Returns(Window.Object);\n\n        Html.SetHtmlPageForTesting(Page.Object);\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> TearDown()\n    {\n        Html.SetHtmlPageForTesting(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### How do I get it?\n\nVersion 0.1 has been released on [CodePlex](http://htmlpageutil.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=26667).&#160; The source code is available on this site, along with the release DLL.&#160; The Source project is broken into 4 projects: The HtmlUtilities project, a Silverlight test, a Web Site to host the Silverlight test, and a set of unit tests, showing how to mock out everything you would want to do with the library.\n\n### Future plans\n\nI have some thoughts for where this library should go.&#160; I want to aim towards a very easy to use API for manipulating the DOM through Silverlight.&#160; My original thought was that the roadmap might look something like:\n\n0.1 -- Wrappers around existing objects \n\n0.2 -- Extensions to existing objects (HtmlLink, HtmlImage, HtmlDiv, etc) \n\n0.3 -- Helper utilities for doing more complex actions on the HTML \n\n0.4 -- Cross-browser issues abstracted away? \n\n0.5 -- Anything else?? \n\n1.0 -- World domination???\n\nAt least, in the next few versions, it would be nice to be able to do something like create a table using code that is much more clear than what it takes now.&#160; Possibly something that looks more like:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:c11076f5-8794-47d1-b174-e1907a12a9c6\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Table</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Border=1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n    Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">THead</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(\n        Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TR</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TH</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Header 1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">), Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TH</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Header 2</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)),\n    Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TBody</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(\n        Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TR</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TD</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data 1.1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">), Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TD</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data 1.2</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)),\n        Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TR</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TD</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data 2.1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">), Html.New</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">TD</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data 2.2</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)))));</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThe Table type would have static properties on it instead of the more awkward way of doing it now. I dunno... I'm just playing at this poing. Would that be useful?","slug":"introducing-html-utilities-for-silverlight","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9g5002k6eulivriy8hd"},{"title":"What to do About Those Pesky Singletons?","id":"65","date":"2009-05-02T21:56:00.000Z","_content":"\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2009%2F05%2F02%2Fwhat-to-do-about-those-pesky-singletons.aspx)](http://dotnetshoutout.com/What-to-do-About-Those-Pesky-Singletons) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f05%2f02%2fwhat-to-do-about-those-pesky-singletons.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f05%2f02%2fwhat-to-do-about-those-pesky-singletons.aspx)   \n\nNo matter what your opinion is about singletons (I favor against them in most cases), it is important to understand what you can do when you encounter code that is dependent upon them.&#160; Unfortunately, I have come across a lot of code that has abused singletons in a way that makes other code less testable.&#160; My examples here are in C#, but this technique can work in any language.&#160; In some languages, these techniques are easier due to their dynamic capabilities.\n\nI am going to choose a singleton example I have seen in books when the “Singleton Pattern is described – a logger.&#160; Have you seen code like this before?\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:34c33bf7-f0b0-498c-aaf2-8f47830ca230\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Log\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> Log()\n    {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Set up a way to write to a logging service somewhere</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> Log theOnlyOne </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Log();\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> Log Instance\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> theOnlyOne; }\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> WriteToLog(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> errorLevel, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Write to the logging service</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Error(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        WriteToLog(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ERROR</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, category, message);\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Warning(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        WriteToLog(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">WARNING</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, category, message);\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Information(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        WriteToLog(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">INFORMATION</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, category, message);\n    }\n}</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SomeClass\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Calculate()\n    {\n        Log.Instance.Information(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">client</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Doing something...</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> do calculations</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n**Disclaimer: **I am not addressing concurrency issues at all in this post.&#160; These techniques work with or without concurrency code.&#160; For the sake of brevity, I left it out.\n\nOf course, if I want to unit-test Calculate(), I have a problem.&#160; Every time I run my test(s), the event log will get written to.&#160; This could be a file, a database, or even a web service.&#160; This type of side-effect behavior is a pretty bad way to be writing my unit tests.&#160; To make matters worse, what happens if I want to validate that Calculate() logged a message appropriately?&#160; Do I read the file, database or web service to validate?&#160; \n\nWhat I really want here is a test double… but how do I get it in there?&#160; I can:\n\n1.  Re-factor out the singleton2.  Re-factor the consumer3.  Put a shim in it4.  Wrap it\n\nIn C#, the first three methods require that the Log be modified.&#160; It either needs to implement an interface, or the methods need to be made virtual.&#160; I prefer to use an interface so that none of the base implementation makes it into the test.&#160; The fourth method can be used in a case where the ability to modify the singleton is prohibited for one reason or another. \n\nThe interface for all four strategies is:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:2cbca8b4-f7c0-4990-9ce2-afd17a895758\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> ILog\n{\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Error(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message);\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Warning(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message);\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Information(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message);\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Re-Factor Out the Singleton\n\nIt is often the case that a singleton does not need to be a singleton. It was just a lazy design decision made a long time ago, but it doesn’t need to be this way.&#160; In fact, when it makes sense to do so, this is my preferred way to deal with singletons.&#160; In this case, I have to ask: why does it need to be a singleton?&#160; There might be a reason, but in most cases, I can just modify the class to not be a singleton anymore and modify the consumer to accept the ILog object via dependency injection:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:34188552-ad7a-4f91-b4bc-49804c54329a\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Log : ILog\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Log()\n    {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Set up a way to write to a logging service somewhere</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Remove the static instance\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Remove the Instance getter\n\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Everything else the same</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:12883bea-208e-4edf-99d3-2160a049986b\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SomeClass\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> ILog log;\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> SomeClass(ILog log)\n    {\n        </span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">.log </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> log;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> SomeClass() : </span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Log())\n    {}\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Calculate()\n    {\n        log.Information(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">client</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Doing something...</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> do calculations</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNow the test is easy to write.&#160; I can create a test double of any type I want here, just as long as it implements ILog.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:17d72c01-afef-4625-8ab7-3f1fe613b41b\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[TestFixture]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SomeClassTests\n{\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_That_Calculate_Returns_Zero()\n    {\n        var test </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> SomeClass(GetLoggerStub());\n\n        Assert.That(test.Calculate(), Is.EqualTo(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThat is the best way to work with a singleton, in my opinion.&#160; Unfortunately, it is not always that easy.&#160; Maybe it is too much of a refactoring to take the “single” out of the singleton.&#160; Whatever the reason, I need the singleton to stay as a singleton.&#160; The next question:&#160; Do I need my consumer to treat it like a singleton?\n\n### \n\n### Re-factor the Consumer\n\nIn this case, the Log class will stay as a singleton, but it is modified slightly to implement ILog:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:708132fc-c4cd-42a1-90de-05fe08260175\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Log : ILog\n{\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Everything else the same</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNext, the consumer is modified in a similar way to pass the ILog object in via dependency injection:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:91a73132-a87c-4e96-9d26-99f8990392b2\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SomeClass\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> Func</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">ILog</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> log;\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> SomeClass(Func</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">ILog</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> log)\n    {\n        </span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">.log </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> log;   \n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> SomeClass() : </span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">(() </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> Log.Instance)\n    { }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Calculate()\n    {\n        log().Information(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">client</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Doing something...</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> do calculations</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNotice the difference in the way that SomeClass is instantiated now.&#160; Instead of passing a log instance, I pass a function that gets the log instance.&#160; That is because caching a reference to a singleton is a bad idea – the singleton instance has the right to change out from under me.&#160; Instead, the default behavior of SomeClass will ask for the singleton instance every time, but it is no longer **required** to use the singleton implementation of ILog.&#160; Instead, I can test this in a very similar way (the difference here is subtle, but important… notice that I pass GetLoggerStub as a function, not the result of GetLoggerStub()):\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:880d88e4-3e70-40cd-856f-adc8c0bfa085\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[TestFixture]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SomeClassTests\n{\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_That_Calculate_Returns_Zero()\n    {\n        var test </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> SomeClass(GetLoggerStub);\n\n        Assert.That(test.Calculate(), Is.EqualTo(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nUnfortunately, this is not always easy either.&#160; The class I am refactoring may already have a complicated set of constructors.&#160; It may be the case that these are public objects that I don’t want to change right now.&#160; There are several reasons why this might not work for me.&#160; The next option: Leave the Log class as a singleton, but don’t modify the consumer in any way.&#160; Instead, put a shim in the singleton.\n\n### Put a Shim in it\n\nThis tends to be the technique I use most often, because it creates the least amount of friction when it comes to refactoring the classes for testability.&#160; After all, if there are no tests to validate that I don’t break anything in my re-factoring, I don’t want to make drastic changes.&#160; The consumer doesn’t need to change or know about the changes to the Log class.&#160; It kind of breaks up the singleton pattern a bit (there can be TWO instances!), but all is fair in love and testing, right?&#160; The modified:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:2ed5053d-2214-4122-be61-761ce69eaa1c\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Log : ILog\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> Log()\n    {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Set up a way to write to a logging service somewhere</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> ILog theOnlyOne;\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> ILog testOverride;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> ILog Instance\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">\n        {\n            </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (testOverride </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n                </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> testOverride;\n\n            </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(theOnlyOne </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n                theOnlyOne </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Log();\n\n            </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> theOnlyOne;\n        }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OverrideInstanceForTesting(ILog log)\n    {\n        testOverride </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> log;\n    }\n\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Everything else the same</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nAgain, I don’t have to modify my consumer class, but my test fixture has to do a bit more work:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:5d13498c-a681-4e80-93d0-0354eefb4f8f\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SomeClassTests\n{\n    [SetUp]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">virtual</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetUp()\n    {\n        Log.OverrideInstanceForTesting(GetLoggerStub());\n    }\n\n    [TearDown]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">virtual</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> TearDown()\n    {\n        Log.OverrideInstanceForTesting(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_That_Calculate_Returns_Zero()\n    {\n        var test </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> SomeClass();\n\n        Assert.That(test.Calculate(), Is.EqualTo(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis option might not be the available either.&#160; If the singleton is a publically consumed service and I can’t modify it for some reason (I don’t own it, for instance), then I can wrap it.\n\n### Wrap it\n\nThis is a technique I use when Microsoft has given me a static class or singleton that I don’t want a direct dependency to, but they also didn’t give me an interface to substitute in either.&#160; I just create my own interface that looks a lot like the singleton and wrap it!\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:304d40ac-6f93-4749-803e-2a27ee49cb35\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> LogWrapper : ILog\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Error(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        Log.Instance.Error(category, message);\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Warning(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        Log.Instance.Warning(category, message);\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Information(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        Log.Instance.Information(category, message);\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nWith that, I can use the same modification to the consumer as in “Re-Factor Out the Singleton”.&#160; The test also looks the same as “Re-Factor Out the Singleton”.\n\n### In Summary\n\nThere are other ways to deal with this problem.&#160; I could use [TypeMock Islolator](http://www.typemock.com/index.php) to replace the singleton implementation with a new one.&#160; I have even seen some suggestions that you can use a [post-compiler code injection library](http://www.codethinked.com/post/2009/04/26/Static-Method-Interception-in-NET-with-C-and-MonoCecil.aspx) to replace the singleton implementation.&#160; These, to me, are cheating.&#160; They get around a problem that you have in your system: tight coupling.&#160; I much prefer the strategies mentioned in this post for dealing with singletons because they allow you to make baby steps towards loose coupling.&#160; Over time, these re-factorings add up and push you in the direction of having testable code.","source":"_posts/2009-05-02-what-to-do-about-those-pesky-singletons.md","raw":"---\ntitle: What to do About Those Pesky Singletons?\nid: 65\ncategories:\n  - Uncategorized\ndate: 2009-05-02 17:56:00\ntags:\n---\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2009%2F05%2F02%2Fwhat-to-do-about-those-pesky-singletons.aspx)](http://dotnetshoutout.com/What-to-do-About-Those-Pesky-Singletons) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f05%2f02%2fwhat-to-do-about-those-pesky-singletons.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f05%2f02%2fwhat-to-do-about-those-pesky-singletons.aspx)   \n\nNo matter what your opinion is about singletons (I favor against them in most cases), it is important to understand what you can do when you encounter code that is dependent upon them.&#160; Unfortunately, I have come across a lot of code that has abused singletons in a way that makes other code less testable.&#160; My examples here are in C#, but this technique can work in any language.&#160; In some languages, these techniques are easier due to their dynamic capabilities.\n\nI am going to choose a singleton example I have seen in books when the “Singleton Pattern is described – a logger.&#160; Have you seen code like this before?\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:34c33bf7-f0b0-498c-aaf2-8f47830ca230\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Log\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> Log()\n    {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Set up a way to write to a logging service somewhere</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> Log theOnlyOne </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Log();\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> Log Instance\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> theOnlyOne; }\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> WriteToLog(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> errorLevel, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Write to the logging service</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Error(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        WriteToLog(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ERROR</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, category, message);\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Warning(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        WriteToLog(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">WARNING</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, category, message);\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Information(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        WriteToLog(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">INFORMATION</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, category, message);\n    }\n}</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SomeClass\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Calculate()\n    {\n        Log.Instance.Information(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">client</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Doing something...</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> do calculations</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n**Disclaimer: **I am not addressing concurrency issues at all in this post.&#160; These techniques work with or without concurrency code.&#160; For the sake of brevity, I left it out.\n\nOf course, if I want to unit-test Calculate(), I have a problem.&#160; Every time I run my test(s), the event log will get written to.&#160; This could be a file, a database, or even a web service.&#160; This type of side-effect behavior is a pretty bad way to be writing my unit tests.&#160; To make matters worse, what happens if I want to validate that Calculate() logged a message appropriately?&#160; Do I read the file, database or web service to validate?&#160; \n\nWhat I really want here is a test double… but how do I get it in there?&#160; I can:\n\n1.  Re-factor out the singleton2.  Re-factor the consumer3.  Put a shim in it4.  Wrap it\n\nIn C#, the first three methods require that the Log be modified.&#160; It either needs to implement an interface, or the methods need to be made virtual.&#160; I prefer to use an interface so that none of the base implementation makes it into the test.&#160; The fourth method can be used in a case where the ability to modify the singleton is prohibited for one reason or another. \n\nThe interface for all four strategies is:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:2cbca8b4-f7c0-4990-9ce2-afd17a895758\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> ILog\n{\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Error(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message);\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Warning(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message);\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Information(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message);\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Re-Factor Out the Singleton\n\nIt is often the case that a singleton does not need to be a singleton. It was just a lazy design decision made a long time ago, but it doesn’t need to be this way.&#160; In fact, when it makes sense to do so, this is my preferred way to deal with singletons.&#160; In this case, I have to ask: why does it need to be a singleton?&#160; There might be a reason, but in most cases, I can just modify the class to not be a singleton anymore and modify the consumer to accept the ILog object via dependency injection:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:34188552-ad7a-4f91-b4bc-49804c54329a\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Log : ILog\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Log()\n    {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Set up a way to write to a logging service somewhere</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Remove the static instance\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Remove the Instance getter\n\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Everything else the same</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:12883bea-208e-4edf-99d3-2160a049986b\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SomeClass\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> ILog log;\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> SomeClass(ILog log)\n    {\n        </span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">.log </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> log;\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> SomeClass() : </span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">(</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Log())\n    {}\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Calculate()\n    {\n        log.Information(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">client</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Doing something...</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> do calculations</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNow the test is easy to write.&#160; I can create a test double of any type I want here, just as long as it implements ILog.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:17d72c01-afef-4625-8ab7-3f1fe613b41b\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[TestFixture]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SomeClassTests\n{\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_That_Calculate_Returns_Zero()\n    {\n        var test </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> SomeClass(GetLoggerStub());\n\n        Assert.That(test.Calculate(), Is.EqualTo(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThat is the best way to work with a singleton, in my opinion.&#160; Unfortunately, it is not always that easy.&#160; Maybe it is too much of a refactoring to take the “single” out of the singleton.&#160; Whatever the reason, I need the singleton to stay as a singleton.&#160; The next question:&#160; Do I need my consumer to treat it like a singleton?\n\n### \n\n### Re-factor the Consumer\n\nIn this case, the Log class will stay as a singleton, but it is modified slightly to implement ILog:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:708132fc-c4cd-42a1-90de-05fe08260175\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Log : ILog\n{\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Everything else the same</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNext, the consumer is modified in a similar way to pass the ILog object in via dependency injection:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:91a73132-a87c-4e96-9d26-99f8990392b2\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SomeClass\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> Func</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">ILog</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> log;\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> SomeClass(Func</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">ILog</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> log)\n    {\n        </span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">.log </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> log;   \n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> SomeClass() : </span><span style=\"color: #0000FF;\">this</span><span style=\"color: #000000;\">(() </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> Log.Instance)\n    { }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Calculate()\n    {\n        log().Information(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">client</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Doing something...</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> do calculations</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNotice the difference in the way that SomeClass is instantiated now.&#160; Instead of passing a log instance, I pass a function that gets the log instance.&#160; That is because caching a reference to a singleton is a bad idea – the singleton instance has the right to change out from under me.&#160; Instead, the default behavior of SomeClass will ask for the singleton instance every time, but it is no longer **required** to use the singleton implementation of ILog.&#160; Instead, I can test this in a very similar way (the difference here is subtle, but important… notice that I pass GetLoggerStub as a function, not the result of GetLoggerStub()):\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:880d88e4-3e70-40cd-856f-adc8c0bfa085\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">[TestFixture]\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SomeClassTests\n{\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_That_Calculate_Returns_Zero()\n    {\n        var test </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> SomeClass(GetLoggerStub);\n\n        Assert.That(test.Calculate(), Is.EqualTo(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nUnfortunately, this is not always easy either.&#160; The class I am refactoring may already have a complicated set of constructors.&#160; It may be the case that these are public objects that I don’t want to change right now.&#160; There are several reasons why this might not work for me.&#160; The next option: Leave the Log class as a singleton, but don’t modify the consumer in any way.&#160; Instead, put a shim in the singleton.\n\n### Put a Shim in it\n\nThis tends to be the technique I use most often, because it creates the least amount of friction when it comes to refactoring the classes for testability.&#160; After all, if there are no tests to validate that I don’t break anything in my re-factoring, I don’t want to make drastic changes.&#160; The consumer doesn’t need to change or know about the changes to the Log class.&#160; It kind of breaks up the singleton pattern a bit (there can be TWO instances!), but all is fair in love and testing, right?&#160; The modified:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:2ed5053d-2214-4122-be61-761ce69eaa1c\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Log : ILog\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> Log()\n    {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Set up a way to write to a logging service somewhere</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> ILog theOnlyOne;\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> ILog testOverride;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> ILog Instance\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">\n        {\n            </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (testOverride </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n                </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> testOverride;\n\n            </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(theOnlyOne </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n                theOnlyOne </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> Log();\n\n            </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> theOnlyOne;\n        }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OverrideInstanceForTesting(ILog log)\n    {\n        testOverride </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> log;\n    }\n\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Everything else the same</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nAgain, I don’t have to modify my consumer class, but my test fixture has to do a bit more work:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:5d13498c-a681-4e80-93d0-0354eefb4f8f\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SomeClassTests\n{\n    [SetUp]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">virtual</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetUp()\n    {\n        Log.OverrideInstanceForTesting(GetLoggerStub());\n    }\n\n    [TearDown]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">virtual</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> TearDown()\n    {\n        Log.OverrideInstanceForTesting(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n    }\n\n    [Test]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Test_That_Calculate_Returns_Zero()\n    {\n        var test </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> SomeClass();\n\n        Assert.That(test.Calculate(), Is.EqualTo(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis option might not be the available either.&#160; If the singleton is a publically consumed service and I can’t modify it for some reason (I don’t own it, for instance), then I can wrap it.\n\n### Wrap it\n\nThis is a technique I use when Microsoft has given me a static class or singleton that I don’t want a direct dependency to, but they also didn’t give me an interface to substitute in either.&#160; I just create my own interface that looks a lot like the singleton and wrap it!\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:304d40ac-6f93-4749-803e-2a27ee49cb35\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> LogWrapper : ILog\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Error(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        Log.Instance.Error(category, message);\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Warning(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        Log.Instance.Warning(category, message);\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Information(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> category, </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> message)\n    {\n        Log.Instance.Information(category, message);\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nWith that, I can use the same modification to the consumer as in “Re-Factor Out the Singleton”.&#160; The test also looks the same as “Re-Factor Out the Singleton”.\n\n### In Summary\n\nThere are other ways to deal with this problem.&#160; I could use [TypeMock Islolator](http://www.typemock.com/index.php) to replace the singleton implementation with a new one.&#160; I have even seen some suggestions that you can use a [post-compiler code injection library](http://www.codethinked.com/post/2009/04/26/Static-Method-Interception-in-NET-with-C-and-MonoCecil.aspx) to replace the singleton implementation.&#160; These, to me, are cheating.&#160; They get around a problem that you have in your system: tight coupling.&#160; I much prefer the strategies mentioned in this post for dealing with singletons because they allow you to make baby steps towards loose coupling.&#160; Over time, these re-factorings add up and push you in the direction of having testable code.","slug":"what-to-do-about-those-pesky-singletons","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9g6002m6eulbhztidyi"},{"title":"Adventures in MVVM – Commands in Silverlight","id":"68","date":"2009-05-22T22:01:00.000Z","_content":"\n[**Adventures in MVVM**](http://houseofbilz.com/archive/2009/05/22/adventures-in-mvvm-ndash-model-view-viewmodel.aspx) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F05%2F22%2Fadventures-in-mvvm-ndash-commands-in-silverlight.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Commands-in-Silverlight) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f05%2f22%2fadventures-in-mvvm-ndash-commands-in-silverlight.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f05%2f22%2fadventures-in-mvvm-ndash-commands-in-silverlight.aspx) \n  <div style=\"background-color: #cccccc\">   \n\n**<font color=\"#ff0000\">EDIT:</font>**\n\nOne of the things that I enjoy most about working with MVVM in Silverlight is how new it is.&#160; When I say “new”, I mean that Silverlight doesn’t support the pattern very well out of the box, so the development community needs to step up and solve these problems.&#160; Some solutions are better than others.&#160; In this article, I solved a problem the best way I knew how.&#160; I urge you to read [Ward Bell’s](http://neverindoubtnet.blogspot.com/) comments to this article, and my responses.&#160; After reflecting on it more, I concede that this is not the best way to implement a lightweight bindable command in SIlverlight.\n\nInstead, I should have just read the Prism 2 source code to see how they implemented commands via attached behaviors.&#160; I would have learned that that I learned attached behaviors wrong in the first place.&#160; In [Julian Dominguez’s blog post on the topic](http://blogs.southworks.net/jdominguez/2008/08/icommand-for-silverlight-with-attached-behaviors/), he walks you through the thought process for attaching commands via behaviors.&#160; Although this is not the final code that made it into Prism, it is very close.&#160; I recommend reading it.\n\nThat being said, I will keep my original text in place.&#160; I think that the thought process for how I got there is very useful for learning… at least I find it useful.&#160; Then, be sure to read the comments, visit Julian’s blog and browse the [Prism (CAL)](http://www.microsoft.com/downloads/details.aspx?FamilyID=fa07e1ce-ca3f-4b9b-a21b-e3fa10d013dd&amp;DisplayLang=en) source code.\n </div>  \n\nOne of the most important aspects of implementing the MVVM pattern in WPF and SIlverlight is the ability for the UI layer to bind directly to commands in the ViewModel.&#160; The only problem with this:&#160; commands were never implemented in Silverlight.&#160; Even though I (and many others) have ranted about this, our voice has not been heard.&#160; Even with the release of the Silverlight 3 beta, it seems as if we are still pining for commanding in Silverlight.\n\nMany libraries have implemented commands in Silverlight, usually with some sort of static lookup table, mapping buttons to commands.&#160; They include [Prism](http://compositewpf.codeplex.com/), [Caliburn](http://www.codeplex.com/caliburn), [SilverlightFX](http://projects.nikhilk.net/SilverlightFX/) and the [MVVM toolkit](http://msdnrss.thecoderblogs.com/2009/05/03/wpf-mvvm-toolkit-01-released/).&#160; It can feel like overkill to bring in these libraries just to get commanding.&#160; There are plenty of good reasons to use these libraries – don’t get me wrong – but if you are just looking for bindable commands, there is an easier way.\n\nThis article will walk you through the process of creating a button with command properties.&#160; This technique can be translated easily to any other control in order to achieve bindable commanding in Silverlight.\n\n### ICommand\n\nThe ICommand interface was the only thing that was included from the WPF commanding infrastructure within Silverlight.&#160; The interface is extremely simple:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1538e2b8-4d98-431a-8cb8-94e4c0fe7f4f\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> ICommand\n{\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Execute(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> parameter);\n    </span><span style=\"color: #0000FF;\">bool</span><span style=\"color: #000000;\"> CanExecute(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> parameter);\n    </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> EventHandler CanExecuteChanged;\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThe requirements of any control that deals with ICommand are:\n\n1.  Call Execute() when a trigger is hit2.  Only call Execute() if CanExecute() returns true3.  Allow a bindable parameter to be passed into Execute() and CanExecute()4.  Disable the control when CanExecute() is false5.  Refresh the enable/disable state of the control when the CanExecuteChanged event is raised\n\n### \n\n### Implementing CommandButton\n\nLets start with requirements 1 and 2:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:0f2dbc20-6d51-4802-a63f-1b9fc225713f\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> CommandButton : Button\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> CommandButton()\n    {\n        Click </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> (sender, e) </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\">\n        {\n            </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (Command </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">&amp;&amp;</span><span style=\"color: #000000;\"> Command.CanExecute(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">))\n                Command.Execute(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n        };\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> DependencyProperty CommandProperty </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">\n        DependencyProperty.Register(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Command</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                                    </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ICommand), </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(CommandButton),\n                                    </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> PropertyMetadata(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">));\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ICommand Command\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> GetValue(CommandProperty) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ICommand; }\n        </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\"> { SetValue(CommandProperty, value); }\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nWith this, you can bind a command in the ViewModel to the view:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b672d696-ee9e-4357-a2f0-78e492dacb92\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ViewModel : INotifyPropertyChanged\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ViewModel()\n    {\n        MyCommand </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> DelegateCommand</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(DoSomething);\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DoSomething(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> obj)\n    {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Do what you want</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ICommand MyCommand { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n\n   </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> The rest of your ViewModel</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis XAML creates a CommandButton in place of a Button:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:5434a91a-0a34-44d3-8c13-2fec0744c14e\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">local:CommandButton </span><span style=\"color: #FF0000;\">Content</span><span style=\"color: #0000FF;\">=\"Click Me\"</span><span style=\"color: #FF0000;\"> Command</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding MyCommand}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Adding Parameters\n\nImplementing feature 3 is trivial. Add the CommandParameter property and pass it in to Execute() and CanExecute()\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:866aa6d6-9ac5-4667-8984-6a5c243d4374\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> CommandButton : Button\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> CommandButton()\n    {\n        Click </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> (sender, e) </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\">\n        {\n            </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (Command </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">&amp;&amp;</span><span style=\"color: #000000;\"> Command.CanExecute(CommandParameter))\n                Command.Execute(CommandParameter);\n        };\n    }\n\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Everything else from initial Implementation</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    \n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> DependencyProperty CommandParameterProperty </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">\n        DependencyProperty.Register(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CommandParameter</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                                    </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\">), </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(CommandButton),\n                                    </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> PropertyMetadata(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">));\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> CommandParameter\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> GetValue(CommandParameterProperty); }\n        </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\"> { SetValue(CommandParameterProperty, value); }\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nWith that, you can add parameters to the XAML:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:6b395408-f0cc-4d43-b35c-cd957419f3f2\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">local:CommandButton </span><span style=\"color: #FF0000;\">Content</span><span style=\"color: #0000FF;\">=\"Click Me\"</span><span style=\"color: #FF0000;\"> Command</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding MyCommand}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> CommandParameter</span><span style=\"color: #0000FF;\">=\"MyParameter\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### \n\n### Hooking IsEnabled to CanExecute()\n\nThings get a bit more complicated when implementing requirements 4 and 5, but it is still pretty straight-forward.&#160; I start by registering an event handler for when the Command property changes (CommandChanged).&#160; This event handler hooks the CanExecuteChanged event and handles the event by setting the IsEnabled flag to the value of CanExecute().&#160; It then proceeds to initialize the value of IsEnabled since we know the answer at this time.\n\n**The final class:**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:bf466efe-a043-40c1-af0b-a8421d23d354\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> CommandButton : Button\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> CommandButton()\n    {\n        Click </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> (sender, e) </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\">\n        {\n            </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (Command </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">&amp;&amp;</span><span style=\"color: #000000;\"> Command.CanExecute(CommandParameter))\n                Command.Execute(CommandParameter);\n        };\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> DependencyProperty CommandProperty </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">\n        DependencyProperty.Register(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Command</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                                    </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ICommand), </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(CommandButton),\n                                    </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> PropertyMetadata(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">, CommandChanged));\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> CommandChanged(DependencyObject source, DependencyPropertyChangedEventArgs args)\n    {\n        var button </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> source </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> CommandButton;\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (button </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">) </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">;\n\n        button.RegisterCommand(args.OldValue </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ICommand, args.NewValue </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ICommand);            \n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> RegisterCommand(ICommand oldCommand, ICommand newCommand)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (oldCommand </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            oldCommand.CanExecuteChanged </span><span style=\"color: #000000;\">-=</span><span style=\"color: #000000;\"> HandleCanExecuteChanged;\n\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (newCommand </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            newCommand.CanExecuteChanged </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> HandleCanExecuteChanged;\n\n        HandleCanExecuteChanged(newCommand, EventArgs.Empty);\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> HandleCanExecuteChanged(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, EventArgs args)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (Command </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            IsEnabled </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Command.CanExecute(CommandParameter);\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ICommand Command\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> GetValue(CommandProperty) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ICommand; }\n        </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\"> { SetValue(CommandProperty, value); }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> DependencyProperty CommandParameterProperty </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">\n        DependencyProperty.Register(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CommandParameter</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                                    </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\">), </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(CommandButton),\n                                    </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> PropertyMetadata(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">));\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> CommandParameter\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> GetValue(CommandParameterProperty); }\n        </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\"> { SetValue(CommandParameterProperty, value); }\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Summary\n\nThis method for hooking commands to buttons has one drawback in my opinion:&#160; It requires you to put a CommandButton in your XAML instead of a vanilla Button.&#160; This, of course, means that other controls that inherit from Button such as Checkbox and RadioButton do not get this behavior (you have to implement this pattern for them).&#160; Still, this approach makes it very easy to add commands to any control you wish; even in WPF.&#160; In a future post, I will discuss a similar approach for binding a command to a ComboBox (or ListBox) selection changed event.","source":"_posts/2009-05-22-adventures-in-mvvm-commands-in-silverlight.md","raw":"---\ntitle: Adventures in MVVM – Commands in Silverlight\nid: 68\ncategories:\n  - Uncategorized\ndate: 2009-05-22 18:01:00\ntags:\n---\n\n[**Adventures in MVVM**](http://houseofbilz.com/archive/2009/05/22/adventures-in-mvvm-ndash-model-view-viewmodel.aspx) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F05%2F22%2Fadventures-in-mvvm-ndash-commands-in-silverlight.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Commands-in-Silverlight) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f05%2f22%2fadventures-in-mvvm-ndash-commands-in-silverlight.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f05%2f22%2fadventures-in-mvvm-ndash-commands-in-silverlight.aspx) \n  <div style=\"background-color: #cccccc\">   \n\n**<font color=\"#ff0000\">EDIT:</font>**\n\nOne of the things that I enjoy most about working with MVVM in Silverlight is how new it is.&#160; When I say “new”, I mean that Silverlight doesn’t support the pattern very well out of the box, so the development community needs to step up and solve these problems.&#160; Some solutions are better than others.&#160; In this article, I solved a problem the best way I knew how.&#160; I urge you to read [Ward Bell’s](http://neverindoubtnet.blogspot.com/) comments to this article, and my responses.&#160; After reflecting on it more, I concede that this is not the best way to implement a lightweight bindable command in SIlverlight.\n\nInstead, I should have just read the Prism 2 source code to see how they implemented commands via attached behaviors.&#160; I would have learned that that I learned attached behaviors wrong in the first place.&#160; In [Julian Dominguez’s blog post on the topic](http://blogs.southworks.net/jdominguez/2008/08/icommand-for-silverlight-with-attached-behaviors/), he walks you through the thought process for attaching commands via behaviors.&#160; Although this is not the final code that made it into Prism, it is very close.&#160; I recommend reading it.\n\nThat being said, I will keep my original text in place.&#160; I think that the thought process for how I got there is very useful for learning… at least I find it useful.&#160; Then, be sure to read the comments, visit Julian’s blog and browse the [Prism (CAL)](http://www.microsoft.com/downloads/details.aspx?FamilyID=fa07e1ce-ca3f-4b9b-a21b-e3fa10d013dd&amp;DisplayLang=en) source code.\n </div>  \n\nOne of the most important aspects of implementing the MVVM pattern in WPF and SIlverlight is the ability for the UI layer to bind directly to commands in the ViewModel.&#160; The only problem with this:&#160; commands were never implemented in Silverlight.&#160; Even though I (and many others) have ranted about this, our voice has not been heard.&#160; Even with the release of the Silverlight 3 beta, it seems as if we are still pining for commanding in Silverlight.\n\nMany libraries have implemented commands in Silverlight, usually with some sort of static lookup table, mapping buttons to commands.&#160; They include [Prism](http://compositewpf.codeplex.com/), [Caliburn](http://www.codeplex.com/caliburn), [SilverlightFX](http://projects.nikhilk.net/SilverlightFX/) and the [MVVM toolkit](http://msdnrss.thecoderblogs.com/2009/05/03/wpf-mvvm-toolkit-01-released/).&#160; It can feel like overkill to bring in these libraries just to get commanding.&#160; There are plenty of good reasons to use these libraries – don’t get me wrong – but if you are just looking for bindable commands, there is an easier way.\n\nThis article will walk you through the process of creating a button with command properties.&#160; This technique can be translated easily to any other control in order to achieve bindable commanding in Silverlight.\n\n### ICommand\n\nThe ICommand interface was the only thing that was included from the WPF commanding infrastructure within Silverlight.&#160; The interface is extremely simple:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1538e2b8-4d98-431a-8cb8-94e4c0fe7f4f\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> ICommand\n{\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> Execute(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> parameter);\n    </span><span style=\"color: #0000FF;\">bool</span><span style=\"color: #000000;\"> CanExecute(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> parameter);\n    </span><span style=\"color: #0000FF;\">event</span><span style=\"color: #000000;\"> EventHandler CanExecuteChanged;\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThe requirements of any control that deals with ICommand are:\n\n1.  Call Execute() when a trigger is hit2.  Only call Execute() if CanExecute() returns true3.  Allow a bindable parameter to be passed into Execute() and CanExecute()4.  Disable the control when CanExecute() is false5.  Refresh the enable/disable state of the control when the CanExecuteChanged event is raised\n\n### \n\n### Implementing CommandButton\n\nLets start with requirements 1 and 2:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:0f2dbc20-6d51-4802-a63f-1b9fc225713f\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> CommandButton : Button\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> CommandButton()\n    {\n        Click </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> (sender, e) </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\">\n        {\n            </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (Command </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">&amp;&amp;</span><span style=\"color: #000000;\"> Command.CanExecute(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">))\n                Command.Execute(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n        };\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> DependencyProperty CommandProperty </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">\n        DependencyProperty.Register(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Command</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                                    </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ICommand), </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(CommandButton),\n                                    </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> PropertyMetadata(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">));\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ICommand Command\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> GetValue(CommandProperty) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ICommand; }\n        </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\"> { SetValue(CommandProperty, value); }\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nWith this, you can bind a command in the ViewModel to the view:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b672d696-ee9e-4357-a2f0-78e492dacb92\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ViewModel : INotifyPropertyChanged\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ViewModel()\n    {\n        MyCommand </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> DelegateCommand</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(DoSomething);\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DoSomething(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> obj)\n    {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Do what you want</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ICommand MyCommand { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n\n   </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> The rest of your ViewModel</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis XAML creates a CommandButton in place of a Button:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:5434a91a-0a34-44d3-8c13-2fec0744c14e\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">local:CommandButton </span><span style=\"color: #FF0000;\">Content</span><span style=\"color: #0000FF;\">=\"Click Me\"</span><span style=\"color: #FF0000;\"> Command</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding MyCommand}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Adding Parameters\n\nImplementing feature 3 is trivial. Add the CommandParameter property and pass it in to Execute() and CanExecute()\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:866aa6d6-9ac5-4667-8984-6a5c243d4374\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> CommandButton : Button\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> CommandButton()\n    {\n        Click </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> (sender, e) </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\">\n        {\n            </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (Command </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">&amp;&amp;</span><span style=\"color: #000000;\"> Command.CanExecute(CommandParameter))\n                Command.Execute(CommandParameter);\n        };\n    }\n\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Everything else from initial Implementation</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    \n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> DependencyProperty CommandParameterProperty </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">\n        DependencyProperty.Register(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CommandParameter</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                                    </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\">), </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(CommandButton),\n                                    </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> PropertyMetadata(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">));\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> CommandParameter\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> GetValue(CommandParameterProperty); }\n        </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\"> { SetValue(CommandParameterProperty, value); }\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nWith that, you can add parameters to the XAML:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:6b395408-f0cc-4d43-b35c-cd957419f3f2\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">local:CommandButton </span><span style=\"color: #FF0000;\">Content</span><span style=\"color: #0000FF;\">=\"Click Me\"</span><span style=\"color: #FF0000;\"> Command</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding MyCommand}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> CommandParameter</span><span style=\"color: #0000FF;\">=\"MyParameter\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### \n\n### Hooking IsEnabled to CanExecute()\n\nThings get a bit more complicated when implementing requirements 4 and 5, but it is still pretty straight-forward.&#160; I start by registering an event handler for when the Command property changes (CommandChanged).&#160; This event handler hooks the CanExecuteChanged event and handles the event by setting the IsEnabled flag to the value of CanExecute().&#160; It then proceeds to initialize the value of IsEnabled since we know the answer at this time.\n\n**The final class:**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:bf466efe-a043-40c1-af0b-a8421d23d354\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> CommandButton : Button\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> CommandButton()\n    {\n        Click </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> (sender, e) </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\">\n        {\n            </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (Command </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">&amp;&amp;</span><span style=\"color: #000000;\"> Command.CanExecute(CommandParameter))\n                Command.Execute(CommandParameter);\n        };\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> DependencyProperty CommandProperty </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">\n        DependencyProperty.Register(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Command</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                                    </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ICommand), </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(CommandButton),\n                                    </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> PropertyMetadata(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">, CommandChanged));\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> CommandChanged(DependencyObject source, DependencyPropertyChangedEventArgs args)\n    {\n        var button </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> source </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> CommandButton;\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (button </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">) </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">;\n\n        button.RegisterCommand(args.OldValue </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ICommand, args.NewValue </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ICommand);            \n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> RegisterCommand(ICommand oldCommand, ICommand newCommand)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (oldCommand </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            oldCommand.CanExecuteChanged </span><span style=\"color: #000000;\">-=</span><span style=\"color: #000000;\"> HandleCanExecuteChanged;\n\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (newCommand </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            newCommand.CanExecuteChanged </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> HandleCanExecuteChanged;\n\n        HandleCanExecuteChanged(newCommand, EventArgs.Empty);\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> HandleCanExecuteChanged(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, EventArgs args)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (Command </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n            IsEnabled </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Command.CanExecute(CommandParameter);\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ICommand Command\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> GetValue(CommandProperty) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ICommand; }\n        </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\"> { SetValue(CommandProperty, value); }\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> DependencyProperty CommandParameterProperty </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">\n        DependencyProperty.Register(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CommandParameter</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                                    </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\">), </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(CommandButton),\n                                    </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> PropertyMetadata(</span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">));\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> CommandParameter\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> GetValue(CommandParameterProperty); }\n        </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\"> { SetValue(CommandParameterProperty, value); }\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Summary\n\nThis method for hooking commands to buttons has one drawback in my opinion:&#160; It requires you to put a CommandButton in your XAML instead of a vanilla Button.&#160; This, of course, means that other controls that inherit from Button such as Checkbox and RadioButton do not get this behavior (you have to implement this pattern for them).&#160; Still, this approach makes it very easy to add commands to any control you wish; even in WPF.&#160; In a future post, I will discuss a similar approach for binding a command to a ComboBox (or ListBox) selection changed event.","slug":"adventures-in-mvvm-commands-in-silverlight","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9g7002o6eulmskiwaly"},{"title":"Adventures in MVVM – Model-View-ViewModel","id":"67","date":"2009-05-22T22:00:00.000Z","_content":"\nThis post is intended to be a high-level post intended to index all of my “Adventures in MVVM” posts.&#160; I will be traveling the region this summer giving talks on the MVVM pattern and these posts are part of me working through the details of the MVVM pattern.&#160; These posts will not include the “What”.&#160; There are [several](http://msdn.microsoft.com/en-us/magazine/dd458800.aspx) [good](http://msdn.microsoft.com/en-us/magazine/dd419663.aspx) [articles](http://channel9.msdn.com/shows/Continuum/MVVM/) on the [web](http://karlshifflett.wordpress.com/2008/11/08/learning-wpf-m-v-vm/) that do that already.&#160; Instead, I will be taking a deeper dive into MVVM and writing on the “How” and “Why” of the MVVM pattern.\n\n*   [Commands in Silverlight](http://houseofbilz.com/archive/2009/05/22/adventures-in-mvvm-ndash-commands-in-silverlight.aspx)*   [A Testing Story](http://houseofbilz.com/archive/2009/05/27/adventures-in-mvvm-ndash-a-testing-story.aspx)*   [Commanding with List Boxes](http://houseofbilz.com/archives/2009/05/29/adventures-in-mvvm-commanding-with-list-boxes/)*   [Demo Application and Slides](http://houseofbilz.com/archives/2009/06/12/adventures-in-mvvm-slides-and-demo-app/)*   [“Ball of Mud” vs MVVM](http://houseofbilz.com/HouseOfBilz/archive/2009/06/19/adventures-in-mvvm----ball-of-mud-vs-mvvm.aspx)*   [My MVVM Interview with David Giard](http://houseofbilz.com/archives/2009/08/07/adventures-in-mvvm-mvvm-interview/)*   [Generalized Command Behavior Attachments](http://houseofbilz.com/archives/2009/08/22/adventures-in-mvvm-generalized-command-behavior-attachments/)*   [Binding Commands to ANY Event](http://houseofbilz.com/archives/2009/08/27/adventures-in-mvvm-binding-commands-to-any-event/)*   [A Rails-Inspired ViewModel](http://houseofbilz.com/archives/2009/10/20/adventures-in-mvvm-a-rails-inspired-viewmodel/)*   [Dependant Properties with INotifyPropertyChanged](http://houseofbilz.com/archive/2009/11/14/adventures-in-mvvm----dependant-properties-with-inotifypropertychanged.aspx)*   [CodeMash MVVM Demo App](http://houseofbilz.com/archives/2010/01/11/adventures-in-mvvm-codemash-schedule-application/)*   [My ViewModel Base](http://houseofbilz.com/archives/2010/05/08/adventures-in-mvvm-my-viewmodel-base/)*   [My ViewModel Base – Silverlight Support](http://houseofbilz.com/archives/2010/05/14/adventures-in-mvvm-my-viewmodel-base-silverlight-support/)*   [ViewModel Location and Creation](http://www.houseofbilz.com/archives/2010/06/04/adventures-in-mvvm-viewmodel-location-and-creation/)*   [Firing Events from Ruby](http://houseofbilz.com/archives/2010/06/14/adventures-in-ruby-mvvm-firing-events-from-ruby/)*   [A ViewModel Base Class in Ruby](http://houseofbilz.com/archives/2010/06/19/adventures-in-ruby-mvvm-a-viewmodel-base-class-in-ruby/)*   [Bootstrapping Ruby](http://houseofbilz.com/archives/2010/07/07/adventures-in-ruby-mvvm-bootstrapping-ruby/)*   [Ruby MVVM -- Wrapping it up](http://houseofbilz.com/archives/2010/09/26/adventures-in-ruby-mvvm-wrapping-it-up/)","source":"_posts/2009-05-22-adventures-in-mvvm-model-view-viewmodel.md","raw":"---\ntitle: Adventures in MVVM – Model-View-ViewModel\nid: 67\ncategories:\n  - Uncategorized\ndate: 2009-05-22 18:00:00\ntags:\n---\n\nThis post is intended to be a high-level post intended to index all of my “Adventures in MVVM” posts.&#160; I will be traveling the region this summer giving talks on the MVVM pattern and these posts are part of me working through the details of the MVVM pattern.&#160; These posts will not include the “What”.&#160; There are [several](http://msdn.microsoft.com/en-us/magazine/dd458800.aspx) [good](http://msdn.microsoft.com/en-us/magazine/dd419663.aspx) [articles](http://channel9.msdn.com/shows/Continuum/MVVM/) on the [web](http://karlshifflett.wordpress.com/2008/11/08/learning-wpf-m-v-vm/) that do that already.&#160; Instead, I will be taking a deeper dive into MVVM and writing on the “How” and “Why” of the MVVM pattern.\n\n*   [Commands in Silverlight](http://houseofbilz.com/archive/2009/05/22/adventures-in-mvvm-ndash-commands-in-silverlight.aspx)*   [A Testing Story](http://houseofbilz.com/archive/2009/05/27/adventures-in-mvvm-ndash-a-testing-story.aspx)*   [Commanding with List Boxes](http://houseofbilz.com/archives/2009/05/29/adventures-in-mvvm-commanding-with-list-boxes/)*   [Demo Application and Slides](http://houseofbilz.com/archives/2009/06/12/adventures-in-mvvm-slides-and-demo-app/)*   [“Ball of Mud” vs MVVM](http://houseofbilz.com/HouseOfBilz/archive/2009/06/19/adventures-in-mvvm----ball-of-mud-vs-mvvm.aspx)*   [My MVVM Interview with David Giard](http://houseofbilz.com/archives/2009/08/07/adventures-in-mvvm-mvvm-interview/)*   [Generalized Command Behavior Attachments](http://houseofbilz.com/archives/2009/08/22/adventures-in-mvvm-generalized-command-behavior-attachments/)*   [Binding Commands to ANY Event](http://houseofbilz.com/archives/2009/08/27/adventures-in-mvvm-binding-commands-to-any-event/)*   [A Rails-Inspired ViewModel](http://houseofbilz.com/archives/2009/10/20/adventures-in-mvvm-a-rails-inspired-viewmodel/)*   [Dependant Properties with INotifyPropertyChanged](http://houseofbilz.com/archive/2009/11/14/adventures-in-mvvm----dependant-properties-with-inotifypropertychanged.aspx)*   [CodeMash MVVM Demo App](http://houseofbilz.com/archives/2010/01/11/adventures-in-mvvm-codemash-schedule-application/)*   [My ViewModel Base](http://houseofbilz.com/archives/2010/05/08/adventures-in-mvvm-my-viewmodel-base/)*   [My ViewModel Base – Silverlight Support](http://houseofbilz.com/archives/2010/05/14/adventures-in-mvvm-my-viewmodel-base-silverlight-support/)*   [ViewModel Location and Creation](http://www.houseofbilz.com/archives/2010/06/04/adventures-in-mvvm-viewmodel-location-and-creation/)*   [Firing Events from Ruby](http://houseofbilz.com/archives/2010/06/14/adventures-in-ruby-mvvm-firing-events-from-ruby/)*   [A ViewModel Base Class in Ruby](http://houseofbilz.com/archives/2010/06/19/adventures-in-ruby-mvvm-a-viewmodel-base-class-in-ruby/)*   [Bootstrapping Ruby](http://houseofbilz.com/archives/2010/07/07/adventures-in-ruby-mvvm-bootstrapping-ruby/)*   [Ruby MVVM -- Wrapping it up](http://houseofbilz.com/archives/2010/09/26/adventures-in-ruby-mvvm-wrapping-it-up/)","slug":"adventures-in-mvvm-model-view-viewmodel","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gb002q6eul3or3vtcf"},{"title":"Adventures in MVVM – A Testing Story","id":"69","date":"2009-05-27T22:04:00.000Z","_content":"\n[Adventures in MVVM](http://houseofbilz.com/archive/2009/05/22/adventures-in-mvvm-ndash-model-view-viewmodel.aspx) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2009%2F05%2F27%2Fadventures-in-mvvm-ndash-a-testing-story.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-A-Testing-Story) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f05%2f27%2fadventures-in-mvvm-ndash-a-testing-story.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f05%2f27%2fadventures-in-mvvm-ndash-a-testing-story.aspx) \n\nI have been spending a lot of time lately thinking about client architecture with Silverlight and to a lesser extent, WPF.&#160; I tend to subscribe to the philosophy that when you make your code testable, you get a lot of other great qualities along with it.&#160; I believe this so strongly that I go out of my way to architect my inherently untestable code in a way that I can, indeed, test it.\n\nSince I have been writing most my code for the Silverlight platform in the past several months, and I wanted very much to write my code test-driven.&#160; I used the Model-View-Presenter pattern (MVP) to implement my view as an interface.&#160; The presenter would hand model objects over to the view and I would bind visual items in my view to the model items.&#160; The presenter would then tell the IView what to do when any real logic came to play.&#160; Over time, however, more and more logic started creeping into the code behind.&#160; I had a lot of data converters to doing my dirty work, blending the code between the model and the view.&#160; The problem is that anything within the IView implementation (aka code-behind) is not easily unit-testable.\n\n[![organic](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/MyExperiencewithMVVM_FFA6/organic_thumb.jpg \"organic\")](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/MyExperiencewithMVVM_FFA6/organic_2.jpg) \n\nAs I started to really understand how binding worked in the context of XAML, I found myself wanting to use binding against view-agnostic objects for testability.&#160; Since the view didn’t know anything about the presenter, the only data to bind to was in the model.&#160; Sadly, view-specific data started to creep into model items.&#160; Where ThumbnailData (for instance) was only meta-information that came from my server, it began to gain properties such as Selected and Hidden.&#160; Moreover, what “Selected” means to one part of the UI is different to another part of the UI.\n\nThis was not the direction I wanted to go.&#160; In a fit of desperation, a colleague and I sat down and designed a pattern where we had a “ViewState” and a “ViewLogic” class.&#160; “ViewState” was just a set of properties (model data and view properties) that implements INotifyPropertyChanged for the view to bind against and “ViewLogic” manipulated the “ViewState” to add the UI smarts.\n\nThe benefits were immediate and obvious.&#160; We started seeing logic that was once in the code-behind move over to the “ViewLogic”.&#160; We immediately received testing benefits.&#160; We could write tests against the “ViewState” as if it were the actual UI.&#160; We even started writing our new features with TDD.&#160; Everything was great!\n\nI was all ready to start blogging about it.&#160; My colleague and I had come up with this fantastic pattern for making testable Silverlight UIs and I wanted to tell the world.&#160; When doing some comparative reading I started seeing the “MVVM” term pop up here and there.&#160; It didn’t take long for me to realize that what we had invented in a bubble was just a subtle variant of the Model-View-ViewModel pattern.&#160; The ViewModel is really just our ViewLogic and ViewState combined into one single class.&#160; It only solidified my belief that this pattern had legs.\n\nAlthough I sensed some initial skepticism from my team-mates about using the pattern throughout the product, it didn’t take long for them to recognize how important the MVVM pattern would be to our project.&#160; Since adoption our test coverage has skyrocketed with hundreds of useful tests.&#160; The proof is in the pudding.&#160; The vast majority of our bugs that come in have been one of two types of bugs: Missed features or improper binding – two things that the MVVM pattern can’t help prevent.\n\nSo, that is how I got so interested in the MVVM pattern.&#160; Because it is relatively new, the community is still working out the best practices.&#160; There is room for experimentation and that can be a lot of fun.&#160; Lets solve the new problems.&#160; Lets push the community in the right direction.&#160; We are already hearing the buzz for Silverlight 3 to contain native support for MVVM (via Prism).&#160; Lets keep this going… and lets have fun doing it!","source":"_posts/2009-05-27-adventures-in-mvvm-a-testing-story.md","raw":"---\ntitle: Adventures in MVVM – A Testing Story\nid: 69\ncategories:\n  - Uncategorized\ndate: 2009-05-27 18:04:00\ntags:\n---\n\n[Adventures in MVVM](http://houseofbilz.com/archive/2009/05/22/adventures-in-mvvm-ndash-model-view-viewmodel.aspx) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2009%2F05%2F27%2Fadventures-in-mvvm-ndash-a-testing-story.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-A-Testing-Story) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f05%2f27%2fadventures-in-mvvm-ndash-a-testing-story.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.houseofbilz.com%2farchive%2f2009%2f05%2f27%2fadventures-in-mvvm-ndash-a-testing-story.aspx) \n\nI have been spending a lot of time lately thinking about client architecture with Silverlight and to a lesser extent, WPF.&#160; I tend to subscribe to the philosophy that when you make your code testable, you get a lot of other great qualities along with it.&#160; I believe this so strongly that I go out of my way to architect my inherently untestable code in a way that I can, indeed, test it.\n\nSince I have been writing most my code for the Silverlight platform in the past several months, and I wanted very much to write my code test-driven.&#160; I used the Model-View-Presenter pattern (MVP) to implement my view as an interface.&#160; The presenter would hand model objects over to the view and I would bind visual items in my view to the model items.&#160; The presenter would then tell the IView what to do when any real logic came to play.&#160; Over time, however, more and more logic started creeping into the code behind.&#160; I had a lot of data converters to doing my dirty work, blending the code between the model and the view.&#160; The problem is that anything within the IView implementation (aka code-behind) is not easily unit-testable.\n\n[![organic](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/MyExperiencewithMVVM_FFA6/organic_thumb.jpg \"organic\")](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/MyExperiencewithMVVM_FFA6/organic_2.jpg) \n\nAs I started to really understand how binding worked in the context of XAML, I found myself wanting to use binding against view-agnostic objects for testability.&#160; Since the view didn’t know anything about the presenter, the only data to bind to was in the model.&#160; Sadly, view-specific data started to creep into model items.&#160; Where ThumbnailData (for instance) was only meta-information that came from my server, it began to gain properties such as Selected and Hidden.&#160; Moreover, what “Selected” means to one part of the UI is different to another part of the UI.\n\nThis was not the direction I wanted to go.&#160; In a fit of desperation, a colleague and I sat down and designed a pattern where we had a “ViewState” and a “ViewLogic” class.&#160; “ViewState” was just a set of properties (model data and view properties) that implements INotifyPropertyChanged for the view to bind against and “ViewLogic” manipulated the “ViewState” to add the UI smarts.\n\nThe benefits were immediate and obvious.&#160; We started seeing logic that was once in the code-behind move over to the “ViewLogic”.&#160; We immediately received testing benefits.&#160; We could write tests against the “ViewState” as if it were the actual UI.&#160; We even started writing our new features with TDD.&#160; Everything was great!\n\nI was all ready to start blogging about it.&#160; My colleague and I had come up with this fantastic pattern for making testable Silverlight UIs and I wanted to tell the world.&#160; When doing some comparative reading I started seeing the “MVVM” term pop up here and there.&#160; It didn’t take long for me to realize that what we had invented in a bubble was just a subtle variant of the Model-View-ViewModel pattern.&#160; The ViewModel is really just our ViewLogic and ViewState combined into one single class.&#160; It only solidified my belief that this pattern had legs.\n\nAlthough I sensed some initial skepticism from my team-mates about using the pattern throughout the product, it didn’t take long for them to recognize how important the MVVM pattern would be to our project.&#160; Since adoption our test coverage has skyrocketed with hundreds of useful tests.&#160; The proof is in the pudding.&#160; The vast majority of our bugs that come in have been one of two types of bugs: Missed features or improper binding – two things that the MVVM pattern can’t help prevent.\n\nSo, that is how I got so interested in the MVVM pattern.&#160; Because it is relatively new, the community is still working out the best practices.&#160; There is room for experimentation and that can be a lot of fun.&#160; Lets solve the new problems.&#160; Lets push the community in the right direction.&#160; We are already hearing the buzz for Silverlight 3 to contain native support for MVVM (via Prism).&#160; Lets keep this going… and lets have fun doing it!","slug":"adventures-in-mvvm-a-testing-story","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gd002s6eulwuxb55sm"},{"title":"Adventures in MVVM – Slides and Demo App","id":"73","date":"2009-06-12T17:42:00.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archive/2009/05/22/adventures-in-mvvm-ndash-model-view-viewmodel.aspx)\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fgeekswithblogs.net%2FHouseOfBilz%2Farchive%2F2009%2F06%2F12%2Fadventures-in-mvvm-ndash-slides-and-demo-app.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Slides-and-Demo-App) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f06%2f12%2fadventures-in-mvvm-ndash-slides-and-demo-app.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f06%2f12%2fadventures-in-mvvm-ndash-slides-and-demo-app.aspx)\n\nYesterday, I gave my MVVM talk to the public for the first time in [Flint, MI](http://www.glugnet.org/).&#160; I will be in Southfield next week and Tennessee the week after that (CodeStock), giving the same talk.&#160; Although I have some changes to make, I thought I would post what I presented last night.&#160; I will probably work on a smaller example that I will also put up here when I am done with it. \n\n### The Demo\n ![](http://brianstestsite.googlepages.com/RecipeBox.png)   \n\nThe demo is a front-end to a recipe database.&#160; It should compile and run out of the box.&#160; It was designed to work against [www.eCuisine.com](http://www.eCuisine.com), but it requires you to sign up with them in order to get real data.&#160; To get around that, I have stored some “canned” recipes in the service by default.&#160; If you want to hook it up to use the real eCuisine.com service, simply register with them from [www.eCuisine.com](http://www.eCuisine.com) and add your email/client ID in the eCuisine.svc.cs file and uncomment the null for the service.&#160; If you don’t do that, everything still works well enough for you to get the feel for the app.\n\nThe vast majority of the UI behavior exists in the View-Models and I show a few different approaches to getting View-Models hooked up to the views.\n\nThere is also a full suite of tests.&#160; Be sure to check them out for ideas to how you might test your View-Models.\n\n[**Demo Code**](http://brianstestsite.googlepages.com/RecipeBox.Public.zip)\n\n**[Powerpoint Slides](http://brianstestsite.googlepages.com/MVVM.ppt)**","source":"_posts/2009-06-12-adventures-in-mvvm-slides-and-demo-app.md","raw":"---\ntitle: Adventures in MVVM – Slides and Demo App\nid: 73\ncategories:\n  - Uncategorized\ndate: 2009-06-12 13:42:00\ntags:\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archive/2009/05/22/adventures-in-mvvm-ndash-model-view-viewmodel.aspx)\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fgeekswithblogs.net%2FHouseOfBilz%2Farchive%2F2009%2F06%2F12%2Fadventures-in-mvvm-ndash-slides-and-demo-app.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Slides-and-Demo-App) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f06%2f12%2fadventures-in-mvvm-ndash-slides-and-demo-app.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f06%2f12%2fadventures-in-mvvm-ndash-slides-and-demo-app.aspx)\n\nYesterday, I gave my MVVM talk to the public for the first time in [Flint, MI](http://www.glugnet.org/).&#160; I will be in Southfield next week and Tennessee the week after that (CodeStock), giving the same talk.&#160; Although I have some changes to make, I thought I would post what I presented last night.&#160; I will probably work on a smaller example that I will also put up here when I am done with it. \n\n### The Demo\n ![](http://brianstestsite.googlepages.com/RecipeBox.png)   \n\nThe demo is a front-end to a recipe database.&#160; It should compile and run out of the box.&#160; It was designed to work against [www.eCuisine.com](http://www.eCuisine.com), but it requires you to sign up with them in order to get real data.&#160; To get around that, I have stored some “canned” recipes in the service by default.&#160; If you want to hook it up to use the real eCuisine.com service, simply register with them from [www.eCuisine.com](http://www.eCuisine.com) and add your email/client ID in the eCuisine.svc.cs file and uncomment the null for the service.&#160; If you don’t do that, everything still works well enough for you to get the feel for the app.\n\nThe vast majority of the UI behavior exists in the View-Models and I show a few different approaches to getting View-Models hooked up to the views.\n\nThere is also a full suite of tests.&#160; Be sure to check them out for ideas to how you might test your View-Models.\n\n[**Demo Code**](http://brianstestsite.googlepages.com/RecipeBox.Public.zip)\n\n**[Powerpoint Slides](http://brianstestsite.googlepages.com/MVVM.ppt)**","slug":"adventures-in-mvvm-slides-and-demo-app","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ge002u6eul5qwgbhmb"},{"title":"Adventures in MVVM – Commanding with List Boxes","id":"70","date":"2009-05-29T17:41:00.000Z","_content":"\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fgeekswithblogs.net%2FHouseOfBilz%2Farchive%2F2009%2F05%2F29%2Fadventures-in-mvvm-ndash-commanding-with-list-boxes.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Commanding-with-List-Boxes) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f05%2f29%2fadventures-in-mvvm-ndash-commanding-with-list-boxes.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f05%2f29%2fadventures-in-mvvm-ndash-commanding-with-list-boxes.aspx) \n\nContinuing in my series of [“Adventures in MVVM”](http://houseofbilz.com/archive/2009/05/22/adventures-in-mvvm-ndash-model-view-viewmodel.aspx), I want to talk about a few different approaches to working with List Boxes with the MVVM pattern.&nbsp; What I am writing here is generally true of all controls that derive from Selector, including ListBox and ComboBox.&nbsp; This example was developed in Silverlight, but the same concepts also apply to WPF.\n\n### The Problem\n\nYou have a list box in your view, and you want your ViewModel to do something when an item in the ListBox is selected. You want to do this without any code-behind, using the MVVM pattern.&nbsp; There are three methods that I have come up with, and I will outline them here.&nbsp; In this post, I will be using a VERY simple data class in my ListBox called **Person **with a First and Last name.&nbsp; It is so simple, in fact, that I have chosen not to include the source for this class.\n\n### Method 1: Quick and Dirty SelectedItem binding\n\nThis method sets up a SelectedPerson property in the view model and does something when the property is changed.&nbsp; \n <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:7a1ac801-440e-45ac-a937-0ce89313b546\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ViewModel : INotifyPropertyChanged\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ObservableCollection</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Person</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> People { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> Person _selectedPerson </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">;\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Person SelectedPerson\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> _selectedPerson; }\n        </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">\n        {\n            _selectedPerson </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> value;\n            OnPropertyChanged(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">SelectedPerson</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);    \n            DoSomething(value);\n        }\n    }\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> ... rest of ViewModel</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:e39d8690-156d-41d1-8c3d-d92da1d0d0a3\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ListBox </span><span style=\"color: #FF0000;\">ItemsSource</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding People}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> SelectedItem</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding SelectedPerson, Mode=TwoWay}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n**Pros: **This method is quick and simple to get going \n**Cons:** You are introducing side effects in your property code.&nbsp; If you are OK with this, then read no further.&nbsp; If this bothers you the way it does for me, then lets look at our next option.\n\n### Method 2: Button Command\n\nThere are plenty of commanding libraries out there to choose from.&nbsp; I will take advantage of the [Prism](http://compositewpf.codeplex.com/) commanding system (Microsoft.Practices.Composite.Presentation.Commands).&nbsp; They have implemented bindable commands for ButtonBase.&nbsp; The only problem: ListBox is not a ButtonBase.&nbsp; To get around this, replace the ItemTemplate with a Button that has a template of textblock.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:821a3512-9c0c-4b74-b6bd-faf4e9fe37e1\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ViewModel : INotifyPropertyChanged\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ViewModel()\n    {\n        PersonSelected </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> DelegateCommand</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Person</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(DoSomething);\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> ... rest of constructor</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ObservableCollection</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Person</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> People { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ICommand PersonSelected { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> ... rest of ViewModel    </span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:df1c3267-d07b-4be4-962d-615aec33d116\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ListBox </span><span style=\"color: #FF0000;\">ItemsSource</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding People}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ListBox.ItemTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">DataTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n            </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">Button </span><span style=\"color: #FF0000;\">Commands:Click.Command</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding PersonSelected, Source={StaticResource ViewModel}}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Commands:Click.CommandParameter</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">Button.Template</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ControlTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                        </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ControlTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">Button.Template</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n            </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">Button</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">DataTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ListBox.ItemTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ListBox</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n**Pros: **The ViewModel is much more simple with no side effects.&nbsp; \n**Cons:** The XAML is ugly as sin.&nbsp; It also changes the behavior of the ListBox in a subtle way.&nbsp; Every time you select an item, the command fires, not just when it changes.&nbsp; This is my LEAST favorite approach.&nbsp; We can do better\n\n### Method 3: Bind Commands to the ListBox\n\nThe final mechanism is my favorite.&nbsp; Even though [Prism](http://compositewpf.codeplex.com/) doesn’t give us the ability to bind commands to ListBoxes, we can extend their attached behavior infrastructure such that all ListBoxes and ComboBoxes (or anything that derives from Selector) can take advantage of it.&nbsp; The ViewModel doesn’t change from “Method 2”, but the XAML does:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:4347b12c-780e-48d2-98c1-ff89501973fc\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ListBox </span><span style=\"color: #FF0000;\">ItemsSource</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding People}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Commands:Selected.Command</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding PersonSelected}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n**Pros: **Best of both worlds.&nbsp; Simple ViewModel.&nbsp; Simple XAML \n**Cons:** You have to write some extensions to the Prism infrastructure.&nbsp; This code is boilerplate.&nbsp; I have written some generics that can reduce the boilerplate code somewhat, but not completely, due to the static properties. \n\n### The Winner Is….\n\nI like “Method 3” the best.&nbsp; With a bit of some infrastructure code that you can tuck away, you get to bind the selected items to a command in any case.&nbsp; It plays well, and it is easy to follow.\n\nBut wait… you want the Prism extensions?&nbsp; Here they are:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:4f97a3a2-4440-4df0-9d8e-f62a085e3266\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SelectorSelectedCommandBehavior : CommandBehaviorBase</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Selector</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> SelectorSelectedCommandBehavior(Selector selectableObject)\n        : </span><span style=\"color: #0000FF;\">base</span><span style=\"color: #000000;\">(selectableObject)\n    {\n        selectableObject.SelectionChanged </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> OnSelectionChanged;\n    }\n\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnSelectionChanged(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, SelectionChangedEventArgs e)\n    {\n        CommandParameter </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> TargetObject.SelectedItem;\n        ExecuteCommand();\n    }\n}</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Selected\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> DependencyProperty SelectedCommandBehaviorProperty </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> DependencyProperty.RegisterAttached(\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">SelectedCommandBehavior</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n        </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(SelectorSelectedCommandBehavior),\n        </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(Selected),\n        </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> DependencyProperty CommandProperty </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> DependencyProperty.RegisterAttached(\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Command</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n        </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ICommand),\n        </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(Selected),\n        </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> PropertyMetadata(OnSetCommandCallback));\n\n    [System.Diagnostics.CodeAnalysis.SuppressMessage(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Microsoft.Design</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CA1011:ConsiderPassingBaseTypesAsParameters</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, Justification </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Only works for selector</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetCommand(Selector selector, ICommand command)\n    {\n        selector.SetValue(CommandProperty, command);\n    }\n\n    [System.Diagnostics.CodeAnalysis.SuppressMessage(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Microsoft.Design</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CA1011:ConsiderPassingBaseTypesAsParameters</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, Justification </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Only works for selector</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> ICommand GetCommand(Selector selector)\n    {\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> selector.GetValue(CommandProperty) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ICommand;\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnSetCommandCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\n    {\n        var selector </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> dependencyObject </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> Selector;\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (selector </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n        {\n            GetOrCreateBehavior(selector).Command </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> e.NewValue </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ICommand;\n        }\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> SelectorSelectedCommandBehavior GetOrCreateBehavior(Selector selector)\n    {\n        var behavior </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> selector.GetValue(SelectedCommandBehaviorProperty) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> SelectorSelectedCommandBehavior;\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (behavior </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n        {\n            behavior </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> SelectorSelectedCommandBehavior(selector);\n            selector.SetValue(SelectedCommandBehaviorProperty, behavior);\n        }\n\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> behavior;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div><pre class=\"c-sharp\" name=\"code\"></pre>","source":"_posts/2009-05-29-adventures-in-mvvm-commanding-with-list-boxes.md","raw":"---\ntitle: Adventures in MVVM – Commanding with List Boxes\nid: 70\ncategories:\n  - Uncategorized\ndate: 2009-05-29 13:41:00\ntags:\n---\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fgeekswithblogs.net%2FHouseOfBilz%2Farchive%2F2009%2F05%2F29%2Fadventures-in-mvvm-ndash-commanding-with-list-boxes.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Commanding-with-List-Boxes) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f05%2f29%2fadventures-in-mvvm-ndash-commanding-with-list-boxes.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f05%2f29%2fadventures-in-mvvm-ndash-commanding-with-list-boxes.aspx) \n\nContinuing in my series of [“Adventures in MVVM”](http://houseofbilz.com/archive/2009/05/22/adventures-in-mvvm-ndash-model-view-viewmodel.aspx), I want to talk about a few different approaches to working with List Boxes with the MVVM pattern.&nbsp; What I am writing here is generally true of all controls that derive from Selector, including ListBox and ComboBox.&nbsp; This example was developed in Silverlight, but the same concepts also apply to WPF.\n\n### The Problem\n\nYou have a list box in your view, and you want your ViewModel to do something when an item in the ListBox is selected. You want to do this without any code-behind, using the MVVM pattern.&nbsp; There are three methods that I have come up with, and I will outline them here.&nbsp; In this post, I will be using a VERY simple data class in my ListBox called **Person **with a First and Last name.&nbsp; It is so simple, in fact, that I have chosen not to include the source for this class.\n\n### Method 1: Quick and Dirty SelectedItem binding\n\nThis method sets up a SelectedPerson property in the view model and does something when the property is changed.&nbsp; \n <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:7a1ac801-440e-45ac-a937-0ce89313b546\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ViewModel : INotifyPropertyChanged\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ObservableCollection</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Person</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> People { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> Person _selectedPerson </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">;\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> Person SelectedPerson\n    {\n        </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> _selectedPerson; }\n        </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">\n        {\n            _selectedPerson </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> value;\n            OnPropertyChanged(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">SelectedPerson</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);    \n            DoSomething(value);\n        }\n    }\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> ... rest of ViewModel</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:e39d8690-156d-41d1-8c3d-d92da1d0d0a3\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ListBox </span><span style=\"color: #FF0000;\">ItemsSource</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding People}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> SelectedItem</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding SelectedPerson, Mode=TwoWay}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n**Pros: **This method is quick and simple to get going \n**Cons:** You are introducing side effects in your property code.&nbsp; If you are OK with this, then read no further.&nbsp; If this bothers you the way it does for me, then lets look at our next option.\n\n### Method 2: Button Command\n\nThere are plenty of commanding libraries out there to choose from.&nbsp; I will take advantage of the [Prism](http://compositewpf.codeplex.com/) commanding system (Microsoft.Practices.Composite.Presentation.Commands).&nbsp; They have implemented bindable commands for ButtonBase.&nbsp; The only problem: ListBox is not a ButtonBase.&nbsp; To get around this, replace the ItemTemplate with a Button that has a template of textblock.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:821a3512-9c0c-4b74-b6bd-faf4e9fe37e1\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ViewModel : INotifyPropertyChanged\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ViewModel()\n    {\n        PersonSelected </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> DelegateCommand</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Person</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(DoSomething);\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> ... rest of constructor</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ObservableCollection</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Person</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> People { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ICommand PersonSelected { </span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">; }\n\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> ... rest of ViewModel    </span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:df1c3267-d07b-4be4-962d-615aec33d116\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ListBox </span><span style=\"color: #FF0000;\">ItemsSource</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding People}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ListBox.ItemTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">DataTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n            </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">Button </span><span style=\"color: #FF0000;\">Commands:Click.Command</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding PersonSelected, Source={StaticResource ViewModel}}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Commands:Click.CommandParameter</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">Button.Template</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ControlTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                        </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ControlTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">Button.Template</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n            </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">Button</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">DataTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ListBox.ItemTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ListBox</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n**Pros: **The ViewModel is much more simple with no side effects.&nbsp; \n**Cons:** The XAML is ugly as sin.&nbsp; It also changes the behavior of the ListBox in a subtle way.&nbsp; Every time you select an item, the command fires, not just when it changes.&nbsp; This is my LEAST favorite approach.&nbsp; We can do better\n\n### Method 3: Bind Commands to the ListBox\n\nThe final mechanism is my favorite.&nbsp; Even though [Prism](http://compositewpf.codeplex.com/) doesn’t give us the ability to bind commands to ListBoxes, we can extend their attached behavior infrastructure such that all ListBoxes and ComboBoxes (or anything that derives from Selector) can take advantage of it.&nbsp; The ViewModel doesn’t change from “Method 2”, but the XAML does:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:4347b12c-780e-48d2-98c1-ff89501973fc\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ListBox </span><span style=\"color: #FF0000;\">ItemsSource</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding People}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Commands:Selected.Command</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding PersonSelected}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n**Pros: **Best of both worlds.&nbsp; Simple ViewModel.&nbsp; Simple XAML \n**Cons:** You have to write some extensions to the Prism infrastructure.&nbsp; This code is boilerplate.&nbsp; I have written some generics that can reduce the boilerplate code somewhat, but not completely, due to the static properties. \n\n### The Winner Is….\n\nI like “Method 3” the best.&nbsp; With a bit of some infrastructure code that you can tuck away, you get to bind the selected items to a command in any case.&nbsp; It plays well, and it is easy to follow.\n\nBut wait… you want the Prism extensions?&nbsp; Here they are:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:4f97a3a2-4440-4df0-9d8e-f62a085e3266\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> SelectorSelectedCommandBehavior : CommandBehaviorBase</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Selector</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> SelectorSelectedCommandBehavior(Selector selectableObject)\n        : </span><span style=\"color: #0000FF;\">base</span><span style=\"color: #000000;\">(selectableObject)\n    {\n        selectableObject.SelectionChanged </span><span style=\"color: #000000;\">+=</span><span style=\"color: #000000;\"> OnSelectionChanged;\n    }\n\n    </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnSelectionChanged(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, SelectionChangedEventArgs e)\n    {\n        CommandParameter </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> TargetObject.SelectedItem;\n        ExecuteCommand();\n    }\n}</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> Selected\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> DependencyProperty SelectedCommandBehaviorProperty </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> DependencyProperty.RegisterAttached(\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">SelectedCommandBehavior</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n        </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(SelectorSelectedCommandBehavior),\n        </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(Selected),\n        </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">);\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> DependencyProperty CommandProperty </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> DependencyProperty.RegisterAttached(\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Command</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n        </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ICommand),\n        </span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(Selected),\n        </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> PropertyMetadata(OnSetCommandCallback));\n\n    [System.Diagnostics.CodeAnalysis.SuppressMessage(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Microsoft.Design</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CA1011:ConsiderPassingBaseTypesAsParameters</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, Justification </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Only works for selector</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> SetCommand(Selector selector, ICommand command)\n    {\n        selector.SetValue(CommandProperty, command);\n    }\n\n    [System.Diagnostics.CodeAnalysis.SuppressMessage(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Microsoft.Design</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CA1011:ConsiderPassingBaseTypesAsParameters</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, Justification </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Only works for selector</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> ICommand GetCommand(Selector selector)\n    {\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> selector.GetValue(CommandProperty) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ICommand;\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> OnSetCommandCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\n    {\n        var selector </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> dependencyObject </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> Selector;\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (selector </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n        {\n            GetOrCreateBehavior(selector).Command </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> e.NewValue </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ICommand;\n        }\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">static</span><span style=\"color: #000000;\"> SelectorSelectedCommandBehavior GetOrCreateBehavior(Selector selector)\n    {\n        var behavior </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> selector.GetValue(SelectedCommandBehaviorProperty) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> SelectorSelectedCommandBehavior;\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (behavior </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">)\n        {\n            behavior </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\"> SelectorSelectedCommandBehavior(selector);\n            selector.SetValue(SelectedCommandBehaviorProperty, behavior);\n        }\n\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> behavior;\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div><pre class=\"c-sharp\" name=\"code\"></pre>","slug":"adventures-in-mvvm-commanding-with-list-boxes","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gf002w6eul1xbce562"},{"title":"Adventures in MVVM -- Ball of Mud vs MVVM","id":"74","date":"2009-06-19T17:43:00.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archive/2009/05/22/adventures-in-mvvm-ndash-model-view-viewmodel.aspx) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F06%2F19%2Fadventures-in-mvvm----ball-of-mud-vs-mvvm.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Ball-of-Mud-vs-MVVM) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f06%2f19%2fadventures-in-mvvm----ball-of-mud-vs-mvvm.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f06%2f19%2fadventures-in-mvvm----ball-of-mud-vs-mvvm.aspx)\n\n[![image](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/AdventuresinMVVMBallofMudvsMVVM_13D02/image_thumb.png \"image\")](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/AdventuresinMVVMBallofMudvsMVVM_13D02/image_2.png)A demo that I added to my MVVM talk is one that compares a [“Ball of Mud”](http://en.wikipedia.org/wiki/Big_ball_of_mud) application with a componentized [MVVM](http://en.wikipedia.org/wiki/Model_View_ViewModel_(MVVM)) application with the exact same set of features.&#160; I do this to contrast a messy, un-testable work of code to a cleanly separated, testable work.&#160; The application I chose to write is a Twitter search application in WPF.&#160; When you download the code, you will see two folders: “BallOfMud” and “MVVM”.&#160; \n\nThe “Ball of Mud” app includes the entire app in a XAML file and a code-behind.&#160; The code is incredibly dense… it does a TON of stuff, all in one page of code.&#160; Unfortunately, is practically un-testable.&#160; Even if you could test it, the code hits a live twitter.com.&#160; Not the way you want to write tests.&#160; This way of writing software works well for demos, but it certainly does not scale to real-life applications.\n\nThe MVVM example, on the other hand, is significantly broken up into components (4 layers).&#160; There are 2 Views (TwitterSearchView and TweetView) with 2 corresponding ViewModels.&#160; Then, there is a Model layer which is responsible for parsing data that comes from the Service layer into “Tweets”.&#160; There is more code than the “Ball of Mud” example, but the code is testable, and modular.&#160; You can swap out different services or models, if you wish.&#160; In fact, in the Model layer, you will find a “CannedData” class that I use when I don’t have an internet connection when I give my presentation.&#160; It just swaps in.&#160; This example might feel like “overkill”, but as the application grows in scope, this architecture will scale exceptionally well.\n\n[Twitter Search “Ball of Mud” vs “MVVM”](http://brianstestsite.googlepages.com/Twitter-BallOfMud-vs-MVVM.zip)","source":"_posts/2009-06-19-adventures-in-mvvm-ball-of-mud-vs-mvvm.md","raw":"---\ntitle: Adventures in MVVM -- Ball of Mud vs MVVM\nid: 74\ncategories:\n  - Uncategorized\ndate: 2009-06-19 13:43:00\ntags:\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archive/2009/05/22/adventures-in-mvvm-ndash-model-view-viewmodel.aspx) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F06%2F19%2Fadventures-in-mvvm----ball-of-mud-vs-mvvm.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Ball-of-Mud-vs-MVVM) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f06%2f19%2fadventures-in-mvvm----ball-of-mud-vs-mvvm.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f06%2f19%2fadventures-in-mvvm----ball-of-mud-vs-mvvm.aspx)\n\n[![image](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/AdventuresinMVVMBallofMudvsMVVM_13D02/image_thumb.png \"image\")](http://geekswithblogs.net/images/geekswithblogs_net/HouseOfBilz/WindowsLiveWriter/AdventuresinMVVMBallofMudvsMVVM_13D02/image_2.png)A demo that I added to my MVVM talk is one that compares a [“Ball of Mud”](http://en.wikipedia.org/wiki/Big_ball_of_mud) application with a componentized [MVVM](http://en.wikipedia.org/wiki/Model_View_ViewModel_(MVVM)) application with the exact same set of features.&#160; I do this to contrast a messy, un-testable work of code to a cleanly separated, testable work.&#160; The application I chose to write is a Twitter search application in WPF.&#160; When you download the code, you will see two folders: “BallOfMud” and “MVVM”.&#160; \n\nThe “Ball of Mud” app includes the entire app in a XAML file and a code-behind.&#160; The code is incredibly dense… it does a TON of stuff, all in one page of code.&#160; Unfortunately, is practically un-testable.&#160; Even if you could test it, the code hits a live twitter.com.&#160; Not the way you want to write tests.&#160; This way of writing software works well for demos, but it certainly does not scale to real-life applications.\n\nThe MVVM example, on the other hand, is significantly broken up into components (4 layers).&#160; There are 2 Views (TwitterSearchView and TweetView) with 2 corresponding ViewModels.&#160; Then, there is a Model layer which is responsible for parsing data that comes from the Service layer into “Tweets”.&#160; There is more code than the “Ball of Mud” example, but the code is testable, and modular.&#160; You can swap out different services or models, if you wish.&#160; In fact, in the Model layer, you will find a “CannedData” class that I use when I don’t have an internet connection when I give my presentation.&#160; It just swaps in.&#160; This example might feel like “overkill”, but as the application grows in scope, this architecture will scale exceptionally well.\n\n[Twitter Search “Ball of Mud” vs “MVVM”](http://brianstestsite.googlepages.com/Twitter-BallOfMud-vs-MVVM.zip)","slug":"adventures-in-mvvm-ball-of-mud-vs-mvvm","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gh002y6eulkwlud06e"},{"title":"Adventures in MVVM – MVVM Interview","id":"75","date":"2009-08-07T17:44:00.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/)\n\nIt has been a while since I have posted.&#160; With [CodeStock](http://codestock.org/), [GiveCamp](michigangivecamp.org/), [Vacation](http://picasaweb.google.com/BrianGenisio/Vacation#), overtime at work [and](http://www.glugnet.org/Events/tabid/1364/ctl/ViewDetail/Mid/3505/ItemID/217/d/20090611/Default.aspx?SkinSrc=%5bL%5dSkins%2fDNNspot-Halite%2fblue)&#160;[my](http://www.migang.org/NewsItem/09-06-14/brian_genisio_on_the_mvvm_pattern_in_june.aspx) [other](http://aadnd.org/Meetings/2009/July.aspx) [speaking](http://www.dayofdotnet.org/Lansing/2009/) [gigs](http://www.wmdotnet.org/Meetings/MeetingInformation/tabid/61/Default.aspx), I have been very busy.&#160; But things are calming down.&#160; I have several posts I’d like to get out, but for the time being, I thought I would post my [conversation](http://www.davidgiard.com/2009/07/15/BrianGenisioOnTheMVVMPattern.aspx) with [David Giard](http://www.davidgiard.com/2009/07/15/BrianGenisioOnTheMVVMPattern.aspx) about the MVVM pattern:\n <object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" width=\"437\" height=\"347\" id=\"viddler\"> <param name=\"movie\" value=\"http://www.viddler.com/simple_on_site/9acea31a\" /> <param name=\"allowScriptAccess\" value=\"always\" /> <param name=\"allowFullScreen\" value=\"true\" /> <embed src=\"http://www.viddler.com/simple_on_site/9acea31a\" width=\"437\" height=\"347\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" name=\"viddler\"></embed> </object>","source":"_posts/2009-08-07-adventures-in-mvvm-mvvm-interview.md","raw":"---\ntitle: Adventures in MVVM – MVVM Interview\nid: 75\ncategories:\n  - Uncategorized\ndate: 2009-08-07 13:44:00\ntags:\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/)\n\nIt has been a while since I have posted.&#160; With [CodeStock](http://codestock.org/), [GiveCamp](michigangivecamp.org/), [Vacation](http://picasaweb.google.com/BrianGenisio/Vacation#), overtime at work [and](http://www.glugnet.org/Events/tabid/1364/ctl/ViewDetail/Mid/3505/ItemID/217/d/20090611/Default.aspx?SkinSrc=%5bL%5dSkins%2fDNNspot-Halite%2fblue)&#160;[my](http://www.migang.org/NewsItem/09-06-14/brian_genisio_on_the_mvvm_pattern_in_june.aspx) [other](http://aadnd.org/Meetings/2009/July.aspx) [speaking](http://www.dayofdotnet.org/Lansing/2009/) [gigs](http://www.wmdotnet.org/Meetings/MeetingInformation/tabid/61/Default.aspx), I have been very busy.&#160; But things are calming down.&#160; I have several posts I’d like to get out, but for the time being, I thought I would post my [conversation](http://www.davidgiard.com/2009/07/15/BrianGenisioOnTheMVVMPattern.aspx) with [David Giard](http://www.davidgiard.com/2009/07/15/BrianGenisioOnTheMVVMPattern.aspx) about the MVVM pattern:\n <object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" width=\"437\" height=\"347\" id=\"viddler\"> <param name=\"movie\" value=\"http://www.viddler.com/simple_on_site/9acea31a\" /> <param name=\"allowScriptAccess\" value=\"always\" /> <param name=\"allowFullScreen\" value=\"true\" /> <embed src=\"http://www.viddler.com/simple_on_site/9acea31a\" width=\"437\" height=\"347\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" name=\"viddler\"></embed> </object>","slug":"adventures-in-mvvm-mvvm-interview","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gi00306eul49f9if1c"},{"title":"Adventures in MVVM – Generalized Command Behavior Attachments","id":"76","date":"2009-08-22T05:45:00.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/)&#160; [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2FHouseOfBilz%2Farchive%2F2009%2F08%2F21%2Fadventures-in-mvvm-ndash-generalized-command-behavior-attachments.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Generalized-Command-Behavior-Attachments) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2fHouseOfBilz%2farchive%2f2009%2f08%2f21%2fadventures-in-mvvm-ndash-generalized-command-behavior-attachments.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2fHouseOfBilz%2farchive%2f2009%2f08%2f21%2fadventures-in-mvvm-ndash-generalized-command-behavior-attachments.aspx)\n\nThere are several examples on the web that describe the [“Attached Behavior”](http://houseofbilz.com/archive/2009/05/29/adventures-in-mvvm-ndash-commanding-with-list-boxes.aspx) pattern in Silverlight and WPF.&#160; This pattern works really well for binding commands in the ViewModel to controls in the View.&#160; The problem with this is that for every behavior, there is a LOT of boilerplate code that goes along with it.&#160; Because the DepencencyProperties need to be static, they cannot be easily abstracted into a common class. \n\nIf you want to attach a **MouseEnterBehavior **to a control, you need to create two or three static Dependency Properties in the MouseEnter class.&#160; They are MouseEnter.Command, MouseEnter.MouseEnterBehavior and optionally, MouseEnter.CommandParameter.\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:e9ea40db-5abc-43e8-ba7b-91d3e2b0d8e3\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> MouseEnter \n    {\n        </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty BehaviorProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\">\n            DependencyProperty.RegisterAttached(\n                </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">MouseEnterBehavior</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(MouseEnterBehavior),\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(Control),\n                </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">);\n\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty CommandProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\">\n            DependencyProperty.RegisterAttached(\n                </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Command</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(ICommand),\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(MouseEnter),\n                </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyMetadata(OnSetCommand));\n\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty CommandParameterProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\">\n            DependencyProperty.RegisterAttached(\n                </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">CommandParameter</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\">),\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(MouseEnter),\n                </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyMetadata(OnSetParameter))</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nAnd then the &quot;Change Handlers&quot;\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:816c8ecc-3aec-4f66-b672-6686ef0736e7\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #000000\">        </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> OnSetCommand(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args)\n        {\n            var target </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dependencyObject </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> Control;\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (target </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n                </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n            GetOrCreateBehavior(target).Command </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> args.NewValue </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> ICommand;\n        }\n\n        </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> OnSetParameter(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args)\n        {\n            var target </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dependencyObject </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> Control;\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (target </span><span style=\"color: #000000\">!=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n            {\n                GetOrCreateBehavior(target).CommandParameter </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> args.NewValue;\n            }\n        }\n\n        </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> MouseEnterBehavior GetOrCreateBehavior(Control control)\n        {\n            var behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> control.GetValue(BehaviorProperty) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> MouseEnterBehavior;\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (behavior </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n            {\n                behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> MouseEnterBehavior(control);\n                control.SetValue(BehaviorProperty, behavior);\n            }\n\n            </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> behavior;\n        }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nSince the Dependency Properties are static, Silverlight also requires you to in include Get* and Set* static methods:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:ea927050-1419-4a44-81c5-a493752ebde6\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #000000\">        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> SetCommand(Control control, ICommand command) { control.SetValue(CommandProperty, command); }\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> ICommand GetCommand(Control control) { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> control.GetValue(CommandProperty) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> ICommand; }\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> SetCommandParameter(Control control, </span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> parameter) { control.SetValue(CommandParameterProperty, parameter); }\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> GetCommandParameter(Control buttonBase) { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> buttonBase.GetValue(CommandParameterProperty); }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nThis is a classic case of reuse via “Copy and Paste”.&#160; The problem is that there are several places in this code where you need to change three different types and many strings.&#160; If you don’t invoke the magic incantation properly, nothing works.&#160; It will compile but it won’t work (or you will get an obscure XAML parse error).\n\nI cringe whenever I have to employ copy/paste reuse.&#160; In the cases where it is absolutely necessary (such as this), I believe the risk can be reduced proportionately to the complexity of the modification after you paste.&#160; This is why I came up with an **Attachment** base class to generalize all of this boilerplate code.&#160; The previous code can be reduced to:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1f59b685-9759-4cd3-be5c-ac0e664c866e\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #000000\">    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> MouseEnter : Attachment</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">Control, MouseEnterBehavior, MouseEnter</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty BehaviorProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Behavior();\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty CommandProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Command(BehaviorProperty);\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty CommandParameterProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Parameter(BehaviorProperty);\n\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> SetCommand(Control control, ICommand command) { control.SetValue(CommandProperty, command); }\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> ICommand GetCommand(Control control) { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> control.GetValue(CommandProperty) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> ICommand; }\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> SetCommandParameter(Control control, </span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> parameter) { control.SetValue(CommandParameterProperty, parameter); }\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> GetCommandParameter(Control buttonBase) { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> buttonBase.GetValue(CommandParameterProperty); }\n    }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nThe only modifications to this copied code exist on the first line. \n\nWhat is the class name?&#160; **MouseEnter** (2 places)\n\nWhat type of control can the behavior attach to? **Control**\n\nWhat type of behavior do you want to attach? **MouseEnterBehavior**\n\nIn addition to the decreased configuration complexity, the actual code that needs to be copied goes from 58 lines of boilerplate code to 11 lines of boilerplate code.&#160; This is a big win, in my opinion.\n\nIn this code, I am using the **CommandBehaviorBase** class from the [Prism](http://compositewpf.codeplex.com/) framework.&#160; It is part of the generic constraints.&#160; If you use something else for your behaviors, replace it as you see fit.&#160; Your own base class for command behaviors would slip in nicely, I am sure.\n\nHere is the **Attachment** base class:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:90bbf315-3e80-4acf-aaf4-95a5664e59d3\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #000000\">    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> Attachment</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">TargetT, BehaviorT, AttachmentT</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n        </span><span style=\"color: #0000ff\">where</span><span style=\"color: #000000\"> TargetT : Control\n        </span><span style=\"color: #0000ff\">where</span><span style=\"color: #000000\"> BehaviorT : CommandBehaviorBase</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">TargetT</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> DependencyProperty Behavior()\n        {\n            </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> DependencyProperty.RegisterAttached(\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(BehaviorT).Name,\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(BehaviorT),\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(TargetT),\n                </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">);\n        }\n\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> DependencyProperty Command(DependencyProperty behaviorProperty)\n        {\n            </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> DependencyProperty.RegisterAttached(\n                </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Command</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\"> (ICommand),\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(AttachmentT),\n                </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyMetadata((target, args) </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> OnSetCommandCallback(target, args, behaviorProperty)));\n        }\n\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> DependencyProperty Parameter(DependencyProperty behaviorProperty)\n        {\n            </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> DependencyProperty.RegisterAttached(\n                </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">CommandParameter</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\">),\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\"> (AttachmentT),\n                </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyMetadata((target, args) </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> OnSetParameterCallback(target, args, behaviorProperty)));\n        }\n\n        </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> OnSetCommandCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e, DependencyProperty behaviorProperty)\n        {\n            var target </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dependencyObject </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> TargetT;\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (target </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n                </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n            GetOrCreateBehavior(target, behaviorProperty).Command </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> e.NewValue </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> ICommand;\n        }\n\n        </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> OnSetParameterCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e, DependencyProperty behaviorProperty)\n        {\n            var target </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dependencyObject </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> TargetT;\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (target </span><span style=\"color: #000000\">!=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n            {\n                GetOrCreateBehavior(target, behaviorProperty).CommandParameter </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> e.NewValue;\n            }\n        }\n\n        </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> BehaviorT GetOrCreateBehavior(Control control, DependencyProperty behaviorProperty)\n        {\n            var behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> control.GetValue(behaviorProperty) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> BehaviorT;\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (behavior </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n            {\n                behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Activator.CreateInstance(</span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(BehaviorT), control) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> BehaviorT;\n                control.SetValue(behaviorProperty, behavior);\n            }\n\n            </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> behavior;\n        }\n    }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nAnd finally, just to complete the example, here is what the **MouseEnterBehavior** looks like:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:8851b117-15d5-4c8a-972f-8100b278b52f\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #000000\">    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> MouseEnterBehavior : CommandBehaviorBase</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">Control</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> MouseEnterBehavior(Control selectableObject)\n            : </span><span style=\"color: #0000ff\">base</span><span style=\"color: #000000\">(selectableObject)\n        {\n            selectableObject.MouseEnter </span><span style=\"color: #000000\">+=</span><span style=\"color: #000000\"> (sender, args) </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> ExecuteCommand();\n        }\n    }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nAnd to use it in your XAML, it would look like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:8f041e8a-6219-4e9f-a156-fa06965082e7\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Button </span><span style=\"color: #ff0000\">Behaviors:MouseEnter.Command</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding MouseEnter}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #ff0000\"> Behaviors:MouseEnter.CommandParameter</span><span style=\"color: #0000ff\">=&quot;Optional Paremeter&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>","source":"_posts/2009-08-22-adventures-in-mvvm-generalized-command-behavior-attachments.md","raw":"---\ntitle: Adventures in MVVM – Generalized Command Behavior Attachments\nid: 76\ncategories:\n  - Uncategorized\ndate: 2009-08-22 01:45:00\ntags:\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/)&#160; [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2FHouseOfBilz%2Farchive%2F2009%2F08%2F21%2Fadventures-in-mvvm-ndash-generalized-command-behavior-attachments.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Generalized-Command-Behavior-Attachments) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2fHouseOfBilz%2farchive%2f2009%2f08%2f21%2fadventures-in-mvvm-ndash-generalized-command-behavior-attachments.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2fHouseOfBilz%2farchive%2f2009%2f08%2f21%2fadventures-in-mvvm-ndash-generalized-command-behavior-attachments.aspx)\n\nThere are several examples on the web that describe the [“Attached Behavior”](http://houseofbilz.com/archive/2009/05/29/adventures-in-mvvm-ndash-commanding-with-list-boxes.aspx) pattern in Silverlight and WPF.&#160; This pattern works really well for binding commands in the ViewModel to controls in the View.&#160; The problem with this is that for every behavior, there is a LOT of boilerplate code that goes along with it.&#160; Because the DepencencyProperties need to be static, they cannot be easily abstracted into a common class. \n\nIf you want to attach a **MouseEnterBehavior **to a control, you need to create two or three static Dependency Properties in the MouseEnter class.&#160; They are MouseEnter.Command, MouseEnter.MouseEnterBehavior and optionally, MouseEnter.CommandParameter.\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:e9ea40db-5abc-43e8-ba7b-91d3e2b0d8e3\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> MouseEnter \n    {\n        </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty BehaviorProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\">\n            DependencyProperty.RegisterAttached(\n                </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">MouseEnterBehavior</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(MouseEnterBehavior),\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(Control),\n                </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">);\n\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty CommandProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\">\n            DependencyProperty.RegisterAttached(\n                </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Command</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(ICommand),\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(MouseEnter),\n                </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyMetadata(OnSetCommand));\n\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty CommandParameterProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\">\n            DependencyProperty.RegisterAttached(\n                </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">CommandParameter</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\">),\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(MouseEnter),\n                </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyMetadata(OnSetParameter))</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nAnd then the &quot;Change Handlers&quot;\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:816c8ecc-3aec-4f66-b672-6686ef0736e7\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #000000\">        </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> OnSetCommand(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args)\n        {\n            var target </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dependencyObject </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> Control;\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (target </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n                </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n            GetOrCreateBehavior(target).Command </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> args.NewValue </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> ICommand;\n        }\n\n        </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> OnSetParameter(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args)\n        {\n            var target </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dependencyObject </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> Control;\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (target </span><span style=\"color: #000000\">!=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n            {\n                GetOrCreateBehavior(target).CommandParameter </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> args.NewValue;\n            }\n        }\n\n        </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> MouseEnterBehavior GetOrCreateBehavior(Control control)\n        {\n            var behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> control.GetValue(BehaviorProperty) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> MouseEnterBehavior;\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (behavior </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n            {\n                behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> MouseEnterBehavior(control);\n                control.SetValue(BehaviorProperty, behavior);\n            }\n\n            </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> behavior;\n        }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nSince the Dependency Properties are static, Silverlight also requires you to in include Get* and Set* static methods:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:ea927050-1419-4a44-81c5-a493752ebde6\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #000000\">        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> SetCommand(Control control, ICommand command) { control.SetValue(CommandProperty, command); }\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> ICommand GetCommand(Control control) { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> control.GetValue(CommandProperty) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> ICommand; }\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> SetCommandParameter(Control control, </span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> parameter) { control.SetValue(CommandParameterProperty, parameter); }\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> GetCommandParameter(Control buttonBase) { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> buttonBase.GetValue(CommandParameterProperty); }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nThis is a classic case of reuse via “Copy and Paste”.&#160; The problem is that there are several places in this code where you need to change three different types and many strings.&#160; If you don’t invoke the magic incantation properly, nothing works.&#160; It will compile but it won’t work (or you will get an obscure XAML parse error).\n\nI cringe whenever I have to employ copy/paste reuse.&#160; In the cases where it is absolutely necessary (such as this), I believe the risk can be reduced proportionately to the complexity of the modification after you paste.&#160; This is why I came up with an **Attachment** base class to generalize all of this boilerplate code.&#160; The previous code can be reduced to:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1f59b685-9759-4cd3-be5c-ac0e664c866e\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #000000\">    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> MouseEnter : Attachment</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">Control, MouseEnterBehavior, MouseEnter</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty BehaviorProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Behavior();\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty CommandProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Command(BehaviorProperty);\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty CommandParameterProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Parameter(BehaviorProperty);\n\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> SetCommand(Control control, ICommand command) { control.SetValue(CommandProperty, command); }\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> ICommand GetCommand(Control control) { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> control.GetValue(CommandProperty) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> ICommand; }\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> SetCommandParameter(Control control, </span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> parameter) { control.SetValue(CommandParameterProperty, parameter); }\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> GetCommandParameter(Control buttonBase) { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> buttonBase.GetValue(CommandParameterProperty); }\n    }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nThe only modifications to this copied code exist on the first line. \n\nWhat is the class name?&#160; **MouseEnter** (2 places)\n\nWhat type of control can the behavior attach to? **Control**\n\nWhat type of behavior do you want to attach? **MouseEnterBehavior**\n\nIn addition to the decreased configuration complexity, the actual code that needs to be copied goes from 58 lines of boilerplate code to 11 lines of boilerplate code.&#160; This is a big win, in my opinion.\n\nIn this code, I am using the **CommandBehaviorBase** class from the [Prism](http://compositewpf.codeplex.com/) framework.&#160; It is part of the generic constraints.&#160; If you use something else for your behaviors, replace it as you see fit.&#160; Your own base class for command behaviors would slip in nicely, I am sure.\n\nHere is the **Attachment** base class:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:90bbf315-3e80-4acf-aaf4-95a5664e59d3\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #000000\">    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> Attachment</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">TargetT, BehaviorT, AttachmentT</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n        </span><span style=\"color: #0000ff\">where</span><span style=\"color: #000000\"> TargetT : Control\n        </span><span style=\"color: #0000ff\">where</span><span style=\"color: #000000\"> BehaviorT : CommandBehaviorBase</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">TargetT</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> DependencyProperty Behavior()\n        {\n            </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> DependencyProperty.RegisterAttached(\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(BehaviorT).Name,\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(BehaviorT),\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(TargetT),\n                </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">);\n        }\n\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> DependencyProperty Command(DependencyProperty behaviorProperty)\n        {\n            </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> DependencyProperty.RegisterAttached(\n                </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Command</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\"> (ICommand),\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(AttachmentT),\n                </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyMetadata((target, args) </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> OnSetCommandCallback(target, args, behaviorProperty)));\n        }\n\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> DependencyProperty Parameter(DependencyProperty behaviorProperty)\n        {\n            </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> DependencyProperty.RegisterAttached(\n                </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">CommandParameter</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\">),\n                </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\"> (AttachmentT),\n                </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyMetadata((target, args) </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> OnSetParameterCallback(target, args, behaviorProperty)));\n        }\n\n        </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> OnSetCommandCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e, DependencyProperty behaviorProperty)\n        {\n            var target </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dependencyObject </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> TargetT;\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (target </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n                </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n            GetOrCreateBehavior(target, behaviorProperty).Command </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> e.NewValue </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> ICommand;\n        }\n\n        </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> OnSetParameterCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e, DependencyProperty behaviorProperty)\n        {\n            var target </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dependencyObject </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> TargetT;\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (target </span><span style=\"color: #000000\">!=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n            {\n                GetOrCreateBehavior(target, behaviorProperty).CommandParameter </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> e.NewValue;\n            }\n        }\n\n        </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> BehaviorT GetOrCreateBehavior(Control control, DependencyProperty behaviorProperty)\n        {\n            var behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> control.GetValue(behaviorProperty) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> BehaviorT;\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (behavior </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n            {\n                behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Activator.CreateInstance(</span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(BehaviorT), control) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> BehaviorT;\n                control.SetValue(behaviorProperty, behavior);\n            }\n\n            </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> behavior;\n        }\n    }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nAnd finally, just to complete the example, here is what the **MouseEnterBehavior** looks like:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:8851b117-15d5-4c8a-972f-8100b278b52f\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #000000\">    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> MouseEnterBehavior : CommandBehaviorBase</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">Control</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> MouseEnterBehavior(Control selectableObject)\n            : </span><span style=\"color: #0000ff\">base</span><span style=\"color: #000000\">(selectableObject)\n        {\n            selectableObject.MouseEnter </span><span style=\"color: #000000\">+=</span><span style=\"color: #000000\"> (sender, args) </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> ExecuteCommand();\n        }\n    }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nAnd to use it in your XAML, it would look like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:8f041e8a-6219-4e9f-a156-fa06965082e7\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Button </span><span style=\"color: #ff0000\">Behaviors:MouseEnter.Command</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding MouseEnter}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #ff0000\"> Behaviors:MouseEnter.CommandParameter</span><span style=\"color: #0000ff\">=&quot;Optional Paremeter&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>","slug":"adventures-in-mvvm-generalized-command-behavior-attachments","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gj00326eul2ocmg6v7"},{"title":"Introducing DynamicWrapper","id":"78","date":"2009-09-18T17:50:00.000Z","_content":"\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F09%2F18%2Fintroducing-dynamicwrapper.aspx)](http://dotnetshoutout.com/Introducing-DynamicWrapper) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f09%2f18%2fintroducing-dynamicwrapper.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f09%2f18%2fintroducing-dynamicwrapper.aspx)\n\n[DynamicWrapper project on CodePlex](http://dynamicwrapper.codeplex.com/)\n\n**_Edit: DynamicWrapper does not work in SIlverlight as I first though.&nbsp; My unit tests passed, but in runtime I get an exception when I try to use the class.&nbsp; I will be looking at some alternatives._**\n\nOver the past few weeks, I have been working on a utility that I have wanted for years: something that allows me to apply an interface to an object that matches the contract but doesn’t actually implement the interface.&nbsp; In other words, I’ve wanted duck typing in C#.&nbsp; The code and project can be found on [CodePlex](http://www.codeplex.com/).&nbsp; It is set up so you simply copy one file into your solution and use the extension methods.\n\nWhy did I want this?&nbsp; Because I write a lot of unit tests and I develop in .Net with C#.&nbsp; Because I write way too many wrapper classes to make my code testable.&nbsp; For example, lets say that I have a class that I want to test and it acts upon a framework object:\n <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:68528c3e-ac9e-4d8f-994f-b84c31cb2d3d\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">sealed</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> FrameworkClass\n{\n    </span><span style=\"color: #0000FF;\">internal</span><span style=\"color: #000000;\"> FrameworkClass() {}\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> X {</span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">;}\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Y {</span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">;}\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Calculate() { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> DoSomeStuff(); }\n}\n\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> MyClass\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DoSomethingWithFrameworkData(FrameworkClass value)\n    {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Do Something</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div><pre class=\"c-sharp\" name=\"code\"></pre>\n\nThe problem is that I can’t test **MyClass** because it is dependent upon **FrameworkClass** which I can never construct myself (it is sealed with an internal constructor and no interface).&nbsp; The solution for this is simple but tedious – create a wrapper class that implements an interface and proxy through the wrapper class to the real object.&nbsp; This approach works, but I can say this: **_I am sick of writing wrapper classes!_**\n\nThis is why I created this DynamicWrapper utility.&nbsp; It exposes two extension methods: realObject.As&lt;Interface&gt;() and wrapper.AsReal&lt;ConcreteClass&gt;().&nbsp; It uses Reflection to emit a dynamically generated wrapper class that implements the interface, and wraps your object for you.&nbsp; It sounds complicated, but it is extremely simple to use.\n\nHere is an example. Start by creating an interface that looks like the FrameworkClass:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:8bd836e1-3e63-4f29-8993-54b779d7971b\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> ICalculatable\n{\n    </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> X {</span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">;}\n    </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Y {</span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">;}\n    </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Calculate();\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nModify your class to depend on ICalculatable:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1b0fecea-51fb-43ce-ae97-c5ff9b266994\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DoSomethingWIthFrameworkData(ICalculatable value) {}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNow, when you pass the framework class into the MyClass, you can wrap it with the interface:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:7863e811-abd6-4379-82ae-5dbcdd71ff96\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">myObject.DoSomethingWithFrameworkData(frameworkObject.As</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">ICalculatable</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">());</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nIf you need the framework object to pass back to the framework, it is really simple:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1f34493e-1fc7-472c-a06d-045b54e30ab4\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">wrapper.AsReal</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">FrameworkClass</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">()</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThat’s all there is to it!&nbsp; The utility is very simple.&nbsp; It just gets me out of the business of writing (and maintaining) wrapper classes. I am now free to get back to real development.\n\n_*On a slightly related note, I will be focusing my learning efforts towards Ruby in the coming months.*_","source":"_posts/2009-09-18-introducing-dynamicwrapper.md","raw":"---\ntitle: Introducing DynamicWrapper\nid: 78\ncategories:\n  - Uncategorized\ndate: 2009-09-18 13:50:00\ntags:\n---\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F09%2F18%2Fintroducing-dynamicwrapper.aspx)](http://dotnetshoutout.com/Introducing-DynamicWrapper) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f09%2f18%2fintroducing-dynamicwrapper.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f09%2f18%2fintroducing-dynamicwrapper.aspx)\n\n[DynamicWrapper project on CodePlex](http://dynamicwrapper.codeplex.com/)\n\n**_Edit: DynamicWrapper does not work in SIlverlight as I first though.&nbsp; My unit tests passed, but in runtime I get an exception when I try to use the class.&nbsp; I will be looking at some alternatives._**\n\nOver the past few weeks, I have been working on a utility that I have wanted for years: something that allows me to apply an interface to an object that matches the contract but doesn’t actually implement the interface.&nbsp; In other words, I’ve wanted duck typing in C#.&nbsp; The code and project can be found on [CodePlex](http://www.codeplex.com/).&nbsp; It is set up so you simply copy one file into your solution and use the extension methods.\n\nWhy did I want this?&nbsp; Because I write a lot of unit tests and I develop in .Net with C#.&nbsp; Because I write way too many wrapper classes to make my code testable.&nbsp; For example, lets say that I have a class that I want to test and it acts upon a framework object:\n <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:68528c3e-ac9e-4d8f-994f-b84c31cb2d3d\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">sealed</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> FrameworkClass\n{\n    </span><span style=\"color: #0000FF;\">internal</span><span style=\"color: #000000;\"> FrameworkClass() {}\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> X {</span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">;}\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Y {</span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">;}\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Calculate() { </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> DoSomeStuff(); }\n}\n\n</span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> MyClass\n{\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DoSomethingWithFrameworkData(FrameworkClass value)\n    {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Do Something</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div><pre class=\"c-sharp\" name=\"code\"></pre>\n\nThe problem is that I can’t test **MyClass** because it is dependent upon **FrameworkClass** which I can never construct myself (it is sealed with an internal constructor and no interface).&nbsp; The solution for this is simple but tedious – create a wrapper class that implements an interface and proxy through the wrapper class to the real object.&nbsp; This approach works, but I can say this: **_I am sick of writing wrapper classes!_**\n\nThis is why I created this DynamicWrapper utility.&nbsp; It exposes two extension methods: realObject.As&lt;Interface&gt;() and wrapper.AsReal&lt;ConcreteClass&gt;().&nbsp; It uses Reflection to emit a dynamically generated wrapper class that implements the interface, and wraps your object for you.&nbsp; It sounds complicated, but it is extremely simple to use.\n\nHere is an example. Start by creating an interface that looks like the FrameworkClass:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:8bd836e1-3e63-4f29-8993-54b779d7971b\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">interface</span><span style=\"color: #000000;\"> ICalculatable\n{\n    </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> X {</span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">;}\n    </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Y {</span><span style=\"color: #0000FF;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000FF;\">set</span><span style=\"color: #000000;\">;}\n    </span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\"> Calculate();\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nModify your class to depend on ICalculatable:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1b0fecea-51fb-43ce-ae97-c5ff9b266994\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DoSomethingWIthFrameworkData(ICalculatable value) {}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNow, when you pass the framework class into the MyClass, you can wrap it with the interface:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:7863e811-abd6-4379-82ae-5dbcdd71ff96\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">myObject.DoSomethingWithFrameworkData(frameworkObject.As</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">ICalculatable</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">());</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nIf you need the framework object to pass back to the framework, it is really simple:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1f34493e-1fc7-472c-a06d-045b54e30ab4\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">wrapper.AsReal</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">FrameworkClass</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">()</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThat’s all there is to it!&nbsp; The utility is very simple.&nbsp; It just gets me out of the business of writing (and maintaining) wrapper classes. I am now free to get back to real development.\n\n_*On a slightly related note, I will be focusing my learning efforts towards Ruby in the coming months.*_","slug":"introducing-dynamicwrapper","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gl00346eulvm3lg8hf"},{"title":"Adventures in MVVM – Binding Commands to ANY Event","id":"77","date":"2009-08-27T17:48:00.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fgeekswithblogs.net%2FHouseOfBilz%2Farchive%2F2009%2F08%2F27%2Fadventures-in-mvvm-ndash-binding-commands-to-any-event.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Binding-Commands-to-ANY-Event) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f08%2f27%2fadventures-in-mvvm-ndash-binding-commands-to-any-event.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f08%2f27%2fadventures-in-mvvm-ndash-binding-commands-to-any-event.aspx)\n\nOne of the biggest points of friction for me when implementing the MVVM pattern happens when I need to bind commands to events.&#160; When using [Prism](http://compositewpf.codeplex.com/), I get the Button.Click command binding out of the box, but every other event needs to be wired up individually.&#160; Doing this requires a LOT of boilerplate code that is very easy to get wrong.&#160; In my [last post, I published some code to alleviate that pain](http://houseofbilz.com/archive/2009/08/21/adventures-in-mvvm-ndash-generalized-command-behavior-attachments.aspx).&#160; Still, it requires you to write a new behavior and attachment for every event that you want to bind an event to.\n\nFor a while now, I have toyed with the idea of just binding commands to events directly.&#160; I ran into a lot of bumps in the road.&#160; For instance, every event handler has a different event argument type.&#160; This requires all of the handlers to be dynamic.&#160; I also couldn’t create an inline command binding – I will surely want to bind more than one event per control – so I need to create a collection of bindings.&#160; Creating arrays of structures created its own troubles – binding only works with FrameworkElements within the visual tree.&#160; This required me to write my own crude binding within my generic behavior.\n\nWhat follows is very loosely based off of the [Chinch MVVM framework](http://www.codeproject.com/KB/WPF/Cinch.aspx).&#160; I tested this code in Silverlight and WPF and it works really well!\n\nAssume I have a ViewModel that looks like this:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1f9a3ca3-2468-4f21-a990-2c6f90ac7779\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> MainPageViewModel : INotifyPropertyChanged\n{\n    ...\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> ICommand MouseLeaveCommand { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> ICommand MouseEnterCommand { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> ICommand ClickCommand { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n    ...\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nI can then bind the commands to events on a control (Button, for instance):\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:ca0c3822-5216-46ce-ae56-ae34648c9b51\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Button </span><span style=\"color: #ff0000\">Content</span><span style=\"color: #0000ff\">=&quot;Click Me&quot;</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n    </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Behaviors:Events.Commands</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n        </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Behaviors:EventCommandCollection</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n            </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Behaviors:EventCommand </span><span style=\"color: #ff0000\">CommandName</span><span style=\"color: #0000ff\">=&quot;MouseEnterCommand&quot;</span><span style=\"color: #ff0000\"> EventName</span><span style=\"color: #0000ff\">=&quot;MouseEnter&quot;</span><span style=\"color: #ff0000\"> </span><span style=\"color: #0000ff\">/&gt;</span><span style=\"color: #000000\">\n            </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Behaviors:EventCommand </span><span style=\"color: #ff0000\">CommandName</span><span style=\"color: #0000ff\">=&quot;MouseLeaveCommand&quot;</span><span style=\"color: #ff0000\"> EventName</span><span style=\"color: #0000ff\">=&quot;MouseLeave&quot;</span><span style=\"color: #ff0000\"> </span><span style=\"color: #0000ff\">/&gt;</span><span style=\"color: #000000\">\n            </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Behaviors:EventCommand </span><span style=\"color: #ff0000\">CommandName</span><span style=\"color: #0000ff\">=&quot;ClickCommand&quot;</span><span style=\"color: #ff0000\"> EventName</span><span style=\"color: #0000ff\">=&quot;Click&quot;</span><span style=\"color: #ff0000\"> </span><span style=\"color: #0000ff\">/&gt;</span><span style=\"color: #000000\">\n        </span><span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Behaviors:EventCommandCollection</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n    </span><span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Behaviors:Events.Commands</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n</span><span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Button</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nI no longer need to write any extra code whenever I want to attach commands to my events!&#160; There are a few caveats to this code:\n\n1.  The XAML requires the EventCommandCollection to be declared in the XAML.&#160; I struggled to figure out how to eliminate this but gave up.&#160; Someone smarter than me might be able to tell me what I am doing wrong.2.  This code does not consider command properties.&#160; Every command assumes a null parameter.&#160; If you need parameters (like data context), then you’ll have to do something differently (either use the old-school mechanism or extend this code to handle some special event types).3.  You don’t bind directly to the command.&#160; Instead, you declare the name of the command (Notice CommandName is not bound).&#160; The behavior binds for you using a primitive mechanism.\n\nHere is the command behavior that does all the work:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:94c70010-05da-4e1c-83c5-6e54a7aae5dd\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> Events\n{\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty EventBehaviorsProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\">\n        DependencyProperty.RegisterAttached(\n        </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">EventBehaviors</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n        </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(EventBehaviorCollection),\n        </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(Control),\n        </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">);\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty InternalDataContextProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\">\n        DependencyProperty.RegisterAttached(\n        </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InternalDataContext</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n        </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(Object),\n        </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(Control),\n        </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyMetadata(</span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">, DataContextChanged));\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> DataContextChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\n    {\n        var target </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dependencyObject </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> Control;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (target </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        </span><span style=\"color: #0000ff\">foreach</span><span style=\"color: #000000\"> (var behavior </span><span style=\"color: #0000ff\">in</span><span style=\"color: #000000\"> GetOrCreateBehavior(target))\n            behavior.Bind();\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty CommandsProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\">\n        DependencyProperty.RegisterAttached(\n        </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Commands</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n        </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(EventCommandCollection),\n        </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(Events),\n        </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyMetadata(</span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">, CommandsChanged));\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> EventCommandCollection GetCommands(DependencyObject dependencyObject)\n    {\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> dependencyObject.GetValue(CommandsProperty) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> EventCommandCollection;\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> SetCommands(DependencyObject dependencyObject, EventCommandCollection eventCommands)\n    {\n        dependencyObject.SetValue(CommandsProperty, eventCommands);\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> CommandsChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\n    {\n        var target </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dependencyObject </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> Control;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (target </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        var behaviors </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> GetOrCreateBehavior(target);\n        </span><span style=\"color: #0000ff\">foreach</span><span style=\"color: #000000\"> (var eventCommand </span><span style=\"color: #0000ff\">in</span><span style=\"color: #000000\"> e.NewValue </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> EventCommandCollection)\n        {\n            var behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> EventBehavior(target);\n            behavior.Bind(eventCommand);\n            behaviors.Add(behavior);\n        }\n\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> EventBehaviorCollection GetOrCreateBehavior(FrameworkElement target)\n    {\n        var behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> target.GetValue(EventBehaviorsProperty) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> EventBehaviorCollection;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (behavior </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n        {\n            behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> EventBehaviorCollection();\n            target.SetValue(EventBehaviorsProperty, behavior);\n            target.SetBinding(InternalDataContextProperty, </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> Binding());\n        }\n\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> behavior;\n    }\n}\n\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> EventCommand\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> CommandName { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> EventName { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n}\n\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> EventCommandCollection : List</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">EventCommand</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n{\n}\n\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> EventBehavior : CommandBehaviorBase</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">Control</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n{\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> EventCommand _bindingInfo;\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> EventBehavior(Control control)\n        : </span><span style=\"color: #0000ff\">base</span><span style=\"color: #000000\">(control)\n    {\n\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Bind(EventCommand bindingInfo)\n    {\n        ValidateBindingInfo(bindingInfo);\n\n        _bindingInfo </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> bindingInfo;\n\n        Bind();\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> ValidateBindingInfo(EventCommand bindingInfo)\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\">(bindingInfo </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">bindingInfo</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">.IsNullOrEmpty(bindingInfo.CommandName)) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">bindingInfo.CommandName</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">.IsNullOrEmpty(bindingInfo.EventName)) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">bindingInfo.EventName</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Bind()\n    {\n        ValidateBindingInfo(_bindingInfo);\n        HookPropertyChanged();\n        HookEvent();\n        SetCommand();\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> HookPropertyChanged()\n    {\n        var dataContext </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> TargetObject.DataContext </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> INotifyPropertyChanged;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (dataContext </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        dataContext.PropertyChanged </span><span style=\"color: #000000\">-=</span><span style=\"color: #000000\"> DataContextPropertyChanged;\n        dataContext.PropertyChanged </span><span style=\"color: #000000\">+=</span><span style=\"color: #000000\"> DataContextPropertyChanged;\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> DataContextPropertyChanged(</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> sender, PropertyChangedEventArgs e)\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (e.PropertyName </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> _bindingInfo.CommandName)\n            SetCommand();\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> SetCommand()\n    {\n        var dataContext </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> TargetObject.DataContext;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (dataContext </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        var propertyInfo </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dataContext.GetType().GetProperty(_bindingInfo.CommandName);\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (propertyInfo </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">commandName</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n\n        Command </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> propertyInfo.GetValue(dataContext, </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> ICommand;\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> HookEvent()\n    {\n        var eventInfo </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> TargetObject.GetType().GetEvent(\n            _bindingInfo.EventName, BindingFlags.Public </span><span style=\"color: #000000\">|</span><span style=\"color: #000000\"> BindingFlags.Instance);\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (eventInfo </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">eventName</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n\n        eventInfo.RemoveEventHandler(TargetObject, GetEventMethod(eventInfo));\n        eventInfo.AddEventHandler(TargetObject, GetEventMethod(eventInfo));\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> Delegate _method;\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> Delegate GetEventMethod(EventInfo eventInfo)\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (eventInfo </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentNullException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">eventInfo</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (eventInfo.EventHandlerType </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">EventHandlerType is null</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (_method </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n        {\n            _method </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Delegate.CreateDelegate(\n                eventInfo.EventHandlerType, </span><span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">,\n                GetType().GetMethod(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">OnEventRaised</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n                BindingFlags.NonPublic </span><span style=\"color: #000000\">|</span><span style=\"color: #000000\"> BindingFlags.Instance));\n        }\n\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _method;\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> OnEventRaised(</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> sender, EventArgs e)\n    {\n        ExecuteCommand();\n    }\n}\n\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> EventBehaviorCollection : List</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">EventBehavior</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n{ }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>","source":"_posts/2009-08-27-adventures-in-mvvm-binding-commands-to-any-event.md","raw":"---\ntitle: Adventures in MVVM – Binding Commands to ANY Event\nid: 77\ncategories:\n  - Uncategorized\ndate: 2009-08-27 13:48:00\ntags:\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fgeekswithblogs.net%2FHouseOfBilz%2Farchive%2F2009%2F08%2F27%2Fadventures-in-mvvm-ndash-binding-commands-to-any-event.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Binding-Commands-to-ANY-Event) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f08%2f27%2fadventures-in-mvvm-ndash-binding-commands-to-any-event.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f08%2f27%2fadventures-in-mvvm-ndash-binding-commands-to-any-event.aspx)\n\nOne of the biggest points of friction for me when implementing the MVVM pattern happens when I need to bind commands to events.&#160; When using [Prism](http://compositewpf.codeplex.com/), I get the Button.Click command binding out of the box, but every other event needs to be wired up individually.&#160; Doing this requires a LOT of boilerplate code that is very easy to get wrong.&#160; In my [last post, I published some code to alleviate that pain](http://houseofbilz.com/archive/2009/08/21/adventures-in-mvvm-ndash-generalized-command-behavior-attachments.aspx).&#160; Still, it requires you to write a new behavior and attachment for every event that you want to bind an event to.\n\nFor a while now, I have toyed with the idea of just binding commands to events directly.&#160; I ran into a lot of bumps in the road.&#160; For instance, every event handler has a different event argument type.&#160; This requires all of the handlers to be dynamic.&#160; I also couldn’t create an inline command binding – I will surely want to bind more than one event per control – so I need to create a collection of bindings.&#160; Creating arrays of structures created its own troubles – binding only works with FrameworkElements within the visual tree.&#160; This required me to write my own crude binding within my generic behavior.\n\nWhat follows is very loosely based off of the [Chinch MVVM framework](http://www.codeproject.com/KB/WPF/Cinch.aspx).&#160; I tested this code in Silverlight and WPF and it works really well!\n\nAssume I have a ViewModel that looks like this:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1f9a3ca3-2468-4f21-a990-2c6f90ac7779\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> MainPageViewModel : INotifyPropertyChanged\n{\n    ...\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> ICommand MouseLeaveCommand { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> ICommand MouseEnterCommand { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> ICommand ClickCommand { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n    ...\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nI can then bind the commands to events on a control (Button, for instance):\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:ca0c3822-5216-46ce-ae56-ae34648c9b51\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Button </span><span style=\"color: #ff0000\">Content</span><span style=\"color: #0000ff\">=&quot;Click Me&quot;</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n    </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Behaviors:Events.Commands</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n        </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Behaviors:EventCommandCollection</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n            </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Behaviors:EventCommand </span><span style=\"color: #ff0000\">CommandName</span><span style=\"color: #0000ff\">=&quot;MouseEnterCommand&quot;</span><span style=\"color: #ff0000\"> EventName</span><span style=\"color: #0000ff\">=&quot;MouseEnter&quot;</span><span style=\"color: #ff0000\"> </span><span style=\"color: #0000ff\">/&gt;</span><span style=\"color: #000000\">\n            </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Behaviors:EventCommand </span><span style=\"color: #ff0000\">CommandName</span><span style=\"color: #0000ff\">=&quot;MouseLeaveCommand&quot;</span><span style=\"color: #ff0000\"> EventName</span><span style=\"color: #0000ff\">=&quot;MouseLeave&quot;</span><span style=\"color: #ff0000\"> </span><span style=\"color: #0000ff\">/&gt;</span><span style=\"color: #000000\">\n            </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Behaviors:EventCommand </span><span style=\"color: #ff0000\">CommandName</span><span style=\"color: #0000ff\">=&quot;ClickCommand&quot;</span><span style=\"color: #ff0000\"> EventName</span><span style=\"color: #0000ff\">=&quot;Click&quot;</span><span style=\"color: #ff0000\"> </span><span style=\"color: #0000ff\">/&gt;</span><span style=\"color: #000000\">\n        </span><span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Behaviors:EventCommandCollection</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n    </span><span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Behaviors:Events.Commands</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n</span><span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Button</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nI no longer need to write any extra code whenever I want to attach commands to my events!&#160; There are a few caveats to this code:\n\n1.  The XAML requires the EventCommandCollection to be declared in the XAML.&#160; I struggled to figure out how to eliminate this but gave up.&#160; Someone smarter than me might be able to tell me what I am doing wrong.2.  This code does not consider command properties.&#160; Every command assumes a null parameter.&#160; If you need parameters (like data context), then you’ll have to do something differently (either use the old-school mechanism or extend this code to handle some special event types).3.  You don’t bind directly to the command.&#160; Instead, you declare the name of the command (Notice CommandName is not bound).&#160; The behavior binds for you using a primitive mechanism.\n\nHere is the command behavior that does all the work:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:94c70010-05da-4e1c-83c5-6e54a7aae5dd\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> Events\n{\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty EventBehaviorsProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\">\n        DependencyProperty.RegisterAttached(\n        </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">EventBehaviors</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n        </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(EventBehaviorCollection),\n        </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(Control),\n        </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">);\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty InternalDataContextProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\">\n        DependencyProperty.RegisterAttached(\n        </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InternalDataContext</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n        </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(Object),\n        </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(Control),\n        </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyMetadata(</span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">, DataContextChanged));\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> DataContextChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\n    {\n        var target </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dependencyObject </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> Control;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (target </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        </span><span style=\"color: #0000ff\">foreach</span><span style=\"color: #000000\"> (var behavior </span><span style=\"color: #0000ff\">in</span><span style=\"color: #000000\"> GetOrCreateBehavior(target))\n            behavior.Bind();\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">readonly</span><span style=\"color: #000000\"> DependencyProperty CommandsProperty </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\">\n        DependencyProperty.RegisterAttached(\n        </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Commands</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n        </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(EventCommandCollection),\n        </span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(Events),\n        </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyMetadata(</span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">, CommandsChanged));\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> EventCommandCollection GetCommands(DependencyObject dependencyObject)\n    {\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> dependencyObject.GetValue(CommandsProperty) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> EventCommandCollection;\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> SetCommands(DependencyObject dependencyObject, EventCommandCollection eventCommands)\n    {\n        dependencyObject.SetValue(CommandsProperty, eventCommands);\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> CommandsChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\n    {\n        var target </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dependencyObject </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> Control;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (target </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        var behaviors </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> GetOrCreateBehavior(target);\n        </span><span style=\"color: #0000ff\">foreach</span><span style=\"color: #000000\"> (var eventCommand </span><span style=\"color: #0000ff\">in</span><span style=\"color: #000000\"> e.NewValue </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> EventCommandCollection)\n        {\n            var behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> EventBehavior(target);\n            behavior.Bind(eventCommand);\n            behaviors.Add(behavior);\n        }\n\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> EventBehaviorCollection GetOrCreateBehavior(FrameworkElement target)\n    {\n        var behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> target.GetValue(EventBehaviorsProperty) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> EventBehaviorCollection;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (behavior </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n        {\n            behavior </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> EventBehaviorCollection();\n            target.SetValue(EventBehaviorsProperty, behavior);\n            target.SetBinding(InternalDataContextProperty, </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> Binding());\n        }\n\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> behavior;\n    }\n}\n\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> EventCommand\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> CommandName { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> EventName { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n}\n\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> EventCommandCollection : List</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">EventCommand</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n{\n}\n\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> EventBehavior : CommandBehaviorBase</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">Control</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n{\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> EventCommand _bindingInfo;\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> EventBehavior(Control control)\n        : </span><span style=\"color: #0000ff\">base</span><span style=\"color: #000000\">(control)\n    {\n\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Bind(EventCommand bindingInfo)\n    {\n        ValidateBindingInfo(bindingInfo);\n\n        _bindingInfo </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> bindingInfo;\n\n        Bind();\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> ValidateBindingInfo(EventCommand bindingInfo)\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\">(bindingInfo </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">bindingInfo</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">.IsNullOrEmpty(bindingInfo.CommandName)) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">bindingInfo.CommandName</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">.IsNullOrEmpty(bindingInfo.EventName)) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">bindingInfo.EventName</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Bind()\n    {\n        ValidateBindingInfo(_bindingInfo);\n        HookPropertyChanged();\n        HookEvent();\n        SetCommand();\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> HookPropertyChanged()\n    {\n        var dataContext </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> TargetObject.DataContext </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> INotifyPropertyChanged;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (dataContext </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        dataContext.PropertyChanged </span><span style=\"color: #000000\">-=</span><span style=\"color: #000000\"> DataContextPropertyChanged;\n        dataContext.PropertyChanged </span><span style=\"color: #000000\">+=</span><span style=\"color: #000000\"> DataContextPropertyChanged;\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> DataContextPropertyChanged(</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> sender, PropertyChangedEventArgs e)\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (e.PropertyName </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> _bindingInfo.CommandName)\n            SetCommand();\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> SetCommand()\n    {\n        var dataContext </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> TargetObject.DataContext;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (dataContext </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        var propertyInfo </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> dataContext.GetType().GetProperty(_bindingInfo.CommandName);\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (propertyInfo </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">commandName</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n\n        Command </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> propertyInfo.GetValue(dataContext, </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">as</span><span style=\"color: #000000\"> ICommand;\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> HookEvent()\n    {\n        var eventInfo </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> TargetObject.GetType().GetEvent(\n            _bindingInfo.EventName, BindingFlags.Public </span><span style=\"color: #000000\">|</span><span style=\"color: #000000\"> BindingFlags.Instance);\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (eventInfo </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">eventName</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n\n        eventInfo.RemoveEventHandler(TargetObject, GetEventMethod(eventInfo));\n        eventInfo.AddEventHandler(TargetObject, GetEventMethod(eventInfo));\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> Delegate _method;\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> Delegate GetEventMethod(EventInfo eventInfo)\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (eventInfo </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentNullException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">eventInfo</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (eventInfo.EventHandlerType </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #0000ff\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ArgumentException(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">EventHandlerType is null</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (_method </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n        {\n            _method </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Delegate.CreateDelegate(\n                eventInfo.EventHandlerType, </span><span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">,\n                GetType().GetMethod(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">OnEventRaised</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">,\n                BindingFlags.NonPublic </span><span style=\"color: #000000\">|</span><span style=\"color: #000000\"> BindingFlags.Instance));\n        }\n\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _method;\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> OnEventRaised(</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> sender, EventArgs e)\n    {\n        ExecuteCommand();\n    }\n}\n\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> EventBehaviorCollection : List</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">EventBehavior</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n{ }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>","slug":"adventures-in-mvvm-binding-commands-to-any-event","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gn00366eulz52bh73n"},{"title":"Adventures in MVVM – A Rails-Inspired ViewModel","id":"79","date":"2009-10-20T17:52:00.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fgeekswithblogs.net%2FHouseOfBilz%2Farchive%2F2009%2F10%2F20%2Fadventures-in-mvvm-ndash-a-rails-inspired-viewmodel.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-A-Rails-Inspired-ViewModel) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f10%2f20%2fadventures-in-mvvm-ndash-a-rails-inspired-viewmodel.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f10%2f20%2fadventures-in-mvvm-ndash-a-rails-inspired-viewmodel.aspx)\n\nI have been taking a few weeks off from my personal studies/experiments in the .Net space to learn more about Ruby and Ruby on Rails (RoR).&#160; I have two main goals for this study:\n\n1.  Get to know another platform as an option for future development2.  Examine how I can incorporate different concepts into my existing framework  \n\n_What follows is intended to document my experimentation with the second bullet:&#160; How might we design a ViewModel if we were in Rails?&#160; My thoughts on this are still forming, and I am still a novice in the RoR arena, so cut me some slack :)._\n\nI am pretty vocal about my thoughts on the MVVM _pattern_.&#160; I really like the pattern a lot and I think it solves a lot of problems that I encounter on a daily basis.&#160; Unfortunately, the implementation of the pattern – ViewModels specifically – often get overly complicated.&#160; This is why there are about a dozen major players in this arena.&#160; The plumbing necessary to create a good ViewModel is tedious and error prone.&#160; A good set of abstractions and tools make the job much easier.\n\nThe RoR approach to application development uses a lot of conventions to allow the developer to be as expressive as possible without introducing too much plumbing.&#160; The framework facilitates DRY (Don’t Repeat Yourself) so your controllers declare what they do and the magic under the hood plumbs it all together for you.&#160; How can we translate these ideas to a better implementation of the MVVM pattern?&#160; In this article, I will focus on the ViewModel portion of the MVVM pattern.\n\n### \n\n### A classic ViewModel implementation\n\nThis view is simple.&#160; There is a text box bound to the **Text** property in the ViewModel and a button bound to the **MakeLowercase** command (property) in the ViewModel.&#160; The button is enabled/disabled based on the length of the **Text** property and clicking on the button will cause the text to go to lowercase.\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:80acc5b9-9793-4bbd-9ced-93a4738c0d06\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TextBox </span><span style=\"color: #ff0000\">Text</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #ff0000\"> Grid.Column</span><span style=\"color: #0000ff\">=&quot;0&quot;</span><span style=\"color: #ff0000\"> </span><span style=\"color: #0000ff\">/&gt;</span><span style=\"color: #000000\">\n</span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Button </span><span style=\"color: #ff0000\">Content</span><span style=\"color: #0000ff\">=&quot;Make Lower&quot;</span><span style=\"color: #ff0000\"> Commands:Click.Command</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding MakeLowercase}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #ff0000\"> Grid.Column</span><span style=\"color: #0000ff\">=&quot;1&quot;</span><span style=\"color: #ff0000\"> </span><span style=\"color: #0000ff\">/&gt;</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nNext is the ViewModel in its pure (no abstractions) form:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:2390ca1b-8c21-4df9-ada0-20d9a5627c2d\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> MainPageViewModel : INotifyPropertyChanged\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> MainPageViewModel()\n    {\n        MakeLowercase </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> DelegateCommand</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">pobject</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">(ExecuteMakeLowercase, CanExecuteMakeLowercase);\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> ExecuteMakeLowercase(</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> obj)\n    {\n        Text </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Text.ToLower();\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">bool</span><span style=\"color: #000000\"> CanExecuteMakeLowercase(</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> arg)\n    {\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">!</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">.IsNullOrEmpty(Text);\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> _text;\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Text\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _text; }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n        {\n            _text </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n            FirePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Text</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n            MakeLowercase.RaiseCanExecuteChanged();\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> DelegateCommand</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> _makeLowercase;\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> DelegateCommand</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> MakeLowercase\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _makeLowercase; }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n        {\n            _makeLowercase </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n            FirePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">MakeLowercase</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> FirePropertyChanged(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> propertyName)\n    {\n        var handlers </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> PropertyChanged;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (handlers </span><span style=\"color: #000000\">!=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n            handlers(</span><span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyChangedEventArgs(propertyName));\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">event</span><span style=\"color: #000000\"> PropertyChangedEventHandler PropertyChanged;\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n### Problems with the traditional ViewModel implementation\n\n1.  Lots of plumbing (Command in the constructor, PropertyChanged in property setters, ExecuteChanged evaluation in the **Text** setter, etc)2.  Verbose properties (We can’t use auto-properties because of the need to notify of changes3.  Unrelated events (**Text** property needs to know that **CanExecuteMakeLowercase** needs to be re-evaluated)4.  INotifyPropertyChanged is error-prone due to string events5.  Lots of redundancies makes maintenance messy\n\n### What a Rails-Inspired ViewModel might look like\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:140cd01f-44d3-40b5-8072-90229fa0c901\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> MainPageViewModel : ActiveViewModel</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">MainPageViewModel.Properties</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">enum</span><span style=\"color: #000000\"> Properties { Text }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Execute_MakeLowercase()\n    {\n        Set(Properties.Text, Get</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">(Properties.Text).ToLower());\n    }\n\n    [DependentUpon(Properties.Text)]\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">bool</span><span style=\"color: #000000\"> CanExecute_MakeLowercase()\n    {\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">!</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">.IsNullOrEmpty(Get</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">(Properties.Text));\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nMy goal was to reduce the amount of plumbing and redundancies in this code to communicate only what it needs to\n\n1.  There is one property named **Text**2.  The **MakeLowercase** command will act on the **Text** property and make it lowercase3.  **CanExecuteMakeLowercase** will return true if **Text** has meaningful data4.  **CanExecuteMakeLowercase** needs to be re-evaluated with **Text** changes\n\nThere is a lot of magic in **ActiveViewModel.&#160; **I am using convention to define the properties as a list of enums (**Properties**).&#160; The ActiveViewModel will generate these properties dynamically.&#160; I am also using convention to create commands.&#160; Any method that is prefixed with **Execute_** will be made into a command property.&#160; Any method prefixed with **CanExecute_** will be evaluated in the same command.&#160; Further, the **CanExecute_** method can declare the properties that will cause the commands to re-evaluate, putting the dependency where it belongs – with the method that is dependant upon it!&#160; Testability is really easy: Call the actions and validate the properties (via public Get()).&#160; I didn’t implement it, but actions based on property setters could very easily use the **DependentUpon** attribute to avoid **INotifyPropertyChanged** chaining that can get quite ugly.\n\n### Summary\n\nI think this approach has a lot of potential.&#160; I am posting it in order to move the conversation forward.&#160; When the MVVM dust settles, and we have some best practices flushed out, what do we want our ViewModels to look like?&#160; Even though I consider this class experimental and exploratory (not meant to be used in production), I feel compelled to call out some weaknesses that will (or may) need to be addressed for a more production-ready base class:\n\n1.  The **ActiveViewModel** class will not work in Silverlight.&#160; It relies heavily on custom type descriptors which are not available in Silverlight.&#160; Hopefully, in Silverlight 4.0, we will have some better support for dynamic property generation.&#160; This may be in the form of C# 4.0 (with the DynamicObject.Try[SG]etMember overrides, for instance), property descriptors, or something else (better IronRuby support, perhaps?)2.  There is not a lot of type safety with the properties.&#160; They are stored internally as plain objects.&#160; The **Get** method lets you get at a type-casted value, but you need to know it when you ask for it.&#160; We might change the property declaration from an enum to a list of name/type pairs and enforce some better type safety in the base class?3.  Because there are not properties, we loose “equals semantics”.&#160; Get/Set is harder to read/follow than simply assigning and reading properties\n\nFinally, in case you are curious, you can see my implementation (at the time of this post) of the **ActiveViewModel** from my [Launchpad project](http://bazaar.launchpad.net/~briangenisio/mypetproject/Main/annotate/7/ActiveViewModel/ActiveViewModel.cs).","source":"_posts/2009-10-20-adventures-in-mvvm-a-rails-inspired-viewmodel.md","raw":"---\ntitle: Adventures in MVVM – A Rails-Inspired ViewModel\nid: 79\ncategories:\n  - Uncategorized\ndate: 2009-10-20 13:52:00\ntags:\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fgeekswithblogs.net%2FHouseOfBilz%2Farchive%2F2009%2F10%2F20%2Fadventures-in-mvvm-ndash-a-rails-inspired-viewmodel.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-A-Rails-Inspired-ViewModel) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f10%2f20%2fadventures-in-mvvm-ndash-a-rails-inspired-viewmodel.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fgeekswithblogs.net%2fHouseOfBilz%2farchive%2f2009%2f10%2f20%2fadventures-in-mvvm-ndash-a-rails-inspired-viewmodel.aspx)\n\nI have been taking a few weeks off from my personal studies/experiments in the .Net space to learn more about Ruby and Ruby on Rails (RoR).&#160; I have two main goals for this study:\n\n1.  Get to know another platform as an option for future development2.  Examine how I can incorporate different concepts into my existing framework  \n\n_What follows is intended to document my experimentation with the second bullet:&#160; How might we design a ViewModel if we were in Rails?&#160; My thoughts on this are still forming, and I am still a novice in the RoR arena, so cut me some slack :)._\n\nI am pretty vocal about my thoughts on the MVVM _pattern_.&#160; I really like the pattern a lot and I think it solves a lot of problems that I encounter on a daily basis.&#160; Unfortunately, the implementation of the pattern – ViewModels specifically – often get overly complicated.&#160; This is why there are about a dozen major players in this arena.&#160; The plumbing necessary to create a good ViewModel is tedious and error prone.&#160; A good set of abstractions and tools make the job much easier.\n\nThe RoR approach to application development uses a lot of conventions to allow the developer to be as expressive as possible without introducing too much plumbing.&#160; The framework facilitates DRY (Don’t Repeat Yourself) so your controllers declare what they do and the magic under the hood plumbs it all together for you.&#160; How can we translate these ideas to a better implementation of the MVVM pattern?&#160; In this article, I will focus on the ViewModel portion of the MVVM pattern.\n\n### \n\n### A classic ViewModel implementation\n\nThis view is simple.&#160; There is a text box bound to the **Text** property in the ViewModel and a button bound to the **MakeLowercase** command (property) in the ViewModel.&#160; The button is enabled/disabled based on the length of the **Text** property and clicking on the button will cause the text to go to lowercase.\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:80acc5b9-9793-4bbd-9ced-93a4738c0d06\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TextBox </span><span style=\"color: #ff0000\">Text</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #ff0000\"> Grid.Column</span><span style=\"color: #0000ff\">=&quot;0&quot;</span><span style=\"color: #ff0000\"> </span><span style=\"color: #0000ff\">/&gt;</span><span style=\"color: #000000\">\n</span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Button </span><span style=\"color: #ff0000\">Content</span><span style=\"color: #0000ff\">=&quot;Make Lower&quot;</span><span style=\"color: #ff0000\"> Commands:Click.Command</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding MakeLowercase}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #ff0000\"> Grid.Column</span><span style=\"color: #0000ff\">=&quot;1&quot;</span><span style=\"color: #ff0000\"> </span><span style=\"color: #0000ff\">/&gt;</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nNext is the ViewModel in its pure (no abstractions) form:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:2390ca1b-8c21-4df9-ada0-20d9a5627c2d\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> MainPageViewModel : INotifyPropertyChanged\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> MainPageViewModel()\n    {\n        MakeLowercase </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> DelegateCommand</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">pobject</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">(ExecuteMakeLowercase, CanExecuteMakeLowercase);\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> ExecuteMakeLowercase(</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> obj)\n    {\n        Text </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Text.ToLower();\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">bool</span><span style=\"color: #000000\"> CanExecuteMakeLowercase(</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> arg)\n    {\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">!</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">.IsNullOrEmpty(Text);\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> _text;\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Text\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _text; }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n        {\n            _text </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n            FirePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Text</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n            MakeLowercase.RaiseCanExecuteChanged();\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> DelegateCommand</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> _makeLowercase;\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> DelegateCommand</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> MakeLowercase\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _makeLowercase; }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n        {\n            _makeLowercase </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n            FirePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">MakeLowercase</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> FirePropertyChanged(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> propertyName)\n    {\n        var handlers </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> PropertyChanged;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (handlers </span><span style=\"color: #000000\">!=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n            handlers(</span><span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyChangedEventArgs(propertyName));\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">event</span><span style=\"color: #000000\"> PropertyChangedEventHandler PropertyChanged;\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n### Problems with the traditional ViewModel implementation\n\n1.  Lots of plumbing (Command in the constructor, PropertyChanged in property setters, ExecuteChanged evaluation in the **Text** setter, etc)2.  Verbose properties (We can’t use auto-properties because of the need to notify of changes3.  Unrelated events (**Text** property needs to know that **CanExecuteMakeLowercase** needs to be re-evaluated)4.  INotifyPropertyChanged is error-prone due to string events5.  Lots of redundancies makes maintenance messy\n\n### What a Rails-Inspired ViewModel might look like\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:140cd01f-44d3-40b5-8072-90229fa0c901\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> MainPageViewModel : ActiveViewModel</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">MainPageViewModel.Properties</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">enum</span><span style=\"color: #000000\"> Properties { Text }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Execute_MakeLowercase()\n    {\n        Set(Properties.Text, Get</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">(Properties.Text).ToLower());\n    }\n\n    [DependentUpon(Properties.Text)]\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">bool</span><span style=\"color: #000000\"> CanExecute_MakeLowercase()\n    {\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">!</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">.IsNullOrEmpty(Get</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">(Properties.Text));\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nMy goal was to reduce the amount of plumbing and redundancies in this code to communicate only what it needs to\n\n1.  There is one property named **Text**2.  The **MakeLowercase** command will act on the **Text** property and make it lowercase3.  **CanExecuteMakeLowercase** will return true if **Text** has meaningful data4.  **CanExecuteMakeLowercase** needs to be re-evaluated with **Text** changes\n\nThere is a lot of magic in **ActiveViewModel.&#160; **I am using convention to define the properties as a list of enums (**Properties**).&#160; The ActiveViewModel will generate these properties dynamically.&#160; I am also using convention to create commands.&#160; Any method that is prefixed with **Execute_** will be made into a command property.&#160; Any method prefixed with **CanExecute_** will be evaluated in the same command.&#160; Further, the **CanExecute_** method can declare the properties that will cause the commands to re-evaluate, putting the dependency where it belongs – with the method that is dependant upon it!&#160; Testability is really easy: Call the actions and validate the properties (via public Get()).&#160; I didn’t implement it, but actions based on property setters could very easily use the **DependentUpon** attribute to avoid **INotifyPropertyChanged** chaining that can get quite ugly.\n\n### Summary\n\nI think this approach has a lot of potential.&#160; I am posting it in order to move the conversation forward.&#160; When the MVVM dust settles, and we have some best practices flushed out, what do we want our ViewModels to look like?&#160; Even though I consider this class experimental and exploratory (not meant to be used in production), I feel compelled to call out some weaknesses that will (or may) need to be addressed for a more production-ready base class:\n\n1.  The **ActiveViewModel** class will not work in Silverlight.&#160; It relies heavily on custom type descriptors which are not available in Silverlight.&#160; Hopefully, in Silverlight 4.0, we will have some better support for dynamic property generation.&#160; This may be in the form of C# 4.0 (with the DynamicObject.Try[SG]etMember overrides, for instance), property descriptors, or something else (better IronRuby support, perhaps?)2.  There is not a lot of type safety with the properties.&#160; They are stored internally as plain objects.&#160; The **Get** method lets you get at a type-casted value, but you need to know it when you ask for it.&#160; We might change the property declaration from an enum to a list of name/type pairs and enforce some better type safety in the base class?3.  Because there are not properties, we loose “equals semantics”.&#160; Get/Set is harder to read/follow than simply assigning and reading properties\n\nFinally, in case you are curious, you can see my implementation (at the time of this post) of the **ActiveViewModel** from my [Launchpad project](http://bazaar.launchpad.net/~briangenisio/mypetproject/Main/annotate/7/ActiveViewModel/ActiveViewModel.cs).","slug":"adventures-in-mvvm-a-rails-inspired-viewmodel","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gq00386eul5nvlbdie"},{"title":"Adventures in MVVM -- Dependant Properties with INotifyPropertyChanged","id":"80","date":"2009-11-14T18:54:00.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F11%2F14%2Fadventures-in-mvvm----dependant-properties-with-inotifypropertychanged.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Dependant-Properties-with-INotifyPropertyChanged) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f11%2f14%2fadventures-in-mvvm----dependant-properties-with-inotifypropertychanged.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f11%2f14%2fadventures-in-mvvm----dependant-properties-with-inotifypropertychanged.aspx)\n\nI spend a lot of time writing ViewModels, which almost always implements **INotifyPropertyChanged**.&#160; For those who are not familiar with this interface, it includes a single event: PropertyChanged.&#160; That event contains a payload of the name of the property that changed.&#160; It exists as a standard way to notify observers that a property needs to be re-evaluated.\n\nAlthough I use it all the time, I have always believed that **INotifyPropertyChanged** has some serious shortcomings.&#160; One of those shortcomings deals with dependant properties. \n\nLets say, for for the sake of example, that the ViewModel has two integer properties that the user can enter (**InputA** and **InputB**).&#160; There also exists a property named **Calculation** that is dependent upon **InputA** and **InputB**.&#160; Finally, there is a display property named **CalculationText** which is dependent upon **Calculation**.&#160; The code for these properties would look like this:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:d20f4eef-cddf-457c-be1b-5cd0419e6024\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> _inputA;\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> InputA\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _inputA; }\n    </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (_inputA </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> value) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        _inputA </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InputA</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Calculation</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">CalculationText</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n}\n\n</span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> _inputB;\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> InputB\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _inputB; }\n    </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (_inputB </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> value) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        _inputB </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InputB</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Calculation</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">CalculationText</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n}\n\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> Calculation\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> InputA </span><span style=\"color: #000000\">*</span><span style=\"color: #000000\"> InputB; }\n}\n\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> CalculationText\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">A * B = </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #000000\"> Calculation; }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nThere is a problem with this code.&#160; The input properties need to know that they are inputs for **Calculation** and **CalculationText** by firing the event for the calculations.&#160; As far as I am concerned, this is the wrong place for this information to exist.&#160; Inputs should not know that they are inputs.&#160; I can say first hand that this quickly breaks down as the ViewModel gets bigger and you start changing behavior.\n\nThe responsibility should be reversed.&#160; Instead of having the input properties knowing about the dependants, the dependent properties should be responsible for knowing the inputs that they rely upon.&#160; This can be done with some simple declarations:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:f2850de4-e87b-4d5b-88cb-a83a57fbb89e\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> _inputA;\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> InputA\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _inputA; }\n    </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (_inputA </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> value) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        _inputA </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InputA</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n}\n\n</span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> _inputB;\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> InputB\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _inputB; }\n    </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (_inputB </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> value) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        _inputB </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InputB</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n}\n\n[DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InputA</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n[DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InputB</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> Calculation\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> InputA </span><span style=\"color: #000000\">*</span><span style=\"color: #000000\"> InputB; }\n}\n\n[DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Calculation</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> CalculationText\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">A * B = </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #000000\"> Calculation; }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nNotice how **Calculation** declares that it is dependent upon **InputA** and **InputB**.&#160; **CalculationText** also declares a dependency upon **Calculation**.&#160; The inputs are free of knowing anything about the dependants.\n\nThe implementation of this behavior should be handled in the base class and there are several ways to accomplish it.&#160; There are just a few things you want to think about:\n\n1.  Make sure that when inputs fire a change notification, the dependants are also fired2.  Make sure to handle dependency chaining.&#160; **InputA** will cause **Calculation** to fire and **Calculation** will cause **CalculationText** to fire3.  If the derived class declares dependencies such that it creates a circular reference, don’t endlessly loop or overflow your stack\n\nHere is a very simple implementation of this behavior.&#160; It manages the reflection at the time of change.&#160; A better (more efficient) implementation would probably map the dependencies at construction time into a private dictionary, but this is just a quick example of how you might achieve this behavior:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:525d9dea-2b00-453f-bcef-2a764c529c32\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">abstract</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> ViewModelBase : INotifyPropertyChanged\n{\n    [AttributeUsage(AttributeTargets.Property, AllowMultiple </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">)]\n    </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> DependsUponAttribute : Attribute\n    {\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> DependancyName { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> DependsUponAttribute(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> propertyName)\n        {\n            DependancyName </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> propertyName;\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">virtual</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> RaisePropertyChanged(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> propertyName)\n    {\n        var handlers </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> PropertyChanged;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (handlers </span><span style=\"color: #000000\">!=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n        {\n            </span><span style=\"color: #0000ff\">foreach</span><span style=\"color: #000000\">(var property </span><span style=\"color: #0000ff\">in</span><span style=\"color: #000000\"> AllNotifiedProperties(propertyName))\n                handlers(</span><span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyChangedEventArgs(property));\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> IEnumerable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> DependantProperties(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> inputName)\n    {\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> from property </span><span style=\"color: #0000ff\">in</span><span style=\"color: #000000\"> GetType().GetProperties()\n               </span><span style=\"color: #0000ff\">where</span><span style=\"color: #000000\"> property.GetCustomAttributes(</span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(DependsUponAttribute), </span><span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">).Cast</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">DependsUponAttribute</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">()\n                     .Any(attribute </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> attribute.DependancyName </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> inputName)\n               select property.Name;\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> IEnumerable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> NotifiedProperties(IEnumerable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> inputs)\n    {\n        var dependancies </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> from input </span><span style=\"color: #0000ff\">in</span><span style=\"color: #000000\"> inputs\n                           from dependancy </span><span style=\"color: #0000ff\">in</span><span style=\"color: #000000\"> DependantProperties(input)\n                           select dependancy;\n\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> inputs.Union(dependancies).Distinct();\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> IEnumerable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> AllNotifiedProperties(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> inputName)\n    {\n        IEnumerable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> results </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\">[]{inputName};\n\n        </span><span style=\"color: #0000ff\">while</span><span style=\"color: #000000\"> (NotifiedProperties(results).Count() </span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> results.Count())\n            results </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> NotifiedProperties(results);\n\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> results;\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">event</span><span style=\"color: #000000\"> PropertyChangedEventHandler PropertyChanged;\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>","source":"_posts/2009-11-14-adventures-in-mvvm-dependant-properties-with-inotifypropertychanged.md","raw":"---\ntitle: Adventures in MVVM -- Dependant Properties with INotifyPropertyChanged\nid: 80\ncategories:\n  - Uncategorized\ndate: 2009-11-14 13:54:00\ntags:\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2009%2F11%2F14%2Fadventures-in-mvvm----dependant-properties-with-inotifypropertychanged.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-Dependant-Properties-with-INotifyPropertyChanged) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f11%2f14%2fadventures-in-mvvm----dependant-properties-with-inotifypropertychanged.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2009%2f11%2f14%2fadventures-in-mvvm----dependant-properties-with-inotifypropertychanged.aspx)\n\nI spend a lot of time writing ViewModels, which almost always implements **INotifyPropertyChanged**.&#160; For those who are not familiar with this interface, it includes a single event: PropertyChanged.&#160; That event contains a payload of the name of the property that changed.&#160; It exists as a standard way to notify observers that a property needs to be re-evaluated.\n\nAlthough I use it all the time, I have always believed that **INotifyPropertyChanged** has some serious shortcomings.&#160; One of those shortcomings deals with dependant properties. \n\nLets say, for for the sake of example, that the ViewModel has two integer properties that the user can enter (**InputA** and **InputB**).&#160; There also exists a property named **Calculation** that is dependent upon **InputA** and **InputB**.&#160; Finally, there is a display property named **CalculationText** which is dependent upon **Calculation**.&#160; The code for these properties would look like this:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:d20f4eef-cddf-457c-be1b-5cd0419e6024\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> _inputA;\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> InputA\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _inputA; }\n    </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (_inputA </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> value) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        _inputA </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InputA</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Calculation</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">CalculationText</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n}\n\n</span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> _inputB;\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> InputB\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _inputB; }\n    </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (_inputB </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> value) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        _inputB </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InputB</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Calculation</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">CalculationText</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n}\n\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> Calculation\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> InputA </span><span style=\"color: #000000\">*</span><span style=\"color: #000000\"> InputB; }\n}\n\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> CalculationText\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">A * B = </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #000000\"> Calculation; }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nThere is a problem with this code.&#160; The input properties need to know that they are inputs for **Calculation** and **CalculationText** by firing the event for the calculations.&#160; As far as I am concerned, this is the wrong place for this information to exist.&#160; Inputs should not know that they are inputs.&#160; I can say first hand that this quickly breaks down as the ViewModel gets bigger and you start changing behavior.\n\nThe responsibility should be reversed.&#160; Instead of having the input properties knowing about the dependants, the dependent properties should be responsible for knowing the inputs that they rely upon.&#160; This can be done with some simple declarations:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:f2850de4-e87b-4d5b-88cb-a83a57fbb89e\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> _inputA;\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> InputA\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _inputA; }\n    </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (_inputA </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> value) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        _inputA </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InputA</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n}\n\n</span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> _inputB;\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> InputB\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> _inputB; }\n    </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (_inputB </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> value) </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n\n        _inputB </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n        RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InputB</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n}\n\n[DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InputA</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n[DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">InputB</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> Calculation\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> InputA </span><span style=\"color: #000000\">*</span><span style=\"color: #000000\"> InputB; }\n}\n\n[DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Calculation</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n</span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> CalculationText\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">A * B = </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #000000\"> Calculation; }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nNotice how **Calculation** declares that it is dependent upon **InputA** and **InputB**.&#160; **CalculationText** also declares a dependency upon **Calculation**.&#160; The inputs are free of knowing anything about the dependants.\n\nThe implementation of this behavior should be handled in the base class and there are several ways to accomplish it.&#160; There are just a few things you want to think about:\n\n1.  Make sure that when inputs fire a change notification, the dependants are also fired2.  Make sure to handle dependency chaining.&#160; **InputA** will cause **Calculation** to fire and **Calculation** will cause **CalculationText** to fire3.  If the derived class declares dependencies such that it creates a circular reference, don’t endlessly loop or overflow your stack\n\nHere is a very simple implementation of this behavior.&#160; It manages the reflection at the time of change.&#160; A better (more efficient) implementation would probably map the dependencies at construction time into a private dictionary, but this is just a quick example of how you might achieve this behavior:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:525d9dea-2b00-453f-bcef-2a764c529c32\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">abstract</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> ViewModelBase : INotifyPropertyChanged\n{\n    [AttributeUsage(AttributeTargets.Property, AllowMultiple </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">)]\n    </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> DependsUponAttribute : Attribute\n    {\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> DependancyName { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> DependsUponAttribute(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> propertyName)\n        {\n            DependancyName </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> propertyName;\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">virtual</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> RaisePropertyChanged(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> propertyName)\n    {\n        var handlers </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> PropertyChanged;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (handlers </span><span style=\"color: #000000\">!=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n        {\n            </span><span style=\"color: #0000ff\">foreach</span><span style=\"color: #000000\">(var property </span><span style=\"color: #0000ff\">in</span><span style=\"color: #000000\"> AllNotifiedProperties(propertyName))\n                handlers(</span><span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyChangedEventArgs(property));\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> IEnumerable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> DependantProperties(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> inputName)\n    {\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> from property </span><span style=\"color: #0000ff\">in</span><span style=\"color: #000000\"> GetType().GetProperties()\n               </span><span style=\"color: #0000ff\">where</span><span style=\"color: #000000\"> property.GetCustomAttributes(</span><span style=\"color: #0000ff\">typeof</span><span style=\"color: #000000\">(DependsUponAttribute), </span><span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">).Cast</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #000000\">DependsUponAttribute</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">()\n                     .Any(attribute </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> attribute.DependancyName </span><span style=\"color: #000000\">==</span><span style=\"color: #000000\"> inputName)\n               select property.Name;\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> IEnumerable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> NotifiedProperties(IEnumerable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> inputs)\n    {\n        var dependancies </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> from input </span><span style=\"color: #0000ff\">in</span><span style=\"color: #000000\"> inputs\n                           from dependancy </span><span style=\"color: #0000ff\">in</span><span style=\"color: #000000\"> DependantProperties(input)\n                           select dependancy;\n\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> inputs.Union(dependancies).Distinct();\n    }\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> IEnumerable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> AllNotifiedProperties(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> inputName)\n    {\n        IEnumerable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> results </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\">[]{inputName};\n\n        </span><span style=\"color: #0000ff\">while</span><span style=\"color: #000000\"> (NotifiedProperties(results).Count() </span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\"> results.Count())\n            results </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> NotifiedProperties(results);\n\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> results;\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">event</span><span style=\"color: #000000\"> PropertyChangedEventHandler PropertyChanged;\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>","slug":"adventures-in-mvvm-dependant-properties-with-inotifypropertychanged","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gr003a6eulal9o1fcj"},{"title":"Moving On","id":"81","date":"2009-12-20T18:55:00.000Z","_content":"\nFour years ago, I moved to Ann Arbor to work with a talented team on what I consider to be an important, high-quality medical application.&#160; In that time, I had many great opportunities and I learned a ton from my colleagues.&#160; My team is filled with some really smart people!&#160; Because of this, I have mixed feelings to announce that I am moving on.&#160; Starting in February, I will be working for [Bill Wagner](http://srtsolutions.com/blogs/billwagner/) and [Dianne Marsh](http://srtsolutions.com/blogs/diannemarsh/) and joining the team at [SRT Solutions](http://srtsolutions.com/).&#160; It will be quite a change for me -- moving from one of the largest companies in the world to a small, local consulting company.&#160; This job will, however, give me an opportunity to spend more time focusing on the technologies and concepts that most interest me.&#160; I am excited for this change, and I am excited to be working directly with the many amazing members of the SRT team.","source":"_posts/2009-12-20-moving-on.md","raw":"---\ntitle: Moving On\ntags:\n  - Career\nid: 81\ncategories:\n  - Uncategorized\ndate: 2009-12-20 13:55:00\n---\n\nFour years ago, I moved to Ann Arbor to work with a talented team on what I consider to be an important, high-quality medical application.&#160; In that time, I had many great opportunities and I learned a ton from my colleagues.&#160; My team is filled with some really smart people!&#160; Because of this, I have mixed feelings to announce that I am moving on.&#160; Starting in February, I will be working for [Bill Wagner](http://srtsolutions.com/blogs/billwagner/) and [Dianne Marsh](http://srtsolutions.com/blogs/diannemarsh/) and joining the team at [SRT Solutions](http://srtsolutions.com/).&#160; It will be quite a change for me -- moving from one of the largest companies in the world to a small, local consulting company.&#160; This job will, however, give me an opportunity to spend more time focusing on the technologies and concepts that most interest me.&#160; I am excited for this change, and I am excited to be working directly with the many amazing members of the SRT team.","slug":"moving-on","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gs003c6eulzwzw838p"},{"title":"Adventures in MVVM – CodeMash Schedule Application","id":"86","date":"2010-01-11T18:56:00.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/)\n\nSo, I am getting myself ready to head out to Sandusy, Ohio for three days of nerdy fun at [CodeMash](http://Codemash.org).&#160; While I am there, I will be giving my “Introduction to the MVVM Pattern”.&#160; In preparation for this talk, I decided to create a new demo application.&#160; This application is a calendar and session list for the conference.&#160; It is not terribly fancy (I wish I had more time (or talent) to skin it better), but it highlights many of the concepts that I will be speaking about in my presentation.\n\nThe app is a Silverlight 3 project utilizing the Telerik Scheduler control.&#160; This particular control is rather rich, and I was excited to get my hands dirty with it. The ViewModel for the scheduler was primarily responsible for translating session data into something the Telerik control could consume.&#160;&#160; The app also includes a session list with a filter panel which is derived from the session data.&#160; This is where the majority of the MVVM code can be found.&#160; The ViewModels for the session list are responsible for dynamically creating and merging filter predicates based on the values in the session list.\n\n[![CodeMashSessions.Calendar](http://houseofbilz.net/wp-content/uploads/2010/05/CodeMashSessions.Calendar_thumb.png \"CodeMashSessions.Calendar\")](http://houseofbilz.net/wp-content/uploads/2010/05/CodeMashSessions.Calendar.png) [![CodeMashSessions.Sessions](http://houseofbilz.net/wp-content/uploads/2010/05/CodeMashSessions.Sessions_thumb.png \"CodeMashSessions.Sessions\")](http://houseofbilz.net/wp-content/uploads/2010/05/CodeMashSessions.Sessions.png)\n\nYou can play with the application at [http://HouseOfBilz.net/CodeMash](http://HouseOfBilz.net/CodeMash)\n\nCodeMashSessions Source Code: [http://www.houseofbilz.net/codemash/CodeMashSessions.Source.zip](http://www.houseofbilz.net/codemash/CodeMashSessions.Source.zip \"http://www.houseofbilz.net/codemash/CodeMashSessions.Source.zip\")\n\nTwitter &quot;Ball of Mud&quot; vs MVVM Source Code: [http://houseofbilz.net/codemash/Twitter-BallOfMud-vs-MVVM.zip](http://houseofbilz.net/codemash/Twitter-BallOfMud-vs-MVVM.zip)\n\nSlides from &quot;An Introduction to the MVVM Pattern&quot;: [http://houseofbilz.net/codemash/MVVM.ppt](http://houseofbilz.net/codemash/MVVM.ppt)","source":"_posts/2010-01-11-adventures-in-mvvm-codemash-schedule-application.md","raw":"---\ntitle: Adventures in MVVM – CodeMash Schedule Application\ntags:\n  - CodeMash\n  - MVVM\nid: 86\ncategories:\n  - Uncategorized\ndate: 2010-01-11 13:56:00\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/)\n\nSo, I am getting myself ready to head out to Sandusy, Ohio for three days of nerdy fun at [CodeMash](http://Codemash.org).&#160; While I am there, I will be giving my “Introduction to the MVVM Pattern”.&#160; In preparation for this talk, I decided to create a new demo application.&#160; This application is a calendar and session list for the conference.&#160; It is not terribly fancy (I wish I had more time (or talent) to skin it better), but it highlights many of the concepts that I will be speaking about in my presentation.\n\nThe app is a Silverlight 3 project utilizing the Telerik Scheduler control.&#160; This particular control is rather rich, and I was excited to get my hands dirty with it. The ViewModel for the scheduler was primarily responsible for translating session data into something the Telerik control could consume.&#160;&#160; The app also includes a session list with a filter panel which is derived from the session data.&#160; This is where the majority of the MVVM code can be found.&#160; The ViewModels for the session list are responsible for dynamically creating and merging filter predicates based on the values in the session list.\n\n[![CodeMashSessions.Calendar](http://houseofbilz.net/wp-content/uploads/2010/05/CodeMashSessions.Calendar_thumb.png \"CodeMashSessions.Calendar\")](http://houseofbilz.net/wp-content/uploads/2010/05/CodeMashSessions.Calendar.png) [![CodeMashSessions.Sessions](http://houseofbilz.net/wp-content/uploads/2010/05/CodeMashSessions.Sessions_thumb.png \"CodeMashSessions.Sessions\")](http://houseofbilz.net/wp-content/uploads/2010/05/CodeMashSessions.Sessions.png)\n\nYou can play with the application at [http://HouseOfBilz.net/CodeMash](http://HouseOfBilz.net/CodeMash)\n\nCodeMashSessions Source Code: [http://www.houseofbilz.net/codemash/CodeMashSessions.Source.zip](http://www.houseofbilz.net/codemash/CodeMashSessions.Source.zip \"http://www.houseofbilz.net/codemash/CodeMashSessions.Source.zip\")\n\nTwitter &quot;Ball of Mud&quot; vs MVVM Source Code: [http://houseofbilz.net/codemash/Twitter-BallOfMud-vs-MVVM.zip](http://houseofbilz.net/codemash/Twitter-BallOfMud-vs-MVVM.zip)\n\nSlides from &quot;An Introduction to the MVVM Pattern&quot;: [http://houseofbilz.net/codemash/MVVM.ppt](http://houseofbilz.net/codemash/MVVM.ppt)","slug":"adventures-in-mvvm-codemash-schedule-application","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gu003e6eul8bigmsut"},{"title":"Goodbye XML… Hello YAML (part 1)","id":"88","date":"2010-02-21T18:58:00.000Z","_content":"\n[Part 2](http://houseofbilz.com/archive/2010/03/27/goodbye-xmlhellip-hello-yaml-part-2.aspx)\n\nThis is the first in a many-part series in which I will be writing about using YAML in the .Net space – particularly within C#.&#160; I will cover the whys, the hows, and show some tricks using the dynamic capabilities of C# when using YAML.&#160; I might even explore IronRuby a bit.\n\n#### \n\n##### Why YAML?\n\nI got the chance to sit in on four days of Ruby on Rails (RoR) training from [Joe Obrien](http://objo.com/) a few weeks ago.&#160; I hadn’t played with RoR in a few months, and this training was amazingly useful.&#160; I always like to see what I can take away from an environment like this for the work I do more regularly.\n\nIn this case, one of the things I took away with me was YAML.&#160; Let me start with some background.\n\nOver 10 years ago, when XML was touted as a human-readable data format, I had to scoff.&#160; Was XML really human readable?&#160; Well, from a software developer’s perspective, it sure is a lot nicer than binary.&#160; But, from a REAL human’s perspective, XML is just barely more readable than Klingon.&#160; This is mostly due to the verbose nature of XML and the often ranted about “[angle bracket tax](http://www.google.com/search?q=angle+bracket+tax)”.&#160;&#160;&#160; \n\n10 years later, we are still using XML as our primary data transfer/persistence/definition format.&#160; I certainly don’t mind using XML in a world where I (a human) rarely need to read the data.&#160; I am fine with keeping the data in my REST services as XML, for instance.&#160; In that case, my tools abstract it away and I don’t have to read it very often.\n\nCurrently, my colleague [Mike Woelmer](http://srtsolutions.com/blogs/mikewoelmer/) and I have a client who needs us to develop an engine where the business rules will be entered by a human (not a developer) and will change as the project evolves.&#160; The data/rules will be set in stone once the project is complete.&#160; XML is a bad choice for this, since a non-technical person will be entering the rules.&#160; At the same time, developing a UI for this is too time consuming and out of the scope of the project.&#160; My first thought: a [Doman Specific Language](http://en.wikipedia.org/wiki/Domain_specific_language) (DSL)!&#160; That would certainly lend well to my requirements.&#160; As much as I liked that idea, I didn’t have time to create a DSL either, especially while spiking.&#160; Then I remembered back to my RoR training.&#160; I remembered a data format called [YAML](http://yaml.org/) that they used for some of the configuration files.&#160; It was a VERY easy-to-read, hierarchical data format.\n\nTo illustrate the difference between XML and YAML, here is a simple example of some rather easy-to-read XML defining the data for a recipe (unrelated to my current project):\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:9ba9f019-91ea-4a0b-adaf-8e698f42b7b3\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#EBEBEB;overflow: auto;\"><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">recipe</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Macaroni and Cheese</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">My favorite comfort food</span><span style=\"color: #000000;\">.&lt;/</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">author</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Brian Genisio</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">author</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">timeToPrepare</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">30</span><span style=\"color: #000000;\"> Minutes</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">timeToPrepare</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">ingredients</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">ingredient</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">name</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Cheese</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">name</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">quantity</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">3</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">quantity</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">units</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">cups</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">units</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">ingredient</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">ingredient</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">name</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Macaroni</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">name</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">quantity</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">16</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">quantity</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">units</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">oz</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">units</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">ingredient</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">ingredients</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">steps</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">step</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">number</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">1</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">number</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Cook the macaroni</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">step</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">step</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">number</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">2</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">number</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Melt the cheese</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">step</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">step</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">number</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">3</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">number</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Mix the cooked macaroni with the melted cheese</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">step</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">steps</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">recipe</span><span style=\"color: #000000;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nHere is the exact same data described with YAML:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1e7fcb62-fc62-4377-972c-b1a753ae149a\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#EBEBEB;overflow: auto;\"><span style=\"color: #000000;\">Recipe:\n  Title:         Macaroni and Cheese\n  Description:   My favorite comfort food.\n  Author:        Brian Genisio\n  TimeToPrepare: 30 Minutes\n  Ingredients:\n    -\n      Name:     Cheese\n      Quantity: 3\n      Units:    cups\n    -\n      Name:     Macaroni\n      Quantity: 16\n      Units:    oz\n  Steps:\n    -\n      Number: 1\n      Description: Cook the macaroni\n    -\n      Number: 2\n      Description: Melt the cheese\n    -\n      Number: 3\n      Description: Mix the cooked macaroni with the melted cheese</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nAlthough this is a very simple example, I would ask you: Which one would you rather present to a customer when talking about the data and business rules?&#160; Which one would YOU rather look at when developing your software?\n\nIn my next couple of posts, I will discuss some tools available to you in the .Net space and some nifty C# 4.0 techniques for working with the data.","source":"_posts/2010-02-21-goodbye-xml-hello-yaml-part-1.md","raw":"---\ntitle: Goodbye XML… Hello YAML (part 1)\ntags:\n  - XML\n  - YAML\nid: 88\ncategories:\n  - Uncategorized\ndate: 2010-02-21 13:58:00\n---\n\n[Part 2](http://houseofbilz.com/archive/2010/03/27/goodbye-xmlhellip-hello-yaml-part-2.aspx)\n\nThis is the first in a many-part series in which I will be writing about using YAML in the .Net space – particularly within C#.&#160; I will cover the whys, the hows, and show some tricks using the dynamic capabilities of C# when using YAML.&#160; I might even explore IronRuby a bit.\n\n#### \n\n##### Why YAML?\n\nI got the chance to sit in on four days of Ruby on Rails (RoR) training from [Joe Obrien](http://objo.com/) a few weeks ago.&#160; I hadn’t played with RoR in a few months, and this training was amazingly useful.&#160; I always like to see what I can take away from an environment like this for the work I do more regularly.\n\nIn this case, one of the things I took away with me was YAML.&#160; Let me start with some background.\n\nOver 10 years ago, when XML was touted as a human-readable data format, I had to scoff.&#160; Was XML really human readable?&#160; Well, from a software developer’s perspective, it sure is a lot nicer than binary.&#160; But, from a REAL human’s perspective, XML is just barely more readable than Klingon.&#160; This is mostly due to the verbose nature of XML and the often ranted about “[angle bracket tax](http://www.google.com/search?q=angle+bracket+tax)”.&#160;&#160;&#160; \n\n10 years later, we are still using XML as our primary data transfer/persistence/definition format.&#160; I certainly don’t mind using XML in a world where I (a human) rarely need to read the data.&#160; I am fine with keeping the data in my REST services as XML, for instance.&#160; In that case, my tools abstract it away and I don’t have to read it very often.\n\nCurrently, my colleague [Mike Woelmer](http://srtsolutions.com/blogs/mikewoelmer/) and I have a client who needs us to develop an engine where the business rules will be entered by a human (not a developer) and will change as the project evolves.&#160; The data/rules will be set in stone once the project is complete.&#160; XML is a bad choice for this, since a non-technical person will be entering the rules.&#160; At the same time, developing a UI for this is too time consuming and out of the scope of the project.&#160; My first thought: a [Doman Specific Language](http://en.wikipedia.org/wiki/Domain_specific_language) (DSL)!&#160; That would certainly lend well to my requirements.&#160; As much as I liked that idea, I didn’t have time to create a DSL either, especially while spiking.&#160; Then I remembered back to my RoR training.&#160; I remembered a data format called [YAML](http://yaml.org/) that they used for some of the configuration files.&#160; It was a VERY easy-to-read, hierarchical data format.\n\nTo illustrate the difference between XML and YAML, here is a simple example of some rather easy-to-read XML defining the data for a recipe (unrelated to my current project):\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:9ba9f019-91ea-4a0b-adaf-8e698f42b7b3\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#EBEBEB;overflow: auto;\"><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">recipe</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Macaroni and Cheese</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">My favorite comfort food</span><span style=\"color: #000000;\">.&lt;/</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">author</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Brian Genisio</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">author</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">timeToPrepare</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">30</span><span style=\"color: #000000;\"> Minutes</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">timeToPrepare</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">ingredients</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">ingredient</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">name</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Cheese</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">name</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">quantity</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">3</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">quantity</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">units</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">cups</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">units</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">ingredient</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">ingredient</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">name</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Macaroni</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">name</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">quantity</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">16</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">quantity</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">units</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">oz</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">units</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">ingredient</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">ingredients</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">steps</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">step</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">number</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">1</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">number</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Cook the macaroni</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">step</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">step</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">number</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">2</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">number</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Melt the cheese</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">step</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">step</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">number</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">3</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">number</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n      </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Mix the cooked macaroni with the melted cheese</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">description</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">step</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n  </span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">steps</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">recipe</span><span style=\"color: #000000;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nHere is the exact same data described with YAML:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1e7fcb62-fc62-4377-972c-b1a753ae149a\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#EBEBEB;overflow: auto;\"><span style=\"color: #000000;\">Recipe:\n  Title:         Macaroni and Cheese\n  Description:   My favorite comfort food.\n  Author:        Brian Genisio\n  TimeToPrepare: 30 Minutes\n  Ingredients:\n    -\n      Name:     Cheese\n      Quantity: 3\n      Units:    cups\n    -\n      Name:     Macaroni\n      Quantity: 16\n      Units:    oz\n  Steps:\n    -\n      Number: 1\n      Description: Cook the macaroni\n    -\n      Number: 2\n      Description: Melt the cheese\n    -\n      Number: 3\n      Description: Mix the cooked macaroni with the melted cheese</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nAlthough this is a very simple example, I would ask you: Which one would you rather present to a customer when talking about the data and business rules?&#160; Which one would YOU rather look at when developing your software?\n\nIn my next couple of posts, I will discuss some tools available to you in the .Net space and some nifty C# 4.0 techniques for working with the data.","slug":"goodbye-xml-hello-yaml-part-1","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gw003h6eul8924p67d"},{"title":"MVVM Jam -- Prerequisites","id":"89","date":"2010-02-27T18:58:00.000Z","_content":"\nFor those in the Ann Arbor, Michigan area, you might be familiar with the “[Come Jam With Us](http://www.comejamwithus.org/)” project.&#160; Every week, we get together for an hour and code on a particular topic.&#160; It is usually led by one or two people and the rest of the group codes along in order to learn about the topic at hand.&#160; It is a really great forum for learning new concepts and technologies.\n\nThis week, on Tuesday, March 2nd, I will be hosting an MVVM jam session at 5:30 ([directions](http://www.comejamwithus.org/where-you-can-find-us)).&#160; I will be taking you through the process of transforming a “Ball of Mud” application to use the MVVM architecture.&#160; We will do this in a test-driven way, so you can see the testability story of MVVM.\n\nThe prerequisites are very simple:\n\n1\\. Visual Studio 2008 or 2010 or [Visual Studio Express](http://www.microsoft.com/express/) (free)\n\n2\\. Download the [sample project](http://HouseOfBilz.net/MVVMJam/MVVM-Jam.ModelExtracted.zip).&#160; It is a rudimentary Twitter search application written with WPF.\n\n3\\. You should have some way of running NUnit tests from Visual Studio.&#160; If you have [ReSharper](http://www.jetbrains.com/resharper/index.html) or [TestDriven.Net](http://testdriven.net/) (or any similar plug-in), then you are all set.&#160; ReSharper has a free 30 day trial and TestDriven.Net has a free version for personal use.\n\nI hope to see you there!","source":"_posts/2010-02-27-mvvm-jam-prerequisites.md","raw":"---\ntitle: MVVM Jam -- Prerequisites\ntags:\n  - Jam\n  - MVVM\nid: 89\ncategories:\n  - Uncategorized\ndate: 2010-02-27 13:58:00\n---\n\nFor those in the Ann Arbor, Michigan area, you might be familiar with the “[Come Jam With Us](http://www.comejamwithus.org/)” project.&#160; Every week, we get together for an hour and code on a particular topic.&#160; It is usually led by one or two people and the rest of the group codes along in order to learn about the topic at hand.&#160; It is a really great forum for learning new concepts and technologies.\n\nThis week, on Tuesday, March 2nd, I will be hosting an MVVM jam session at 5:30 ([directions](http://www.comejamwithus.org/where-you-can-find-us)).&#160; I will be taking you through the process of transforming a “Ball of Mud” application to use the MVVM architecture.&#160; We will do this in a test-driven way, so you can see the testability story of MVVM.\n\nThe prerequisites are very simple:\n\n1\\. Visual Studio 2008 or 2010 or [Visual Studio Express](http://www.microsoft.com/express/) (free)\n\n2\\. Download the [sample project](http://HouseOfBilz.net/MVVMJam/MVVM-Jam.ModelExtracted.zip).&#160; It is a rudimentary Twitter search application written with WPF.\n\n3\\. You should have some way of running NUnit tests from Visual Studio.&#160; If you have [ReSharper](http://www.jetbrains.com/resharper/index.html) or [TestDriven.Net](http://testdriven.net/) (or any similar plug-in), then you are all set.&#160; ReSharper has a free 30 day trial and TestDriven.Net has a free version for personal use.\n\nI hope to see you there!","slug":"mvvm-jam-prerequisites","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9gy003j6eul241byoq0"},{"title":"MVVM Jam – A Solution","id":"90","date":"2010-03-02T18:59:00.000Z","_content":"\nThanks to all who came to the MVVM jam tonight.&#160; In case you wanted to see what a completed solution looks like, you can download it [here](http://houseofbilz.net/MVVMJam/MVVM-Jam-Complete.zip).&#160; There are many tweaks that can be made, and it is certainly not the only solution… but hopefully, it helps to understand how the MVVM pattern can be applied.\n\nNext week (Wednesday, March 9th) , I will be giving a presentation on [Prism](http://compositewpf.codeplex.com/) for Silverlight and WPF at the [Ann Arbor .Net Users’ Group](http://aadnd.org/).&#160; It is an eyes-forward talk about more patterns similar to MVVM.","source":"_posts/2010-03-02-mvvm-jam-a-solution.md","raw":"---\ntitle: MVVM Jam – A Solution\ntags:\n  - Jam\n  - MVVM\nid: 90\ncategories:\n  - Uncategorized\ndate: 2010-03-02 13:59:00\n---\n\nThanks to all who came to the MVVM jam tonight.&#160; In case you wanted to see what a completed solution looks like, you can download it [here](http://houseofbilz.net/MVVMJam/MVVM-Jam-Complete.zip).&#160; There are many tweaks that can be made, and it is certainly not the only solution… but hopefully, it helps to understand how the MVVM pattern can be applied.\n\nNext week (Wednesday, March 9th) , I will be giving a presentation on [Prism](http://compositewpf.codeplex.com/) for Silverlight and WPF at the [Ann Arbor .Net Users’ Group](http://aadnd.org/).&#160; It is an eyes-forward talk about more patterns similar to MVVM.","slug":"mvvm-jam-a-solution","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9h0003m6eulu8npmfkp"},{"title":"Prism Slides and Demo","id":"91","date":"2010-03-11T18:59:00.000Z","_content":"\nI recently gave a presentation on Prism at the [Ann Arbor .Net Users Group](http://aadnd.org/).&#160; I have made my slides and demo available for download:\n\n### [Slides](http://houseofbilz.net/Prism/Prism.pptx)&#160;&#160; [Demo](http://houseofbilz.net/Prism/PrismExample.zip)\n\nSome interesting links associated with prism:\n\n*   [Composite Application Guidance](http://tinyurl.com/Prism2)*   [Composite Application Library](http://tinyurl.com/Prism2-CAL )*   [Codeplex Site](http://www.codeplex.com/CompositeWPF/)*   [Great 4-part video series](http://tinyurl.com/Prism2-Videos)*   [Another video series](http://mtaulty.com/CommunityServer/blogs/mike_taultys_blog/archive/2009/10/27/prism-and-silverlight-screencasts-on-channel-9.aspx) that [David Giard](http://www.davidgiard.com/) pointed me towards","source":"_posts/2010-03-11-prism-slides-and-demo.md","raw":"---\ntitle: Prism Slides and Demo\ntags:\n  - Prism\n  - Silverlight\n  - WPF\nid: 91\ncategories:\n  - Uncategorized\ndate: 2010-03-11 13:59:00\n---\n\nI recently gave a presentation on Prism at the [Ann Arbor .Net Users Group](http://aadnd.org/).&#160; I have made my slides and demo available for download:\n\n### [Slides](http://houseofbilz.net/Prism/Prism.pptx)&#160;&#160; [Demo](http://houseofbilz.net/Prism/PrismExample.zip)\n\nSome interesting links associated with prism:\n\n*   [Composite Application Guidance](http://tinyurl.com/Prism2)*   [Composite Application Library](http://tinyurl.com/Prism2-CAL )*   [Codeplex Site](http://www.codeplex.com/CompositeWPF/)*   [Great 4-part video series](http://tinyurl.com/Prism2-Videos)*   [Another video series](http://mtaulty.com/CommunityServer/blogs/mike_taultys_blog/archive/2009/10/27/prism-and-silverlight-screencasts-on-channel-9.aspx) that [David Giard](http://www.davidgiard.com/) pointed me towards","slug":"prism-slides-and-demo","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9h2003p6eulm8b822w7"},{"title":"The Silverlightning Talks","id":"93","date":"2010-04-16T18:01:00.000Z","_content":"\nTomorrow, I will be speaking in Grand Rapids at the [Silverlight Firestarter](http://www.eventbrite.com/event/557773315).&#160; It is a one day event intended to get people bootstrapped with Silverlight.&#160; I will be giving the “Advanced Topics” presentation.&#160; I have decided to run it as a series of “[Lightning Talks](http://en.wikipedia.org/wiki/Lightning_Talk)”.&#160; The idea is to give a lot of breadth so you know that the topic exists and move quickly between them.&#160; To go along with the talks, here are a bunch of links that you might find useful:\n\n# MVVM\n\n[http://msdn.microsoft.com/en-us/magazine/dd458800.aspx](http://msdn.microsoft.com/en-us/magazine/dd458800.aspx)     \n[http://msdn.microsoft.com/en-us/magazine/dd419663.aspx](http://msdn.microsoft.com/en-us/magazine/dd419663.aspx)     \n[http://channel9.msdn.com/shows/Continuum/MVVM/](http://channel9.msdn.com/shows/Continuum/MVVM/)     \n[http://karlshifflett.wordpress.com/2008/11/08/learning-wpf-m-v-vm/](http://karlshifflett.wordpress.com/2008/11/08/learning-wpf-m-v-vm/)     \n[http://johnpapa.net/silverlight/5-minute-overview-of-mvvm-in-silverlight/](http://johnpapa.net/silverlight/5-minute-overview-of-mvvm-in-silverlight/)\n\nGood MVVM Frameworks     \n[http://www.galasoft.ch/mvvm/getstarted/](http://www.galasoft.ch/mvvm/getstarted/)     \n[http://caliburn.codeplex.com/Wikipage](http://caliburn.codeplex.com/Wikipage)\n\n&#160;\n\n# Prism\n\n[http://compositewpf.codeplex.com/](http://compositewpf.codeplex.com/)     \n[http://mtaulty.com/CommunityServer/blogs/mike_taultys_blog/archive/2009/10/27/prism-and-silverlight-screencasts-on-channel-9.aspx](http://mtaulty.com/CommunityServer/blogs/mike_taultys_blog/archive/2009/10/27/prism-and-silverlight-screencasts-on-channel-9.aspx)     \n[http://www.grumpydev.com/2009/07/04/why-shouldn%E2%80%99t-i-use-prism/](http://www.grumpydev.com/2009/07/04/why-shouldn%E2%80%99t-i-use-prism/)\n\n&#160;\n\n# Unit Testing\n\nSilverlight Unit Testing Framework    \n[http://code.msdn.microsoft.com/silverlightut](http://code.msdn.microsoft.com/silverlightut)     \n[http://silverlight.codeplex.com/](http://silverlight.codeplex.com/)     \n[http://www.jeff.wilcox.name/2008/03/silverlight2-unit-testing/](http://www.jeff.wilcox.name/2008/03/silverlight2-unit-testing/)\n\nNUnit Testing with Silverlight     \n[http://weblogs.asp.net/nunitaddin/archive/2008/05/01/silverlight-nunit-projects.aspx](http://weblogs.asp.net/nunitaddin/archive/2008/05/01/silverlight-nunit-projects.aspx)     \n\nUseful Testing Tools    \n[http://testdriven.net/](http://testdriven.net/)     \n[http://nunit.org/](http://nunit.org/)     \n[http://code.google.com/p/moq/](http://code.google.com/p/moq/)     \n[http://www.ayende.com/projects/rhino-mocks.aspx](http://www.ayende.com/projects/rhino-mocks.aspx)\n\n&#160;\n\n# Navigation Framework\n\n[http://www.silverlightshow.net/items/The-Silverlight-3-Navigation-Framework.aspx](http://www.silverlightshow.net/items/The-Silverlight-3-Navigation-Framework.aspx)     \n[http://www.silverlight.net/learn/videos/silverlight-videos/navigation-framework/](http://www.silverlight.net/learn/videos/silverlight-videos/navigation-framework/)\n\n&#160;\n\n# Farseer Physics Engine\n\n[http://farseerphysics.codeplex.com/Wikipage](http://farseerphysics.codeplex.com/Wikipage)     \n[http://physicshelper.codeplex.com/Wikipage](http://physicshelper.codeplex.com/Wikipage) [http://www.andybeaulieu.com/Home/tabid/67/Default.aspx](http://www.andybeaulieu.com/Home/tabid/67/Default.aspx)\n\n&#160;\n\n# Windows Phone 7\n\n[http://www.silverlight.net/getstarted/devices/windows-phone/](http://www.silverlight.net/getstarted/devices/windows-phone/)     \n[http://msdn.microsoft.com/en-us/library/ff402535%28VS.92%29.aspx](http://msdn.microsoft.com/en-us/library/ff402535%28VS.92%29.aspx)","source":"_posts/2010-04-16-the-silverlightning-talks.md","raw":"---\ntitle: The Silverlightning Talks\ntags:\n  - Silverlight\n  - Silverlightning Talks\nid: 93\ncategories:\n  - Uncategorized\ndate: 2010-04-16 14:01:00\n---\n\nTomorrow, I will be speaking in Grand Rapids at the [Silverlight Firestarter](http://www.eventbrite.com/event/557773315).&#160; It is a one day event intended to get people bootstrapped with Silverlight.&#160; I will be giving the “Advanced Topics” presentation.&#160; I have decided to run it as a series of “[Lightning Talks](http://en.wikipedia.org/wiki/Lightning_Talk)”.&#160; The idea is to give a lot of breadth so you know that the topic exists and move quickly between them.&#160; To go along with the talks, here are a bunch of links that you might find useful:\n\n# MVVM\n\n[http://msdn.microsoft.com/en-us/magazine/dd458800.aspx](http://msdn.microsoft.com/en-us/magazine/dd458800.aspx)     \n[http://msdn.microsoft.com/en-us/magazine/dd419663.aspx](http://msdn.microsoft.com/en-us/magazine/dd419663.aspx)     \n[http://channel9.msdn.com/shows/Continuum/MVVM/](http://channel9.msdn.com/shows/Continuum/MVVM/)     \n[http://karlshifflett.wordpress.com/2008/11/08/learning-wpf-m-v-vm/](http://karlshifflett.wordpress.com/2008/11/08/learning-wpf-m-v-vm/)     \n[http://johnpapa.net/silverlight/5-minute-overview-of-mvvm-in-silverlight/](http://johnpapa.net/silverlight/5-minute-overview-of-mvvm-in-silverlight/)\n\nGood MVVM Frameworks     \n[http://www.galasoft.ch/mvvm/getstarted/](http://www.galasoft.ch/mvvm/getstarted/)     \n[http://caliburn.codeplex.com/Wikipage](http://caliburn.codeplex.com/Wikipage)\n\n&#160;\n\n# Prism\n\n[http://compositewpf.codeplex.com/](http://compositewpf.codeplex.com/)     \n[http://mtaulty.com/CommunityServer/blogs/mike_taultys_blog/archive/2009/10/27/prism-and-silverlight-screencasts-on-channel-9.aspx](http://mtaulty.com/CommunityServer/blogs/mike_taultys_blog/archive/2009/10/27/prism-and-silverlight-screencasts-on-channel-9.aspx)     \n[http://www.grumpydev.com/2009/07/04/why-shouldn%E2%80%99t-i-use-prism/](http://www.grumpydev.com/2009/07/04/why-shouldn%E2%80%99t-i-use-prism/)\n\n&#160;\n\n# Unit Testing\n\nSilverlight Unit Testing Framework    \n[http://code.msdn.microsoft.com/silverlightut](http://code.msdn.microsoft.com/silverlightut)     \n[http://silverlight.codeplex.com/](http://silverlight.codeplex.com/)     \n[http://www.jeff.wilcox.name/2008/03/silverlight2-unit-testing/](http://www.jeff.wilcox.name/2008/03/silverlight2-unit-testing/)\n\nNUnit Testing with Silverlight     \n[http://weblogs.asp.net/nunitaddin/archive/2008/05/01/silverlight-nunit-projects.aspx](http://weblogs.asp.net/nunitaddin/archive/2008/05/01/silverlight-nunit-projects.aspx)     \n\nUseful Testing Tools    \n[http://testdriven.net/](http://testdriven.net/)     \n[http://nunit.org/](http://nunit.org/)     \n[http://code.google.com/p/moq/](http://code.google.com/p/moq/)     \n[http://www.ayende.com/projects/rhino-mocks.aspx](http://www.ayende.com/projects/rhino-mocks.aspx)\n\n&#160;\n\n# Navigation Framework\n\n[http://www.silverlightshow.net/items/The-Silverlight-3-Navigation-Framework.aspx](http://www.silverlightshow.net/items/The-Silverlight-3-Navigation-Framework.aspx)     \n[http://www.silverlight.net/learn/videos/silverlight-videos/navigation-framework/](http://www.silverlight.net/learn/videos/silverlight-videos/navigation-framework/)\n\n&#160;\n\n# Farseer Physics Engine\n\n[http://farseerphysics.codeplex.com/Wikipage](http://farseerphysics.codeplex.com/Wikipage)     \n[http://physicshelper.codeplex.com/Wikipage](http://physicshelper.codeplex.com/Wikipage) [http://www.andybeaulieu.com/Home/tabid/67/Default.aspx](http://www.andybeaulieu.com/Home/tabid/67/Default.aspx)\n\n&#160;\n\n# Windows Phone 7\n\n[http://www.silverlight.net/getstarted/devices/windows-phone/](http://www.silverlight.net/getstarted/devices/windows-phone/)     \n[http://msdn.microsoft.com/en-us/library/ff402535%28VS.92%29.aspx](http://msdn.microsoft.com/en-us/library/ff402535%28VS.92%29.aspx)","slug":"the-silverlightning-talks","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9h4003r6eulizhiktvj"},{"title":"Goodbye XML… Hello YAML (part 2)","id":"92","date":"2010-03-27T18:00:00.000Z","_content":"\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2010%2F03%2F27%2Fgoodbye-xmlhellip-hello-yaml-part-2.aspx)](http://dotnetshoutout.com/Goodbye-XML%E2%80%A6-Hello-YAML-part-2) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2010%2f03%2f27%2fgoodbye-xmlhellip-hello-yaml-part-2.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2010%2f03%2f27%2fgoodbye-xmlhellip-hello-yaml-part-2.aspx)   \n\n[Part 1](http://houseofbilz.com/archive/2010/02/21/goodbye-xmlhellip-hello-yaml-part-1.aspx)\n\nAfter I explained my motivation for using YAML instead of XML for my data, I got a lot of people asking me what type of tooling is available in the .Net space for consuming YAML.&#160; In this post, I will discuss a nice tooling option as well as describe some small modifications to leverage the extremely powerful dynamic capabilities of C# 4.0.&#160; I will be referring to the following YAML file throughout this post\n    <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:9bfdd9c4-2ac1-4f6e-961e-d3dad7186bc4\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">Recipe:\n  Title:         Macaroni and Cheese\n  Description:   My favorite comfort food.\n  Author:        Brian Genisio\n  TimeToPrepare: </span><span style=\"color: #000000;\">30</span><span style=\"color: #000000;\"> Minutes\n  Ingredients:\n    -\n      Name:     Cheese\n      Quantity: </span><span style=\"color: #000000;\">3</span><span style=\"color: #000000;\">\n      Units:    cups\n    -\n      Name:     Macaroni\n      Quantity: </span><span style=\"color: #000000;\">16</span><span style=\"color: #000000;\">\n      Units:    oz\n  Steps:\n    -\n      Number: </span><span style=\"color: #000000;\">1</span><span style=\"color: #000000;\">\n      Description: Cook the macaroni\n    -\n      Number: </span><span style=\"color: #000000;\">2</span><span style=\"color: #000000;\">\n      Description: Melt the cheese\n    -\n      Number: </span><span style=\"color: #000000;\">3</span><span style=\"color: #000000;\">\n      Description: Mix the cooked macaroni with the melted cheese</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Tooling\n\nIt turns out that there are several implementations of YAML tools out there.&#160; The neatest one, in my opinion, is [YAML for .NET, Visual Studio and Powershell](http://yaml.codeplex.com/).&#160; It includes a great editor plug-in for Visual Studio as well as YamlCore, which is a parsing engine for .Net.&#160; It is in active development still, but it is certainly enough to get you going with YAML in .Net.&#160; \n\nStart by referenceing YamlCore.dll, load your document, and you are on your way.&#160; Here is an example of using the parser to get the title of the Recipe:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:67da368d-a0ea-4e95-80f0-519787bb7578\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">var yaml </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> YamlLanguage.FileTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data.yaml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> Hashtable;\nvar recipe </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> yaml[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Recipe</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">] </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> Hashtable;\nvar title </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipe[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Title</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">] </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n[](http://yaml.codeplex.com/)\n\nIn a similar way, you can access data in the Ingredients set:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:22908ba1-a4cd-4b47-a9ee-3987407bd53c\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">var yaml </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> YamlLanguage.FileTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data.yaml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> Hashtable;\nvar recipe </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> yaml[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Recipe</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">] </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> Hashtable;\nvar ingredients </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipe[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Ingredients</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">] </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ArrayList;\n\n</span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (Hashtable ingredient </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> ingredients)\n{\n    var name </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> ingredient[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Name</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">] </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">;\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nYou may have noticed that YamlCore uses non-generic Hashtables and ArrayLists.&#160; This is because YamlCore was designed to work in all .Net versions, including 1.0.&#160; Everything in the parsed tree is one of two things: Hashtable, ArrayList or Value type (usually String).&#160; This translates well to the YAML structure where everything is either a Map, a Set or a Value.&#160; \n\n### Taking it further\n\nPersonally, I really dislike writing code like this.&#160; Years ago, I promised myself to never write the words Hashtable or ArrayList in my .Net code again.&#160; They are ugly, mostly depreciated collections that existed before we got generics in C# 2.0.&#160; Now, especially that we have dynamic capabilities in C# 4.0, we can do **a lot** better than this.&#160; With a relatively small amount of code, you can wrap the Hashtables and Array lists with a dynamic wrapper (wrapper code at the bottom of this post).&#160; The same code can be re-written to look like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:2df57b77-9f24-4e35-a85e-cdfdd4bd989f\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">dynamic doc </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> YamlDoc.Load(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data.yaml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nvar title </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> doc.Recipe.Title;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nAnd\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:f4b4bf83-c762-47c5-8707-ae4afbad192e\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">dynamic doc </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> YamlDoc.Load(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data.yaml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (dynamic ingredient </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> doc.Recipe.Ingredients)\n{\n    var name </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> ingredient.Name;\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nI significantly prefer this code over the previous.&#160; That’s not all… the magic really happens when we take this concept into WPF.&#160; With a single line of code, you can bind to the data dynamically in the view:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:56d7052c-215c-41f6-87e5-a9cd8fbc6648\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">DataContext </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> YamlDoc.Load(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data.yaml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThen, your XAML is extremely straight-forward (Nothing else.&#160; No static types, no adapter code.&#160; Nothing):\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:4df1ba98-3945-45a1-817b-6cedd642224f\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Recipe.Title}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Recipe.Description}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Recipe.Author}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Recipe.TimeToPrepare}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"Ingredients:\"</span><span style=\"color: #FF0000;\"> FontWeight</span><span style=\"color: #0000FF;\">=\"Bold\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\"> \n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ItemsControl </span><span style=\"color: #FF0000;\">ItemsSource</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Recipe.Ingredients}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Margin</span><span style=\"color: #0000FF;\">=\"10,0,0,0\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ItemsControl.ItemTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n            </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">DataTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">StackPanel </span><span style=\"color: #FF0000;\">Orientation</span><span style=\"color: #0000FF;\">=\"Horizontal\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Quantity}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\" \"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Units}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\" of \"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Name}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n            </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">DataTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ItemsControl.ItemTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ItemsControl</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"Steps:\"</span><span style=\"color: #FF0000;\"> FontWeight</span><span style=\"color: #0000FF;\">=\"Bold\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ItemsControl </span><span style=\"color: #FF0000;\">ItemsSource</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Recipe.Steps}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Margin</span><span style=\"color: #0000FF;\">=\"10,0,0,0\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ItemsControl.ItemTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n            </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">DataTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">StackPanel </span><span style=\"color: #FF0000;\">Orientation</span><span style=\"color: #0000FF;\">=\"Horizontal\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Number}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\": \"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Description}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n            </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">DataTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ItemsControl.ItemTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ItemsControl</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis nifty XAML binding trick only works in WPF, unfortunately.&#160; Silverlight handles binding differently, so they don’t support binding to dynamic objects as of late (March 2010).&#160; This, in my opinion, is a major lacking feature in Silverlight and I **really** hope we will see this feature available to us in Silverlight 4 Release.&#160; (I am not very optimistic for Silverlight 4, but I can hope for the feature in Silverlight 5, can’t I?)\n\n### Conclusion\n\nI still have a few things I want to say about using YAML in the .Net space including de-serialization and using IronRuby for your YAML parser, but this post is hopefully enough to see how easy it is to incorporate YAML documents in your code.\n\n[Codeplex Site for YAML tools](http://yaml.codeplex.com/ \"http://yaml.codeplex.com/\")\n\n[Dynamic wrapper for YamlCore](http://pastie.org/890406)","source":"_posts/2010-03-27-goodbye-xml-hello-yaml-part-2.md","raw":"---\ntitle: Goodbye XML… Hello YAML (part 2)\ntags:\n  - XML\n  - YAML\nid: 92\ncategories:\n  - Uncategorized\ndate: 2010-03-27 14:00:00\n---\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2010%2F03%2F27%2Fgoodbye-xmlhellip-hello-yaml-part-2.aspx)](http://dotnetshoutout.com/Goodbye-XML%E2%80%A6-Hello-YAML-part-2) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2010%2f03%2f27%2fgoodbye-xmlhellip-hello-yaml-part-2.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2010%2f03%2f27%2fgoodbye-xmlhellip-hello-yaml-part-2.aspx)   \n\n[Part 1](http://houseofbilz.com/archive/2010/02/21/goodbye-xmlhellip-hello-yaml-part-1.aspx)\n\nAfter I explained my motivation for using YAML instead of XML for my data, I got a lot of people asking me what type of tooling is available in the .Net space for consuming YAML.&#160; In this post, I will discuss a nice tooling option as well as describe some small modifications to leverage the extremely powerful dynamic capabilities of C# 4.0.&#160; I will be referring to the following YAML file throughout this post\n    <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:9bfdd9c4-2ac1-4f6e-961e-d3dad7186bc4\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">Recipe:\n  Title:         Macaroni and Cheese\n  Description:   My favorite comfort food.\n  Author:        Brian Genisio\n  TimeToPrepare: </span><span style=\"color: #000000;\">30</span><span style=\"color: #000000;\"> Minutes\n  Ingredients:\n    -\n      Name:     Cheese\n      Quantity: </span><span style=\"color: #000000;\">3</span><span style=\"color: #000000;\">\n      Units:    cups\n    -\n      Name:     Macaroni\n      Quantity: </span><span style=\"color: #000000;\">16</span><span style=\"color: #000000;\">\n      Units:    oz\n  Steps:\n    -\n      Number: </span><span style=\"color: #000000;\">1</span><span style=\"color: #000000;\">\n      Description: Cook the macaroni\n    -\n      Number: </span><span style=\"color: #000000;\">2</span><span style=\"color: #000000;\">\n      Description: Melt the cheese\n    -\n      Number: </span><span style=\"color: #000000;\">3</span><span style=\"color: #000000;\">\n      Description: Mix the cooked macaroni with the melted cheese</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n### Tooling\n\nIt turns out that there are several implementations of YAML tools out there.&#160; The neatest one, in my opinion, is [YAML for .NET, Visual Studio and Powershell](http://yaml.codeplex.com/).&#160; It includes a great editor plug-in for Visual Studio as well as YamlCore, which is a parsing engine for .Net.&#160; It is in active development still, but it is certainly enough to get you going with YAML in .Net.&#160; \n\nStart by referenceing YamlCore.dll, load your document, and you are on your way.&#160; Here is an example of using the parser to get the title of the Recipe:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:67da368d-a0ea-4e95-80f0-519787bb7578\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">var yaml </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> YamlLanguage.FileTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data.yaml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> Hashtable;\nvar recipe </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> yaml[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Recipe</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">] </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> Hashtable;\nvar title </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipe[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Title</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">] </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n[](http://yaml.codeplex.com/)\n\nIn a similar way, you can access data in the Ingredients set:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:22908ba1-a4cd-4b47-a9ee-3987407bd53c\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">var yaml </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> YamlLanguage.FileTo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data.yaml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">) </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> Hashtable;\nvar recipe </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> yaml[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Recipe</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">] </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> Hashtable;\nvar ingredients </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> recipe[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Ingredients</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">] </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> ArrayList;\n\n</span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (Hashtable ingredient </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> ingredients)\n{\n    var name </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> ingredient[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Name</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">] </span><span style=\"color: #0000FF;\">as</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\">;\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nYou may have noticed that YamlCore uses non-generic Hashtables and ArrayLists.&#160; This is because YamlCore was designed to work in all .Net versions, including 1.0.&#160; Everything in the parsed tree is one of two things: Hashtable, ArrayList or Value type (usually String).&#160; This translates well to the YAML structure where everything is either a Map, a Set or a Value.&#160; \n\n### Taking it further\n\nPersonally, I really dislike writing code like this.&#160; Years ago, I promised myself to never write the words Hashtable or ArrayList in my .Net code again.&#160; They are ugly, mostly depreciated collections that existed before we got generics in C# 2.0.&#160; Now, especially that we have dynamic capabilities in C# 4.0, we can do **a lot** better than this.&#160; With a relatively small amount of code, you can wrap the Hashtables and Array lists with a dynamic wrapper (wrapper code at the bottom of this post).&#160; The same code can be re-written to look like this:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:2df57b77-9f24-4e35-a85e-cdfdd4bd989f\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">dynamic doc </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> YamlDoc.Load(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data.yaml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nvar title </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> doc.Recipe.Title;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nAnd\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:f4b4bf83-c762-47c5-8707-ae4afbad192e\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">dynamic doc </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> YamlDoc.Load(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data.yaml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #0000FF;\">foreach</span><span style=\"color: #000000;\"> (dynamic ingredient </span><span style=\"color: #0000FF;\">in</span><span style=\"color: #000000;\"> doc.Recipe.Ingredients)\n{\n    var name </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> ingredient.Name;\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nI significantly prefer this code over the previous.&#160; That’s not all… the magic really happens when we take this concept into WPF.&#160; With a single line of code, you can bind to the data dynamically in the view:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:56d7052c-215c-41f6-87e5-a9cd8fbc6648\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #000000;\">DataContext </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> YamlDoc.Load(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Data.yaml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThen, your XAML is extremely straight-forward (Nothing else.&#160; No static types, no adapter code.&#160; Nothing):\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:4df1ba98-3945-45a1-817b-6cedd642224f\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Recipe.Title}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Recipe.Description}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Recipe.Author}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Recipe.TimeToPrepare}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"Ingredients:\"</span><span style=\"color: #FF0000;\"> FontWeight</span><span style=\"color: #0000FF;\">=\"Bold\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\"> \n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ItemsControl </span><span style=\"color: #FF0000;\">ItemsSource</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Recipe.Ingredients}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Margin</span><span style=\"color: #0000FF;\">=\"10,0,0,0\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ItemsControl.ItemTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n            </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">DataTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">StackPanel </span><span style=\"color: #FF0000;\">Orientation</span><span style=\"color: #0000FF;\">=\"Horizontal\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Quantity}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\" \"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Units}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\" of \"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Name}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n            </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">DataTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ItemsControl.ItemTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ItemsControl</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"Steps:\"</span><span style=\"color: #FF0000;\"> FontWeight</span><span style=\"color: #0000FF;\">=\"Bold\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ItemsControl </span><span style=\"color: #FF0000;\">ItemsSource</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Recipe.Steps}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Margin</span><span style=\"color: #0000FF;\">=\"10,0,0,0\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">ItemsControl.ItemTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n            </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">DataTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">StackPanel </span><span style=\"color: #FF0000;\">Orientation</span><span style=\"color: #0000FF;\">=\"Horizontal\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Number}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\": \"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding Description}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n                </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n            </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">DataTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ItemsControl.ItemTemplate</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">ItemsControl</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis nifty XAML binding trick only works in WPF, unfortunately.&#160; Silverlight handles binding differently, so they don’t support binding to dynamic objects as of late (March 2010).&#160; This, in my opinion, is a major lacking feature in Silverlight and I **really** hope we will see this feature available to us in Silverlight 4 Release.&#160; (I am not very optimistic for Silverlight 4, but I can hope for the feature in Silverlight 5, can’t I?)\n\n### Conclusion\n\nI still have a few things I want to say about using YAML in the .Net space including de-serialization and using IronRuby for your YAML parser, but this post is hopefully enough to see how easy it is to incorporate YAML documents in your code.\n\n[Codeplex Site for YAML tools](http://yaml.codeplex.com/ \"http://yaml.codeplex.com/\")\n\n[Dynamic wrapper for YamlCore](http://pastie.org/890406)","slug":"goodbye-xml-hello-yaml-part-2","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9h8003u6eulnhu3bil2"},{"title":"Adventures in MVVM – My ViewModel Base – Silverlight Support!","id":"95","date":"2010-05-14T18:02:00.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2010%2F05%2F14%2Fadventures-in-mvvm-ndash-my-viewmodel-base-ndash-silverlight-support.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-My-ViewModel-Base-Silverlight-Support) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2010%2f05%2f14%2fadventures-in-mvvm-ndash-my-viewmodel-base-ndash-silverlight-support.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2010%2f05%2f14%2fadventures-in-mvvm-ndash-my-viewmodel-base-ndash-silverlight-support.aspx)\n\n<font color=\"#ff0000\">EDIT:</font> Here is why I love blogging and sharing code so much: Putting your ideas and code out into the public space always manages to add value to the ideas that were originally posted.&#160; Case in point: Tobias Richling commented on this post with a fantastic refinement to the Silverlight dynamic property binding.&#160; There is a much more simple way to bind against these dynamic properties (including automatic commanding) than my first approach.&#160; I have incorporated the changes to the CodePlex site and I have edited this post to reflect the changes.&#160; Thanks again, to Tobias for the suggestion.\n\nIn my last post, I outlined the powerful features that are available in the [ViewModelSupport](http://houseofbilz.com/archive/2010/05/08/adventures-in-mvvm-ndash-my-viewmodel-base.aspx).&#160; It takes advantage of the dynamic features of C# 4.0 (as well as some 3.0 goodies) to help eliminate the plumbing that often comes with writing ViewModels.&#160; If you are interested in learning about the capabilities, please take a look at that post and look at the code on [CodePlex](http://viewmodelsupport.codeplex.com/). \n\nWhen I wrote about the ViewModel base class, I complained that the features did not work in Silverlight because as of 4.0, it does not support binding to dynamic properties.&#160; Although I still think this is a bummer, I am happy to say that there is a workaround.&#160; In the Silverlight version of my base class, I include a string indexer for getting and setting properties that lets you bind to dynamic properties in the **ViewModelBase**, especially the convention-based commands that the base class supports.\n\nFor example, with a View Model that looks like this:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:a35f8fe8-6cfc-4037-bf17-826c5f411156\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> ExampleViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Execute_MyCommand()\n    {\n        Set(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Text</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">, </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Foo</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nThe view can bind to the dynamic property (**Text**) and the convention-based command (**MyCommand**) with the following XAML.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:dc0daf96-5b7f-491d-b195-aa333e5cc650\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;white-space:-moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap; white-space: pre-wrap; word-wrap: break-word;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding [Text]}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Margin</span><span style=\"color: #0000FF;\">=\"5\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">Button </span><span style=\"color: #FF0000;\">Content</span><span style=\"color: #0000FF;\">=\"Execute MyCommand\"</span><span style=\"color: #FF0000;\"> Command</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding [MyCommand]}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Margin</span><span style=\"color: #0000FF;\">=\"5\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNotice the square brackets around the name of the property.&#160; Of course, it is not as perfect as binding to **Text** and **MyCommand** like you can in WPF, but it is better than having a failed feature.&#160; This allows you to share your ViewModels between WPF and Silverlight very easily. \n\n&lt;BeatDeadHorse&gt;Hopefully, in Silverlight 5.0, we will see binding to dynamic properties more directly????&lt;/BeatDeadHorse&gt;","source":"_posts/2010-05-14-adventures-in-mvvm-my-viewmodel-base-silverlight-support.md","raw":"---\ntitle: 'Adventures in MVVM – My ViewModel Base – Silverlight Support!'\ntags:\n  - MVVM\n  - Silverlight\n  - VIew Model Support\n  - WPF\nid: 95\ncategories:\n  - Uncategorized\ndate: 2010-05-14 14:02:00\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2010%2F05%2F14%2Fadventures-in-mvvm-ndash-my-viewmodel-base-ndash-silverlight-support.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-My-ViewModel-Base-Silverlight-Support) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2010%2f05%2f14%2fadventures-in-mvvm-ndash-my-viewmodel-base-ndash-silverlight-support.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2010%2f05%2f14%2fadventures-in-mvvm-ndash-my-viewmodel-base-ndash-silverlight-support.aspx)\n\n<font color=\"#ff0000\">EDIT:</font> Here is why I love blogging and sharing code so much: Putting your ideas and code out into the public space always manages to add value to the ideas that were originally posted.&#160; Case in point: Tobias Richling commented on this post with a fantastic refinement to the Silverlight dynamic property binding.&#160; There is a much more simple way to bind against these dynamic properties (including automatic commanding) than my first approach.&#160; I have incorporated the changes to the CodePlex site and I have edited this post to reflect the changes.&#160; Thanks again, to Tobias for the suggestion.\n\nIn my last post, I outlined the powerful features that are available in the [ViewModelSupport](http://houseofbilz.com/archive/2010/05/08/adventures-in-mvvm-ndash-my-viewmodel-base.aspx).&#160; It takes advantage of the dynamic features of C# 4.0 (as well as some 3.0 goodies) to help eliminate the plumbing that often comes with writing ViewModels.&#160; If you are interested in learning about the capabilities, please take a look at that post and look at the code on [CodePlex](http://viewmodelsupport.codeplex.com/). \n\nWhen I wrote about the ViewModel base class, I complained that the features did not work in Silverlight because as of 4.0, it does not support binding to dynamic properties.&#160; Although I still think this is a bummer, I am happy to say that there is a workaround.&#160; In the Silverlight version of my base class, I include a string indexer for getting and setting properties that lets you bind to dynamic properties in the **ViewModelBase**, especially the convention-based commands that the base class supports.\n\nFor example, with a View Model that looks like this:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:a35f8fe8-6cfc-4037-bf17-826c5f411156\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> ExampleViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Execute_MyCommand()\n    {\n        Set(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Text</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">, </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Foo</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nThe view can bind to the dynamic property (**Text**) and the convention-based command (**MyCommand**) with the following XAML.\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:dc0daf96-5b7f-491d-b195-aa333e5cc650\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#E4E4E4;white-space:-moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap; white-space: pre-wrap; word-wrap: break-word;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding [Text]}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Margin</span><span style=\"color: #0000FF;\">=\"5\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">Button </span><span style=\"color: #FF0000;\">Content</span><span style=\"color: #0000FF;\">=\"Execute MyCommand\"</span><span style=\"color: #FF0000;\"> Command</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding [MyCommand]}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Margin</span><span style=\"color: #0000FF;\">=\"5\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nNotice the square brackets around the name of the property.&#160; Of course, it is not as perfect as binding to **Text** and **MyCommand** like you can in WPF, but it is better than having a failed feature.&#160; This allows you to share your ViewModels between WPF and Silverlight very easily. \n\n&lt;BeatDeadHorse&gt;Hopefully, in Silverlight 5.0, we will see binding to dynamic properties more directly????&lt;/BeatDeadHorse&gt;","slug":"adventures-in-mvvm-my-viewmodel-base-silverlight-support","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9h9003w6eulc64sd2q8"},{"title":"Adventures in MVVM – My ViewModel Base","id":"94","date":"2010-05-08T18:02:00.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2010%2F05%2F08%2Fadventures-in-mvvm-ndash-my-viewmodel-base.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-My-ViewModel-Base) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2010%2f05%2f08%2fadventures-in-mvvm-ndash-my-viewmodel-base.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2010%2f05%2f08%2fadventures-in-mvvm-ndash-my-viewmodel-base.aspx)\n\nFirst, I’d like to say: **THIS IS NOT A NEW MVVM FRAMEWORK.** I tend to believe that MVVM support code should be specific to the system you are building and the developers working on it.&#160; I have yet to find an MVVM framework that does everything I want it to without doing too much.&#160; Don’t get me wrong… there are some good frameworks out there.&#160; I just like to pick and choose things that make sense for me.&#160; As of Silveright 4, they don’t support binding to dynamic properties, so some of the capabilities are lost, but with a [little hacking](http://houseofbilz.com/archive/2010/05/14/adventures-in-mvvm-ndash-my-viewmodel-base-ndash-silverlight-support.aspx) we can make it work.\n\nThat being said, I want to share my ViewModel base class with the world.&#160; I have had several conversations with people about the problems I have solved using this ViewModel base.&#160; A while back, I posted an article about some experiments with a “[Rails Inspired ViewModel](http://geekswithblogs.net/HouseOfBilz/archive/2009/10/20/adventures-in-mvvm-ndash-a-rails-inspired-viewmodel.aspx)”.&#160; What followed from those ideas was a ViewModel base class that I take with me and use in my projects.&#160; It has a lot of features, all designed to reduce the friction in writing view models. I have put the code out on Codeplex under the project: [ViewModelSupport](http://viewmodelsupport.codeplex.com).\n\nFinally, this article focuses on the ViewModel and only glosses over the View and the Model.&#160; Without all three, you don’t have MVVM.&#160; But this base class is for the ViewModel, so that is what I am focusing on.\n\n**Features:**\n\n1.  [Automatic Command Plumbing](#VMB.1)2.  [Property Change Notification](#VMB.2)3.  [Strongly Typed Property Getter/Setters](#VMB.3)4.  [Dynamic Properties](#VMB.4)5.  [Default Property values](#VMB.5)6.  [Derived Properties](#VMB.6)7.  [Automatic Method Execution](#VMB.7)8.  [Command CanExecute Change Notification](#VMB.8)9.  [Design-Time Detection](#VMB.9)10.  [What about Silverlight?](#VMB.10)  \n\n#### Automatic Command Plumbing\n\nThis feature takes the plumbing out of creating commands.&#160; The common pattern for commands in a ViewModel is to have an Execute method as well as an optional CanExecute method.&#160; To plumb that together, you create an ICommand Property, and set it in the constructor like so:\n\n**Before**\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:a6cfb050-745a-4872-9efc-942325c00278\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> AutomaticCommandViewModel\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> AutomaticCommandViewModel()\n    {\n        MyCommand </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> DelegateCommand(Execute_MyCommand, CanExecute_MyCommand);\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Execute_MyCommand()\n    {\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Do something</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">bool</span><span style=\"color: #000000\"> CanExecute_MyCommand()\n    {\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Are we in a state to do something?</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">;\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> DelegateCommand MyCommand { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nWith the base class, this plumbing is automatic and the property (MyCommand of type ICommand) is created for you.&#160; The base class uses the convention that methods be prefixed with Execute_ and CanExecute_ in order to be plumbed into commands with the property name after the prefix.&#160; You are left to be expressive with your behavior without the plumbing.&#160; If you are wondering how CanExecuteChanged is raised, see the later section “[Command CanExecute Change Notification](#VMB.8)”.\n\n**After**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:14a1461b-d14f-47d5-ba10-5ad497c164be\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> AutomaticCommandViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Execute_MyCommand()\n    {\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Do something</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">bool</span><span style=\"color: #000000\"> CanExecute_MyCommand()\n    {\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Are we in a state to do something?</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">;\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.2\">Property Change Notification</a>\n\nOne thing that always kills me when implementing ViewModels is how to make properties that notify when they change (via the INotifyPropertyChanged interface).&#160; There have been many attempts to make this more automatic.&#160; My base class includes one option.&#160; There are others, but I feel like this works best for me.\n\nThe common pattern (without my base class) is to create a private backing store for the variable and specify a getter that returns the private field.&#160; The setter will set the private field and fire an event that notifies the change, only if the value has changed.\n\n**Before**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:3d02bc74-f4a8-4969-b4da-1dfa02a22ac3\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> PropertyHelpersViewModel : INotifyPropertyChanged\n{\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> text;\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Text\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> text; }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n        {\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\">(text </span><span style=\"color: #000000\">!=</span><span style=\"color: #000000\"> value)\n            {\n                text </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n                RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Text</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n            }\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> RaisePropertyChanged(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> propertyName)\n    {\n        var handlers </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> PropertyChanged;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\">(handlers </span><span style=\"color: #000000\">!=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n            handlers(</span><span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyChangedEventArgs(propertyName));\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">event</span><span style=\"color: #000000\"> PropertyChangedEventHandler PropertyChanged;\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nThis way of defining properties is error-prone and tedious.&#160; Too much plumbing.&#160; My base class eliminates much of that plumbing with the same functionality:\n\n**After**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:12c2d3ea-f186-4de4-b580-4fb3f9d20391\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> PropertyHelpersViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Text\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Text</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Text</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">, value);}\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### \n\n#### &#160;\n\n#### <a name=\"VMB.3\">Strongly Typed Property Getters/Setters</a>\n\nIt turns out that we can do better than that.&#160; We are using a strongly typed language where the use of “Magic Strings” is often frowned upon.&#160; Lets make the names in the getters and setters strongly typed:\n\n**A refinement**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:59293d3a-dbaa-4b14-a9b0-b64cc37fd4bd\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> PropertyHelpersViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Text\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Text); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Text, value); }\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.4\">Dynamic Properties</a>\n\nIn C# 4.0, we have the ability to program statically OR dynamically.&#160; This base class lets us leverage the powerful dynamic capabilities in our ecosystem. (This is how the automatic commands are implemented, BTW)&#160; By calling Set(“Foo”, 1), you have now created a dynamic property called Foo.&#160; It can be bound against like any static property.&#160; The opportunities are endless.&#160; One great way to exploit this behavior is if you have a customizable view engine with templates that bind to properties defined by the user.&#160; The base class just needs to create the dynamic properties at runtime from information in the model, and the custom template can bind even though the static properties do not exist. All dynamic properties still benefit from the notifiable capabilities that static properties do.\n\nFor any nay-sayers out there that don’t like using the dynamic features of C#, just remember this: the act of binding the View to a ViewModel is dynamic already.&#160; Why not exploit it?&#160; Get over it :)\n\n**Just declare the property dynamically**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:0af4d350-5601-4c6f-8bcc-78588703effe\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> DynamicPropertyViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> DynamicPropertyViewModel()\n    {\n        Set(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Foo</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">, </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Bar</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n**Then reference it normally**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b3f2f644-990c-4f03-96a4-87f382fd00f9\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TextBlock </span><span style=\"color: #ff0000\">Text</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding Foo}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #ff0000\"> </span><span style=\"color: #0000ff\">/&gt;</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.5\">Default Property Values</a>\n\nThe Get() method also allows for default properties to be set.&#160; Don’t set them in the constructor.&#160; Set them in the property and keep the related code together:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:c2dcd9b5-fd18-42da-84e4-c1ae7486ab03\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Text\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Text, </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">This is the default value</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">); }\n    </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Text, value);}\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.6\">Derived Properties</a>\n\nThis is something I [blogged about a while back](http://houseofbilz.com/archive/2009/11/14/adventures-in-mvvm----dependant-properties-with-inotifypropertychanged.aspx) in more detail.&#160; This feature came from the chaining of property notifications when one property affects the results of another, like this:\n\n#### \n\n**Before**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:175eb2b2-8c26-430f-9416-944d4613c1a8\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> DependantPropertiesViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">double</span><span style=\"color: #000000\"> Score\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n        {\n            Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score, value);\n            RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Percentage</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n            RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Output</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> Percentage\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\">)(</span><span style=\"color: #800080\">100</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #000000\"> Score); }\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Output\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">You scored </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #000000\"> Percentage </span><span style=\"color: #000000\">+</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">%.</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">; }\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nThe problem is: The setter for Score has to be responsible for notifying the world that Percentage and Output have also changed.&#160; This, to me, is backwards.&#160;&#160;&#160; It certainly violates the “[Single Responsibility Principle](http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod).” I have been bitten in the rear more than once by problems created from code like this.&#160; What we really want to do is invert the dependency.&#160; Let the Percentage property declare that it changes when the Score Property changes.\n\n**After**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:462bd99f-148f-4775-ae03-c6cf12f3fd98\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> DependantPropertiesViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">double</span><span style=\"color: #000000\"> Score\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score, value); }\n    }\n\n    [DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Score</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> Percentage\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\">)(</span><span style=\"color: #800080\">100</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #000000\"> Score); }\n    }\n\n    [DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Percentage</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Output\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">You scored </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #000000\"> Percentage </span><span style=\"color: #000000\">+</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">%.</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">; }\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.7\">Automatic Method Execution</a>\n\nThis one is extremely similar to the previous, but it deals with method execution as opposed to property.&#160; When you want to execute a method triggered by property changes, let the method declare the dependency instead of the other way around.\n\n**Before**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:96b9f4c0-884b-4ade-bb65-4b1954af6e4e\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> DependantMethodsViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">double</span><span style=\"color: #000000\"> Score\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n        {\n            Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score, value);\n            WhenScoreChanges();\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> WhenScoreChanges()\n    {\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Handle this case</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n**After**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b4314cc0-8387-4bb8-81db-e23c0cd1372c\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #000000\">    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> DependantMethodsViewModel : ViewModelBase\n    {\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">double</span><span style=\"color: #000000\"> Score\n        {\n            </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score); }\n            </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score, value); }\n        }\n\n        [DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Score</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> WhenScoreChanges()\n        {\n            </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Handle this case</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">        }\n    }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.8\">Command CanExecute Change Notification</a>\n\nBack to Commands.&#160; One of the responsibilities of commands that implement ICommand – it must fire an event declaring that CanExecute() needs to be re-evaluated.&#160; I wanted to wait until we got past a few concepts before explaining this behavior.&#160; You can use the same mechanism here to fire off the change.&#160; In the CanExecute_ method, declare the property that it depends upon.&#160; When that property changes, the command will fire a CanExecuteChanged event, telling the View to re-evaluate the state of the command.&#160; The View will make appropriate adjustments, like disabling the button.\n\n**DependsUpon works on CanExecute methods as well**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:81b91521-a967-4457-af0c-742b0b65c47c\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> CanExecuteViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Execute_MakeLower()\n    {\n        Output </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Input.ToLower();\n    }\n\n    [DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Input</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">bool</span><span style=\"color: #000000\"> CanExecute_MakeLower()\n    {\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">!</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">.IsNullOrWhiteSpace(Input);\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Input\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Input); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Input, value);}\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Output\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Output); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Output, value); }\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n&#160;\n\n#### <a name=\"VMB.9\">Design-Time Detection</a>\n\nIf you want to add design-time data to your ViewModel, the base class has a property that lets you ask if you are in the designer.&#160; You can then set some default values that let your designer see what things might look like in runtime.\n\n**Use the IsInDesignMode property**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1a20699e-0a10-4a8a-949c-c10753540af1\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> DependantPropertiesViewModel()\n{\n    </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\">(IsInDesignMode)\n    {\n        Score </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> .</span><span style=\"color: #800080\">5</span><span style=\"color: #000000\">;\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.10\">What About Silverlight?</a>\n\nAlthough you cannot bind directly to dynamic properties and convention-based commands, you CAN bind using a value converter.&#160; This little hack is explained in more detail in my [next post](http://houseofbilz.com/archive/2010/05/14/adventures-in-mvvm-ndash-my-viewmodel-base-ndash-silverlight-support.aspx).&#160; Other than that slight difference, all of these features work in Silverlight just as they do in WPF.&#160; You don’t need to code your ViewModels any differently to get it to work, which aids in the sharing of behavior between WPF and Silverlight.\n\n&#160;\n\n#### Good to go?\n\nSo, that concludes the feature explanation of my ViewModel base class.&#160; Feel free to take it, fork it, whatever.&#160; It is [hosted on CodePlex](http://viewmodelsupport.codeplex.com).&#160; When I find other useful additions, I will add them to the public repository.&#160; I use this base class every day.&#160; It is mature, and well tested.&#160; If, however, you find any problems with it, please let me know!&#160; Also, feel free to suggest patches to me via the CodePlex site.&#160; :)","source":"_posts/2010-05-08-adventures-in-mvvm-my-viewmodel-base.md","raw":"---\ntitle: Adventures in MVVM – My ViewModel Base\ntags:\n  - MVVM\n  - Silverlight\n  - VIew Model Support\n  - WPF\nid: 94\ncategories:\n  - Uncategorized\ndate: 2010-05-08 14:02:00\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchive%2F2010%2F05%2F08%2Fadventures-in-mvvm-ndash-my-viewmodel-base.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-My-ViewModel-Base) [![kick it on DotNetKicks.com](http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2010%2f05%2f08%2fadventures-in-mvvm-ndash-my-viewmodel-base.aspx)](http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fhouseofbilz.com%2farchive%2f2010%2f05%2f08%2fadventures-in-mvvm-ndash-my-viewmodel-base.aspx)\n\nFirst, I’d like to say: **THIS IS NOT A NEW MVVM FRAMEWORK.** I tend to believe that MVVM support code should be specific to the system you are building and the developers working on it.&#160; I have yet to find an MVVM framework that does everything I want it to without doing too much.&#160; Don’t get me wrong… there are some good frameworks out there.&#160; I just like to pick and choose things that make sense for me.&#160; As of Silveright 4, they don’t support binding to dynamic properties, so some of the capabilities are lost, but with a [little hacking](http://houseofbilz.com/archive/2010/05/14/adventures-in-mvvm-ndash-my-viewmodel-base-ndash-silverlight-support.aspx) we can make it work.\n\nThat being said, I want to share my ViewModel base class with the world.&#160; I have had several conversations with people about the problems I have solved using this ViewModel base.&#160; A while back, I posted an article about some experiments with a “[Rails Inspired ViewModel](http://geekswithblogs.net/HouseOfBilz/archive/2009/10/20/adventures-in-mvvm-ndash-a-rails-inspired-viewmodel.aspx)”.&#160; What followed from those ideas was a ViewModel base class that I take with me and use in my projects.&#160; It has a lot of features, all designed to reduce the friction in writing view models. I have put the code out on Codeplex under the project: [ViewModelSupport](http://viewmodelsupport.codeplex.com).\n\nFinally, this article focuses on the ViewModel and only glosses over the View and the Model.&#160; Without all three, you don’t have MVVM.&#160; But this base class is for the ViewModel, so that is what I am focusing on.\n\n**Features:**\n\n1.  [Automatic Command Plumbing](#VMB.1)2.  [Property Change Notification](#VMB.2)3.  [Strongly Typed Property Getter/Setters](#VMB.3)4.  [Dynamic Properties](#VMB.4)5.  [Default Property values](#VMB.5)6.  [Derived Properties](#VMB.6)7.  [Automatic Method Execution](#VMB.7)8.  [Command CanExecute Change Notification](#VMB.8)9.  [Design-Time Detection](#VMB.9)10.  [What about Silverlight?](#VMB.10)  \n\n#### Automatic Command Plumbing\n\nThis feature takes the plumbing out of creating commands.&#160; The common pattern for commands in a ViewModel is to have an Execute method as well as an optional CanExecute method.&#160; To plumb that together, you create an ICommand Property, and set it in the constructor like so:\n\n**Before**\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:a6cfb050-745a-4872-9efc-942325c00278\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> AutomaticCommandViewModel\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> AutomaticCommandViewModel()\n    {\n        MyCommand </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> DelegateCommand(Execute_MyCommand, CanExecute_MyCommand);\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Execute_MyCommand()\n    {\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Do something</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">bool</span><span style=\"color: #000000\"> CanExecute_MyCommand()\n    {\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Are we in a state to do something?</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">;\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> DelegateCommand MyCommand { </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\">; </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nWith the base class, this plumbing is automatic and the property (MyCommand of type ICommand) is created for you.&#160; The base class uses the convention that methods be prefixed with Execute_ and CanExecute_ in order to be plumbed into commands with the property name after the prefix.&#160; You are left to be expressive with your behavior without the plumbing.&#160; If you are wondering how CanExecuteChanged is raised, see the later section “[Command CanExecute Change Notification](#VMB.8)”.\n\n**After**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:14a1461b-d14f-47d5-ba10-5ad497c164be\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> AutomaticCommandViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Execute_MyCommand()\n    {\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Do something</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">bool</span><span style=\"color: #000000\"> CanExecute_MyCommand()\n    {\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Are we in a state to do something?</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">;\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.2\">Property Change Notification</a>\n\nOne thing that always kills me when implementing ViewModels is how to make properties that notify when they change (via the INotifyPropertyChanged interface).&#160; There have been many attempts to make this more automatic.&#160; My base class includes one option.&#160; There are others, but I feel like this works best for me.\n\nThe common pattern (without my base class) is to create a private backing store for the variable and specify a getter that returns the private field.&#160; The setter will set the private field and fire an event that notifies the change, only if the value has changed.\n\n**Before**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:3d02bc74-f4a8-4969-b4da-1dfa02a22ac3\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> PropertyHelpersViewModel : INotifyPropertyChanged\n{\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> text;\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Text\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> text; }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n        {\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\">(text </span><span style=\"color: #000000\">!=</span><span style=\"color: #000000\"> value)\n            {\n                text </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> value;\n                RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Text</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n            }\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> RaisePropertyChanged(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> propertyName)\n    {\n        var handlers </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> PropertyChanged;\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\">(handlers </span><span style=\"color: #000000\">!=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n            handlers(</span><span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> PropertyChangedEventArgs(propertyName));\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">event</span><span style=\"color: #000000\"> PropertyChangedEventHandler PropertyChanged;\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nThis way of defining properties is error-prone and tedious.&#160; Too much plumbing.&#160; My base class eliminates much of that plumbing with the same functionality:\n\n**After**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:12c2d3ea-f186-4de4-b580-4fb3f9d20391\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> PropertyHelpersViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Text\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #000000\">(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Text</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Text</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">, value);}\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### \n\n#### &#160;\n\n#### <a name=\"VMB.3\">Strongly Typed Property Getters/Setters</a>\n\nIt turns out that we can do better than that.&#160; We are using a strongly typed language where the use of “Magic Strings” is often frowned upon.&#160; Lets make the names in the getters and setters strongly typed:\n\n**A refinement**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:59293d3a-dbaa-4b14-a9b0-b64cc37fd4bd\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> PropertyHelpersViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Text\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Text); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Text, value); }\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.4\">Dynamic Properties</a>\n\nIn C# 4.0, we have the ability to program statically OR dynamically.&#160; This base class lets us leverage the powerful dynamic capabilities in our ecosystem. (This is how the automatic commands are implemented, BTW)&#160; By calling Set(“Foo”, 1), you have now created a dynamic property called Foo.&#160; It can be bound against like any static property.&#160; The opportunities are endless.&#160; One great way to exploit this behavior is if you have a customizable view engine with templates that bind to properties defined by the user.&#160; The base class just needs to create the dynamic properties at runtime from information in the model, and the custom template can bind even though the static properties do not exist. All dynamic properties still benefit from the notifiable capabilities that static properties do.\n\nFor any nay-sayers out there that don’t like using the dynamic features of C#, just remember this: the act of binding the View to a ViewModel is dynamic already.&#160; Why not exploit it?&#160; Get over it :)\n\n**Just declare the property dynamically**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:0af4d350-5601-4c6f-8bcc-78588703effe\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> DynamicPropertyViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> DynamicPropertyViewModel()\n    {\n        Set(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Foo</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">, </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Bar</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n**Then reference it normally**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b3f2f644-990c-4f03-96a4-87f382fd00f9\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TextBlock </span><span style=\"color: #ff0000\">Text</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding Foo}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #ff0000\"> </span><span style=\"color: #0000ff\">/&gt;</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.5\">Default Property Values</a>\n\nThe Get() method also allows for default properties to be set.&#160; Don’t set them in the constructor.&#160; Set them in the property and keep the related code together:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:c2dcd9b5-fd18-42da-84e4-c1ae7486ab03\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Text\n{\n    </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Text, </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">This is the default value</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">); }\n    </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Text, value);}\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.6\">Derived Properties</a>\n\nThis is something I [blogged about a while back](http://houseofbilz.com/archive/2009/11/14/adventures-in-mvvm----dependant-properties-with-inotifypropertychanged.aspx) in more detail.&#160; This feature came from the chaining of property notifications when one property affects the results of another, like this:\n\n#### \n\n**Before**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:175eb2b2-8c26-430f-9416-944d4613c1a8\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> DependantPropertiesViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">double</span><span style=\"color: #000000\"> Score\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n        {\n            Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score, value);\n            RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Percentage</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n            RaisePropertyChanged(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Output</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">);\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> Percentage\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\">)(</span><span style=\"color: #800080\">100</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #000000\"> Score); }\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Output\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">You scored </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #000000\"> Percentage </span><span style=\"color: #000000\">+</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">%.</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">; }\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\nThe problem is: The setter for Score has to be responsible for notifying the world that Percentage and Output have also changed.&#160; This, to me, is backwards.&#160;&#160;&#160; It certainly violates the “[Single Responsibility Principle](http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod).” I have been bitten in the rear more than once by problems created from code like this.&#160; What we really want to do is invert the dependency.&#160; Let the Percentage property declare that it changes when the Score Property changes.\n\n**After**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:462bd99f-148f-4775-ae03-c6cf12f3fd98\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> DependantPropertiesViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">double</span><span style=\"color: #000000\"> Score\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score, value); }\n    }\n\n    [DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Score</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> Percentage\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000ff\">int</span><span style=\"color: #000000\">)(</span><span style=\"color: #800080\">100</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #000000\"> Score); }\n    }\n\n    [DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Percentage</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Output\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">You scored </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #000000\"> Percentage </span><span style=\"color: #000000\">+</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">%.</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">; }\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.7\">Automatic Method Execution</a>\n\nThis one is extremely similar to the previous, but it deals with method execution as opposed to property.&#160; When you want to execute a method triggered by property changes, let the method declare the dependency instead of the other way around.\n\n**Before**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:96b9f4c0-884b-4ade-bb65-4b1954af6e4e\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> DependantMethodsViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">double</span><span style=\"color: #000000\"> Score\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">\n        {\n            Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score, value);\n            WhenScoreChanges();\n        }\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> WhenScoreChanges()\n    {\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Handle this case</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n**After**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b4314cc0-8387-4bb8-81db-e23c0cd1372c\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #000000\">    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> DependantMethodsViewModel : ViewModelBase\n    {\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">double</span><span style=\"color: #000000\"> Score\n        {\n            </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score); }\n            </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Score, value); }\n        }\n\n        [DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Score</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> WhenScoreChanges()\n        {\n            </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Handle this case</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">        }\n    }</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.8\">Command CanExecute Change Notification</a>\n\nBack to Commands.&#160; One of the responsibilities of commands that implement ICommand – it must fire an event declaring that CanExecute() needs to be re-evaluated.&#160; I wanted to wait until we got past a few concepts before explaining this behavior.&#160; You can use the same mechanism here to fire off the change.&#160; In the CanExecute_ method, declare the property that it depends upon.&#160; When that property changes, the command will fire a CanExecuteChanged event, telling the View to re-evaluate the state of the command.&#160; The View will make appropriate adjustments, like disabling the button.\n\n**DependsUpon works on CanExecute methods as well**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:81b91521-a967-4457-af0c-742b0b65c47c\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> CanExecuteViewModel : ViewModelBase\n{\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Execute_MakeLower()\n    {\n        Output </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> Input.ToLower();\n    }\n\n    [DependsUpon(</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #800000\">Input</span><span style=\"color: #800000\">&quot;</span><span style=\"color: #000000\">)]\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">bool</span><span style=\"color: #000000\"> CanExecute_MakeLower()\n    {\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #000000\">!</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\">.IsNullOrWhiteSpace(Input);\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Input\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Input); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Input, value);}\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> Output\n    {\n        </span><span style=\"color: #0000ff\">get</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> Get(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Output); }\n        </span><span style=\"color: #0000ff\">set</span><span style=\"color: #000000\"> { Set(() </span><span style=\"color: #000000\">=&gt;</span><span style=\"color: #000000\"> Output, value); }\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n&#160;\n\n#### <a name=\"VMB.9\">Design-Time Detection</a>\n\nIf you want to add design-time data to your ViewModel, the base class has a property that lets you ask if you are in the designer.&#160; You can then set some default values that let your designer see what things might look like in runtime.\n\n**Use the IsInDesignMode property**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:1a20699e-0a10-4a8a-949c-c10753540af1\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #e4e4e4; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> DependantPropertiesViewModel()\n{\n    </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\">(IsInDesignMode)\n    {\n        Score </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> .</span><span style=\"color: #800080\">5</span><span style=\"color: #000000\">;\n    }\n}</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n\n#### &#160;\n\n#### <a name=\"VMB.10\">What About Silverlight?</a>\n\nAlthough you cannot bind directly to dynamic properties and convention-based commands, you CAN bind using a value converter.&#160; This little hack is explained in more detail in my [next post](http://houseofbilz.com/archive/2010/05/14/adventures-in-mvvm-ndash-my-viewmodel-base-ndash-silverlight-support.aspx).&#160; Other than that slight difference, all of these features work in Silverlight just as they do in WPF.&#160; You don’t need to code your ViewModels any differently to get it to work, which aids in the sharing of behavior between WPF and Silverlight.\n\n&#160;\n\n#### Good to go?\n\nSo, that concludes the feature explanation of my ViewModel base class.&#160; Feel free to take it, fork it, whatever.&#160; It is [hosted on CodePlex](http://viewmodelsupport.codeplex.com).&#160; When I find other useful additions, I will add them to the public repository.&#160; I use this base class every day.&#160; It is mature, and well tested.&#160; If, however, you find any problems with it, please let me know!&#160; Also, feel free to suggest patches to me via the CodePlex site.&#160; :)","slug":"adventures-in-mvvm-my-viewmodel-base","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hb003z6eulz8s07sy1"},{"title":"Disabling Navigation Flicks in WPF","id":"102","date":"2010-06-02T16:32:00.000Z","_content":"\nI am currently working on a multi-touch application using WPF.&nbsp; One thing that has been irritating me with this development is an automatic navigation forward/back command that is bound to forward and backwards flicks.&nbsp; Many of my touch-based interactions were being thwarted by gestures picked up by WPF as navigation.&nbsp; I just wanted to disable this behavior. \n\nMy programmatic back/forward calls are not affected by this change, which is nice.&nbsp; Here is how I did it:&nbsp; In my main window, I added the following command bindings:\n <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:27adb24f-bf8c-4cad-a097-4e4bc315e86e\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:White;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">NavigationWindow.CommandBindings</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">CommandBinding </span><span style=\"color: #FF0000;\">Command</span><span style=\"color: #0000FF;\">=\"NavigationCommands.BrowseBack\"</span><span style=\"color: #FF0000;\"> Executed</span><span style=\"color: #0000FF;\">=\"DoNothing\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">CommandBinding </span><span style=\"color: #FF0000;\">Command</span><span style=\"color: #0000FF;\">=\"NavigationCommands.BrowseForward\"</span><span style=\"color: #FF0000;\"> Executed</span><span style=\"color: #0000FF;\">=\"DoNothing\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">NavigationWindow.CommandBindings</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n<style type=\"text/css\">csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }\n</style>\n\nThen, the **DoNothing **method in the code-behind does nothing:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:633c89eb-9164-493e-8dc2-ae730bc14a53\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#FFFFFF;overflow: auto;\"><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DoNothing(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, ExecutedRoutedEventArgs e) { }</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n<style type=\"text/css\">csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }\n</style>\n<pre class=\"csharpcode\"></pre>\n<style type=\"text/css\">csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }\n</style>\n\nThere may be a better way to do this, but I haven’t found one.","source":"_posts/2010-06-02-disabling-navigation-flicks-in-wpf.md","raw":"---\ntitle: Disabling Navigation Flicks in WPF\ntags:\n  - Navigation\n  - WPF\nid: 102\ncategories:\n  - Uncategorized\ndate: 2010-06-02 12:32:00\n---\n\nI am currently working on a multi-touch application using WPF.&nbsp; One thing that has been irritating me with this development is an automatic navigation forward/back command that is bound to forward and backwards flicks.&nbsp; Many of my touch-based interactions were being thwarted by gestures picked up by WPF as navigation.&nbsp; I just wanted to disable this behavior. \n\nMy programmatic back/forward calls are not affected by this change, which is nice.&nbsp; Here is how I did it:&nbsp; In my main window, I added the following command bindings:\n <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:27adb24f-bf8c-4cad-a097-4e4bc315e86e\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:White;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">NavigationWindow.CommandBindings</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">CommandBinding </span><span style=\"color: #FF0000;\">Command</span><span style=\"color: #0000FF;\">=\"NavigationCommands.BrowseBack\"</span><span style=\"color: #FF0000;\"> Executed</span><span style=\"color: #0000FF;\">=\"DoNothing\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">CommandBinding </span><span style=\"color: #FF0000;\">Command</span><span style=\"color: #0000FF;\">=\"NavigationCommands.BrowseForward\"</span><span style=\"color: #FF0000;\"> Executed</span><span style=\"color: #0000FF;\">=\"DoNothing\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">NavigationWindow.CommandBindings</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n<style type=\"text/css\">csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }\n</style>\n\nThen, the **DoNothing **method in the code-behind does nothing:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:633c89eb-9164-493e-8dc2-ae730bc14a53\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#FFFFFF;overflow: auto;\"><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> DoNothing(</span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> sender, ExecutedRoutedEventArgs e) { }</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n<style type=\"text/css\">csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }\n</style>\n<pre class=\"csharpcode\"></pre>\n<style type=\"text/css\">csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }\n</style>\n\nThere may be a better way to do this, but I haven’t found one.","slug":"disabling-navigation-flicks-in-wpf","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hc00426eultjk8d8tx"},{"title":"Adventures in MVVM – ViewModel Location and Creation","id":"104","date":"2010-06-04T16:34:00.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2010%2F06%2F04%2Fadventures-in-mvvm-ndash-viewmodel-location-and-creation.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-ViewModel-Location-and-Creation)\n\nIn this post, I am going to explore how I prefer to attach ViewModels to my Views.&#160; I have published the code to my [ViewModelSupport project on CodePlex](http://viewmodelsupport.codeplex.com/) in case you'd like to see how it works along with some examples. \n\n#### \n\n#### Some History\n\nMy approach to View-First ViewModel creation has evolved over time.&#160; I have constructed ViewModels in code-behind.&#160; I have instantiated ViewModels in the resources sectoin of the view. I have used Prism to resolve ViewModels via Dependency Injection. I have created attached properties that use Dependency Injection containers underneath.&#160; Of all these approaches, I continue to find issues either in composability, blendability or maintainability. \n\n[Laurent Bugnion](http://www.galasoft.ch/index.html) came up with a pretty good approach in [MVVM Light Toolkit](http://mvvmlight.codeplex.com/) with his ViewModelLocator, but as [John Papa](http://johnpapa.net/) points out, it has maintenance issues.&#160; John paired up with [Glen Block](http://codebetter.com/blogs/glenn.block/) to make the ViewModelLocator more generic by [using MEF to compose ViewModels](http://johnpapa.net/silverlight/simple-viewmodel-locator-for-mvvm-the-patients-have-left-the-asylum/).&#160; It is a great approach, but I don’t like baking in specific resolution technologies into the [ViewModelSupport](http://viewmodelsupport.codeplex.com/) project.\n\nI bring these people up, not to name drop, but to give them credit for the place I finally landed in my journey to resolve ViewModels.&#160; I have come up with my own version of the ViewModelLocator that is both generic and container agnostic.&#160; The solution is blendable, configurable and simple to use.&#160; Use any resolution mechanism you want: MEF, Unity, Ninject, Activator.Create, Lookup Tables, new, whatever.\n\n#### How to use the locator\n\n**1\\. Create a class to contain your resolution configuration: **\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:53877bce-4af1-4fe5-bef3-afdd8e35dcc1\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #ffffff; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> YourViewModelResolver: IViewModelResolver\n{\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> YourFavoriteContainer container </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> YourFavoriteContainer(); \n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> YourViewModelResolver()\n    {\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Configure your container</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">    } \n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> Resolve(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> viewModelName)\n    {\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> container.Resolve(viewModelName);        \n    }\n} </span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n<style type=\"text/css\">\n.csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>\n\nExamples of doing this are on CodePlex for [MEF](http://viewmodelsupport.codeplex.com/SourceControl/changeset/view/47335#892520), [Unity](http://viewmodelsupport.codeplex.com/SourceControl/changeset/view/47335#892521) and [Activator.CreateInstance](http://viewmodelsupport.codeplex.com/SourceControl/changeset/view/47335#892522).\n\n**2\\. Create your ViewModelLocator with your custom resolver in App.xaml: **\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:6f6f210b-a908-4946-aa62-7f1b694d7376\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #ffffff; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">VMS:ViewModelLocator </span><span style=\"color: #ff0000\">x:Key</span><span style=\"color: #0000ff\">=&quot;ViewModelLocator&quot;</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n    </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">VMS:ViewModelLocator.Resolver</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n        </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">local:YourViewModelResolver </span><span style=\"color: #0000ff\">/&gt;</span><span style=\"color: #000000\">\n    </span><span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">VMS:ViewModelLocator.Resolver</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n</span><span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">VMS:ViewModelLocator</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\"> </span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n<style type=\"text/css\">\n.csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>\n\n**3\\. Hook up your data context whenever you want a ViewModel (WPF):**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:71e2aa4b-e6cd-4edd-ae0a-adb84db45363\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #ffffff; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Border </span><span style=\"color: #ff0000\">DataContext</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding YourViewModelName, Source={StaticResource ViewModelLocator}}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\"> </span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n<style type=\"text/css\">\n\n.csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>\n\nThis example uses dynamic properties on the ViewModelLocator and passes the name to your resolver to figure out how to compose it.\n\n**4\\. What about Silverlight? **\n\nGood question.&#160; You can't bind to dynamic properties in Silverlight 4 (crossing my fingers for Silverlight 5), but you CAN use string indexing:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:f77d703c-fc69-4ff2-9ceb-40e6930b3d99\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #ffffff; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Border </span><span style=\"color: #ff0000\">DataContext</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding [YourViewModelName], Source={StaticResource ViewModelLocator}}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\"> </span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n<style type=\"text/css\">\n\n.csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>\n\nBut, as John Papa points out in his article, there is a silly bug in Silverlight 4 (as of this writing) that will call into the indexer 6 times when it binds.&#160; While this is little more than a nuisance when getting most properties, it can be much more of an issue when you are resolving ViewModels six times.&#160; If this gets in your way, the solution (as [pointed out](http://johnpapa.net/silverlight/simple-viewmodel-locator-for-mvvm-the-patients-have-left-the-asylum/) by John), is to use an IndexConverter (instantiated in App.xaml and also included in the project):\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:4e79efae-73d0-48b7-a376-8996fe872c08\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #ffffff; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Border </span><span style=\"color: #ff0000\">DataContext</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding Source={StaticResource ViewModelLocator}, \n    Converter={StaticResource IndexConverter}, ConverterParameter=YourViewModelName}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n<style type=\"text/css\">\n\n.csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>\n\nIt is a bit uglier than the WPF version (this method will also work in WPF if you prefer), but it is still not all that bad. \n\n#### Conclusion\n\nThis approach works really well (I suppose I am a bit biased).&#160; It allows for composability from any mechanisim you choose.&#160; It is blendable (consider serving up different objects in Design Mode if you wish... or different constructors… whatever makes sense to you).&#160; It works in Cider.&#160; It is configurable.&#160; It is flexible.&#160; It is the best way I have found to manage View-First ViewModel hookups.&#160; Thanks to the guys mentioned in this article for getting me to something I love using.&#160; Enjoy.","source":"_posts/2010-06-04-adventures-in-mvvm-viewmodel-location-and-creation.md","raw":"---\ntitle: Adventures in MVVM – ViewModel Location and Creation\ntags:\n  - MVVM\n  - ViewModel Support\nid: 104\ncategories:\n  - Uncategorized\ndate: 2010-06-04 12:34:00\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.com%2Farchive%2F2010%2F06%2F04%2Fadventures-in-mvvm-ndash-viewmodel-location-and-creation.aspx)](http://dotnetshoutout.com/Adventures-in-MVVM-ViewModel-Location-and-Creation)\n\nIn this post, I am going to explore how I prefer to attach ViewModels to my Views.&#160; I have published the code to my [ViewModelSupport project on CodePlex](http://viewmodelsupport.codeplex.com/) in case you'd like to see how it works along with some examples. \n\n#### \n\n#### Some History\n\nMy approach to View-First ViewModel creation has evolved over time.&#160; I have constructed ViewModels in code-behind.&#160; I have instantiated ViewModels in the resources sectoin of the view. I have used Prism to resolve ViewModels via Dependency Injection. I have created attached properties that use Dependency Injection containers underneath.&#160; Of all these approaches, I continue to find issues either in composability, blendability or maintainability. \n\n[Laurent Bugnion](http://www.galasoft.ch/index.html) came up with a pretty good approach in [MVVM Light Toolkit](http://mvvmlight.codeplex.com/) with his ViewModelLocator, but as [John Papa](http://johnpapa.net/) points out, it has maintenance issues.&#160; John paired up with [Glen Block](http://codebetter.com/blogs/glenn.block/) to make the ViewModelLocator more generic by [using MEF to compose ViewModels](http://johnpapa.net/silverlight/simple-viewmodel-locator-for-mvvm-the-patients-have-left-the-asylum/).&#160; It is a great approach, but I don’t like baking in specific resolution technologies into the [ViewModelSupport](http://viewmodelsupport.codeplex.com/) project.\n\nI bring these people up, not to name drop, but to give them credit for the place I finally landed in my journey to resolve ViewModels.&#160; I have come up with my own version of the ViewModelLocator that is both generic and container agnostic.&#160; The solution is blendable, configurable and simple to use.&#160; Use any resolution mechanism you want: MEF, Unity, Ninject, Activator.Create, Lookup Tables, new, whatever.\n\n#### How to use the locator\n\n**1\\. Create a class to contain your resolution configuration: **\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:53877bce-4af1-4fe5-bef3-afdd8e35dcc1\" class=\"wlWriterSmartContent\">   <pre style=\"background-color: #ffffff; overflow: auto\"><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> YourViewModelResolver: IViewModelResolver\n{\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> YourFavoriteContainer container </span><span style=\"color: #000000\">=</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> YourFavoriteContainer(); \n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> YourViewModelResolver()\n    {\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Configure your container</span><span style=\"color: #008000\">\n</span><span style=\"color: #000000\">    } \n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000ff\">object</span><span style=\"color: #000000\"> Resolve(</span><span style=\"color: #0000ff\">string</span><span style=\"color: #000000\"> viewModelName)\n    {\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> container.Resolve(viewModelName);        \n    }\n} </span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n<style type=\"text/css\">\n.csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>\n\nExamples of doing this are on CodePlex for [MEF](http://viewmodelsupport.codeplex.com/SourceControl/changeset/view/47335#892520), [Unity](http://viewmodelsupport.codeplex.com/SourceControl/changeset/view/47335#892521) and [Activator.CreateInstance](http://viewmodelsupport.codeplex.com/SourceControl/changeset/view/47335#892522).\n\n**2\\. Create your ViewModelLocator with your custom resolver in App.xaml: **\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:6f6f210b-a908-4946-aa62-7f1b694d7376\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #ffffff; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">VMS:ViewModelLocator </span><span style=\"color: #ff0000\">x:Key</span><span style=\"color: #0000ff\">=&quot;ViewModelLocator&quot;</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n    </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">VMS:ViewModelLocator.Resolver</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n        </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">local:YourViewModelResolver </span><span style=\"color: #0000ff\">/&gt;</span><span style=\"color: #000000\">\n    </span><span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">VMS:ViewModelLocator.Resolver</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n</span><span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">VMS:ViewModelLocator</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\"> </span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n<style type=\"text/css\">\n.csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>\n\n**3\\. Hook up your data context whenever you want a ViewModel (WPF):**\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:71e2aa4b-e6cd-4edd-ae0a-adb84db45363\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #ffffff; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Border </span><span style=\"color: #ff0000\">DataContext</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding YourViewModelName, Source={StaticResource ViewModelLocator}}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\"> </span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n<style type=\"text/css\">\n\n.csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>\n\nThis example uses dynamic properties on the ViewModelLocator and passes the name to your resolver to figure out how to compose it.\n\n**4\\. What about Silverlight? **\n\nGood question.&#160; You can't bind to dynamic properties in Silverlight 4 (crossing my fingers for Silverlight 5), but you CAN use string indexing:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:f77d703c-fc69-4ff2-9ceb-40e6930b3d99\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #ffffff; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Border </span><span style=\"color: #ff0000\">DataContext</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding [YourViewModelName], Source={StaticResource ViewModelLocator}}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\"> </span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n<style type=\"text/css\">\n\n.csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>\n\nBut, as John Papa points out in his article, there is a silly bug in Silverlight 4 (as of this writing) that will call into the indexer 6 times when it binds.&#160; While this is little more than a nuisance when getting most properties, it can be much more of an issue when you are resolving ViewModels six times.&#160; If this gets in your way, the solution (as [pointed out](http://johnpapa.net/silverlight/simple-viewmodel-locator-for-mvvm-the-patients-have-left-the-asylum/) by John), is to use an IndexConverter (instantiated in App.xaml and also included in the project):\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:4e79efae-73d0-48b7-a376-8996fe872c08\" class=\"wlWriterSmartContent\">\n  <pre style=\"background-color: #ffffff; overflow: auto\"><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Border </span><span style=\"color: #ff0000\">DataContext</span><span style=\"color: #0000ff\">=&quot;</span><span style=\"color: #808000\">{Binding Source={StaticResource ViewModelLocator}, \n    Converter={StaticResource IndexConverter}, ConverterParameter=YourViewModelName}</span><span style=\"color: #0000ff\">&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n\n<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com -->\n\n</div>\n<style type=\"text/css\">\n\n.csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>\n\nIt is a bit uglier than the WPF version (this method will also work in WPF if you prefer), but it is still not all that bad. \n\n#### Conclusion\n\nThis approach works really well (I suppose I am a bit biased).&#160; It allows for composability from any mechanisim you choose.&#160; It is blendable (consider serving up different objects in Design Mode if you wish... or different constructors… whatever makes sense to you).&#160; It works in Cider.&#160; It is configurable.&#160; It is flexible.&#160; It is the best way I have found to manage View-First ViewModel hookups.&#160; Thanks to the guys mentioned in this article for getting me to something I love using.&#160; Enjoy.","slug":"adventures-in-mvvm-viewmodel-location-and-creation","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hd00466eule93m8z1c"},{"title":"Adventures in Ruby MVVM – Firing Events from Ruby","id":"124","date":"2010-06-14T17:34:45.000Z","_content":"\n#### \n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F06%2F14%2Fadventures-in-ruby-mvvm-firing-events-from-ruby%2F)](http://dotnetshoutout.com/Adventures-in-Ruby-MVVM-Firing-Events-from-Ruby)\n\n### My Experiment:\n\nCan I move over to Ruby as my primary programming language when developing WPF and Silverlight applications?&#160; I have been playing around with what it would mean to use Ruby to write my ViewModels, which would also make it easier to incorporate models using Ruby.\n\nMy next few blog posts will revolve around some things I have learned with this experiment.&#160; As described in my disclaimer, I am a bit of a hack when it comes to Ruby.&#160; There are probably better ways to do what I am suggesting.&#160; If so, feel free to call me out.&#160; I won’t mind.&#160; Seriously. \n\n### INotifyPropertyChanged\n\nSo, if I am going to write ViewModels in Ruby, the first thing is to implement **INotifyPropertyChanged**, which is an interface that includes one event.&#160; It is used by WPF and SIlverlight to update the UI when something changes:\n  <pre class=\"csharpcode\"><span class=\"kwrd\">public</span> <span class=\"kwrd\">interface</span> INotifyPropertyChanged\n{\n    <span class=\"kwrd\">event</span> PropertyChangedEventHandler PropertyChanged;\n}</pre>\n<style type=\"text/css\">\n\n.csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>\n\nBut… how do I define events from Ruby?&#160; It’s not like Ruby has events as a language feature.&#160; As it turns out, in C# for every event (Foo), two methods are created: **add_Foo()** and **remove_Foo()** which are mapped from **Foo += handler** and** Foo –= handler**.&#160; So, to get the **PropertyChanged** event methods implemented in Ruby, I just implement the **add_** and **remove_** methods.&#160; Following is the full implementation of a Ruby class that implements **INotifyPropertyChanged**:\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">class</span> TestClass\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    include System::ComponentModel::INotifyPropertyChanged  \n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> initialize\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        @handlers = []\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> add_PropertyChanged(handler)\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        @handlers &lt;&lt; handler\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> remove_PropertyChanged(handler)\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        @handlers.delete(handler)\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> PropertyChanged(sender, args)\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        @handlers.each { |h| h.invoke(sender, args) }\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">end</span></pre></pre>\n\nSo, with that, the Ruby code can send an event to .Net code by calling **PropertyChanged()**.&#160; \n\n### But… Seriously… Lets Metaprogram, Shall We?\n\nThe previous code is kind of awkward.&#160; Every time you want to declare an event, you have to write this code?\n\nOf course not.&#160; This is Ruby.&#160; We have metaprogramming!&#160; Lets create some code to generate this code.&#160; I talked with a ruby developer friend of mine, [Toby Tripp](http://twitter.com/tobytripp), and he helped me get to this mixin code that will generate the methods for you:\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">module</span> DotNetEvents\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">module</span> ClassMethods\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> declare_event( *events )\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      events.each <span style=\"color: #0000ff\">do</span> |event|\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        define_handler_methods( event )\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> define_handler_methods( event )\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      event_name = event.to_s.<span style=\"color: #00008b\">gsub</span>(/(?:^|_)(.)/) { $1.upcase }\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      class_eval &lt;&lt;-EOS\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">def</span> handlers( event_name )\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          @event_handlers ||= [Hash](http://www.ruby-doc.org/docs/rdoc/1.9/classes/Hash.html).new\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          @event_handlers[ event_name ] ||= []\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">def</span> add_<span style=\"color: #008000\">#{event_name}( handler )</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          handlers( :<span style=\"color: #008000\">#{event_name} ) &lt;&lt; handler</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">def</span> remove_<span style=\"color: #008000\">#{event_name}( handler )</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          handlers( :<span style=\"color: #008000\">#{event_name} ).delete handler</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">def</span> <span style=\"color: #008000\">#{event_name}( sender, args )</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          handlers( :<span style=\"color: #008000\">#{event_name} ).each do |handler|</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">            handler.invoke sender, args\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      EOS\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">def</span> <span style=\"color: #0000ff\">self</span>.included(receiver)\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    receiver.extend ClassMethods\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span></pre></pre>\n\nNow that we have this **declare_event** method, we can use it to define events.&#160; Just implement the interface, and declare the event:\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">class</span> TestClass\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  include DotNetEvents\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  include System::ComponentModel::INotifyPropertyChanged  \n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  declare_event :PropertyChanged\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span></pre></pre>\n\nNote that I have, indeed, tested this with WPF.&#160; The WPF system properly hooks up the event and when the Ruby code fires it, the UI gets updated.\n\nFrom here, I can build my ViewModel base class in Ruby.&#160; Some things to solve still: making notification of PropertyChanged events easy, commands, data binding, ViewModel hookups, etc.&#160; But, at least, I am on my way :)","source":"_posts/2010-06-14-adventures-in-ruby-mvvm-firing-events-from-ruby.md","raw":"---\ntitle: Adventures in Ruby MVVM – Firing Events from Ruby\ntags:\n  - MVVM\n  - Ruby\n  - Silverlight\n  - WPF\nid: 124\ncategories:\n  - Uncategorized\ndate: 2010-06-14 13:34:45\n---\n\n#### \n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F06%2F14%2Fadventures-in-ruby-mvvm-firing-events-from-ruby%2F)](http://dotnetshoutout.com/Adventures-in-Ruby-MVVM-Firing-Events-from-Ruby)\n\n### My Experiment:\n\nCan I move over to Ruby as my primary programming language when developing WPF and Silverlight applications?&#160; I have been playing around with what it would mean to use Ruby to write my ViewModels, which would also make it easier to incorporate models using Ruby.\n\nMy next few blog posts will revolve around some things I have learned with this experiment.&#160; As described in my disclaimer, I am a bit of a hack when it comes to Ruby.&#160; There are probably better ways to do what I am suggesting.&#160; If so, feel free to call me out.&#160; I won’t mind.&#160; Seriously. \n\n### INotifyPropertyChanged\n\nSo, if I am going to write ViewModels in Ruby, the first thing is to implement **INotifyPropertyChanged**, which is an interface that includes one event.&#160; It is used by WPF and SIlverlight to update the UI when something changes:\n  <pre class=\"csharpcode\"><span class=\"kwrd\">public</span> <span class=\"kwrd\">interface</span> INotifyPropertyChanged\n{\n    <span class=\"kwrd\">event</span> PropertyChangedEventHandler PropertyChanged;\n}</pre>\n<style type=\"text/css\">\n\n.csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>\n\nBut… how do I define events from Ruby?&#160; It’s not like Ruby has events as a language feature.&#160; As it turns out, in C# for every event (Foo), two methods are created: **add_Foo()** and **remove_Foo()** which are mapped from **Foo += handler** and** Foo –= handler**.&#160; So, to get the **PropertyChanged** event methods implemented in Ruby, I just implement the **add_** and **remove_** methods.&#160; Following is the full implementation of a Ruby class that implements **INotifyPropertyChanged**:\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">class</span> TestClass\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    include System::ComponentModel::INotifyPropertyChanged  \n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> initialize\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        @handlers = []\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> add_PropertyChanged(handler)\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        @handlers &lt;&lt; handler\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> remove_PropertyChanged(handler)\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        @handlers.delete(handler)\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> PropertyChanged(sender, args)\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        @handlers.each { |h| h.invoke(sender, args) }\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">end</span></pre></pre>\n\nSo, with that, the Ruby code can send an event to .Net code by calling **PropertyChanged()**.&#160; \n\n### But… Seriously… Lets Metaprogram, Shall We?\n\nThe previous code is kind of awkward.&#160; Every time you want to declare an event, you have to write this code?\n\nOf course not.&#160; This is Ruby.&#160; We have metaprogramming!&#160; Lets create some code to generate this code.&#160; I talked with a ruby developer friend of mine, [Toby Tripp](http://twitter.com/tobytripp), and he helped me get to this mixin code that will generate the methods for you:\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">module</span> DotNetEvents\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">module</span> ClassMethods\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> declare_event( *events )\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      events.each <span style=\"color: #0000ff\">do</span> |event|\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        define_handler_methods( event )\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> define_handler_methods( event )\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      event_name = event.to_s.<span style=\"color: #00008b\">gsub</span>(/(?:^|_)(.)/) { $1.upcase }\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      class_eval &lt;&lt;-EOS\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">def</span> handlers( event_name )\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          @event_handlers ||= [Hash](http://www.ruby-doc.org/docs/rdoc/1.9/classes/Hash.html).new\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          @event_handlers[ event_name ] ||= []\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">def</span> add_<span style=\"color: #008000\">#{event_name}( handler )</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          handlers( :<span style=\"color: #008000\">#{event_name} ) &lt;&lt; handler</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">def</span> remove_<span style=\"color: #008000\">#{event_name}( handler )</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          handlers( :<span style=\"color: #008000\">#{event_name} ).delete handler</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">def</span> <span style=\"color: #008000\">#{event_name}( sender, args )</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          handlers( :<span style=\"color: #008000\">#{event_name} ).each do |handler|</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">            handler.invoke sender, args\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      EOS\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">def</span> <span style=\"color: #0000ff\">self</span>.included(receiver)\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    receiver.extend ClassMethods\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span></pre></pre>\n\nNow that we have this **declare_event** method, we can use it to define events.&#160; Just implement the interface, and declare the event:\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">class</span> TestClass\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  include DotNetEvents\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  include System::ComponentModel::INotifyPropertyChanged  \n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  declare_event :PropertyChanged\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span></pre></pre>\n\nNote that I have, indeed, tested this with WPF.&#160; The WPF system properly hooks up the event and when the Ruby code fires it, the UI gets updated.\n\nFrom here, I can build my ViewModel base class in Ruby.&#160; Some things to solve still: making notification of PropertyChanged events easy, commands, data binding, ViewModel hookups, etc.&#160; But, at least, I am on my way :)","slug":"adventures-in-ruby-mvvm-firing-events-from-ruby","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hf00486eul68kr986e"},{"title":"Adventures in Ruby MVVM – A ViewModel Base Class in Ruby","id":"133","date":"2010-06-19T06:52:03.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F06%2F19%2Fadventures-in-ruby-mvvm-a-viewmodel-base-class-in-ruby%2F)](http://dotnetshoutout.com/Adventures-in-Ruby-MVVM-A-ViewModel-Base-Class-in-Ruby)\n\nIn [my last post](http://houseofbilz.com/archives/2010/06/14/adventures-in-ruby-mvvm-firing-events-from-ruby/), I talked about how to fire events from Ruby code such that .Net code can subscribe and receive them.&#160; I showed a simple implementation of INotifyPropertyChanged; the interface that is essential to MVVM development in WPF and Silverlight.\n\nWith that out of the way, I am moving forward to start building a simple ViewModel base class in Ruby that will let me declare notifiable properties with as little ceremony as possible.\n\n### Background\n\nBefore I get started, I’d like to show what a simple notifiable property in C# looks like.&#160; If you are familiar with MVVM, this code is not new to you:\n  <pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">string</span> first;\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> First\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">{\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">get</span> { <span style=\"color: #0000ff\">return</span> first; }\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">set</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    {\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        first = <span style=\"color: #0000ff\">value</span>;\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        OnPropertyChanged(&quot;<span style=\"color: #8b0000\">First</span>&quot;);\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    }\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">}</pre></pre>\n\n### The Same Thing In Ruby\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">def</span> first\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  @first\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">def</span> first=(val)\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  @first = val\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  on_property_changed :first\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span></pre></pre>\n\n### Generalizing\n\nAlready, the Ruby code is more readable (in my opinion).&#160; The cool thing is that we can do better – much, much better.&#160; \n\nBy employing meta programming in the base class, these methods can be generated for us.&#160; The result is a ViewModel class that simply declares the properties as notifiable:\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">class</span> ViewModel &lt; ViewModelBase \n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  declare_notifiable :first, :last\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span></pre></pre>\n\nThat’s it!&#160; Since the base class provides the property generation code, you can just declare that you want to create properties that are notifiable and you are ready to go.&#160; To make sure that the properties notify when they are set (and ultimately get updated in the View via data binding), make sure to call the methods (as opposed to the @fields):\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">def</span> update_values\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">self</span>.first = &quot;<span style=\"color: #8b0000\">Brian</span>&quot;\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">self</span>.last = &quot;<span style=\"color: #8b0000\">Genisio</span>&quot;\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span></pre></pre>\n\n### ViewModelBase code\n\nHere is the base class that makes it all happen.&#160; For the DotNetEvents mixin code, see my [previous post](http://houseofbilz.com/archives/2010/06/14/adventures-in-ruby-mvvm-firing-events-from-ruby/).\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">class</span> ViewModelBase\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    include DotNetEvents\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    include System::ComponentModel::INotifyPropertyChanged\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    declare_event :PropertyChanged\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"></pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> <span style=\"color: #0000ff\">self</span>.declare_notifiable( *symbols )\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      symbols.each <span style=\"color: #0000ff\">do</span> | symbol |\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        define_notifiable_property( symbol )\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> <span style=\"color: #0000ff\">self</span>.define_notifiable_property( property_name )\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      class_eval &lt;&lt;-EOS\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">def</span> <span style=\"color: #008000\">#{property_name}</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          @<span style=\"color: #008000\">#{property_name}</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">def</span> <span style=\"color: #008000\">#{property_name}=(val)</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          @<span style=\"color: #008000\">#{property_name} = val</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          on_property_changed :<span style=\"color: #008000\">#{property_name} </span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      EOS\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"></pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> on_property_changed(name)\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      PropertyChanged(<span style=\"color: #0000ff\">self</span>, System::ComponentModel::PropertyChangedEventArgs.new(name))\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span>\n</pre></pre>\n\n### Up Next…\n\nNext, I will post about implementing commands in the ViewModel that the View can bind to.&#160; My goal is to get to a completely convention-based approach to commands, much like my C# [ViewModel Support](http://houseofbilz.com/archives/2010/05/08/adventures-in-mvvm-my-viewmodel-base/).&#160; Stay tuned.","source":"_posts/2010-06-19-adventures-in-ruby-mvvm-a-viewmodel-base-class-in-ruby.md","raw":"---\ntitle: Adventures in Ruby MVVM – A ViewModel Base Class in Ruby\ntags:\n  - MVVM\n  - Ruby\n  - Silverlight\n  - WPF\nid: 133\ncategories:\n  - Uncategorized\ndate: 2010-06-19 02:52:03\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F06%2F19%2Fadventures-in-ruby-mvvm-a-viewmodel-base-class-in-ruby%2F)](http://dotnetshoutout.com/Adventures-in-Ruby-MVVM-A-ViewModel-Base-Class-in-Ruby)\n\nIn [my last post](http://houseofbilz.com/archives/2010/06/14/adventures-in-ruby-mvvm-firing-events-from-ruby/), I talked about how to fire events from Ruby code such that .Net code can subscribe and receive them.&#160; I showed a simple implementation of INotifyPropertyChanged; the interface that is essential to MVVM development in WPF and Silverlight.\n\nWith that out of the way, I am moving forward to start building a simple ViewModel base class in Ruby that will let me declare notifiable properties with as little ceremony as possible.\n\n### Background\n\nBefore I get started, I’d like to show what a simple notifiable property in C# looks like.&#160; If you are familiar with MVVM, this code is not new to you:\n  <pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">string</span> first;\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">string</span> First\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">{\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">get</span> { <span style=\"color: #0000ff\">return</span> first; }\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">set</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    {\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        first = <span style=\"color: #0000ff\">value</span>;\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        OnPropertyChanged(&quot;<span style=\"color: #8b0000\">First</span>&quot;);\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    }\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">}</pre></pre>\n\n### The Same Thing In Ruby\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">def</span> first\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  @first\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">def</span> first=(val)\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  @first = val\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  on_property_changed :first\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span></pre></pre>\n\n### Generalizing\n\nAlready, the Ruby code is more readable (in my opinion).&#160; The cool thing is that we can do better – much, much better.&#160; \n\nBy employing meta programming in the base class, these methods can be generated for us.&#160; The result is a ViewModel class that simply declares the properties as notifiable:\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">class</span> ViewModel &lt; ViewModelBase \n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  declare_notifiable :first, :last\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span></pre></pre>\n\nThat’s it!&#160; Since the base class provides the property generation code, you can just declare that you want to create properties that are notifiable and you are ready to go.&#160; To make sure that the properties notify when they are set (and ultimately get updated in the View via data binding), make sure to call the methods (as opposed to the @fields):\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">def</span> update_values\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">self</span>.first = &quot;<span style=\"color: #8b0000\">Brian</span>&quot;\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">  <span style=\"color: #0000ff\">self</span>.last = &quot;<span style=\"color: #8b0000\">Genisio</span>&quot;\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span></pre></pre>\n\n### ViewModelBase code\n\nHere is the base class that makes it all happen.&#160; For the DotNetEvents mixin code, see my [previous post](http://houseofbilz.com/archives/2010/06/14/adventures-in-ruby-mvvm-firing-events-from-ruby/).\n\n<pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">class</span> ViewModelBase\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    include DotNetEvents\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    include System::ComponentModel::INotifyPropertyChanged\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    declare_event :PropertyChanged\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"></pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> <span style=\"color: #0000ff\">self</span>.declare_notifiable( *symbols )\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      symbols.each <span style=\"color: #0000ff\">do</span> | symbol |\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        define_notifiable_property( symbol )\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> <span style=\"color: #0000ff\">self</span>.define_notifiable_property( property_name )\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      class_eval &lt;&lt;-EOS\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">def</span> <span style=\"color: #008000\">#{property_name}</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          @<span style=\"color: #008000\">#{property_name}</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">def</span> <span style=\"color: #008000\">#{property_name}=(val)</span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          @<span style=\"color: #008000\">#{property_name} = val</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">          on_property_changed :<span style=\"color: #008000\">#{property_name} </span>\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">        <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      EOS\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"></pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">def</span> on_property_changed(name)\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">      PropertyChanged(<span style=\"color: #0000ff\">self</span>, System::ComponentModel::PropertyChangedEventArgs.new(name))\n</pre><pre style=\"background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\">    <span style=\"color: #0000ff\">end</span>\n</pre><pre style=\"background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px\"><span style=\"color: #0000ff\">end</span>\n</pre></pre>\n\n### Up Next…\n\nNext, I will post about implementing commands in the ViewModel that the View can bind to.&#160; My goal is to get to a completely convention-based approach to commands, much like my C# [ViewModel Support](http://houseofbilz.com/archives/2010/05/08/adventures-in-mvvm-my-viewmodel-base/).&#160; Stay tuned.","slug":"adventures-in-ruby-mvvm-a-viewmodel-base-class-in-ruby","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hg004b6eull1b5lfeg"},{"title":"Adventures in Ruby MVVM – Bootstrapping Ruby","id":"141","date":"2010-07-07T06:44:34.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.net%2F)](http://dotnetshoutout.com/Adventures-in-MVVM-Bootstrapping-Ruby)\n\nIn this post, I want to discuss how I am loading the ViewModels into the View.&#160; When I write my Views, I like to use the tools I have available to me; Visual Studio and/or Expression Blend.&#160; This means that I want a Visual Studio project and I want to be able to use these tools to create new views quickly.&#160; The XAML files that define my views will still be backed by the obligatory auto-generated C# code, but this is where I want my C# code to end (for these experiments).&#160; I don’t want to write an more C# code than that (with one exception).\n\nMy ViewModels, however, will be written in Ruby.&#160; I will use RSpec to specify these ViewModels and I will use an editor other than Visual Studio to edit the code; mostly because [Visual Studio does not have any tooling support for Ruby](http://connect.microsoft.com/VisualStudio/feedback/details/479957/ironruby-integration-in-visual-studio-2010)!&#160; At some point, my View world needs to converge with my ViewModel world.&#160; \n\nTo support this, I have written the only C# code that I intend to write in these experiments.&#160; It is a bootstrapper, if you will, to load Ruby ViewModels.&#160; It looks like this:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b592ec48-a83e-4b94-bb1a-7dda245b0f8e\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#FFFFFF;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ViewModelLocator : DynamicObject\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> ScriptEngine engine;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ViewModelLocator()\n    {\n        engine </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> IronRuby.Ruby.CreateEngine();\n        engine.Runtime.LoadAssembly(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(INotifyPropertyChanged).Assembly);\n        engine.Runtime.LoadAssembly(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ICommand).Assembly);\n\n        LoadAllViewModels();\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> LoadAllViewModels()\n    {\n        Directory\n            .EnumerateFiles(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ViewModels</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">*.rb</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToList()\n            .ForEach(file </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> engine.ExecuteFile(file));\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">override</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">bool</span><span style=\"color: #000000;\"> TryGetMember(GetMemberBinder binder, </span><span style=\"color: #0000FF;\">out</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> result)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000FF;\">base</span><span style=\"color: #000000;\">.TryGetMember(binder, </span><span style=\"color: #0000FF;\">out</span><span style=\"color: #000000;\"> result))\n            </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">true</span><span style=\"color: #000000;\">;\n\n        result </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> FindViewModel(binder.Name);\n\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> result </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">;\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> FindViewModel(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> name)\n    {\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> engine.Execute(name </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">.new</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis **ViewModelLocator** class exists for one reason: to generate Ruby ViewModels.&#160; It creates a Ruby script engine and pre-loads all the ViewModels when it is constructed.&#160; It then sits around, waiting to create new ViewModels for the View:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:5b1c725b-3653-4271-b5be-07401c7d9818\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#FFFFFF;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">StackPanel </span><span style=\"color: #FF0000;\">Orientation</span><span style=\"color: #0000FF;\">=\"Horizontal\"</span><span style=\"color: #FF0000;\"> DataContext</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding PersonViewModel, Source={StaticResource VMLocator}}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding first}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Margin</span><span style=\"color: #0000FF;\">=\"5,0\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding last}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Margin</span><span style=\"color: #0000FF;\">=\"5,0\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nIn the XAML above, I am setting the DataContext of the StackPanel to create a new **PersonViewModel **(defined in Ruby). The binding references a **ViewModelLocator** as its source that was defined in App.xaml:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:98d3f3b4-1093-4864-8129-34ebdfa56bf3\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#FFFFFF;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">Application.Resources</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">IronRubyMVVM:ViewModelLocator </span><span style=\"color: #FF0000;\">x:Key</span><span style=\"color: #0000FF;\">=\"VMLocator\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">Application.Resources</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nA dead-simple ViewModel for illustration is defined in Ruby: \n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:441667ca-571c-48b6-92bb-2768760cc9d3\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#FFFFFF;overflow: auto;\"><span style=\"color: #0000FF;\">require</span><span style=\"color: #000000;\"> File</span><span style=\"color: #000000;\">.</span><span style=\"color: #000000;\">dirname(</span><span style=\"color: #0000FF;\">__FILE__</span><span style=\"color: #000000;\">)  </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000; font-weight: bold;\">\"</span><span style=\"color: #000000; font-weight: bold;\">/../RubyVM/ViewModelSupport</span><span style=\"color: #000000; font-weight: bold;\">\"</span><span style=\"color: #000000;\">\n\nclass PersonViewModel\n    include ViewModelSupport\n\n    declare_notifiable </span><span style=\"color: #000000;\">:</span><span style=\"color: #000000;\">first</span><span style=\"color: #000000;\">,</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">:</span><span style=\"color: #0000FF;\">last</span><span style=\"color: #000000;\">\n\n    def initialize\n        </span><span style=\"color: #800080;\">@first</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000; font-weight: bold;\">\"</span><span style=\"color: #000000; font-weight: bold;\">Brian</span><span style=\"color: #000000; font-weight: bold;\">\"</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #800080;\">@last</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000; font-weight: bold;\">\"</span><span style=\"color: #000000; font-weight: bold;\">Genisio</span><span style=\"color: #000000; font-weight: bold;\">\"</span><span style=\"color: #000000;\">\n    end\nend</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nYou can see all the code in action from the [snapshot of my project from which I wrote this post](http://bitbucket.org/briangenisio/rubyvm/src/72b8541771ba/):&#160; I will be working on this project quite a bit after this post, so if you want to see what I have been working on, the [code is always available.](http://bitbucket.org/briangenisio/rubyvm)","source":"_posts/2010-07-07-adventures-in-ruby-mvvm-bootstrapping-ruby.md","raw":"---\ntitle: Adventures in Ruby MVVM – Bootstrapping Ruby\ntags:\n  - MVVM\n  - Ruby\nid: 141\ncategories:\n  - Uncategorized\ndate: 2010-07-07 02:44:34\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fwww.houseofbilz.net%2F)](http://dotnetshoutout.com/Adventures-in-MVVM-Bootstrapping-Ruby)\n\nIn this post, I want to discuss how I am loading the ViewModels into the View.&#160; When I write my Views, I like to use the tools I have available to me; Visual Studio and/or Expression Blend.&#160; This means that I want a Visual Studio project and I want to be able to use these tools to create new views quickly.&#160; The XAML files that define my views will still be backed by the obligatory auto-generated C# code, but this is where I want my C# code to end (for these experiments).&#160; I don’t want to write an more C# code than that (with one exception).\n\nMy ViewModels, however, will be written in Ruby.&#160; I will use RSpec to specify these ViewModels and I will use an editor other than Visual Studio to edit the code; mostly because [Visual Studio does not have any tooling support for Ruby](http://connect.microsoft.com/VisualStudio/feedback/details/479957/ironruby-integration-in-visual-studio-2010)!&#160; At some point, my View world needs to converge with my ViewModel world.&#160; \n\nTo support this, I have written the only C# code that I intend to write in these experiments.&#160; It is a bootstrapper, if you will, to load Ruby ViewModels.&#160; It looks like this:\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b592ec48-a83e-4b94-bb1a-7dda245b0f8e\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#FFFFFF;overflow: auto;\"><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">class</span><span style=\"color: #000000;\"> ViewModelLocator : DynamicObject\n{\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">readonly</span><span style=\"color: #000000;\"> ScriptEngine engine;\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> ViewModelLocator()\n    {\n        engine </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> IronRuby.Ruby.CreateEngine();\n        engine.Runtime.LoadAssembly(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(INotifyPropertyChanged).Assembly);\n        engine.Runtime.LoadAssembly(</span><span style=\"color: #0000FF;\">typeof</span><span style=\"color: #000000;\">(ICommand).Assembly);\n\n        LoadAllViewModels();\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\"> LoadAllViewModels()\n    {\n        Directory\n            .EnumerateFiles(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ViewModels</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">*.rb</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).ToList()\n            .ForEach(file </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> engine.ExecuteFile(file));\n    }\n\n    </span><span style=\"color: #0000FF;\">public</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">override</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">bool</span><span style=\"color: #000000;\"> TryGetMember(GetMemberBinder binder, </span><span style=\"color: #0000FF;\">out</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> result)\n    {\n        </span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000FF;\">base</span><span style=\"color: #000000;\">.TryGetMember(binder, </span><span style=\"color: #0000FF;\">out</span><span style=\"color: #000000;\"> result))\n            </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">true</span><span style=\"color: #000000;\">;\n\n        result </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> FindViewModel(binder.Name);\n\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> result </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">null</span><span style=\"color: #000000;\">;\n    }\n\n    </span><span style=\"color: #0000FF;\">private</span><span style=\"color: #000000;\"> </span><span style=\"color: #0000FF;\">object</span><span style=\"color: #000000;\"> FindViewModel(</span><span style=\"color: #0000FF;\">string</span><span style=\"color: #000000;\"> name)\n    {\n        </span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\"> engine.Execute(name </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">.new</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n    }\n}</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nThis **ViewModelLocator** class exists for one reason: to generate Ruby ViewModels.&#160; It creates a Ruby script engine and pre-loads all the ViewModels when it is constructed.&#160; It then sits around, waiting to create new ViewModels for the View:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:5b1c725b-3653-4271-b5be-07401c7d9818\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#FFFFFF;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">StackPanel </span><span style=\"color: #FF0000;\">Orientation</span><span style=\"color: #0000FF;\">=\"Horizontal\"</span><span style=\"color: #FF0000;\"> DataContext</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding PersonViewModel, Source={StaticResource VMLocator}}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding first}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Margin</span><span style=\"color: #0000FF;\">=\"5,0\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">TextBlock </span><span style=\"color: #FF0000;\">Text</span><span style=\"color: #0000FF;\">=\"</span><span style=\"color: #808000;\">{Binding last}</span><span style=\"color: #0000FF;\">\"</span><span style=\"color: #FF0000;\"> Margin</span><span style=\"color: #0000FF;\">=\"5,0\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">StackPanel</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nIn the XAML above, I am setting the DataContext of the StackPanel to create a new **PersonViewModel **(defined in Ruby). The binding references a **ViewModelLocator** as its source that was defined in App.xaml:\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:98d3f3b4-1093-4864-8129-34ebdfa56bf3\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#FFFFFF;overflow: auto;\"><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">Application.Resources</span><span style=\"color: #0000FF;\">&gt;</span><span style=\"color: #000000;\">\n    </span><span style=\"color: #0000FF;\">&lt;</span><span style=\"color: #800000;\">IronRubyMVVM:ViewModelLocator </span><span style=\"color: #FF0000;\">x:Key</span><span style=\"color: #0000FF;\">=\"VMLocator\"</span><span style=\"color: #FF0000;\"> </span><span style=\"color: #0000FF;\">/&gt;</span><span style=\"color: #000000;\">\n</span><span style=\"color: #0000FF;\">&lt;/</span><span style=\"color: #800000;\">Application.Resources</span><span style=\"color: #0000FF;\">&gt;</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nA dead-simple ViewModel for illustration is defined in Ruby: \n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:441667ca-571c-48b6-92bb-2768760cc9d3\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#FFFFFF;overflow: auto;\"><span style=\"color: #0000FF;\">require</span><span style=\"color: #000000;\"> File</span><span style=\"color: #000000;\">.</span><span style=\"color: #000000;\">dirname(</span><span style=\"color: #0000FF;\">__FILE__</span><span style=\"color: #000000;\">)  </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000; font-weight: bold;\">\"</span><span style=\"color: #000000; font-weight: bold;\">/../RubyVM/ViewModelSupport</span><span style=\"color: #000000; font-weight: bold;\">\"</span><span style=\"color: #000000;\">\n\nclass PersonViewModel\n    include ViewModelSupport\n\n    declare_notifiable </span><span style=\"color: #000000;\">:</span><span style=\"color: #000000;\">first</span><span style=\"color: #000000;\">,</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">:</span><span style=\"color: #0000FF;\">last</span><span style=\"color: #000000;\">\n\n    def initialize\n        </span><span style=\"color: #800080;\">@first</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000; font-weight: bold;\">\"</span><span style=\"color: #000000; font-weight: bold;\">Brian</span><span style=\"color: #000000; font-weight: bold;\">\"</span><span style=\"color: #000000;\">\n        </span><span style=\"color: #800080;\">@last</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000; font-weight: bold;\">\"</span><span style=\"color: #000000; font-weight: bold;\">Genisio</span><span style=\"color: #000000; font-weight: bold;\">\"</span><span style=\"color: #000000;\">\n    end\nend</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\nYou can see all the code in action from the [snapshot of my project from which I wrote this post](http://bitbucket.org/briangenisio/rubyvm/src/72b8541771ba/):&#160; I will be working on this project quite a bit after this post, so if you want to see what I have been working on, the [code is always available.](http://bitbucket.org/briangenisio/rubyvm)","slug":"adventures-in-ruby-mvvm-bootstrapping-ruby","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hi004e6eulqn998fmk"},{"title":"Cross-Training in Silverlight & Flex","id":"159","date":"2010-10-24T04:35:46.000Z","_content":"\nWhen I joined [SRT Solutions](http://www.srtsolutions.com/) a while back, one of the primary reasons for the move was to get exposed to new ideas and technologies. Although my first project at SRT didn’t stray much from my [Silverlight](http://www.silverlight.net/) expertise – an MVVM-driven WPF application – my second project is taking me in a slightly different direction.\n\nFor a couple of months now, I have been developing an [Adobe Flex](http://www.adobe.com/products/flex/) project. When I tell people this, I often get jokes about being a “defector” or a “designer” (or both). If I don’t get a joke, people often cringe. I’ll be completely honest: I was a bit afraid to get involved at first too.\n\nYou see, within the Microsoft developer community, Adobe and Flex don’t have a great reputation. It is almost as bad as the (unfair) reputation Apple and Mac developers have. On both accounts, I find this to be unfortunate. Why can’t we all learn from each other and grow as a larger developer community? Why can’t we all get along?\n\n### A Bold Statement\n\nI am ready to say it: **Flex 4 has a lot to offer**. I’ll take it a step further: **Flex does some things better than Silverlight. **That is not to say that I am leaving Silverlight. Far from it. In fact, I am ready to celebrate diversity. I want to help other developers do the same.\n\nI am making this the first of MANY posts where I will attempt to bridge the gap between the two technologies. It won’t be hard to do – they are strikingly similar. I will do my best to present objective comparisons of the two technologies both big and small in scope. You won’t find me declaring one better than the other. Instead, you will read posts that will help Silverlight developers work in Flex as well as Flex developers in SIlverlight.\n\nIn addition to this blog series, I will be giving two public talks on the differences:\n\n*   11/18/10 -- MI SIlverlight Users Group – [Cross-Training in Silverlight and Flex](http://communitymegaphone.com/ShowEvent.aspx?EventID=3428)*   1/13-14/11 – CodeMash – [Every Thing You Always Wanted to Know About Flex * But Were Afraid to Ask](http://codemash.org/Sessions#Every+Thing+You+Always+Wanted+to+Know+About+Flex+*+But+Were+Afraid+to+Ask)  \n\nA taste of some posts on Silverlight and Flex to expect in the near future:\n\n*   [A Platform Overview](http://houseofbilz.com/archives/2010/10/26/cross-training-in-silverlight-flex-platform-overview/)*   [The Future of RIAs](http://houseofbilz.com/archives/2010/10/30/cross-training-in-silverlight-flex-the-future-of-rias/)*   [XAML vs MXML](http://houseofbilz.com/archives/2010/11/08/cross-training-in-silverlight-and-flex-xaml-vs-mxml/)*   [C#/CLR vs ActionScript/AVM (Part 1)](http://houseofbilz.com/archives/2010/12/17/cross-training-in-silverlight-flex-cclr-vs-actionscript3avm-part-1/)*   C#/CLR vs ActionScript/AVM (Part 2)*   [MVVM vs Presentation Model](http://houseofbilz.com/archives/2010/12/29/cross-training-in-silverlight-flexmvvm-vs-presentation-model/)*   [Data Binding](http://houseofbilz.com/archives/2011/01/24/cross-training-in-silverlight-flexdata-binding/)\n*   Visualizing Data*   Backend Service Consumption*   Visual State Management*   Testing/Mocking Frameworks*   Third Party Frameworks*   Design Tools*   Designer/Developer Workflow*   Deployment Story*   Animations*   Transitions*   Re-Templating vs Skinning*   Styling**","source":"_posts/2010-10-24-cross-training-in-silverlight-vs-flex.md","raw":"---\ntitle: 'Cross-Training in Silverlight & Flex'\ntags:\n  - Cross-Training\n  - Flex\n  - Silverlight\nid: 159\ncategories:\n  - Uncategorized\ndate: 2010-10-24 00:35:46\n---\n\nWhen I joined [SRT Solutions](http://www.srtsolutions.com/) a while back, one of the primary reasons for the move was to get exposed to new ideas and technologies. Although my first project at SRT didn’t stray much from my [Silverlight](http://www.silverlight.net/) expertise – an MVVM-driven WPF application – my second project is taking me in a slightly different direction.\n\nFor a couple of months now, I have been developing an [Adobe Flex](http://www.adobe.com/products/flex/) project. When I tell people this, I often get jokes about being a “defector” or a “designer” (or both). If I don’t get a joke, people often cringe. I’ll be completely honest: I was a bit afraid to get involved at first too.\n\nYou see, within the Microsoft developer community, Adobe and Flex don’t have a great reputation. It is almost as bad as the (unfair) reputation Apple and Mac developers have. On both accounts, I find this to be unfortunate. Why can’t we all learn from each other and grow as a larger developer community? Why can’t we all get along?\n\n### A Bold Statement\n\nI am ready to say it: **Flex 4 has a lot to offer**. I’ll take it a step further: **Flex does some things better than Silverlight. **That is not to say that I am leaving Silverlight. Far from it. In fact, I am ready to celebrate diversity. I want to help other developers do the same.\n\nI am making this the first of MANY posts where I will attempt to bridge the gap between the two technologies. It won’t be hard to do – they are strikingly similar. I will do my best to present objective comparisons of the two technologies both big and small in scope. You won’t find me declaring one better than the other. Instead, you will read posts that will help Silverlight developers work in Flex as well as Flex developers in SIlverlight.\n\nIn addition to this blog series, I will be giving two public talks on the differences:\n\n*   11/18/10 -- MI SIlverlight Users Group – [Cross-Training in Silverlight and Flex](http://communitymegaphone.com/ShowEvent.aspx?EventID=3428)*   1/13-14/11 – CodeMash – [Every Thing You Always Wanted to Know About Flex * But Were Afraid to Ask](http://codemash.org/Sessions#Every+Thing+You+Always+Wanted+to+Know+About+Flex+*+But+Were+Afraid+to+Ask)  \n\nA taste of some posts on Silverlight and Flex to expect in the near future:\n\n*   [A Platform Overview](http://houseofbilz.com/archives/2010/10/26/cross-training-in-silverlight-flex-platform-overview/)*   [The Future of RIAs](http://houseofbilz.com/archives/2010/10/30/cross-training-in-silverlight-flex-the-future-of-rias/)*   [XAML vs MXML](http://houseofbilz.com/archives/2010/11/08/cross-training-in-silverlight-and-flex-xaml-vs-mxml/)*   [C#/CLR vs ActionScript/AVM (Part 1)](http://houseofbilz.com/archives/2010/12/17/cross-training-in-silverlight-flex-cclr-vs-actionscript3avm-part-1/)*   C#/CLR vs ActionScript/AVM (Part 2)*   [MVVM vs Presentation Model](http://houseofbilz.com/archives/2010/12/29/cross-training-in-silverlight-flexmvvm-vs-presentation-model/)*   [Data Binding](http://houseofbilz.com/archives/2011/01/24/cross-training-in-silverlight-flexdata-binding/)\n*   Visualizing Data*   Backend Service Consumption*   Visual State Management*   Testing/Mocking Frameworks*   Third Party Frameworks*   Design Tools*   Designer/Developer Workflow*   Deployment Story*   Animations*   Transitions*   Re-Templating vs Skinning*   Styling**","slug":"cross-training-in-silverlight-vs-flex","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hl004h6eulc8shbwlt"},{"title":"Cross-Training in Silverlight & Flex – Platform Overview","id":"161","date":"2010-10-26T22:39:38.000Z","_content":"\nMore [Cross-Training in SIlverlight &amp; Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/)\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F10%2F26%2Fcross-training-in-silverlight-flex-platform-overview%2F)](http://dotnetshoutout.com/Cross-Training-in-Silverlight-Flex-Platform-Overview) \n\nThis is the second article in which I will compare the technical details between Silverlight and Flex. Before I jump into the nitty-gritty of the two, I thought I would give a general overview of the platforms that are Silverlight and Flex/Flash/Air. Understand these terms and the tools up front will make it much easier to cross-train on the two technologies.\n  <div style=\"background-color: #e8f3ff\">   \n\n### The Silverlight Platform\n\nMicrosoft created [Silverlight](http://www.silverlight.net/) as a small platform for developing Rich Internet Applications ([RIAs](http://en.wikipedia.org/wiki/Rich_Internet_application)) on the desktop, browser and mobile phone. Although it was inspired by the [.Net](http://www.microsoft.com/net/) platform and the Windows Presentation Foundation ([WPF](http://msdn.microsoft.com/en-us/library/aa970268.aspx)), Silverlight stands alone. In other words, users do not need to download the entire .Net runtime to execute Silverlight applications. They only need the small (about 4 MB) Silverlight player.&#160; \n\nAs [Flex](http://www.adobe.com/products/flex/) is a framework that sits on top of the [Flash](http://www.adobe.com/products/flash/) platform, Silverlight is both – a runtime and an SDK. Silverlight applications can be developed to run “out of browser” on the desktop (similar to [Adobe Air](http://www.adobe.com/products/air/)) or in-browser (similar to Flash Player). When run out of the browser (OOB), the application has access to extra APIs for file access and other system-level functions. Silverlight is also the primary application development platform for the [Windows Phone 7](http://www.microsoft.com/windowsphone). \n\n#### \n\n#### Developer Story\n\nMuch like Flex, Silverlight employs a declarative UI mechanism ([XAML](http://en.wikipedia.org/wiki/XAML)) for defining the view of an application. Unlike Flex, Silverlight developers have the choice of many languages to integrate in their “code-behind” such as [C#](http://en.wikipedia.org/wiki/C_Sharp_(programming_language)), [Visual Basic.Net](http://en.wikipedia.org/wiki/Visual_Basic_.NET), [F#](http://en.wikipedia.org/wiki/F_Sharp_(programming_language)), [IronRuby](http://en.wikipedia.org/wiki/Ironruby) and [IronPython](http://en.wikipedia.org/wiki/Ironpython). The majority of Silverlight developers use C#.\n\n#### IDEs\n\nMost Silverlight applications are developed using a version of [Visual Studio](http://www.microsoft.com/visualstudio/en-us/visual-studio-2010-launch?WT.mc_id=SEARCH&amp;WT.srch=1), which is an [IDE](http://en.wikipedia.org/wiki/Integrated_development_environment) similar to [Flash Builder](http://www.adobe.com/products/flashbuilder/).&#160; Visual Studio comes in many flavors. [Visual Web Developer Express](http://www.microsoft.com/web/gallery/install.aspx?appid=silverlight4tools;silverlight4toolkit;riaservicestoolkit) is free and great for getting started. Most likely, as you get more involved with Silverlight, you will need to migrate to a paid version (Professional, Premium, Ultimate or Test). Although highly recommended, you do not need to use Visual Studio to develop Silverlight applications – the [free SDK](http://www.microsoft.com/downloads/en/details.aspx?FamilyID=b3deb194-ca86-4fb6-a716-b67c2604a139&amp;displaylang=en) and command-line compilers are enough to build applications with. The open-source [MonoDevelop](http://monodevelop.com/) is also an option for developing Silverlight applications. It is worth noting that Visual Studio is only available for Windows. Mac developers have the tools to develop [Silverlight applications using Eclipse](http://www.eclipse4sl.org/) but this rarely happens.\n\n#### \n\n#### SDKs and Toolkits\n\nUnlike Flex, the [Silverlight SDK](http://www.microsoft.com/downloads/en/details.aspx?FamilyID=b3deb194-ca86-4fb6-a716-b67c2604a139&amp;displaylang=en) is not open-source but it is free. It includes the minimum tools necessary to build Silverlight applications. Very often, build servers and [CI](http://en.wikipedia.org/wiki/Continuous_integration) servers use the SDK alone, to avoid purchasing a license to Visual Studio on the server. Although the SDK is not open-source, the Silverlight Toolkit (produced by Microsoft) is. The [Silverlight Toolkit](http://silverlight.codeplex.com/) is an optional set of libraries that includes many add-ons such as rich controls, extended skinning and an in-browser test suite ([Silverlight Unit Tester](http://code.msdn.microsoft.com/silverlightut)).\n\n#### Design\n\nVisual Studio has an integrated graphical designer, but it is limited. Most people use [Expression Blend](http://www.microsoft.com/expression/products/Blend_Overview.aspx) to design, style and skin the UI. Expression Blend supports the import of assets from [Photoshop](http://www.adobe.com/products/photoshop/photoshop/) and [Illustrator](http://www.adobe.com/products/illustrator/). Expression Blend works on existing Visual Studio projects in parallel. This aids in a very tight integration between the designer and the developer. Flex cannot support this workflow very well. Even with the new version of [Catalyst](http://www.adobe.com/products/flashcatalyst/), projects are exported between the designer and developer – as opposed to the parallel workflow that Blend enables. Expression Blend only works in Windows.\n\n#### Operating System Support\n\nSilverlight does not have the same operating system penetration as Flex/Flash. Microsoft has fully committed to Windows and OSX for the browser and OOB capabilities. Silverlight does not, however, work in Linux. A separate project, dubbed [Moonlight](http://www.mono-project.com/Moonlight), aims to run Silverlight applications in Linux. This project is headed by the Mono team and it is perpetually behind the latest release of the Silverlight platform. Silverlight also runs as the primary application platform for the [Windows Phone 7](http://www.microsoft.com/windowsphone) and is being developed for [Symbian](http://www.symbian.org/), but it does not run on [Android](http://www.android.com/), [WebOS](http://developer.palm.com/), or [iOS](http://en.wikipedia.org/wiki/IOS_(Apple)) at this time. (possibly, in the future?)\n\n#### Getting Started\n\nThe easiest way to get started with Silverlight is at [Silverlight.net](http://www.silverlight.net/getstarted/). From there, you can download all of the tools necessary to write applications in SIlverlight (Visual Web Developer, Expression Blend trial, Silverlight toolkit, etc)\n\n&#160;\n </div>  <div style=\"background-color: #ffe8e8\">   \n\n### The Flex/Flash/Air Platform\n\nIn my opinion, the branding of Flex/Flash/Air can be confusing. I will attempt to make it simple. [Flash](http://www.adobe.com/products/flashplayer/) is the platform.&#160; [Flex](http://www.adobe.com/products/flex/) is the framework. [Air](http://www.adobe.com/products/air/) is Flex/Flash on the desktop (and devices outside the browser). In other words, Flash is the platform we all know and love. It has existed for a long time ([since at least 1996](http://en.wikipedia.org/wiki/Adobe_Flash)) and has a rich history. Flash, by itself, is not very good at writing Rich Internet Applications ([RIAs](http://en.wikipedia.org/wiki/Rich_Internet_application)) – it is very good at vector animation. Flex was introduced as an SDK to sit on top of Flash to enable application development. Air was introduced to allow Flex applications to run on the desktop.\n\nIf you were to compare the Adobe technology to [Silverlight](http://www.silverlight.net), Flex/Flash is to Silverlight as Air is to Silverlight Out-of-Browser.\n\n#### Developer Story\n\nMuch like Silverlight, Flex employs a declarative UI mechanism ([MXML](http://en.wikipedia.org/wiki/MXML)) for defining the view of an application. Unlike Silverlight, Flex developers only have one language choice available to them – [ActionScript](http://en.wikipedia.org/wiki/ActionScript). ActionScript is an [ECMAScript](http://en.wikipedia.org/wiki/ECMAScript)-like language, similar to [Javascript](http://en.wikipedia.org/wiki/Javascript) but with optional [static typing](http://en.wikipedia.org/wiki/Static_typing#Static_typing), [classes](http://en.wikipedia.org/wiki/Class_(computer_science)) and [interfaces](http://en.wikipedia.org/wiki/Interface_(computer_science)). Developers can also enable legacy [C](http://en.wikipedia.org/wiki/C_(programming_language)) and [C++](http://en.wikipedia.org/wiki/C%2B%2B) code to run in the “ActionScript Virtual Machine” by using a currently in-development technology called [Adobe Alchemy](http://labs.adobe.com/technologies/alchemy/).\n\n#### IDEs\n\nDevelopers tend to use [Flash Builder](http://www.adobe.com/products/flashbuilder/) as the IDE for producing Flex applications. Unfortunately, there are not any free versions of Flash Builder (there is a free 60 day trial). Flex developers also have the option to use [IDEA Ultimate by JetBrains](http://www.jetbrains.com/idea/), which is also a paid product. Unlike SIlverlight, these IDEs work in WIndows, Mac or Linux. Like Silverlight, the SDK is free and does not require an IDE to develop with. Other options are [FlashDevelop](http://www.flashdevelop.org/) and [Tofino](http://www.ensemble.com/products/tofino.shtml) – a [Visual Studio](http://www.microsoft.com/visualstudio/en-us/visual-studio-2010-launch?WT.mc_id=SEARCH&amp;WT.srch=1) plug-in for Flex development.\n\n#### SDKs and Toolkits\n\nThe Silverlight SDK is not open source. The [Flex SDK](http://www.adobe.com/products/flex/), however, is open source. It is a very simple zip-deployed download that can be copied anywhere you need. This makes integration with build and CI servers a cinch. By default, you use [Ant](http://en.wikipedia.org/wiki/Apache_Ant) for the build system, but any build manager. Similar to the [Silverlight Toolkit](http://silverlight.codeplex.com/), [flexlib](http://code.google.com/p/flexlib/) is a suite of value-added controls that you can bring into your solution.\n\n#### Design\n\nSince Flex is an Adobe product, the primary design environment is [Photoshop](http://www.adobe.com/products/photoshop/photoshop/) ([raster](http://en.wikipedia.org/wiki/Raster_graphics) art) and [Illustrator](http://www.adobe.com/products/illustrator/) ([vector](http://en.wikipedia.org/wiki/Vector_graphics) art). A third tool, [Catalyst](http://www.adobe.com/products/flashcatalyst/), is added as a bridge between the art tools and Flash Builder. Catalyst allows you to produce skins and styles using the Flex parts model. In the current release, the workflow is one way – Catalyst exports to a Flash Builder project. In future versions, Flash Builder will be capable of exporting back to Catalyst for a more bi-directional workflow. As far as I know, Catalyst does not support the parallel designer-developer workflow that [Expression Blend](http://www.microsoft.com/expression/products/Blend_Overview.aspx) does.&#160; \n\n#### Operating System Support\n\nFlex has a rich set of operating system support. Flex already works in Flash (browser) on Windows, OSX, Linux and [Android](http://www.android.com/). In the near future, Air applications will also be deployable to [iOS](http://en.wikipedia.org/wiki/IOS_(Apple)), [Blackberry](http://na.blackberry.com/eng/playbook-tablet//), Android, [Windows Phone 7](http://www.microsoft.com/windowsphone) and [GoogleTV](http://www.google.com/tv/) in addition to Windows, OSX and Linux. The list is so exhaustive, I am probably missing some. In future versions of Flex, Adobe has strategies for managing different form factors. [Air 2.5](http://www.adobe.com/devnet/air/articles/air25_whatsnew.html) will include all of the APIs for mobile devices that you would expect (GPS, accelerometer, multi-touch, etc).\n\n#### Getting Started\n\nThe easiest way to get started is to go to the [Flex product site](http://www.adobe.com/products/flex/) and download the 60 day [Flash Builder demo](http://www.adobe.com/products/flashbuilder/). Adobe also has demos of Catalyst, Photoshop and Illustrator.\n </div>","source":"_posts/2010-10-26-cross-training-in-silverlight-flex-platform-overview.md","raw":"---\ntitle: 'Cross-Training in Silverlight & Flex – Platform Overview'\ntags:\n  - Cross-Training\n  - Flex\n  - Platform\n  - Silverlight\nid: 161\ncategories:\n  - Uncategorized\ndate: 2010-10-26 18:39:38\n---\n\nMore [Cross-Training in SIlverlight &amp; Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/)\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F10%2F26%2Fcross-training-in-silverlight-flex-platform-overview%2F)](http://dotnetshoutout.com/Cross-Training-in-Silverlight-Flex-Platform-Overview) \n\nThis is the second article in which I will compare the technical details between Silverlight and Flex. Before I jump into the nitty-gritty of the two, I thought I would give a general overview of the platforms that are Silverlight and Flex/Flash/Air. Understand these terms and the tools up front will make it much easier to cross-train on the two technologies.\n  <div style=\"background-color: #e8f3ff\">   \n\n### The Silverlight Platform\n\nMicrosoft created [Silverlight](http://www.silverlight.net/) as a small platform for developing Rich Internet Applications ([RIAs](http://en.wikipedia.org/wiki/Rich_Internet_application)) on the desktop, browser and mobile phone. Although it was inspired by the [.Net](http://www.microsoft.com/net/) platform and the Windows Presentation Foundation ([WPF](http://msdn.microsoft.com/en-us/library/aa970268.aspx)), Silverlight stands alone. In other words, users do not need to download the entire .Net runtime to execute Silverlight applications. They only need the small (about 4 MB) Silverlight player.&#160; \n\nAs [Flex](http://www.adobe.com/products/flex/) is a framework that sits on top of the [Flash](http://www.adobe.com/products/flash/) platform, Silverlight is both – a runtime and an SDK. Silverlight applications can be developed to run “out of browser” on the desktop (similar to [Adobe Air](http://www.adobe.com/products/air/)) or in-browser (similar to Flash Player). When run out of the browser (OOB), the application has access to extra APIs for file access and other system-level functions. Silverlight is also the primary application development platform for the [Windows Phone 7](http://www.microsoft.com/windowsphone). \n\n#### \n\n#### Developer Story\n\nMuch like Flex, Silverlight employs a declarative UI mechanism ([XAML](http://en.wikipedia.org/wiki/XAML)) for defining the view of an application. Unlike Flex, Silverlight developers have the choice of many languages to integrate in their “code-behind” such as [C#](http://en.wikipedia.org/wiki/C_Sharp_(programming_language)), [Visual Basic.Net](http://en.wikipedia.org/wiki/Visual_Basic_.NET), [F#](http://en.wikipedia.org/wiki/F_Sharp_(programming_language)), [IronRuby](http://en.wikipedia.org/wiki/Ironruby) and [IronPython](http://en.wikipedia.org/wiki/Ironpython). The majority of Silverlight developers use C#.\n\n#### IDEs\n\nMost Silverlight applications are developed using a version of [Visual Studio](http://www.microsoft.com/visualstudio/en-us/visual-studio-2010-launch?WT.mc_id=SEARCH&amp;WT.srch=1), which is an [IDE](http://en.wikipedia.org/wiki/Integrated_development_environment) similar to [Flash Builder](http://www.adobe.com/products/flashbuilder/).&#160; Visual Studio comes in many flavors. [Visual Web Developer Express](http://www.microsoft.com/web/gallery/install.aspx?appid=silverlight4tools;silverlight4toolkit;riaservicestoolkit) is free and great for getting started. Most likely, as you get more involved with Silverlight, you will need to migrate to a paid version (Professional, Premium, Ultimate or Test). Although highly recommended, you do not need to use Visual Studio to develop Silverlight applications – the [free SDK](http://www.microsoft.com/downloads/en/details.aspx?FamilyID=b3deb194-ca86-4fb6-a716-b67c2604a139&amp;displaylang=en) and command-line compilers are enough to build applications with. The open-source [MonoDevelop](http://monodevelop.com/) is also an option for developing Silverlight applications. It is worth noting that Visual Studio is only available for Windows. Mac developers have the tools to develop [Silverlight applications using Eclipse](http://www.eclipse4sl.org/) but this rarely happens.\n\n#### \n\n#### SDKs and Toolkits\n\nUnlike Flex, the [Silverlight SDK](http://www.microsoft.com/downloads/en/details.aspx?FamilyID=b3deb194-ca86-4fb6-a716-b67c2604a139&amp;displaylang=en) is not open-source but it is free. It includes the minimum tools necessary to build Silverlight applications. Very often, build servers and [CI](http://en.wikipedia.org/wiki/Continuous_integration) servers use the SDK alone, to avoid purchasing a license to Visual Studio on the server. Although the SDK is not open-source, the Silverlight Toolkit (produced by Microsoft) is. The [Silverlight Toolkit](http://silverlight.codeplex.com/) is an optional set of libraries that includes many add-ons such as rich controls, extended skinning and an in-browser test suite ([Silverlight Unit Tester](http://code.msdn.microsoft.com/silverlightut)).\n\n#### Design\n\nVisual Studio has an integrated graphical designer, but it is limited. Most people use [Expression Blend](http://www.microsoft.com/expression/products/Blend_Overview.aspx) to design, style and skin the UI. Expression Blend supports the import of assets from [Photoshop](http://www.adobe.com/products/photoshop/photoshop/) and [Illustrator](http://www.adobe.com/products/illustrator/). Expression Blend works on existing Visual Studio projects in parallel. This aids in a very tight integration between the designer and the developer. Flex cannot support this workflow very well. Even with the new version of [Catalyst](http://www.adobe.com/products/flashcatalyst/), projects are exported between the designer and developer – as opposed to the parallel workflow that Blend enables. Expression Blend only works in Windows.\n\n#### Operating System Support\n\nSilverlight does not have the same operating system penetration as Flex/Flash. Microsoft has fully committed to Windows and OSX for the browser and OOB capabilities. Silverlight does not, however, work in Linux. A separate project, dubbed [Moonlight](http://www.mono-project.com/Moonlight), aims to run Silverlight applications in Linux. This project is headed by the Mono team and it is perpetually behind the latest release of the Silverlight platform. Silverlight also runs as the primary application platform for the [Windows Phone 7](http://www.microsoft.com/windowsphone) and is being developed for [Symbian](http://www.symbian.org/), but it does not run on [Android](http://www.android.com/), [WebOS](http://developer.palm.com/), or [iOS](http://en.wikipedia.org/wiki/IOS_(Apple)) at this time. (possibly, in the future?)\n\n#### Getting Started\n\nThe easiest way to get started with Silverlight is at [Silverlight.net](http://www.silverlight.net/getstarted/). From there, you can download all of the tools necessary to write applications in SIlverlight (Visual Web Developer, Expression Blend trial, Silverlight toolkit, etc)\n\n&#160;\n </div>  <div style=\"background-color: #ffe8e8\">   \n\n### The Flex/Flash/Air Platform\n\nIn my opinion, the branding of Flex/Flash/Air can be confusing. I will attempt to make it simple. [Flash](http://www.adobe.com/products/flashplayer/) is the platform.&#160; [Flex](http://www.adobe.com/products/flex/) is the framework. [Air](http://www.adobe.com/products/air/) is Flex/Flash on the desktop (and devices outside the browser). In other words, Flash is the platform we all know and love. It has existed for a long time ([since at least 1996](http://en.wikipedia.org/wiki/Adobe_Flash)) and has a rich history. Flash, by itself, is not very good at writing Rich Internet Applications ([RIAs](http://en.wikipedia.org/wiki/Rich_Internet_application)) – it is very good at vector animation. Flex was introduced as an SDK to sit on top of Flash to enable application development. Air was introduced to allow Flex applications to run on the desktop.\n\nIf you were to compare the Adobe technology to [Silverlight](http://www.silverlight.net), Flex/Flash is to Silverlight as Air is to Silverlight Out-of-Browser.\n\n#### Developer Story\n\nMuch like Silverlight, Flex employs a declarative UI mechanism ([MXML](http://en.wikipedia.org/wiki/MXML)) for defining the view of an application. Unlike Silverlight, Flex developers only have one language choice available to them – [ActionScript](http://en.wikipedia.org/wiki/ActionScript). ActionScript is an [ECMAScript](http://en.wikipedia.org/wiki/ECMAScript)-like language, similar to [Javascript](http://en.wikipedia.org/wiki/Javascript) but with optional [static typing](http://en.wikipedia.org/wiki/Static_typing#Static_typing), [classes](http://en.wikipedia.org/wiki/Class_(computer_science)) and [interfaces](http://en.wikipedia.org/wiki/Interface_(computer_science)). Developers can also enable legacy [C](http://en.wikipedia.org/wiki/C_(programming_language)) and [C++](http://en.wikipedia.org/wiki/C%2B%2B) code to run in the “ActionScript Virtual Machine” by using a currently in-development technology called [Adobe Alchemy](http://labs.adobe.com/technologies/alchemy/).\n\n#### IDEs\n\nDevelopers tend to use [Flash Builder](http://www.adobe.com/products/flashbuilder/) as the IDE for producing Flex applications. Unfortunately, there are not any free versions of Flash Builder (there is a free 60 day trial). Flex developers also have the option to use [IDEA Ultimate by JetBrains](http://www.jetbrains.com/idea/), which is also a paid product. Unlike SIlverlight, these IDEs work in WIndows, Mac or Linux. Like Silverlight, the SDK is free and does not require an IDE to develop with. Other options are [FlashDevelop](http://www.flashdevelop.org/) and [Tofino](http://www.ensemble.com/products/tofino.shtml) – a [Visual Studio](http://www.microsoft.com/visualstudio/en-us/visual-studio-2010-launch?WT.mc_id=SEARCH&amp;WT.srch=1) plug-in for Flex development.\n\n#### SDKs and Toolkits\n\nThe Silverlight SDK is not open source. The [Flex SDK](http://www.adobe.com/products/flex/), however, is open source. It is a very simple zip-deployed download that can be copied anywhere you need. This makes integration with build and CI servers a cinch. By default, you use [Ant](http://en.wikipedia.org/wiki/Apache_Ant) for the build system, but any build manager. Similar to the [Silverlight Toolkit](http://silverlight.codeplex.com/), [flexlib](http://code.google.com/p/flexlib/) is a suite of value-added controls that you can bring into your solution.\n\n#### Design\n\nSince Flex is an Adobe product, the primary design environment is [Photoshop](http://www.adobe.com/products/photoshop/photoshop/) ([raster](http://en.wikipedia.org/wiki/Raster_graphics) art) and [Illustrator](http://www.adobe.com/products/illustrator/) ([vector](http://en.wikipedia.org/wiki/Vector_graphics) art). A third tool, [Catalyst](http://www.adobe.com/products/flashcatalyst/), is added as a bridge between the art tools and Flash Builder. Catalyst allows you to produce skins and styles using the Flex parts model. In the current release, the workflow is one way – Catalyst exports to a Flash Builder project. In future versions, Flash Builder will be capable of exporting back to Catalyst for a more bi-directional workflow. As far as I know, Catalyst does not support the parallel designer-developer workflow that [Expression Blend](http://www.microsoft.com/expression/products/Blend_Overview.aspx) does.&#160; \n\n#### Operating System Support\n\nFlex has a rich set of operating system support. Flex already works in Flash (browser) on Windows, OSX, Linux and [Android](http://www.android.com/). In the near future, Air applications will also be deployable to [iOS](http://en.wikipedia.org/wiki/IOS_(Apple)), [Blackberry](http://na.blackberry.com/eng/playbook-tablet//), Android, [Windows Phone 7](http://www.microsoft.com/windowsphone) and [GoogleTV](http://www.google.com/tv/) in addition to Windows, OSX and Linux. The list is so exhaustive, I am probably missing some. In future versions of Flex, Adobe has strategies for managing different form factors. [Air 2.5](http://www.adobe.com/devnet/air/articles/air25_whatsnew.html) will include all of the APIs for mobile devices that you would expect (GPS, accelerometer, multi-touch, etc).\n\n#### Getting Started\n\nThe easiest way to get started is to go to the [Flex product site](http://www.adobe.com/products/flex/) and download the 60 day [Flash Builder demo](http://www.adobe.com/products/flashbuilder/). Adobe also has demos of Catalyst, Photoshop and Illustrator.\n </div>","slug":"cross-training-in-silverlight-flex-platform-overview","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hn004k6eulr8k0ejpp"},{"title":"Cross-Training in Silverlight & Flex – The Future of RIAs","id":"164","date":"2010-10-30T05:31:36.000Z","_content":"\nMore [Cross-Training in Silverlight &amp; Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/)\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F10%2F30%2Fcross-training-in-silverlight-flex-the-future-of-rias%2F)](http://dotnetshoutout.com/Cross-Training-in-Silverlight-Flex-The-Future-of-RIAs)\n\nWhat a week for RIAs!&#160; The first half of the week was consumed by the [Adobe MAX](http://max.adobe.com/) conference where we got to see the future of Flex.&#160; The second half of the week was consumed by the [Microsoft PDC](http://player.microsoftpdc.com/session) conference where many of us were hoping to hear about the future of Silverlight.&#160; Unfortunately, the PDC conference was noticeably absent of Silverlight futures.&#160; This caused a ton of speculation about the future of Silverlight.&#160; \n\nOne of the most prominent articles of the day was written by the prolific technical journalist, Mary-Jo Foley – [Microsoft: Our strategy with Silverlight has shifted.](http://www.zdnet.com/blog/microsoft/microsoft-our-strategy-with-silverlight-has-shifted/7834)&#160; This article cause a huge uproar which then drew many people to weigh in on the topic (Is Silverlight dead?&#160; Is Microsoft abandoning SIlverlight?&#160; Is this the death of the RIA framework?).&#160; Many blog posts have come out with plenty of opinions, but I think I have a different perspective.&#160; One that looks further into the future and allows for peaceful co-existence between Silverlight, Flex and HTML5.\n\n<font color=\"#ff0000\">What I am about to write is purely speculative.&#160; I am making predictions. Predictions are very often wrong.&#160; Still, I think what I have to say adds to the debate.</font>\n\n### <font color=\"#000000\" face=\"Arial\">Let’s Stop Thinking of Flex and SIlverlight as Separate Platforms</font>\n\nThe browser is a platform.&#160; With the introduction of HTML5 standards, we have all of the primitive structures that are required for a client platform.&#160; The browser is ALSO a platform that lives on every web-enabled device we own.&#160; Because of this, many have made the brazen statement: “We don’t need RIA technologies (Flex and Silveright specifically).&#160; All we need is HTML5 and Javascript”.&#160; \n\nIf you think of Flex and Silverlight as separate platforms, I think I might agree with that.&#160; The browser is everywhere.&#160; Flash and SIlverlight are not.&#160; But is that REALLY where we are headed?&#160; Or did the RIA plug-in come into existence because we needed to shoehorn something before wide-spread adoption of HTML5?&#160; What if Flex and Silverlight were frameworks that sit on top of the browser platform instead of being their own platforms that compete with the browser?\n\nPut another way, I will ask this question: “Why do we need Silverlight and Flash plug-ins?”&#160; This is a serious question.&#160; Now that we have all of the primitive components necessary in the browser to do everything we need, why can’t Flex and Silverlight compile down to HTML5 and Javascript?\n\nSound crazy?&#160; I’ve been accused of this idea being crazy… but I don’t think it is.&#160; Microsoft proved that managed C# can be compiled down to Javascript (as opposed to byte code) over two years ago with their [Volta experiment](http://en.wikipedia.org/wiki/Microsoft_Live_Labs_Volta).&#160; Google has done similar things with Java.&#160; What is to say that Silverlight IL or Flex ActionScript bytecode can’t be compiled to Javascript?&#160; Continue with that reasoning and XAML or MXML (the declarative UIs of the RIA platforms) can be translated to the DOM.&#160; All of the control sets can be delivered as Javascript libraries that build upon existing HTML controls, or build up new ones with the canvas.&#160; **Everything can run natively on the HTML5 engine.&#160; Get rid of the plug-ins!**\n\n### Silverlight and Flex as Frameworks\n\nIn a plug-in free world, we are left to develop in any language and any framework we want.&#160; Silverlight and Flex become higher-level abstractions on the virtual machine that is HTML5.&#160; Developers are given choices – not just HTML and Javascript, but XAML and C#, MXML and ActionScript, HAML and Ruby, FooMark and MyLang, whatever.&#160; You won’t have to be confined to a single markup, control set and programming language.\n\nIn other words, if we start to look at the browser like a virtual machine, our RIA possibilities are endless.&#160; What if HTML6 defined a bytecode format that the frameworks compiled to?&#160; Skip the Javascript.&#160; We can follow this idea to many conclusions.\n  > <font color=\"#0000ff\">**EDIT:** To qualify my statements further, I want to be clear: I don’t expect Silverlight and Flex projects will translate directly to HTML5/JS.&#160; I think that Silverlight and Flex frameworks will become native browser frameworks (System.Core.js, or Flex.js for example).&#160; Silverlight and Flex applications will run with the frameworks in the browser without a plug-in.&#160; Doing so allows for these frameworks to be portable to all platforms (phones, tablets, set-tops, browsers and desktops).&#160; See my conversation with Michael Washington in the comments for more on this. </font>  \n\n### So, is Silverlight Dead?\n\nI don’t think so.&#160; I really believe that SIlverlight is shifting towards being a development framework, instead of a development platform.&#160; Look at the WIndows Phone 7, for example.&#160; The phone OS is the platform.&#160; Silverlight is the framework.&#160; Adobe is certainly looking at it this way.&#160; They have already created a tool that will compile Air apps down to the native iOS (iPhone) platform.&#160; In addition, they have announced that Air will be available on every device that we care about (iPhone, Android, Blackberry, WebOS, GoogleTV, etc).&#160; I **fully** expect Silverlight to do the same.\n\nSomebody on Twitter said “They didn’t mention me at the PDC. Does that mean I’m dead?”.&#160; A witty way to say it, but I think it rings true.&#160; They didn’t mention Silverlight specifically, probably because they were focusing on other things.&#160; They are taking a huge gamble on the phone, and I think it is necessary for the future of SIlverlight as a framework.&#160; We will hear more about SIlverlight.&#160; I am sure of it.&#160; **My take: SIlverlight isn’t dead.&#160; It is only evolving.**\n\nWhat do you think?&#160; Am I crazy? (I might be) If so, tell me why.&#160; ","source":"_posts/2010-10-30-cross-training-in-silverlight-flex-the-future-of-rias.md","raw":"---\ntitle: 'Cross-Training in Silverlight & Flex – The Future of RIAs'\ntags:\n  - Cross-Training\n  - Flex\n  - Future\n  - RIA\n  - Silverlight\nid: 164\ncategories:\n  - Uncategorized\ndate: 2010-10-30 01:31:36\n---\n\nMore [Cross-Training in Silverlight &amp; Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/)\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F10%2F30%2Fcross-training-in-silverlight-flex-the-future-of-rias%2F)](http://dotnetshoutout.com/Cross-Training-in-Silverlight-Flex-The-Future-of-RIAs)\n\nWhat a week for RIAs!&#160; The first half of the week was consumed by the [Adobe MAX](http://max.adobe.com/) conference where we got to see the future of Flex.&#160; The second half of the week was consumed by the [Microsoft PDC](http://player.microsoftpdc.com/session) conference where many of us were hoping to hear about the future of Silverlight.&#160; Unfortunately, the PDC conference was noticeably absent of Silverlight futures.&#160; This caused a ton of speculation about the future of Silverlight.&#160; \n\nOne of the most prominent articles of the day was written by the prolific technical journalist, Mary-Jo Foley – [Microsoft: Our strategy with Silverlight has shifted.](http://www.zdnet.com/blog/microsoft/microsoft-our-strategy-with-silverlight-has-shifted/7834)&#160; This article cause a huge uproar which then drew many people to weigh in on the topic (Is Silverlight dead?&#160; Is Microsoft abandoning SIlverlight?&#160; Is this the death of the RIA framework?).&#160; Many blog posts have come out with plenty of opinions, but I think I have a different perspective.&#160; One that looks further into the future and allows for peaceful co-existence between Silverlight, Flex and HTML5.\n\n<font color=\"#ff0000\">What I am about to write is purely speculative.&#160; I am making predictions. Predictions are very often wrong.&#160; Still, I think what I have to say adds to the debate.</font>\n\n### <font color=\"#000000\" face=\"Arial\">Let’s Stop Thinking of Flex and SIlverlight as Separate Platforms</font>\n\nThe browser is a platform.&#160; With the introduction of HTML5 standards, we have all of the primitive structures that are required for a client platform.&#160; The browser is ALSO a platform that lives on every web-enabled device we own.&#160; Because of this, many have made the brazen statement: “We don’t need RIA technologies (Flex and Silveright specifically).&#160; All we need is HTML5 and Javascript”.&#160; \n\nIf you think of Flex and Silverlight as separate platforms, I think I might agree with that.&#160; The browser is everywhere.&#160; Flash and SIlverlight are not.&#160; But is that REALLY where we are headed?&#160; Or did the RIA plug-in come into existence because we needed to shoehorn something before wide-spread adoption of HTML5?&#160; What if Flex and Silverlight were frameworks that sit on top of the browser platform instead of being their own platforms that compete with the browser?\n\nPut another way, I will ask this question: “Why do we need Silverlight and Flash plug-ins?”&#160; This is a serious question.&#160; Now that we have all of the primitive components necessary in the browser to do everything we need, why can’t Flex and Silverlight compile down to HTML5 and Javascript?\n\nSound crazy?&#160; I’ve been accused of this idea being crazy… but I don’t think it is.&#160; Microsoft proved that managed C# can be compiled down to Javascript (as opposed to byte code) over two years ago with their [Volta experiment](http://en.wikipedia.org/wiki/Microsoft_Live_Labs_Volta).&#160; Google has done similar things with Java.&#160; What is to say that Silverlight IL or Flex ActionScript bytecode can’t be compiled to Javascript?&#160; Continue with that reasoning and XAML or MXML (the declarative UIs of the RIA platforms) can be translated to the DOM.&#160; All of the control sets can be delivered as Javascript libraries that build upon existing HTML controls, or build up new ones with the canvas.&#160; **Everything can run natively on the HTML5 engine.&#160; Get rid of the plug-ins!**\n\n### Silverlight and Flex as Frameworks\n\nIn a plug-in free world, we are left to develop in any language and any framework we want.&#160; Silverlight and Flex become higher-level abstractions on the virtual machine that is HTML5.&#160; Developers are given choices – not just HTML and Javascript, but XAML and C#, MXML and ActionScript, HAML and Ruby, FooMark and MyLang, whatever.&#160; You won’t have to be confined to a single markup, control set and programming language.\n\nIn other words, if we start to look at the browser like a virtual machine, our RIA possibilities are endless.&#160; What if HTML6 defined a bytecode format that the frameworks compiled to?&#160; Skip the Javascript.&#160; We can follow this idea to many conclusions.\n  > <font color=\"#0000ff\">**EDIT:** To qualify my statements further, I want to be clear: I don’t expect Silverlight and Flex projects will translate directly to HTML5/JS.&#160; I think that Silverlight and Flex frameworks will become native browser frameworks (System.Core.js, or Flex.js for example).&#160; Silverlight and Flex applications will run with the frameworks in the browser without a plug-in.&#160; Doing so allows for these frameworks to be portable to all platforms (phones, tablets, set-tops, browsers and desktops).&#160; See my conversation with Michael Washington in the comments for more on this. </font>  \n\n### So, is Silverlight Dead?\n\nI don’t think so.&#160; I really believe that SIlverlight is shifting towards being a development framework, instead of a development platform.&#160; Look at the WIndows Phone 7, for example.&#160; The phone OS is the platform.&#160; Silverlight is the framework.&#160; Adobe is certainly looking at it this way.&#160; They have already created a tool that will compile Air apps down to the native iOS (iPhone) platform.&#160; In addition, they have announced that Air will be available on every device that we care about (iPhone, Android, Blackberry, WebOS, GoogleTV, etc).&#160; I **fully** expect Silverlight to do the same.\n\nSomebody on Twitter said “They didn’t mention me at the PDC. Does that mean I’m dead?”.&#160; A witty way to say it, but I think it rings true.&#160; They didn’t mention Silverlight specifically, probably because they were focusing on other things.&#160; They are taking a huge gamble on the phone, and I think it is necessary for the future of SIlverlight as a framework.&#160; We will hear more about SIlverlight.&#160; I am sure of it.&#160; **My take: SIlverlight isn’t dead.&#160; It is only evolving.**\n\nWhat do you think?&#160; Am I crazy? (I might be) If so, tell me why.&#160; ","slug":"cross-training-in-silverlight-flex-the-future-of-rias","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hp004m6eulg44wy3y1"},{"title":"Cross-Training in Silverlight and Flex – XAML vs MXML","id":"172","date":"2010-11-08T09:02:47.000Z","_content":"\nMore [Cross-Training in Silverlight and Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/)\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F11%2F08%2Fcross-training-in-silverlight-and-flex-xaml-vs-mxml%2F)](http://dotnetshoutout.com/Cross-Training-in-Silverlight-and-Flex-XAML-vs-MXML)\n\nSilverlight and Flex both include a declarative markup language for their UIs.&#160; Microsoft calls the Silverlight specification Extensible Application Markup Language (XAML pronounced zammel).&#160; Adobe calls the Flex specification MXML which is thought to have come from the original inventors: Macromedia extensible Markup Language.\n\nIn either case, these markup languages share two strong characteristics: They are both based on XML and they both do a fine job of declaring the UI.\n  <div style=\"background-color: #e8f3ff\">   \n\n### XAML\n\nYou use XAML in Silverlight to define the user interface in a declarative way.&#160; XAML is nothing more than XML with some Silverilght namespaces that let you represent a visual tree.&#160; Following is an example of **MainPage.xaml**.\n    <pre class=\"code\"><span style=\"color: blue\">&lt;</span><span style=\"color: #a31515\">UserControl </span><span style=\"color: red\">x</span><span style=\"color: blue\">:</span><span style=\"color: red\">Class</span><span style=\"color: blue\">=&quot;Hello_World.MainPage&quot;\n    </span><span style=\"color: red\">xmlns</span><span style=\"color: blue\">=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n    </span><span style=\"color: red\">xmlns</span><span style=\"color: blue\">:</span><span style=\"color: red\">x</span><span style=\"color: blue\">=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n             </span><span style=\"color: red\">Width</span><span style=\"color: blue\">=&quot;300&quot; </span><span style=\"color: red\">Height</span><span style=\"color: blue\">=&quot;36&quot;&gt;\n\n    &lt;</span><span style=\"color: #a31515\">Border </span><span style=\"color: red\">BorderThickness</span><span style=\"color: blue\">=&quot;5&quot; </span><span style=\"color: red\">CornerRadius</span><span style=\"color: blue\">=&quot;5&quot; </span><span style=\"color: blue\">\n            </span><span style=\"color: red\">BorderBrush</span><span style=\"color: blue\">=&quot;Black&quot; </span><span style=\"color: red\">Height</span><span style=\"color: blue\">=&quot;Auto&quot; </span><span style=\"color: red\">Width</span><span style=\"color: blue\">=&quot;Auto&quot;&gt;\n        &lt;</span><span style=\"color: #a31515\">StackPanel </span><span style=\"color: red\">Orientation</span><span style=\"color: blue\">=&quot;Horizontal&quot;&gt;\n            &lt;</span><span style=\"color: #a31515\">TextBox </span><span style=\"color: red\">Width</span><span style=\"color: blue\">=&quot;100&quot; </span><span style=\"color: red\">Name</span><span style=\"color: blue\">=&quot;Input&quot; </span><span style=\"color: red\">Margin</span><span style=\"color: blue\">=&quot;3&quot; /&gt;\n            &lt;</span><span style=\"color: #a31515\">Button </span><span style=\"color: red\">Content</span><span style=\"color: blue\">=&quot;Say Hello&quot; </span><span style=\"color: red\">Click</span><span style=\"color: blue\">=&quot;SayHello&quot; </span><span style=\"color: red\">Margin</span><span style=\"color: blue\">=&quot;3&quot; /&gt;\n            &lt;</span><span style=\"color: #a31515\">TextBlock </span><span style=\"color: red\">Name</span><span style=\"color: blue\">=&quot;Output&quot; </span><span style=\"color: red\">Margin</span><span style=\"color: blue\">=&quot;3&quot; <font color=\"#ff0000\">VerticalAlignment</font>=&quot;Bottom&quot; /&gt;\n        &lt;/</span><span style=\"color: #a31515\">StackPanel</span><span style=\"color: blue\">&gt;\n    &lt;/</span><span style=\"color: #a31515\">Border</span><span style=\"color: blue\">&gt;\n\n&lt;/</span><span style=\"color: #a31515\">UserControl</span><span style=\"color: blue\">&gt;\n</span></pre>\n\nThe MainPage UserControl uses this XAML code to define the entire view.&#160; A Border houses three UI components stacked together: text input, a button to do something with and a label to show the output.&#160; If you were to type this into your MainPage control in Silverlight, it would look like this in your browser:\n\n&#160;[![image](http://houseofbilz.com/wp-content/uploads/2010/11/image_thumb2.png \"image\")](http://houseofbilz.com/wp-content/uploads/2010/11/image2.png)\n\n<span style=\"color: blue\"></span>\n\nOf course, the declarative XAML is nothing without some imperative behavior. Visual Studio, generates a corresponding “code-behind” whenever a UserControl is created. In the simplest of cases, you place your behavior in the “code-behind” file. In this case, the file is named **MainPage.xaml.cs**.&#160; By default, it creates a constructor for you that calls **InitializeComponent()**.&#160; I added the **SayHello** method that will get called whenever the button (defined in the XAML) is pressed.\n\n  <pre class=\"code\"><span style=\"color: blue\">public partial class </span><span style=\"color: #2b91af\">MainPage\n</span>{\n    <span style=\"color: blue\">public </span>MainPage()\n    {\n        InitializeComponent();\n    }\n\n    <span style=\"color: blue\">private void </span>SayHello(<span style=\"color: blue\">object </span>sender, <span style=\"color: #2b91af\">RoutedEventArgs </span>e)\n    {\n        Output.Text = <span style=\"color: #a31515\">&quot;Hello &quot; </span>+ Input.Text;\n    }\n}</pre>\n\nMost XAML introductions get off the train at this point. This series aims to show the differences between Silverlight and Flex so I will continue on to describe how the XAML and the C# code get glued together.\n\nNotice in the “code behind” that the class it generated is a **partial** class.&#160; This means that there is more to this class somewhere else.&#160; Digging deeper into the **obj/Debug** folder, you will find an intermediate file named **MainPage.g.cs**.&#160; It holds the rest of this **partial** class:\n\n  <pre class=\"code\"><span style=\"color: blue\">public partial class </span><span style=\"color: #2b91af\">MainPage </span>: System.Windows.Controls.UserControl {\n\n    <span style=\"color: blue\">internal </span>System.Windows.Controls.TextBox Input;        \n    <span style=\"color: blue\">internal </span>System.Windows.Controls.TextBlock Output;        \n    <span style=\"color: blue\">private bool </span>_contentLoaded;\n\n<span style=\"color: gray\">    </span>[System.Diagnostics.<span style=\"color: #2b91af\">DebuggerNonUserCodeAttribute</span>()]\n    <span style=\"color: blue\">public void </span>InitializeComponent() {\n        <span style=\"color: blue\">if </span>(_contentLoaded) {\n            <span style=\"color: blue\">return</span>;\n        }\n        _contentLoaded = <span style=\"color: blue\">true</span>;\n        System.Windows.Application.LoadComponent(<span style=\"color: blue\">this</span>, \n            <span style=\"color: blue\">new </span>System.Uri(<span style=\"color: #a31515\">&quot;/Hello%20World;component/MainPage.xaml&quot;</span>, \n                           System.UriKind.Relative));\n        <span style=\"color: blue\">this</span>.Input = ((System.Windows.Controls.TextBox)(<span style=\"color: blue\">this</span>.FindName(<span style=\"color: #a31515\">&quot;Input&quot;</span>)));\n        <span style=\"color: blue\">this</span>.Output = ((System.Windows.Controls.TextBlock)(<span style=\"color: blue\">this</span>.FindName(<span style=\"color: #a31515\">&quot;Output&quot;</span>)));\n    }\n}</pre>\n\nWe can see where some of the important “glue” is defined. The code derives from **UserControl** and defines the **InitializeComponent** method that is called in the constructor.&#160; It also generates the two named controls: **Input** and** Outut **based on the names defined in the XAML.&#160; The **InitializeComponent** method then desterilizes the XAML into an object tree.&#160; It finishes by setting the **Input** and **Output** controls to be items found in the visual tree.&#160; This is how the “code-behind” can access these controls in the **SayHello** method.\n\nThe last bit of glue happens in the compiler.&#160; The XAML file is compiled into the DLL as an “embedded resource”.&#160; This happens automatically so you don’t need to think about it.&#160; If you are curious, you can crack open the DLL with [Reflecor](http://www.red-gate.com/products/reflector/index.htm) and find the XAML packed into the DLL.&#160; The **InitializeComponent** method loads the tree from the same XAML file which is embedded at compile-time.\n\n[](http://11011.net/software/vspaste)\n\n[![Untitled](http://houseofbilz.com/wp-content/uploads/2010/11/Untitled_thumb.gif \"Untitled\")](http://houseofbilz.com/wp-content/uploads/2010/11/Untitled.gif)&#160;\n\n</div>\n\n<div style=\"background-color: #ffe8e8\">\n\n### MXML\n\nMXML in Flex is used to define the user interface in a declarative way.&#160; MXML is nothing more than XML with some Flex namespaces that let you represent a visual tree.&#160; Following is an example of **Main.mxml**.\n\n<font size=\"2\"><font face=\"Courier New\">&lt;?xml version=<font color=\"#ff0000\">&quot;1.0&quot;</font> encoding=<font color=\"#ff0000\">&quot;utf-8&quot;</font>?&gt;\n\n<font color=\"#0000ff\">&lt;s:Application</font> xmlns:fx=<font color=\"#ff0000\">&quot;</font></font></font>[<font color=\"#ff0000\" size=\"2\" face=\"Courier New\">http://ns.adobe.com/mxml/2009&quot;</font>](http://ns.adobe.com/mxml/2009&quot;)\n\n<font size=\"2\" face=\"Courier New\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; xmlns:s=<font color=\"#ff0000\">&quot;library://ns.adobe.com/flex/spark&quot;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; width=<font color=\"#ff0000\">&quot;300&quot;</font> height=<font color=\"#ff0000\">&quot;40&quot;</font><font color=\"#0000ff\">&gt;\n\n</font>&#160;&#160; </font><font size=\"2\"><font face=\"Courier New\"><font color=\"#008000\">&lt;fx:Script&gt;\n\n</font>&#160;&#160;&#160;&#160;&#160;&#160; &lt;![CDATA[\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">public function</font> sayHello():<font color=\"#0000ff\">void</font>{\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; output.text = <font color=\"#ff0000\">&quot;Hello &quot;</font>+ input.text;\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; ]]&gt;\n\n&#160;&#160; <font color=\"#008000\">&lt;/fx:Script&gt;</font> </font></font>\n\n<font size=\"2\" face=\"Courier New\">&#160;&#160; <font color=\"#0000ff\">&lt;s:BorderContainer</font> borderWeight=<font color=\"#ff0000\">&quot;5&quot;</font> cornerRadius=<font color=\"#ff0000\">&quot;5&quot;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; borderColor=<font color=\"#ff0000\">&quot;black&quot;</font> minHeight=<font color=\"#ff0000\">&quot;0&quot;</font> width=<font color=\"#ff0000\">&quot;100%&quot;</font><font color=\"#0000ff\">&gt;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">&lt;s:HGroup</font> left=<font color=\"#ff0000\">&quot;3&quot;</font> right=<font color=\"#ff0000\">&quot;3&quot;</font> top=<font color=\"#ff0000\">&quot;3&quot;</font> bottom=<font color=\"#ff0000\">&quot;3&quot;</font><font color=\"#0000ff\">&gt;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">&lt;s:TextInput</font> width=<font color=\"#ff0000\">&quot;100&quot;</font> id=<font color=\"#ff0000\">&quot;input&quot;</font>/<font color=\"#0000ff\">&gt;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">&lt;s:Button</font> label=<font color=\"#ff0000\">&quot;Say Hello&quot;</font> click=<font color=\"#ff0000\">&quot;sayHello()&quot;</font> left=<font color=\"#ff0000\">&quot;6&quot;</font>/<font color=\"#0000ff\">&gt;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">&lt;s:Label</font> id=<font color=\"#ff0000\">&quot;output&quot;</font> left=<font color=\"#ff0000\">&quot;6&quot;</font> verticalAlign=<font color=\"#ff0000\">&quot;bottom&quot;</font> height=<font color=\"#ff0000\">&quot;100%&quot;</font>/<font color=\"#0000ff\">&gt;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; </font><font color=\"#0000ff\" size=\"2\" face=\"Courier New\">&lt;/s:HGroup&gt;\n\n&#160;&#160;&#160; &lt;/s:BorderContainer&gt;\n\n&lt;/s:Application&gt;</font>\n\n<span style=\"color: blue\"><font color=\"#000000\">This MXML code defines the entire application.&#160; It is composed of a **BorderContainer** that houses three UI components grouped together: text input, a button to do something with and a label to show the output.&#160; If you were to type this into your **Main.mxml** view in Flex, it would look like this in your browser:</font></span>\n\n[![image](http://houseofbilz.com/wp-content/uploads/2010/11/image_thumb3.png \"image\")](http://houseofbilz.com/wp-content/uploads/2010/11/image3.png)\n\nOf course, the declarative MXML is nothing without some imperative behavior.&#160; The default way to do this in Flex is to use the HTML model of **Script** tags.&#160; The **sayHello** method is defined directly in the MXML.&#160; There are better ways (in my opinion) to separate the imperative behavior from the view, but this is a simple example.\n\nMost MXML introductions get off the train at this point.&#160; This series aims to show the differences between Silverlight and Flex, so I will continue to describe what happens to this MXML at compile-time.\n\nUnlike Silverlight where the XAML is embedded in the compiled project and parsed at runtime, Flex takes a different approach.&#160; MXML views get parsed at compile-time and translated directly into ActionScript. The actual code that the compiler generates is transient – it gets removed after the compile step -- unless you add the –**keep-generated-actionscript** flag to the compiler.\n\nWhen this happens, quite a lot of code gets generated.&#160; I don’t want to put everything on this post, but here is a snippet from the generated code:\n\n<font size=\"2\"><font face=\"Courier New\"><font color=\"#0000ff\">public</font> <font color=\"#ff00ff\">class</font> Main <font color=\"#0000ff\">extends</font> spark.components.Application&#160;&#160;&#160; \n{</font> </font>\n\n&#160;&#160;&#160; [<font color=\"#0000ff\">Bindable</font>] <font color=\"#0000ff\">public</font> <font color=\"#8bb8ba\">var</font> input : spark.components.TextInput;&#160;&#160;&#160; \n&#160;&#160;&#160; [<font color=\"#0000ff\">Bindable</font>] <font color=\"#0000ff\">public</font> <font color=\"#6ca6aa\">var</font> output : spark.components.Label;\n\n&#160;&#160;&#160; <font color=\"#0000ff\">public</font> <font color=\"#008000\">function</font> Main()\n\n&#160;&#160;&#160; {\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">super</font>();\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">this</font>.width = 300;\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">this</font>.height = 40;\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">this</font>.mxmlContentFactory = <font color=\"#0000ff\">new </font>mx.core.DeferredInstanceFromFunction(_Main_Array1_c);\n\n&#160;&#160;&#160; }\n\n}\n\nThe constructor sets up a **_Main_Array1_c** function which calls several other methods hierarchically which creates the controls that were defined in the MXML.\n\nThe details of the generated code are not terribly important.&#160; The important thing to understand is that the MXML gets compiled into ActionScript and it is not parsed at run-time.&#160; XAML in Silverlight gets parsed at run-time but VisualStudio does generate some C# code to help glue the XAML to the code-behind.\n\n</div>","source":"_posts/2010-11-08-cross-training-in-silverlight-and-flex-xaml-vs-mxml.md","raw":"---\ntitle: Cross-Training in Silverlight and Flex – XAML vs MXML\ntags:\n  - Cross-Training\n  - Flex\n  - MXML\n  - Silverlight\n  - XAML\nid: 172\ncategories:\n  - Uncategorized\ndate: 2010-11-08 04:02:47\n---\n\nMore [Cross-Training in Silverlight and Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/)\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F11%2F08%2Fcross-training-in-silverlight-and-flex-xaml-vs-mxml%2F)](http://dotnetshoutout.com/Cross-Training-in-Silverlight-and-Flex-XAML-vs-MXML)\n\nSilverlight and Flex both include a declarative markup language for their UIs.&#160; Microsoft calls the Silverlight specification Extensible Application Markup Language (XAML pronounced zammel).&#160; Adobe calls the Flex specification MXML which is thought to have come from the original inventors: Macromedia extensible Markup Language.\n\nIn either case, these markup languages share two strong characteristics: They are both based on XML and they both do a fine job of declaring the UI.\n  <div style=\"background-color: #e8f3ff\">   \n\n### XAML\n\nYou use XAML in Silverlight to define the user interface in a declarative way.&#160; XAML is nothing more than XML with some Silverilght namespaces that let you represent a visual tree.&#160; Following is an example of **MainPage.xaml**.\n    <pre class=\"code\"><span style=\"color: blue\">&lt;</span><span style=\"color: #a31515\">UserControl </span><span style=\"color: red\">x</span><span style=\"color: blue\">:</span><span style=\"color: red\">Class</span><span style=\"color: blue\">=&quot;Hello_World.MainPage&quot;\n    </span><span style=\"color: red\">xmlns</span><span style=\"color: blue\">=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n    </span><span style=\"color: red\">xmlns</span><span style=\"color: blue\">:</span><span style=\"color: red\">x</span><span style=\"color: blue\">=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n             </span><span style=\"color: red\">Width</span><span style=\"color: blue\">=&quot;300&quot; </span><span style=\"color: red\">Height</span><span style=\"color: blue\">=&quot;36&quot;&gt;\n\n    &lt;</span><span style=\"color: #a31515\">Border </span><span style=\"color: red\">BorderThickness</span><span style=\"color: blue\">=&quot;5&quot; </span><span style=\"color: red\">CornerRadius</span><span style=\"color: blue\">=&quot;5&quot; </span><span style=\"color: blue\">\n            </span><span style=\"color: red\">BorderBrush</span><span style=\"color: blue\">=&quot;Black&quot; </span><span style=\"color: red\">Height</span><span style=\"color: blue\">=&quot;Auto&quot; </span><span style=\"color: red\">Width</span><span style=\"color: blue\">=&quot;Auto&quot;&gt;\n        &lt;</span><span style=\"color: #a31515\">StackPanel </span><span style=\"color: red\">Orientation</span><span style=\"color: blue\">=&quot;Horizontal&quot;&gt;\n            &lt;</span><span style=\"color: #a31515\">TextBox </span><span style=\"color: red\">Width</span><span style=\"color: blue\">=&quot;100&quot; </span><span style=\"color: red\">Name</span><span style=\"color: blue\">=&quot;Input&quot; </span><span style=\"color: red\">Margin</span><span style=\"color: blue\">=&quot;3&quot; /&gt;\n            &lt;</span><span style=\"color: #a31515\">Button </span><span style=\"color: red\">Content</span><span style=\"color: blue\">=&quot;Say Hello&quot; </span><span style=\"color: red\">Click</span><span style=\"color: blue\">=&quot;SayHello&quot; </span><span style=\"color: red\">Margin</span><span style=\"color: blue\">=&quot;3&quot; /&gt;\n            &lt;</span><span style=\"color: #a31515\">TextBlock </span><span style=\"color: red\">Name</span><span style=\"color: blue\">=&quot;Output&quot; </span><span style=\"color: red\">Margin</span><span style=\"color: blue\">=&quot;3&quot; <font color=\"#ff0000\">VerticalAlignment</font>=&quot;Bottom&quot; /&gt;\n        &lt;/</span><span style=\"color: #a31515\">StackPanel</span><span style=\"color: blue\">&gt;\n    &lt;/</span><span style=\"color: #a31515\">Border</span><span style=\"color: blue\">&gt;\n\n&lt;/</span><span style=\"color: #a31515\">UserControl</span><span style=\"color: blue\">&gt;\n</span></pre>\n\nThe MainPage UserControl uses this XAML code to define the entire view.&#160; A Border houses three UI components stacked together: text input, a button to do something with and a label to show the output.&#160; If you were to type this into your MainPage control in Silverlight, it would look like this in your browser:\n\n&#160;[![image](http://houseofbilz.com/wp-content/uploads/2010/11/image_thumb2.png \"image\")](http://houseofbilz.com/wp-content/uploads/2010/11/image2.png)\n\n<span style=\"color: blue\"></span>\n\nOf course, the declarative XAML is nothing without some imperative behavior. Visual Studio, generates a corresponding “code-behind” whenever a UserControl is created. In the simplest of cases, you place your behavior in the “code-behind” file. In this case, the file is named **MainPage.xaml.cs**.&#160; By default, it creates a constructor for you that calls **InitializeComponent()**.&#160; I added the **SayHello** method that will get called whenever the button (defined in the XAML) is pressed.\n\n  <pre class=\"code\"><span style=\"color: blue\">public partial class </span><span style=\"color: #2b91af\">MainPage\n</span>{\n    <span style=\"color: blue\">public </span>MainPage()\n    {\n        InitializeComponent();\n    }\n\n    <span style=\"color: blue\">private void </span>SayHello(<span style=\"color: blue\">object </span>sender, <span style=\"color: #2b91af\">RoutedEventArgs </span>e)\n    {\n        Output.Text = <span style=\"color: #a31515\">&quot;Hello &quot; </span>+ Input.Text;\n    }\n}</pre>\n\nMost XAML introductions get off the train at this point. This series aims to show the differences between Silverlight and Flex so I will continue on to describe how the XAML and the C# code get glued together.\n\nNotice in the “code behind” that the class it generated is a **partial** class.&#160; This means that there is more to this class somewhere else.&#160; Digging deeper into the **obj/Debug** folder, you will find an intermediate file named **MainPage.g.cs**.&#160; It holds the rest of this **partial** class:\n\n  <pre class=\"code\"><span style=\"color: blue\">public partial class </span><span style=\"color: #2b91af\">MainPage </span>: System.Windows.Controls.UserControl {\n\n    <span style=\"color: blue\">internal </span>System.Windows.Controls.TextBox Input;        \n    <span style=\"color: blue\">internal </span>System.Windows.Controls.TextBlock Output;        \n    <span style=\"color: blue\">private bool </span>_contentLoaded;\n\n<span style=\"color: gray\">    </span>[System.Diagnostics.<span style=\"color: #2b91af\">DebuggerNonUserCodeAttribute</span>()]\n    <span style=\"color: blue\">public void </span>InitializeComponent() {\n        <span style=\"color: blue\">if </span>(_contentLoaded) {\n            <span style=\"color: blue\">return</span>;\n        }\n        _contentLoaded = <span style=\"color: blue\">true</span>;\n        System.Windows.Application.LoadComponent(<span style=\"color: blue\">this</span>, \n            <span style=\"color: blue\">new </span>System.Uri(<span style=\"color: #a31515\">&quot;/Hello%20World;component/MainPage.xaml&quot;</span>, \n                           System.UriKind.Relative));\n        <span style=\"color: blue\">this</span>.Input = ((System.Windows.Controls.TextBox)(<span style=\"color: blue\">this</span>.FindName(<span style=\"color: #a31515\">&quot;Input&quot;</span>)));\n        <span style=\"color: blue\">this</span>.Output = ((System.Windows.Controls.TextBlock)(<span style=\"color: blue\">this</span>.FindName(<span style=\"color: #a31515\">&quot;Output&quot;</span>)));\n    }\n}</pre>\n\nWe can see where some of the important “glue” is defined. The code derives from **UserControl** and defines the **InitializeComponent** method that is called in the constructor.&#160; It also generates the two named controls: **Input** and** Outut **based on the names defined in the XAML.&#160; The **InitializeComponent** method then desterilizes the XAML into an object tree.&#160; It finishes by setting the **Input** and **Output** controls to be items found in the visual tree.&#160; This is how the “code-behind” can access these controls in the **SayHello** method.\n\nThe last bit of glue happens in the compiler.&#160; The XAML file is compiled into the DLL as an “embedded resource”.&#160; This happens automatically so you don’t need to think about it.&#160; If you are curious, you can crack open the DLL with [Reflecor](http://www.red-gate.com/products/reflector/index.htm) and find the XAML packed into the DLL.&#160; The **InitializeComponent** method loads the tree from the same XAML file which is embedded at compile-time.\n\n[](http://11011.net/software/vspaste)\n\n[![Untitled](http://houseofbilz.com/wp-content/uploads/2010/11/Untitled_thumb.gif \"Untitled\")](http://houseofbilz.com/wp-content/uploads/2010/11/Untitled.gif)&#160;\n\n</div>\n\n<div style=\"background-color: #ffe8e8\">\n\n### MXML\n\nMXML in Flex is used to define the user interface in a declarative way.&#160; MXML is nothing more than XML with some Flex namespaces that let you represent a visual tree.&#160; Following is an example of **Main.mxml**.\n\n<font size=\"2\"><font face=\"Courier New\">&lt;?xml version=<font color=\"#ff0000\">&quot;1.0&quot;</font> encoding=<font color=\"#ff0000\">&quot;utf-8&quot;</font>?&gt;\n\n<font color=\"#0000ff\">&lt;s:Application</font> xmlns:fx=<font color=\"#ff0000\">&quot;</font></font></font>[<font color=\"#ff0000\" size=\"2\" face=\"Courier New\">http://ns.adobe.com/mxml/2009&quot;</font>](http://ns.adobe.com/mxml/2009&quot;)\n\n<font size=\"2\" face=\"Courier New\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; xmlns:s=<font color=\"#ff0000\">&quot;library://ns.adobe.com/flex/spark&quot;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; width=<font color=\"#ff0000\">&quot;300&quot;</font> height=<font color=\"#ff0000\">&quot;40&quot;</font><font color=\"#0000ff\">&gt;\n\n</font>&#160;&#160; </font><font size=\"2\"><font face=\"Courier New\"><font color=\"#008000\">&lt;fx:Script&gt;\n\n</font>&#160;&#160;&#160;&#160;&#160;&#160; &lt;![CDATA[\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">public function</font> sayHello():<font color=\"#0000ff\">void</font>{\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; output.text = <font color=\"#ff0000\">&quot;Hello &quot;</font>+ input.text;\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; ]]&gt;\n\n&#160;&#160; <font color=\"#008000\">&lt;/fx:Script&gt;</font> </font></font>\n\n<font size=\"2\" face=\"Courier New\">&#160;&#160; <font color=\"#0000ff\">&lt;s:BorderContainer</font> borderWeight=<font color=\"#ff0000\">&quot;5&quot;</font> cornerRadius=<font color=\"#ff0000\">&quot;5&quot;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; borderColor=<font color=\"#ff0000\">&quot;black&quot;</font> minHeight=<font color=\"#ff0000\">&quot;0&quot;</font> width=<font color=\"#ff0000\">&quot;100%&quot;</font><font color=\"#0000ff\">&gt;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">&lt;s:HGroup</font> left=<font color=\"#ff0000\">&quot;3&quot;</font> right=<font color=\"#ff0000\">&quot;3&quot;</font> top=<font color=\"#ff0000\">&quot;3&quot;</font> bottom=<font color=\"#ff0000\">&quot;3&quot;</font><font color=\"#0000ff\">&gt;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">&lt;s:TextInput</font> width=<font color=\"#ff0000\">&quot;100&quot;</font> id=<font color=\"#ff0000\">&quot;input&quot;</font>/<font color=\"#0000ff\">&gt;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">&lt;s:Button</font> label=<font color=\"#ff0000\">&quot;Say Hello&quot;</font> click=<font color=\"#ff0000\">&quot;sayHello()&quot;</font> left=<font color=\"#ff0000\">&quot;6&quot;</font>/<font color=\"#0000ff\">&gt;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">&lt;s:Label</font> id=<font color=\"#ff0000\">&quot;output&quot;</font> left=<font color=\"#ff0000\">&quot;6&quot;</font> verticalAlign=<font color=\"#ff0000\">&quot;bottom&quot;</font> height=<font color=\"#ff0000\">&quot;100%&quot;</font>/<font color=\"#0000ff\">&gt;</font>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; </font><font color=\"#0000ff\" size=\"2\" face=\"Courier New\">&lt;/s:HGroup&gt;\n\n&#160;&#160;&#160; &lt;/s:BorderContainer&gt;\n\n&lt;/s:Application&gt;</font>\n\n<span style=\"color: blue\"><font color=\"#000000\">This MXML code defines the entire application.&#160; It is composed of a **BorderContainer** that houses three UI components grouped together: text input, a button to do something with and a label to show the output.&#160; If you were to type this into your **Main.mxml** view in Flex, it would look like this in your browser:</font></span>\n\n[![image](http://houseofbilz.com/wp-content/uploads/2010/11/image_thumb3.png \"image\")](http://houseofbilz.com/wp-content/uploads/2010/11/image3.png)\n\nOf course, the declarative MXML is nothing without some imperative behavior.&#160; The default way to do this in Flex is to use the HTML model of **Script** tags.&#160; The **sayHello** method is defined directly in the MXML.&#160; There are better ways (in my opinion) to separate the imperative behavior from the view, but this is a simple example.\n\nMost MXML introductions get off the train at this point.&#160; This series aims to show the differences between Silverlight and Flex, so I will continue to describe what happens to this MXML at compile-time.\n\nUnlike Silverlight where the XAML is embedded in the compiled project and parsed at runtime, Flex takes a different approach.&#160; MXML views get parsed at compile-time and translated directly into ActionScript. The actual code that the compiler generates is transient – it gets removed after the compile step -- unless you add the –**keep-generated-actionscript** flag to the compiler.\n\nWhen this happens, quite a lot of code gets generated.&#160; I don’t want to put everything on this post, but here is a snippet from the generated code:\n\n<font size=\"2\"><font face=\"Courier New\"><font color=\"#0000ff\">public</font> <font color=\"#ff00ff\">class</font> Main <font color=\"#0000ff\">extends</font> spark.components.Application&#160;&#160;&#160; \n{</font> </font>\n\n&#160;&#160;&#160; [<font color=\"#0000ff\">Bindable</font>] <font color=\"#0000ff\">public</font> <font color=\"#8bb8ba\">var</font> input : spark.components.TextInput;&#160;&#160;&#160; \n&#160;&#160;&#160; [<font color=\"#0000ff\">Bindable</font>] <font color=\"#0000ff\">public</font> <font color=\"#6ca6aa\">var</font> output : spark.components.Label;\n\n&#160;&#160;&#160; <font color=\"#0000ff\">public</font> <font color=\"#008000\">function</font> Main()\n\n&#160;&#160;&#160; {\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">super</font>();\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">this</font>.width = 300;\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">this</font>.height = 40;\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color=\"#0000ff\">this</font>.mxmlContentFactory = <font color=\"#0000ff\">new </font>mx.core.DeferredInstanceFromFunction(_Main_Array1_c);\n\n&#160;&#160;&#160; }\n\n}\n\nThe constructor sets up a **_Main_Array1_c** function which calls several other methods hierarchically which creates the controls that were defined in the MXML.\n\nThe details of the generated code are not terribly important.&#160; The important thing to understand is that the MXML gets compiled into ActionScript and it is not parsed at run-time.&#160; XAML in Silverlight gets parsed at run-time but VisualStudio does generate some C# code to help glue the XAML to the code-behind.\n\n</div>","slug":"cross-training-in-silverlight-and-flex-xaml-vs-mxml","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hq004q6eulowm8wzys"},{"title":"Cross-Training in Silverlight & Flex -- C#/CLR vs ActionScript3/AVM Part 1","id":"197","date":"2010-12-17T07:59:22.000Z","_content":"\nMore [Cross-Training in Silverlight &amp; Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/)\n [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F12%2F17%2Fcross-training-in-silverlight-flex-cclr-vs-actionscript3avm-part-1%2F)](http://dotnetshoutout.com/Cross-Training-in-Silverlight-Flex-%E2%80%94-CCLR-vs-ActionScript3AVM-Part-1)   \n\nIn my previous post, I talked about the [declarative side of Silverlight and Flex](http://houseofbilz.com/archives/2010/11/08/cross-training-in-silverlight-and-flex-xaml-vs-mxml/) (XAML vs MXML).&#160; In this post, I will talk about the [imperative](http://en.wikipedia.org/wiki/Imperative_programming) side Silverlight and Flex.&#160; In other words, this is where developers write code that executes logic to modify state.&#160; The primary languages for Silverlight and Flex are C# and ActionScript (there are others) and the execution run-times are the Common Language Runtime (CLR) and the ActionScript Virtual Machine (AVM).\n  <div style=\"background-color: #e8f3ff\">   \n\n### C#/CLR\n\nThe most widely used language in Silverlight is C#, a C-like language that is easy to use/read and it is very powerful.&#160; It is an object-oriented language, though it borrows concepts from functional languages.&#160; C# code compiles down to byte code which gets executed on the Common Language Runtime (CLR).&#160; As its name implies, the CLR can run languages other than C#.&#160; The supported language list is quite long, but some of the more common options are [VisualBasic.Net](http://msdn.microsoft.com/en-us/vbasic/default), [F#](http://msdn.microsoft.com/en-us/fsharp/default), [IronRuby](http://ironruby.net/) and [IronPython](http://ironpython.codeplex.com/).&#160; Since C# is the most commonly used, I will focus on it in this post.\n\n#### <font style=\"font-weight: bold\">Hello World</font>\n\nTo start things off, here is a “Hello World” application written in C#.&#160; It is quite similar to ActionScript because they are both object-oriented languages.\n    <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">class Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(&quot;Hello World&quot;);            \n    }\n}</pre>\n\n#### &#160;\n\n#### <font style=\"font-weight: bold\">Static by Default, Dynamic by Option</font>\n\nSince its inception, C# has been a static language.&#160; Microsoft introduced optional dynamic typing in C# 4.0 with the **dynamic** keyword.&#160; In other words, variables defined as dynamic use late binding to resolve properties and methods where all other variables are checked at compile-time.\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">// STATIC EXAMPLE\nTurkey turkey = new Turkey();\nConsole.WriteLine(turkey.Weight);\nvar steamShovel = new SteamShovel(); // Implicit Typing\nConsole.WriteLine(steamShovel.Weight);\nConsole.WriteLine(steamShovel.NotThere); // Compile-time Error\n\n// DYNAMIC EXAMPLE\ndynamic item = new Turkey();\nConsole.WriteLine(item.Weight);\nitem = new SteamShovel();\nConsole.WriteLine(item.Weight);\nConsole.WriteLine(item.NotThere); // Runtime Error</pre>\n\n#### &#160;\n\n#### <font style=\"font-weight: bold\">Classes/Interfaces</font>\n\nC# defines interfaces, classes and derived classes very similar to ActionScript or Java:\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">public interface IGobbleable\n{\n    void Gobble();\n}\n\npublic class Turkey : IGobbleable\n{\n    public int Weight { get { return 5; } }\n\n    public virtual void Gobble()\n    {\n        Console.WriteLine(&quot;Gobble Gobble&quot;);\n    }\n}\n\npublic class WildTurkey : Turkey\n{\n    public override void Gobble()\n    {\n        Console.WriteLine(&quot;Putts Putts&quot;);\n    }\n}</pre>\n\nIn “Part 2” of my imperative programming comparison, I will cover Generics, Iterators, Attributes, Lambdas and XML Literals.\n\n</div>\n\n#### &#160; \n\n<div style=\"background-color: #ffe8e8\">\n\n### ActionScript3/AVM\n\nThe most widely used language in Flex is ActionScript3, an [ECMAScript](http://www.ecmascript.org/) dialect that is easy to use/read and is quite powerful (though not as powerful as C#, in my opinion).&#160; Although it is often compared to another widely used ECMAScript language, [JavaScript](http://en.wikipedia.org/wiki/JavaScript), it diverges in a way that feels more like Java.&#160; Like Java, ActionScript3 is object-oriented with classes and interfaces.&#160; It also has optional static typing which JavaScript does not have.&#160; ActionScript3 code compiles down to ActionScript Byte Code (ABC) and runs on the ActionScript Virtual Machine (AVM2) – also known as [Tamarin](http://www.mozilla.org/projects/tamarin/).&#160; \n\nAlthough ActionScript is the only official language supported on the AVM2, there are several options for developing in Flex.&#160; Adobe Labs released a preview of [Alchemy](http://labs.adobe.com/technologies/alchemy/), a tool for compiling C/C++ code to run on the AVM2.&#160; The widely-known [haXe](http://haxe.org/) language, which is like ActionScript on steroids, also compiles for the AVM2.&#160; In addition, people have gotten Ruby (via [HotRuby](http://hotruby.yukoba.jp/)), C# (via [cs2as](http://cs2as.codeplex.com/)J) and Java (via [J2AS3](http://code.google.com/p/j2as3/)) to run in the Flash player – therefore lending to Flex development.\n\nSince ActionScript3 is the most commonly used language in Flex, I will focus on it in this post.\n\n#### <font style=\"font-weight: bold\">Hello World</font>\n\nTo start things off, here is a “Hello World” application written in ActionScript3.&#160; It is quite similar to C# because they are both object-oriented languages.\n\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">public class HelloWorld extends Sprite\n{\n    public function HelloWorld()\n    {\n        trace(&quot;Hello World&quot;);\n    }\n}</pre>\n\n#### &#160;\n\n#### <font style=\"font-weight: bold\">Dynamic by Default, Static by Option</font>\n\nSince its inception, ActionScript has been a dynamic language.&#160; Adobe introduced optional static typing in ActionScript 2 with a colon syntax.&#160; In other words, variables defined as static will remain static and will be checked at compile-time where variables without type information will be dynamic and late-bound (run-time).\n\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">// DYNAMIC EXAMPLE\nvar item = new Turkey();\ntrace(item.weight);\nitem = new SteamShovel();\ntrace(item.weight);\ntrace(item.NotThere); // Runtime Error\n\n// STATIC EXAMPLE\nvar turkey:Turkey = new Turkey();\ntrace(turkey.weight);\nvar steamShovel:SteamShovel = new SteamShovel();\ntrace(steamShovel.weight);\ntrace(steamShovel.NotThere); // Compile-time Error</pre>\n\n#### &#160;\n\n#### <font style=\"font-weight: bold\">Classes/Interfaces</font>\n\nActionScript defines interfaces, classes and derived classes similar to C# with a syntax that is more like Java:\n\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">public interface IGobbleable\n{\n    function gobble():void;\n}\n\npublic class Turkey implements IGobbleable\n{\n    public var weight:int = 5;\n\n    public function gobble():void\n    {\n        trace(&quot;Gobble Gobble&quot;);\n    }\n}\n\npublic class WildTurkey extends Turkey\n{\n    public override function gobble():void\n    {\n        trace(&quot;Putts Putts&quot;);\n    }\n}</pre>\n\nIn “Part 2” of my imperative programming comparison, I will cover Generics (via Vector.&lt;&gt;), Proxy objects, MetaData Tags, Anonymous Functions and XML Literals.\n\n</div>\n\nStay tuned ![Smile](http://houseofbilz.com/wp-content/uploads/2010/12/wlEmoticon-smile.png)","source":"_posts/2010-12-17-cross-training-in-silverlight-flex-cclr-vs-actionscript3avm-part-1.md","raw":"---\ntitle: 'Cross-Training in Silverlight & Flex -- C#/CLR vs ActionScript3/AVM Part 1'\ntags:\n  - ActionScript\n  - 'C#'\n  - Cross-Training\n  - Flex\n  - RIA\n  - Silverlight\nid: 197\ncategories:\n  - Uncategorized\ndate: 2010-12-17 02:59:22\n---\n\nMore [Cross-Training in Silverlight &amp; Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/)\n [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F12%2F17%2Fcross-training-in-silverlight-flex-cclr-vs-actionscript3avm-part-1%2F)](http://dotnetshoutout.com/Cross-Training-in-Silverlight-Flex-%E2%80%94-CCLR-vs-ActionScript3AVM-Part-1)   \n\nIn my previous post, I talked about the [declarative side of Silverlight and Flex](http://houseofbilz.com/archives/2010/11/08/cross-training-in-silverlight-and-flex-xaml-vs-mxml/) (XAML vs MXML).&#160; In this post, I will talk about the [imperative](http://en.wikipedia.org/wiki/Imperative_programming) side Silverlight and Flex.&#160; In other words, this is where developers write code that executes logic to modify state.&#160; The primary languages for Silverlight and Flex are C# and ActionScript (there are others) and the execution run-times are the Common Language Runtime (CLR) and the ActionScript Virtual Machine (AVM).\n  <div style=\"background-color: #e8f3ff\">   \n\n### C#/CLR\n\nThe most widely used language in Silverlight is C#, a C-like language that is easy to use/read and it is very powerful.&#160; It is an object-oriented language, though it borrows concepts from functional languages.&#160; C# code compiles down to byte code which gets executed on the Common Language Runtime (CLR).&#160; As its name implies, the CLR can run languages other than C#.&#160; The supported language list is quite long, but some of the more common options are [VisualBasic.Net](http://msdn.microsoft.com/en-us/vbasic/default), [F#](http://msdn.microsoft.com/en-us/fsharp/default), [IronRuby](http://ironruby.net/) and [IronPython](http://ironpython.codeplex.com/).&#160; Since C# is the most commonly used, I will focus on it in this post.\n\n#### <font style=\"font-weight: bold\">Hello World</font>\n\nTo start things off, here is a “Hello World” application written in C#.&#160; It is quite similar to ActionScript because they are both object-oriented languages.\n    <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">class Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(&quot;Hello World&quot;);            \n    }\n}</pre>\n\n#### &#160;\n\n#### <font style=\"font-weight: bold\">Static by Default, Dynamic by Option</font>\n\nSince its inception, C# has been a static language.&#160; Microsoft introduced optional dynamic typing in C# 4.0 with the **dynamic** keyword.&#160; In other words, variables defined as dynamic use late binding to resolve properties and methods where all other variables are checked at compile-time.\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">// STATIC EXAMPLE\nTurkey turkey = new Turkey();\nConsole.WriteLine(turkey.Weight);\nvar steamShovel = new SteamShovel(); // Implicit Typing\nConsole.WriteLine(steamShovel.Weight);\nConsole.WriteLine(steamShovel.NotThere); // Compile-time Error\n\n// DYNAMIC EXAMPLE\ndynamic item = new Turkey();\nConsole.WriteLine(item.Weight);\nitem = new SteamShovel();\nConsole.WriteLine(item.Weight);\nConsole.WriteLine(item.NotThere); // Runtime Error</pre>\n\n#### &#160;\n\n#### <font style=\"font-weight: bold\">Classes/Interfaces</font>\n\nC# defines interfaces, classes and derived classes very similar to ActionScript or Java:\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">public interface IGobbleable\n{\n    void Gobble();\n}\n\npublic class Turkey : IGobbleable\n{\n    public int Weight { get { return 5; } }\n\n    public virtual void Gobble()\n    {\n        Console.WriteLine(&quot;Gobble Gobble&quot;);\n    }\n}\n\npublic class WildTurkey : Turkey\n{\n    public override void Gobble()\n    {\n        Console.WriteLine(&quot;Putts Putts&quot;);\n    }\n}</pre>\n\nIn “Part 2” of my imperative programming comparison, I will cover Generics, Iterators, Attributes, Lambdas and XML Literals.\n\n</div>\n\n#### &#160; \n\n<div style=\"background-color: #ffe8e8\">\n\n### ActionScript3/AVM\n\nThe most widely used language in Flex is ActionScript3, an [ECMAScript](http://www.ecmascript.org/) dialect that is easy to use/read and is quite powerful (though not as powerful as C#, in my opinion).&#160; Although it is often compared to another widely used ECMAScript language, [JavaScript](http://en.wikipedia.org/wiki/JavaScript), it diverges in a way that feels more like Java.&#160; Like Java, ActionScript3 is object-oriented with classes and interfaces.&#160; It also has optional static typing which JavaScript does not have.&#160; ActionScript3 code compiles down to ActionScript Byte Code (ABC) and runs on the ActionScript Virtual Machine (AVM2) – also known as [Tamarin](http://www.mozilla.org/projects/tamarin/).&#160; \n\nAlthough ActionScript is the only official language supported on the AVM2, there are several options for developing in Flex.&#160; Adobe Labs released a preview of [Alchemy](http://labs.adobe.com/technologies/alchemy/), a tool for compiling C/C++ code to run on the AVM2.&#160; The widely-known [haXe](http://haxe.org/) language, which is like ActionScript on steroids, also compiles for the AVM2.&#160; In addition, people have gotten Ruby (via [HotRuby](http://hotruby.yukoba.jp/)), C# (via [cs2as](http://cs2as.codeplex.com/)J) and Java (via [J2AS3](http://code.google.com/p/j2as3/)) to run in the Flash player – therefore lending to Flex development.\n\nSince ActionScript3 is the most commonly used language in Flex, I will focus on it in this post.\n\n#### <font style=\"font-weight: bold\">Hello World</font>\n\nTo start things off, here is a “Hello World” application written in ActionScript3.&#160; It is quite similar to C# because they are both object-oriented languages.\n\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">public class HelloWorld extends Sprite\n{\n    public function HelloWorld()\n    {\n        trace(&quot;Hello World&quot;);\n    }\n}</pre>\n\n#### &#160;\n\n#### <font style=\"font-weight: bold\">Dynamic by Default, Static by Option</font>\n\nSince its inception, ActionScript has been a dynamic language.&#160; Adobe introduced optional static typing in ActionScript 2 with a colon syntax.&#160; In other words, variables defined as static will remain static and will be checked at compile-time where variables without type information will be dynamic and late-bound (run-time).\n\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">// DYNAMIC EXAMPLE\nvar item = new Turkey();\ntrace(item.weight);\nitem = new SteamShovel();\ntrace(item.weight);\ntrace(item.NotThere); // Runtime Error\n\n// STATIC EXAMPLE\nvar turkey:Turkey = new Turkey();\ntrace(turkey.weight);\nvar steamShovel:SteamShovel = new SteamShovel();\ntrace(steamShovel.weight);\ntrace(steamShovel.NotThere); // Compile-time Error</pre>\n\n#### &#160;\n\n#### <font style=\"font-weight: bold\">Classes/Interfaces</font>\n\nActionScript defines interfaces, classes and derived classes similar to C# with a syntax that is more like Java:\n\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">public interface IGobbleable\n{\n    function gobble():void;\n}\n\npublic class Turkey implements IGobbleable\n{\n    public var weight:int = 5;\n\n    public function gobble():void\n    {\n        trace(&quot;Gobble Gobble&quot;);\n    }\n}\n\npublic class WildTurkey extends Turkey\n{\n    public override function gobble():void\n    {\n        trace(&quot;Putts Putts&quot;);\n    }\n}</pre>\n\nIn “Part 2” of my imperative programming comparison, I will cover Generics (via Vector.&lt;&gt;), Proxy objects, MetaData Tags, Anonymous Functions and XML Literals.\n\n</div>\n\nStay tuned ![Smile](http://houseofbilz.com/wp-content/uploads/2010/12/wlEmoticon-smile.png)","slug":"cross-training-in-silverlight-flex-cclr-vs-actionscript3avm-part-1","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hr004t6eulb2fivskf"},{"title":"Cross-Training in Silverlight & Flex–MVVM vs Presentation Model","id":"236","date":"2010-12-29T08:01:26.000Z","_content":"\nMore [Cross-Training in SIlverlight and Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/)\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F12%2F29%2Fcross-training-in-silverlight-flexmvvm-vs-presentation-model%2F)](http://dotnetshoutout.com/Silverlight-vs-Flex-MVVM-vs-Presentation-Model)\n\nThis is probably my favorite topic in this Silverlight/Flex series.&#160; In the Silverlight world, I have [written extensively about the MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) (Model-View-ViewModel) – a separated presentation pattern for stateful clients (like Rich Internet Applications).&#160; When I got into Flex, I was shocked to find out how easy the pattern was to implement.&#160; Developers in the Microsoft space call it MVVM but it was coined by [Martin Fowler](http://martinfowler.com/) many years previous as [Presentation Model](http://martinfowler.com/eaaDev/PresentationModel.html).&#160; I will use these terms interchangeably but mostly refer to MVVM when explaining the SIlverlight story and Presentation Model when explaining the Flex story.\n\nIf you do a Google search today for “[MVVM and Flex](http://www.google.com/search?q=mvvm+and+flex)”, the first post is by somebody who claims that MVVM is not a good fit for Flex.&#160; I couldn’t disagree more.&#160; Out of the box, the Flex framework makes it much easier to implement a Presentation Model than similar MVVM implementations in Silverlight.&#160; That is not to say that there aren’t good third-party libraries that make it easier in Silverlight, but without any help, it is easier to do in Flex.&#160; \n\nI will show some examples and they should speak for themselves.\n  <div style=\"background-color: #e8f3ff\">   \n\n### MVVM in Silverlight\n\nIn the MVVM pattern, there are two particular interfaces that are interesting to know:\n\n*   **INotifyPropertyChanged** – an interface that lets ViewModels notify the UI when a property changes*   **ICommand** – an interface that allows the UI to execute code on the ViewModels    \n\nLets say we have a simple application where the model is excluded because it is not relevant to what I am trying to show.&#160; The behavior is simple: when the user presses a button, read the text in the input field and output “Hello &lt;input&gt;”.&#160; A simple implementation of the view might look like this:\n    <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;UserControl.Resources&gt;\n    &lt;local:ViewModel x:Key=&quot;ViewModel&quot; /&gt;\n&lt;/UserControl.Resources&gt;\n\n&lt;Border BorderThickness=&quot;5&quot; CornerRadius=&quot;5&quot; DataContext=&quot;{StaticResource ViewModel}&quot;           \n        BorderBrush=&quot;Black&quot; Height=&quot;Auto&quot; Width=&quot;Auto&quot;&gt;\n    &lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;\n        &lt;TextBox Width=&quot;100&quot; Margin=&quot;3&quot; Text=&quot;{Binding Input, Mode=TwoWay}&quot; /&gt;\n        &lt;Button Content=&quot;Say Hello&quot; Margin=&quot;3&quot; Command=&quot;{Binding SayHelloCommand}&quot; /&gt;\n        &lt;TextBlock Margin=&quot;3&quot; VerticalAlignment=&quot;Bottom&quot; Text=&quot;{Binding Output}&quot; /&gt;\n    &lt;/StackPanel&gt;\n&lt;/Border&gt;</pre>\n\nThe ViewModel to support that logic looks like this:\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">public class ViewModel : INotifyPropertyChanged\n{\n    public string Input { get; set; }\n\n    private string _output = string.Empty;\n    public string Output\n    {\n        get { return _output; }\n        set\n        {\n            if (_output == value)\n                return;\n\n            _output = value;\n            RaisePropertyChanged(&quot;Output&quot;);\n        }\n    }\n\n    public ICommand SayHelloCommand { get; private set; }\n\n    public ViewModel()\n    {\n        SayHelloCommand = new DelegateCommand(SayHello);\n    }\n\n    private void SayHello()\n    {\n        Output = &quot;Hello, &quot; + Input;\n    }\n\n    protected void RaisePropertyChanged(string propertyName)\n    {\n        var handlers = PropertyChanged;\n        if(handlers != null)\n            handlers(this, new PropertyChangedEventArgs(propertyName));\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n}\n\npublic class DelegateCommand : ICommand\n{\n    private readonly Action action;\n\n    public DelegateCommand(Action action)\n    {\n        this.action = action;\n    }\n\n    public bool CanExecute(object parameter)\n    {\n        return true;\n    }\n\n    public void Execute(object parameter)\n    {\n        action();\n    }\n\n    public event EventHandler CanExecuteChanged;\n}</pre>\n\nThis example, admittedly, is a bit hyperbolic.&#160; It includes everything you need to write a ViewModel from scratch.&#160; In reality, the **DelegateCommand** is written once and reused.&#160; In addition, most people will at least abstract the **RaisePropertyChanged** and **PropertyChanged** code by moveing it to a **ViewModelBase** class.&#160; On that note, there are several third-party frameworks for making MVVM more pleasant in Silverlight.&#160; I wrote one of those helpers, called [ViewModelSupport](http://viewmodelsupport.codeplex.com/).&#160; Using the powerful, somewhat magical base class, the previous code can be re-written as:\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">public class ViewModel : ViewModelBase\n{\n    public string Input\n    {\n        get { return Get&lt;string&gt;(&quot;Input&quot;); }\n        set { Set(&quot;Input&quot;, value); }\n    }\n\n    public string Output\n    {\n        get { return Get&lt;string&gt;(&quot;Output&quot;); }\n        set { Set(&quot;Output&quot;, value); }\n    }\n\n    public void Execute_SayHelloCommand(object param)\n    {\n        Output = &quot;Hello, &quot; + Input;\n    }\n}</pre>\n\nThe latter is certainly better than the former, but my point is that there is a lot of ceremony and plumbing involved in order to get Silverlight applications wedged into the MVVM pattern.&#160; Please don’t misunderstand me: MVVM is usually the best pattern for developing separated Silverlight applications.&#160; I am only suggesting that there is a lot of ceremony.\n\nIn addition to my [ViewModelSupport](http://viewmodelsupport.codeplex.com/) package, there are several other libraries out there that help you write implement MVVM in Silverlight including:\n\n*   [MVVM Light Toolkit](http://viewmodelsupport.codeplex.com/) by Laurent Bugnion*   [Caliburn Micro](http://caliburnmicro.codeplex.com/) by Rob Eisenberg*   [NotifyPropertyWeaver](http://code.google.com/p/notifypropertyweaver/) by Simon Cropp\n</div>\n\n<div style=\"background-color: #ffe8e8\">\n\n## Presentation Model in Flex\n\nIn Flex, the binding system is very different than the way Silverlight does it.&#160; Notifications are similar to **INotifyPropertyChanged** in Silverlight, but there is no interface specifically for property changes.&#160; Instead, there is just an event that gets fired called “&lt;property&gt;Changed” where &lt;property&gt; is the name of the property that changed.&#160; It is also simplified in that you can decorate your class or individual properties with **[Bindable]** and the Flex compiler writes all of your notification code for you.&#160; As far as executing code in the Presentation Model, there is no **ICommand** like in Silverlight – the view simply calls into the Presentation Model directly.&#160; \n\nLets say we have a simple application where the model is excluded because it is not relevant to what I am trying to show.&#160; The behavior is simple: when the user presses a button, read the text in the input field and output “Hello &lt;input&gt;”.&#160; A simple implementation of the view might look like this:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;fx:Script&gt; \n        &lt;![CDATA[ \n            var pm:PresentationModel = new PresentationModel(); \n        ]]&gt; \n&lt;/fx:Script&gt; \n\n&lt;s:BorderContainer borderWeight=&quot;5&quot; cornerRadius=&quot;5&quot;           \n                   borderColor=&quot;black&quot; minHeight=&quot;0&quot; width=&quot;100%&quot;&gt; \n    &lt;s:HGroup left=&quot;3&quot; right=&quot;3&quot; top=&quot;3&quot; bottom=&quot;3&quot;&gt; \n        &lt;s:TextInput width=&quot;100&quot; text=&quot;@{pm.input}&quot;/&gt; \n        &lt;s:Button label=&quot;Say Hello&quot; left=&quot;6&quot; click=&quot;pm.sayHello()&quot; /&gt; \n        &lt;s:Label left=&quot;6&quot; verticalAlign=&quot;bottom&quot; height=&quot;100%&quot; text=&quot;{pm.output}&quot;&gt; \n    &lt;/s:HGroup&gt; \n&lt;/s:BorderContainer&gt;</pre>\n\nThe Presentation Model then looks like this:\n\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">[Bindable]\npublic class PresentationModel\n{\n    public var input:String;\n    public var output:String;\n\n    public function sayHello():void {            \n        output = &quot;Hello, &quot; + input;\n    }\n}</pre>\n\nThat’s it!&#160; The **[Bindable]** flag tells the **input** and **output** properties to send **inputChanged** and **outputChanged** events automatically.&#160; The **sayHello** function gets called directly from the view without the need to hook up a command.&#160; It is really that easy to implement Presentation Models in Flex.\n\nMuch like the Silverlight side, there are frameworks that will help you along the way.&#160; Because the binding system is as strong as it is in Flex (more details in a future post), you don’t need much to implement Presentation Models.&#160; At a very minimum, though, I recommend using an Inversion of Control framework like [flex-ioc](http://code.google.com/p/flex-ioc/), [robotlegs](http://www.robotlegs.org/) or [Swiz](http://swizframework.org/).&#160; \n\n</div>","source":"_posts/2010-12-29-cross-training-in-silverlight-flexmvvm-vs-presentation-model.md","raw":"---\ntitle: 'Cross-Training in Silverlight & Flex–MVVM vs Presentation Model'\ntags:\n  - Flex\n  - MVVM\n  - Presentation Model\n  - Silverlight\nid: 236\ncategories:\n  - Uncategorized\ndate: 2010-12-29 03:01:26\n---\n\nMore [Cross-Training in SIlverlight and Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/)\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F12%2F29%2Fcross-training-in-silverlight-flexmvvm-vs-presentation-model%2F)](http://dotnetshoutout.com/Silverlight-vs-Flex-MVVM-vs-Presentation-Model)\n\nThis is probably my favorite topic in this Silverlight/Flex series.&#160; In the Silverlight world, I have [written extensively about the MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) (Model-View-ViewModel) – a separated presentation pattern for stateful clients (like Rich Internet Applications).&#160; When I got into Flex, I was shocked to find out how easy the pattern was to implement.&#160; Developers in the Microsoft space call it MVVM but it was coined by [Martin Fowler](http://martinfowler.com/) many years previous as [Presentation Model](http://martinfowler.com/eaaDev/PresentationModel.html).&#160; I will use these terms interchangeably but mostly refer to MVVM when explaining the SIlverlight story and Presentation Model when explaining the Flex story.\n\nIf you do a Google search today for “[MVVM and Flex](http://www.google.com/search?q=mvvm+and+flex)”, the first post is by somebody who claims that MVVM is not a good fit for Flex.&#160; I couldn’t disagree more.&#160; Out of the box, the Flex framework makes it much easier to implement a Presentation Model than similar MVVM implementations in Silverlight.&#160; That is not to say that there aren’t good third-party libraries that make it easier in Silverlight, but without any help, it is easier to do in Flex.&#160; \n\nI will show some examples and they should speak for themselves.\n  <div style=\"background-color: #e8f3ff\">   \n\n### MVVM in Silverlight\n\nIn the MVVM pattern, there are two particular interfaces that are interesting to know:\n\n*   **INotifyPropertyChanged** – an interface that lets ViewModels notify the UI when a property changes*   **ICommand** – an interface that allows the UI to execute code on the ViewModels    \n\nLets say we have a simple application where the model is excluded because it is not relevant to what I am trying to show.&#160; The behavior is simple: when the user presses a button, read the text in the input field and output “Hello &lt;input&gt;”.&#160; A simple implementation of the view might look like this:\n    <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;UserControl.Resources&gt;\n    &lt;local:ViewModel x:Key=&quot;ViewModel&quot; /&gt;\n&lt;/UserControl.Resources&gt;\n\n&lt;Border BorderThickness=&quot;5&quot; CornerRadius=&quot;5&quot; DataContext=&quot;{StaticResource ViewModel}&quot;           \n        BorderBrush=&quot;Black&quot; Height=&quot;Auto&quot; Width=&quot;Auto&quot;&gt;\n    &lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;\n        &lt;TextBox Width=&quot;100&quot; Margin=&quot;3&quot; Text=&quot;{Binding Input, Mode=TwoWay}&quot; /&gt;\n        &lt;Button Content=&quot;Say Hello&quot; Margin=&quot;3&quot; Command=&quot;{Binding SayHelloCommand}&quot; /&gt;\n        &lt;TextBlock Margin=&quot;3&quot; VerticalAlignment=&quot;Bottom&quot; Text=&quot;{Binding Output}&quot; /&gt;\n    &lt;/StackPanel&gt;\n&lt;/Border&gt;</pre>\n\nThe ViewModel to support that logic looks like this:\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">public class ViewModel : INotifyPropertyChanged\n{\n    public string Input { get; set; }\n\n    private string _output = string.Empty;\n    public string Output\n    {\n        get { return _output; }\n        set\n        {\n            if (_output == value)\n                return;\n\n            _output = value;\n            RaisePropertyChanged(&quot;Output&quot;);\n        }\n    }\n\n    public ICommand SayHelloCommand { get; private set; }\n\n    public ViewModel()\n    {\n        SayHelloCommand = new DelegateCommand(SayHello);\n    }\n\n    private void SayHello()\n    {\n        Output = &quot;Hello, &quot; + Input;\n    }\n\n    protected void RaisePropertyChanged(string propertyName)\n    {\n        var handlers = PropertyChanged;\n        if(handlers != null)\n            handlers(this, new PropertyChangedEventArgs(propertyName));\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n}\n\npublic class DelegateCommand : ICommand\n{\n    private readonly Action action;\n\n    public DelegateCommand(Action action)\n    {\n        this.action = action;\n    }\n\n    public bool CanExecute(object parameter)\n    {\n        return true;\n    }\n\n    public void Execute(object parameter)\n    {\n        action();\n    }\n\n    public event EventHandler CanExecuteChanged;\n}</pre>\n\nThis example, admittedly, is a bit hyperbolic.&#160; It includes everything you need to write a ViewModel from scratch.&#160; In reality, the **DelegateCommand** is written once and reused.&#160; In addition, most people will at least abstract the **RaisePropertyChanged** and **PropertyChanged** code by moveing it to a **ViewModelBase** class.&#160; On that note, there are several third-party frameworks for making MVVM more pleasant in Silverlight.&#160; I wrote one of those helpers, called [ViewModelSupport](http://viewmodelsupport.codeplex.com/).&#160; Using the powerful, somewhat magical base class, the previous code can be re-written as:\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">public class ViewModel : ViewModelBase\n{\n    public string Input\n    {\n        get { return Get&lt;string&gt;(&quot;Input&quot;); }\n        set { Set(&quot;Input&quot;, value); }\n    }\n\n    public string Output\n    {\n        get { return Get&lt;string&gt;(&quot;Output&quot;); }\n        set { Set(&quot;Output&quot;, value); }\n    }\n\n    public void Execute_SayHelloCommand(object param)\n    {\n        Output = &quot;Hello, &quot; + Input;\n    }\n}</pre>\n\nThe latter is certainly better than the former, but my point is that there is a lot of ceremony and plumbing involved in order to get Silverlight applications wedged into the MVVM pattern.&#160; Please don’t misunderstand me: MVVM is usually the best pattern for developing separated Silverlight applications.&#160; I am only suggesting that there is a lot of ceremony.\n\nIn addition to my [ViewModelSupport](http://viewmodelsupport.codeplex.com/) package, there are several other libraries out there that help you write implement MVVM in Silverlight including:\n\n*   [MVVM Light Toolkit](http://viewmodelsupport.codeplex.com/) by Laurent Bugnion*   [Caliburn Micro](http://caliburnmicro.codeplex.com/) by Rob Eisenberg*   [NotifyPropertyWeaver](http://code.google.com/p/notifypropertyweaver/) by Simon Cropp\n</div>\n\n<div style=\"background-color: #ffe8e8\">\n\n## Presentation Model in Flex\n\nIn Flex, the binding system is very different than the way Silverlight does it.&#160; Notifications are similar to **INotifyPropertyChanged** in Silverlight, but there is no interface specifically for property changes.&#160; Instead, there is just an event that gets fired called “&lt;property&gt;Changed” where &lt;property&gt; is the name of the property that changed.&#160; It is also simplified in that you can decorate your class or individual properties with **[Bindable]** and the Flex compiler writes all of your notification code for you.&#160; As far as executing code in the Presentation Model, there is no **ICommand** like in Silverlight – the view simply calls into the Presentation Model directly.&#160; \n\nLets say we have a simple application where the model is excluded because it is not relevant to what I am trying to show.&#160; The behavior is simple: when the user presses a button, read the text in the input field and output “Hello &lt;input&gt;”.&#160; A simple implementation of the view might look like this:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;fx:Script&gt; \n        &lt;![CDATA[ \n            var pm:PresentationModel = new PresentationModel(); \n        ]]&gt; \n&lt;/fx:Script&gt; \n\n&lt;s:BorderContainer borderWeight=&quot;5&quot; cornerRadius=&quot;5&quot;           \n                   borderColor=&quot;black&quot; minHeight=&quot;0&quot; width=&quot;100%&quot;&gt; \n    &lt;s:HGroup left=&quot;3&quot; right=&quot;3&quot; top=&quot;3&quot; bottom=&quot;3&quot;&gt; \n        &lt;s:TextInput width=&quot;100&quot; text=&quot;@{pm.input}&quot;/&gt; \n        &lt;s:Button label=&quot;Say Hello&quot; left=&quot;6&quot; click=&quot;pm.sayHello()&quot; /&gt; \n        &lt;s:Label left=&quot;6&quot; verticalAlign=&quot;bottom&quot; height=&quot;100%&quot; text=&quot;{pm.output}&quot;&gt; \n    &lt;/s:HGroup&gt; \n&lt;/s:BorderContainer&gt;</pre>\n\nThe Presentation Model then looks like this:\n\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">[Bindable]\npublic class PresentationModel\n{\n    public var input:String;\n    public var output:String;\n\n    public function sayHello():void {            \n        output = &quot;Hello, &quot; + input;\n    }\n}</pre>\n\nThat’s it!&#160; The **[Bindable]** flag tells the **input** and **output** properties to send **inputChanged** and **outputChanged** events automatically.&#160; The **sayHello** function gets called directly from the view without the need to hook up a command.&#160; It is really that easy to implement Presentation Models in Flex.\n\nMuch like the Silverlight side, there are frameworks that will help you along the way.&#160; Because the binding system is as strong as it is in Flex (more details in a future post), you don’t need much to implement Presentation Models.&#160; At a very minimum, though, I recommend using an Inversion of Control framework like [flex-ioc](http://code.google.com/p/flex-ioc/), [robotlegs](http://www.robotlegs.org/) or [Swiz](http://swizframework.org/).&#160; \n\n</div>","slug":"cross-training-in-silverlight-flexmvvm-vs-presentation-model","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ht004w6euliltxnlng"},{"title":"Introducing… ActionLinq","id":"246","date":"2011-01-04T08:02:48.000Z","_content":"\n[![](https://bitbucket.org/briangenisio/actionlinq/raw/395b49a6b4ec/Assets/ActionLINQ.png)](https://bitbucket.org/briangenisio/actionlinq/)\n\nI am excited to release a pet project of mine that I have been developing for a few months.&#160; [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) is a complete [LINQ-to-Objects](http://msdn.microsoft.com/library/bb397919.aspx) implementation for ActionScript 3.0.&#160; Including the same deferred execution behavior as LINQ, [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) is a functional query library designed to process and manipulate data in ActionScript 3.0.&#160; It is especially useful for processing data received from web services and manipulating it to fit into the view.\n\nLet me illustrate what [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) can do with an example of some basic data processing:\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">var transformed:Array =\n        [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n        .where(isEven)\n        .select(square)\n        .distinct()\n        .reverse()\n        .toArray();\n\nassertThat(transformed, array(0, 4, 16));</pre>\n\n[ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) can query pretty much any collection type (Array, ArrayCollection, ArrayList, XMLList, Vector, etc) and it can output it just the same.&#160; \n\nLets look at a slightly more real-world example.&#160; Assume that the **xml** variable is data received from something like a REST service.&#160; We want to create an ordered collection of distinct categories from the XML that was received:\n\n<pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">var xml = &lt;products&gt;\n              &lt;product name=&quot;Beef&quot;         category=&quot;Meat&quot; /&gt;\n              &lt;product name=&quot;Hot Dog Buns&quot; category=&quot;Bread&quot; /&gt;\n              &lt;product name=&quot;Bran Flakes&quot;  category=&quot;Cereal&quot; /&gt;\n              &lt;product name=&quot;Chicken&quot;      category=&quot;Meat&quot; /&gt;\n              &lt;product name=&quot;White Bread&quot;  category=&quot;Bread&quot; /&gt;\n              &lt;product name=&quot;Pita Bread&quot;   category=&quot;Bread&quot; /&gt;\n          &lt;/products&gt;;\n\nvar categories:ArrayCollection =\n        Enumerable.from(xml.product)\n        .select(function(product):String { return product.@category })\n        .distinct()\n        .orderBy(identity)\n        .toArrayCollection();</pre>\n\nRunning that query lets you bind the **categories** variable to a **DropDownList** with a very expressive, functional query on the data that was received.\n\nThese are just a few examples.&#160; You can find a lot more documentation at the [project site](https://bitbucket.org/briangenisio/actionlinq/).\n\n## How do I Get ActionLinq?\n\nI have made [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) an open-source project on [BitBucket.org](https://bitbucket.org) under the Apache 2.0 license.&#160; I chose that license because I want you to be able to use it for any use without charge as long as you maintain attribution.&#160; In other words, fork it, modify it, re-distribute it, do whatever for any reason.&#160; Just give me and/or SRT Solutions credit for the work that ActionLinq provides.\n\nThe BitBucket site includes a lot of documentation for [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) in the Wiki.&#160; There are also a lot of unit tests in the source which document everything that [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) is meant to do.\n\nIf you use it, let me know!&#160; I’d love to know who is using it.&#160; If you find problems, also let me know in the “Issues” section of the project site.\n\n## Why Did I Create ActionLinq?\n\n### Overcome the Flex Collections Inconsistencies\n\nWhen I first came to Flex, I was frustrated by the inconsistencies between the different collection types.&#160; Some types, like Array, include useful functions like **map** and **filter** (**select** and **where** in [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/)) but other types like ArrayList do not.&#160; Although an interface named **IList** exists, most of the collections do not implement it.&#160; Some collections use a **length** property.&#160; Others use a **length()** method.&#160; The **Vector** class gives a useful typed data set but is difficult to go back and forth between it and other collection types.&#160; Inconsistencies forced me to convert my data collections from one collection type to another just to get the functionality I needed. I found myself writing more code than I wanted to work my data. Still, I was missing many of the useful capabilities that I was used to from my Silverlight and .Net development.\n\nI quickly realized that what I really wanted was LINQ.&#160; I threw together a proof of concept by implementing **select**, **where**, and **selectMany**.&#160; I found myself using these methods throughout my application.&#160; As I found myself wanting another LINQ capability, I added it to my [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) library.&#160; The next thing I knew: I had a mostly complete LINQ-to-Objects implementation.&#160; A bit more work and I had a complete clone of LINQ-to-Objects.\n\n### Aid .Net Developers in Flex Development\n\nI have been preaching lately that Silverlight and Flex developers need to get together and learn from one another.&#160; Where Silverlight has some great features (LINQ is one of them), Flex has some pretty great features as well.&#160; I believe that a library like [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) will facilitate the learning process from Silverlight to Flex by leveraging existing Silverlight knowledge.\n\n### Get to Know LINQ\n\nThere is no better way to fully understand the power and intricacies of LINQ in Silverlight and .Net than by implementing it on a different platform.&#160; By implementing every function and every overload in the LINQ space, I was forced to understand what everything is used for because I had to write unit tests that gave examples of using the functionality.\n\n### Get to Know Flex and ActionScript 3\n\nThere is no better way to get to know a new environment than to implement a familiar set of functionality in it.&#160; I was forced to learn about areas of Flex and ActionScript 3.0 that I would not have likely done on my own.&#160; I learned all about functional programming and closures in AS3, unit testing in Flex, the dynamic capabilities of AS3, monkey patching and ASDoc to name a few.&#160; I have come out of the [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) project with a strong understanding of the ActionScript 3.0 language and the more esoteric but powerful features of the language.&#160; I was also painfully made aware of the limitations of ActionScript that I miss from C#: Generics, method overloading, operator overloading, yielding and lambdas to name a few.\n\n## \n\n## Go Use It!\n\nGive it a try.&#160; Let me know how it goes.&#160; Have fun.&#160; Enjoy!\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2011%2F01%2F04%2Fintroducing-actionlinq%2F)](http://dotnetshoutout.com/Introducing%E2%80%A6-ActionLinq)","source":"_posts/2011-01-04-introducing-actionlinq.md","raw":"---\ntitle: Introducing… ActionLinq\ntags:\n  - ActionLinq\n  - Flash\n  - Flex\n  - Linq\nid: 246\ncategories:\n  - Uncategorized\ndate: 2011-01-04 03:02:48\n---\n\n[![](https://bitbucket.org/briangenisio/actionlinq/raw/395b49a6b4ec/Assets/ActionLINQ.png)](https://bitbucket.org/briangenisio/actionlinq/)\n\nI am excited to release a pet project of mine that I have been developing for a few months.&#160; [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) is a complete [LINQ-to-Objects](http://msdn.microsoft.com/library/bb397919.aspx) implementation for ActionScript 3.0.&#160; Including the same deferred execution behavior as LINQ, [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) is a functional query library designed to process and manipulate data in ActionScript 3.0.&#160; It is especially useful for processing data received from web services and manipulating it to fit into the view.\n\nLet me illustrate what [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) can do with an example of some basic data processing:\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">var transformed:Array =\n        [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n        .where(isEven)\n        .select(square)\n        .distinct()\n        .reverse()\n        .toArray();\n\nassertThat(transformed, array(0, 4, 16));</pre>\n\n[ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) can query pretty much any collection type (Array, ArrayCollection, ArrayList, XMLList, Vector, etc) and it can output it just the same.&#160; \n\nLets look at a slightly more real-world example.&#160; Assume that the **xml** variable is data received from something like a REST service.&#160; We want to create an ordered collection of distinct categories from the XML that was received:\n\n<pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">var xml = &lt;products&gt;\n              &lt;product name=&quot;Beef&quot;         category=&quot;Meat&quot; /&gt;\n              &lt;product name=&quot;Hot Dog Buns&quot; category=&quot;Bread&quot; /&gt;\n              &lt;product name=&quot;Bran Flakes&quot;  category=&quot;Cereal&quot; /&gt;\n              &lt;product name=&quot;Chicken&quot;      category=&quot;Meat&quot; /&gt;\n              &lt;product name=&quot;White Bread&quot;  category=&quot;Bread&quot; /&gt;\n              &lt;product name=&quot;Pita Bread&quot;   category=&quot;Bread&quot; /&gt;\n          &lt;/products&gt;;\n\nvar categories:ArrayCollection =\n        Enumerable.from(xml.product)\n        .select(function(product):String { return product.@category })\n        .distinct()\n        .orderBy(identity)\n        .toArrayCollection();</pre>\n\nRunning that query lets you bind the **categories** variable to a **DropDownList** with a very expressive, functional query on the data that was received.\n\nThese are just a few examples.&#160; You can find a lot more documentation at the [project site](https://bitbucket.org/briangenisio/actionlinq/).\n\n## How do I Get ActionLinq?\n\nI have made [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) an open-source project on [BitBucket.org](https://bitbucket.org) under the Apache 2.0 license.&#160; I chose that license because I want you to be able to use it for any use without charge as long as you maintain attribution.&#160; In other words, fork it, modify it, re-distribute it, do whatever for any reason.&#160; Just give me and/or SRT Solutions credit for the work that ActionLinq provides.\n\nThe BitBucket site includes a lot of documentation for [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) in the Wiki.&#160; There are also a lot of unit tests in the source which document everything that [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) is meant to do.\n\nIf you use it, let me know!&#160; I’d love to know who is using it.&#160; If you find problems, also let me know in the “Issues” section of the project site.\n\n## Why Did I Create ActionLinq?\n\n### Overcome the Flex Collections Inconsistencies\n\nWhen I first came to Flex, I was frustrated by the inconsistencies between the different collection types.&#160; Some types, like Array, include useful functions like **map** and **filter** (**select** and **where** in [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/)) but other types like ArrayList do not.&#160; Although an interface named **IList** exists, most of the collections do not implement it.&#160; Some collections use a **length** property.&#160; Others use a **length()** method.&#160; The **Vector** class gives a useful typed data set but is difficult to go back and forth between it and other collection types.&#160; Inconsistencies forced me to convert my data collections from one collection type to another just to get the functionality I needed. I found myself writing more code than I wanted to work my data. Still, I was missing many of the useful capabilities that I was used to from my Silverlight and .Net development.\n\nI quickly realized that what I really wanted was LINQ.&#160; I threw together a proof of concept by implementing **select**, **where**, and **selectMany**.&#160; I found myself using these methods throughout my application.&#160; As I found myself wanting another LINQ capability, I added it to my [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) library.&#160; The next thing I knew: I had a mostly complete LINQ-to-Objects implementation.&#160; A bit more work and I had a complete clone of LINQ-to-Objects.\n\n### Aid .Net Developers in Flex Development\n\nI have been preaching lately that Silverlight and Flex developers need to get together and learn from one another.&#160; Where Silverlight has some great features (LINQ is one of them), Flex has some pretty great features as well.&#160; I believe that a library like [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) will facilitate the learning process from Silverlight to Flex by leveraging existing Silverlight knowledge.\n\n### Get to Know LINQ\n\nThere is no better way to fully understand the power and intricacies of LINQ in Silverlight and .Net than by implementing it on a different platform.&#160; By implementing every function and every overload in the LINQ space, I was forced to understand what everything is used for because I had to write unit tests that gave examples of using the functionality.\n\n### Get to Know Flex and ActionScript 3\n\nThere is no better way to get to know a new environment than to implement a familiar set of functionality in it.&#160; I was forced to learn about areas of Flex and ActionScript 3.0 that I would not have likely done on my own.&#160; I learned all about functional programming and closures in AS3, unit testing in Flex, the dynamic capabilities of AS3, monkey patching and ASDoc to name a few.&#160; I have come out of the [ActionLinq](https://bitbucket.org/briangenisio/actionlinq/) project with a strong understanding of the ActionScript 3.0 language and the more esoteric but powerful features of the language.&#160; I was also painfully made aware of the limitations of ActionScript that I miss from C#: Generics, method overloading, operator overloading, yielding and lambdas to name a few.\n\n## \n\n## Go Use It!\n\nGive it a try.&#160; Let me know how it goes.&#160; Have fun.&#160; Enjoy!\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2011%2F01%2F04%2Fintroducing-actionlinq%2F)](http://dotnetshoutout.com/Introducing%E2%80%A6-ActionLinq)","slug":"introducing-actionlinq","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hu004y6eul6uzo3ydl"},{"title":"3-Day Flex Jam with James Ward","id":"256","date":"2011-01-12T10:58:46.000Z","_content":"\n[![FlexJamBig](http://houseofbilz.com/wp-content/uploads/2011/01/FlexJamBig.png \"FlexJamBig\")](http://flexjam2011.eventbrite.com/)If you want to learn Flex or simply want to hone your skills, you need to know about this 3-day Flex Jam. [SRT Solutions](http://www.srtsolutions.com/) of Ann Arbor, MI is hosting a Flex Jam on Februrary 15-17 with Adobe evangelist [James Ward](http://www.jamesward.com/).&#160; The format is simple:\n\nCome to the jam with a problem you want to work on.&#160; If you don’t have a project, no problem.&#160; We will have labs and content to help you learn from the ground up.&#160; Or, come with an idea, and develop it while jamming with others.\n\nJames is an Adobe evangelist who knows a ton about Flex.&#160; He is personable, passionate and wicked smart – ready to help you rock.\n\nRegistration is limited to 20 people, so reserve your seat today!\n\n![](http://www.jamesward.com/uploads/2007/01/james_cowboy-150x150.jpg)James Ward is a Technical Evangelist for Flex at Adobe and Adobe’s JCP representative to JSR 286, 299, and 301\\. Much like his love for climbing mountains he enjoys programming because it provides endless new discoveries, elegant workarounds, summits and valleys. His adventures in climbing have taken him many places. Likewise, technology has brought him many adventures, including: Pascal and Assembly back in the early 90′s; Perl, HTML, and JavaScript in the mid 90′s; then Java and many of it’s frameworks beginning in the late 90′s. Today he primarily uses Flex to build beautiful front-ends for Java based back-ends. Prior to Adobe, James built a rich marketing and customer service portal for Pillar Data Systems.\n\nMore Info: [<font size=\"5\">http://flexjam2011.eventbrite.com/</font>](http://flexjam2011.eventbrite.com/)","source":"_posts/2011-01-12-3-day-flex-jam-with-james-ward.md","raw":"---\ntitle: 3-Day Flex Jam with James Ward\ntags:\n  - Flex\n  - Jam\nid: 256\ncategories:\n  - Uncategorized\ndate: 2011-01-12 05:58:46\n---\n\n[![FlexJamBig](http://houseofbilz.com/wp-content/uploads/2011/01/FlexJamBig.png \"FlexJamBig\")](http://flexjam2011.eventbrite.com/)If you want to learn Flex or simply want to hone your skills, you need to know about this 3-day Flex Jam. [SRT Solutions](http://www.srtsolutions.com/) of Ann Arbor, MI is hosting a Flex Jam on Februrary 15-17 with Adobe evangelist [James Ward](http://www.jamesward.com/).&#160; The format is simple:\n\nCome to the jam with a problem you want to work on.&#160; If you don’t have a project, no problem.&#160; We will have labs and content to help you learn from the ground up.&#160; Or, come with an idea, and develop it while jamming with others.\n\nJames is an Adobe evangelist who knows a ton about Flex.&#160; He is personable, passionate and wicked smart – ready to help you rock.\n\nRegistration is limited to 20 people, so reserve your seat today!\n\n![](http://www.jamesward.com/uploads/2007/01/james_cowboy-150x150.jpg)James Ward is a Technical Evangelist for Flex at Adobe and Adobe’s JCP representative to JSR 286, 299, and 301\\. Much like his love for climbing mountains he enjoys programming because it provides endless new discoveries, elegant workarounds, summits and valleys. His adventures in climbing have taken him many places. Likewise, technology has brought him many adventures, including: Pascal and Assembly back in the early 90′s; Perl, HTML, and JavaScript in the mid 90′s; then Java and many of it’s frameworks beginning in the late 90′s. Today he primarily uses Flex to build beautiful front-ends for Java based back-ends. Prior to Adobe, James built a rich marketing and customer service portal for Pillar Data Systems.\n\nMore Info: [<font size=\"5\">http://flexjam2011.eventbrite.com/</font>](http://flexjam2011.eventbrite.com/)","slug":"3-day-flex-jam-with-james-ward","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hv00526eulv840f8ql"},{"title":"CodeMash Slides and Demos","id":"253","date":"2011-01-11T10:20:05.000Z","_content":"\n&#160;\n\n[![](http://codemash.org/images/badges/waterpark.png)](http://codemash.org)\n\nThis Friday, I will be presenting at [CodeMash](http://codemash.org) for the second year in a row.&#160; This year, my topic is [Everything You Always Wanted to Know About Flex * But Were Afraid to Ask](http://codemash.org/sessions#Everything+You+Always+Wanted+to+Know+About+Flex+*+But+Were+Afraid+to+Ask).&#160; It is really just a presentation form of my current series – [Cross-Training in Silverlight and Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/).\n\nAs a good speaker-citizen, I wanted to post my slides and demo.&#160; They are available at BitBucket.org:\n\n[<font size=\"6\">Slides &amp; Code</font>](https://bitbucket.org/briangenisio/crosstraining/src)","source":"_posts/2011-01-11-codemash-slides-and-demos.md","raw":"---\ntitle: CodeMash Slides and Demos\ntags:\n  - CodeMash\n  - Cross-Training\n  - Flex\n  - Silverlight\nid: 253\ncategories:\n  - Uncategorized\ndate: 2011-01-11 05:20:05\n---\n\n&#160;\n\n[![](http://codemash.org/images/badges/waterpark.png)](http://codemash.org)\n\nThis Friday, I will be presenting at [CodeMash](http://codemash.org) for the second year in a row.&#160; This year, my topic is [Everything You Always Wanted to Know About Flex * But Were Afraid to Ask](http://codemash.org/sessions#Everything+You+Always+Wanted+to+Know+About+Flex+*+But+Were+Afraid+to+Ask).&#160; It is really just a presentation form of my current series – [Cross-Training in Silverlight and Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/).\n\nAs a good speaker-citizen, I wanted to post my slides and demo.&#160; They are available at BitBucket.org:\n\n[<font size=\"6\">Slides &amp; Code</font>](https://bitbucket.org/briangenisio/crosstraining/src)","slug":"codemash-slides-and-demos","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hw00556eulgb9eyv04"},{"title":"Cross-Training in Silverlight & Flex–Data Binding","id":"264","date":"2011-01-24T06:57:39.000Z","_content":"\nMore [Cross-Training in SIlverlight and Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/)\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2011%2F01%2F24%2Fcross-training-in-silverlight-flexdata-binding%2F)](http://dotnetshoutout.com/Cross-Training-in-Silverlight-Flex-Data-Binding)\n\nOne of the most powerful and compelling features of RIA frameworks like Silverlight and Flex is data binding.&#160; Data binding is where you declaratively state that a property in the view is “bound” to data in your model (or [presentation behavior layer](http://houseofbilz.com/archives/2010/12/29/cross-training-in-silverlight-flexmvvm-vs-presentation-model/)).&#160; This means that when the model data changes, the UI is updated.&#160; Conversely, when a user sets something in the UI layer, the model is then updated.\n\nThis capability greatly increases the ability to write features by reducing the amount of value management code the developer has to write.&#160; Data binding makes patterns like [MVVM and Presentation Model](http://houseofbilz.com/archives/2010/12/29/cross-training-in-silverlight-flexmvvm-vs-presentation-model/) possible because it eliminates boiler-plate code that is often found in other patterns like Model-View-Presenter.&#160; Data binding, in my opinion, is one of the features of modern application stacks that sets them apart from their ancestors.\n\nIn this article, I will discuss the different ways you might want to use data binding in Silverlight and Flex.&#160; I will describe how the approaches differ.&#160; You will see how similar they are as well.&#160; All of these examples can be found on my BitBucket site where all of my [“Cross-Training” examples](https://bitbucket.org/briangenisio/crosstraining/src) can be found.\n  <div style=\"background-color: #e8f3ff\">   \n\n### <font style=\"font-weight: bold\">Data Binding in Silverlight</font>\n\nData binding in Silverlight is purely declarative (as opposed to Flex, which is expression-based).&#160; For any given property in the visual tree, the developer can use a binding syntax to declaratively state how to bind.&#160; Silverlight conventions have you set a “data context” for a visual element in which the binding declaration works against.&#160; These bindings can be created imperatively in code, but they are typically defined in XAML unless there is a more dynamic reason to do it differently.\n\n#### <font style=\"font-weight: bold\">Data Contexts</font>\n\nYou define data contexts for a visual tree.&#160; When the data context is set, it remains in scope for all descendants in the visual tree unless is is set again.&#160; Data contexts can be set in XAML or in code and they can be any object.&#160; Here is an example of setting a data context that will be used for all of the examples to come:\n    <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;UserControl.Resources&gt;\n    &lt;local:DataModel x:Name=&quot;dataModel&quot; SimpleText=&quot;default&quot;&gt;\n        &lt;local:DataModel.Person&gt;\n            &lt;local:Person&gt;\n                &lt;local:Person.FullName&gt;\n                    &lt;local:PersonName First=&quot;Brian&quot; Last=&quot;Genisio&quot; /&gt;\n                &lt;/local:Person.FullName&gt;\n            &lt;/local:Person&gt;\n        &lt;/local:DataModel.Person&gt;\n    &lt;/local:DataModel&gt;\n&lt;/UserControl.Resources&gt;\n\n&lt;StackPanel DataContext=&quot;{StaticResource dataModel}&quot;&gt;\n&lt;/StackPanel&gt;</pre>\n\nAll of the examples in this post will be inside the **StackPanel** so they will inherit the data context from their visual parent.&#160; There are certainly other ways of setting the **DataContext** but this is how we will do it for this post.\n\n#### <font style=\"font-weight: bold\">Basic Example</font>\n\nNow that we have seen an example of setting the data context, lets bind to the **SimpleText** property in the data model:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;TextBlock Text=&quot;{Binding SimpleText}&quot; /&gt;</pre>\n\nBy using this simple binding syntax, the text block in the UI will show the value of **SimpleText**.&#160; In this case, the UI will show “default”.\n\n#### <font style=\"font-weight: bold\">Change Notification</font>\n\nDisplaying data is great and very often, this is all you need.&#160; Often, though, you need to update the UI when the property changes.&#160; It becomes the data object’s responsibility to notify the listener (the UI in this case) of the change so it knows to modify the text.\n\nTypically, this is done with the **INotifyPropertyChanged** interface.&#160; The interface defines one event – **PropertyChanged** – which sends the name of the property that changed.&#160; The interface is not specific to the UI layer but the UI layer knows how to process the event through the binding you created in the XAML.&#160; \n\nThis is how you implement **INotifyPropertyChanged **in the **DataModel** class:\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">public class DataModel : INotifyPropertyChanged\n{\n    private string _simpleText = &quot;first&quot;;\n    public string SimpleText\n    {\n        get { return _simpleText; }\n        set\n        {\n            if (_simpleText == value)\n                return;\n\n            _simpleText = value;\n            OnPropertyChanged(&quot;SimpleText&quot;);\n        }\n    }\n\n    protected void OnPropertyChanged(string property)\n    {\n        var handlers = PropertyChanged;\n        if (handlers != null)\n            handlers(this, new PropertyChangedEventArgs(property));\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n}</pre>\n\nThe first part of this class defines the notifiable property using a common pattern.&#160; It uses a private backing store (**_simpleText**) and delegates to it in the property getter and setter.&#160; The setter checks to make sure the value has changed so it doesn’t send an event when nothing changed.&#160; It then sets the backing store and fires an event saying “SimpleText” has changed.\n\nThe second part of this code implements the event that was defined in the **INotifyPropertyChanged** interface.&#160; It uses a very common event pattern of using a protected **OnPropertyChanged** method.&#160; Inside, it makes a copy of the handlers to avoid any changes that may happen while looping through the handlers.&#160; It then calls the handlers if they exist.&#160; It is very common to push the second part of this class into a common **Notifiable** class.\n\nNow that the **DataModel** can notify the UI of changes to **SimpleText**, you can can set the property being changed:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;\n    &lt;TextBlock Text=&quot;{Binding SimpleText}&quot; /&gt;\n    &lt;Button Content=&quot;update text&quot; Click=&quot;UpdateSimpleText&quot; /&gt;\n&lt;/StackPanel&gt;</pre>\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">private void UpdateSimpleText(object sender, RoutedEventArgs e)\n{\n    (Resources[&quot;dataModel&quot;] as DataModel).SimpleText = &quot;updated&quot;;\n}</pre>\n\nIn this example, the value begins with “default” just as the before.&#160; When you press the “update text” button, the **SimpleText** property is modified.&#160; Internally, the property notifies the UI of the change and user sees “updated”.\n\n#### <font style=\"font-weight: bold\">Dependency Properties</font>\n\nVisual elements within Silverlight use a different mechanism for property notification.&#160; Dependency Properties are the preferred method for creating bindable properties on UI elements.&#160; More specifically, any class that derives from **DependencyObject** should avoid using **INotifyPropertyChanged** and use Dependency Properties instead.\n\nDependency Properties are created imperatively in the code behind of the visual element.&#160; Add a Dependency Property to the **MainPage** user control:\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">public static DependencyProperty LocalTextProperty = \n    DependencyProperty.Register(&quot;LocalText&quot;, \n        typeof(String), typeof(MainPage), \n        new PropertyMetadata(&quot;&quot;));\n\npublic string LocalText\n{\n    get { return GetValue(LocalTextProperty) as string; }\n    set { SetValue(LocalTextProperty, value); }\n}</pre>\n\nWith this property created, you can now bind to a property in my user control, instead of a data object:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;\n    &lt;TextBox Text=&quot;{Binding ElementName=root, Path=LocalText,  Mode=TwoWay}&quot; Width=&quot;100&quot; /&gt;\n    &lt;TextBox Text=&quot;{Binding ElementName=root, Path=LocalText}&quot; Width=&quot;100&quot; /&gt;\n&lt;/StackPanel&gt;</pre>\n\nThere are a few things to notice here:\n\n*   **ElementName** refers to the root control, which is of type **MainPage**.&#160; This ignores the inherited data context.*   In the first **TextBox**, the **Mode** is set to **TwoWay**.&#160; This tells the control to push any changes back to the property.&#160; Since the property has notification built in (since it is a Dependency Property), the second control will get updated automatically; it is bound to the same property.\n\nAs a rule of thumb, use Dependency Properties if your class derives from **DependencyObject**.&#160; Use **INotifyPropertyChanged** in all other cases.\n\n#### <font style=\"font-weight: bold\">Binding to Other Elements</font>\n\nIn addition to binding to data, you may also need to bind to values in the view.&#160; The previous example shows some of this; the data contexts for the text boxes are the root elements instead of whatever was set earlier.\n\nYou can bind to another element by name:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;\n    &lt;TextBox Width=&quot;100&quot; x:Name=&quot;input&quot; /&gt;\n    &lt;TextBox Width=&quot;100&quot; Text=&quot;{Binding ElementName=input, Path=Text}&quot; /&gt;\n&lt;/StackPanel&gt;</pre>\n\nIn this example, the text of the second **TextBox** is bound to the text of the first **TextBox**.&#160; Since this binding is not **TwoWay**, the value changes are not reciprocal.\n\n#### <font style=\"font-weight: bold\">Binding to Chained Properties</font>\n\nIn all the examples thus far, data binding has happened on a property of the data context.&#160; This may not be the case when the data’s object tree is more complex.&#160; You can get the **First** and **Last** name properties, which are properties of a different object, from the data model using property chaining:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;TextBlock Text=&quot;{Binding Person.FullName.First'}&quot; /&gt;</pre>\n\nThe same notification rules apply; the UI will update if **First** is a notifiable property.\n\n#### <font style=\"font-weight: bold\">Formatted Text</font>\n\nIf you need to format the text display of a given value, you can do so using the **StringFormat** attribute in the binding declaration.&#160; Building on the previous example, the text is displayed as “Your name is: Brian”:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;TextBlock Text=&quot;{Binding Person.FullName.First, StringFormat='Your name is: {0}'}&quot; /&gt;</pre>\n\n#### <font style=\"font-weight: bold\">Value Converters</font>\n\nOften, the format of the data is more complex than a simple string format.&#160; In cases like this, you can use Value Converters.&#160; These are classes that implement **IValueConverter** and provide functions for **Convert** and **ConvertBack.**&#160; Whenever binding occurs, the value is passed to the Value Converter which in turn translates the data to be displayed in the UI.&#160; \n\nHere is an example displaying a number with two digits of precision:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;UserControl.Resources&gt;\n    &lt;local:NumberValueConverter x:Name=&quot;numeric&quot; Precision=&quot;2&quot; /&gt;\n&lt;/UserControl.Resources&gt;\n\n&lt;TextBox Width=&quot;100&quot; x:Name=&quot;number&quot; /&gt;\n&lt;TextBlock Text=&quot;{Binding ElementName=number, Path=Text, Converter={StaticResource numeric}}&quot; /&gt;</pre>\n\nThe **NumberValueConverter** handles the conversion from a string value to a double and back to a string with the specified level of precision.&#160; There are not many built-in Value Converters, but they are easy to build:\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">public class NumberValueConverter : IValueConverter\n{\n    public NumberValueConverter()\n    {\n        Precision = 4;\n    }\n\n    public int Precision { get; set; }\n\n    public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture)\n    {\n        if (!(value is string))\n            return DependencyProperty.UnsetValue;\n\n        if (string.IsNullOrWhiteSpace(value as string))\n            value = &quot;0&quot;;\n\n        if ((value as string).EndsWith(&quot;.&quot;))\n            value = value + &quot;0&quot;;\n\n        var format = string.Format(&quot;{{0:F{0}}}&quot;, Precision);\n\n        return string.Format(format, double.Parse(value as string));\n    }\n\n    public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture)\n    {\n        throw new System.NotImplementedException();\n    }\n}</pre>\n\n#### <font style=\"font-weight: bold\">Summary</font>\n\nData binding is very powerful in Silverlight.&#160; The previous examples highlighted the most common case data binding scenarios.&#160; Certainly there are more details to cover for more complex cases, but you should understand data binding capabilities pretty well by now.&#160; \n\nNext, let’s see how Flex implements the same features.\n\n</div>\n\n<div style=\"background-color: #ffe8e8\">\n\n### <font style=\"font-weight: bold\"></font>\n\n### <font style=\"font-weight: bold\">Data Binding in Flex</font>\n\nData binding in Flex is expression-based (as opposed to Silveright, which is declarative).&#160; For any given property in the visual tree, the developer can use a binding syntax to declaratively state how to bind.&#160; Since Flex is expression-based, it does not require a data context like in Silverlight.&#160; These bindings can be created imperatively in code, but they are typically defined in MXML unless there is a more dynamic reason to do it differently.\n\n#### <font style=\"font-weight: bold\">Basic Example</font>\n\nTo begin with, let us assume that we have a data object defined some place:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;fx:Declarations&gt;\n    &lt;local:DataObject id=&quot;dataObject&quot; simpleText=&quot;default&quot; /&gt;\n&lt;/fx:Dexlarations&gt;</pre>\n\n#### <font style=\"font-weight: bold\"></font>\n\nSince we named the data object with the id of **dataObject**, we can use it in a binding expression anywhere within scope:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:Label text=&quot;{dataObject.simpleText}&quot; /&gt;</pre>\n\nWhen the MXML code is compiled, the binding expression is compiled as well.&#160; It gets turned into ActionScript 3 code just like everything else in the MXML markup.&#160; The compiler re-writes the class to set the text from the **dataObject** object as defined in the expression.\n\n#### <font style=\"font-weight: bold\">Change Notification</font>\n\nDisplaying data is great and very often, this is all you need.&#160; Often, though, you need to update the UI when the property changes.&#160; It becomes the data object’s responsibility to notify the listener (the UI) of the change so it knows to modify the text.\n\nTypically, this is done with Bindable Properties.&#160; This is how you do it in the **DataObject** class:\n\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">[Bindable]\npublic class DataObject\n{\n    public var simpleText:String;\n}</pre>\n\nNotice the [**Bindable]** meta tag that has been added to the **DataObject** class.&#160; This meta tag tells the Flex compiler to re-write the public properties in this class to be notifiable.&#160; It does this by employing the standard eventing mechanism found in ActionScript 3.&#160; \n\nIn reality, the generated code looks a lot like the Silverlight notifiable properties; the key difference is that the **Bindable** flag does it for you.&#160; There is no specific notifiable interface for notifiable properties but the code-generated convention is to name the event as “propertyChanged” where “property” is the actual name of the property; in this example, it is “simpleTextChanged”.\n\nEnough of the details.&#160; By doing this, you can have code like this that will update the text based on data binding when you press the button:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:Label text=&quot;{dataObject.simpleText}&quot; /&gt;\n&lt;s:Button label=&quot;update&quot; click=&quot;dataObject.simpleText = 'Updated'&quot; /&gt;</pre>\n\nThe Flex compiler parses the binding expression and listens to change events on the **dataObject** instance.&#160; When it changes, the **Label.text** property is set.&#160; All of this is generated for you.\n\n#### <font style=\"font-weight: bold\">Binding to Local Variables</font>\n\nIt is easy to bind to local variables since reading a local variable is noting but an expression in Flex.&#160; For instance, you can define the variable as **[Bindable] **in the script block:\n\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">[Bindable]\nprivate var localText:String = &quot;&quot;;</pre>\n\nThen you simply bind to the variable:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:TextInput text=&quot;@{localText}&quot; /&gt;\n&lt;s:TextInput text=&quot;{localText}&quot; /&gt;</pre>\n\nNotice that the first text box use the “@” symbol.&#160; This tells the binding system that the binding is two-way.&#160; In other words, anything typed into the first **TextInput** will get set in the **localText** variable and then sent back to the second **TextInput**.\n\n#### <font style=\"font-weight: bold\">Using Expressions</font>\n\n<font style=\"font-weight: bold\"></font>\n\nThe power of using expressions for data binding becomes obvious when you call methods within the binding.&#160; In this example, we can add two values using data binding alone.&#160; When **a** or **b** change, the binding expression is automatically re-evaluated, causing the output to change:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:TextInput id=&quot;a&quot; /&gt;\n&lt;s:TextInput id=&quot;b&quot; /&gt;\n&lt;s:Label text=&quot;a + b = {add(Number(a.text), Number(b.text))}&quot; /&gt;</pre>\n\nAlthough I don’t recommend putting too much logic in the binding expressions, the power provided here is quite amazing.&#160; One way I find myself using this feature while implementing the Presentation Model pattern is by hiding elements based on if data exists.&#160; A simple example of binding the **visible** property to the existence of the **nullableObject** variable:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:Label text=&quot;Value is not null&quot; visible=&quot;{nullableObject != null}&quot; /&gt;\n&lt;s:Button label=&quot;Make null&quot; click=&quot;nullableObject = null&quot; /&gt;\n&lt;s:Button label=&quot;Set value&quot; click=&quot;nullableObject = 'something'&quot; /&gt;</pre>\n\n#### <font style=\"font-weight: bold\">Binding to Other Elements</font>\n\nIn addition to binding to data, you may also need to bind to values in the view.&#160; You can bind to another element by **id** since setting an **id** on a visual element automatically references it in a variable of the same name:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:TextInput id=&quot;input&quot; /&gt;\n&lt;s:TextInput text=&quot;{input.text}&quot; /&gt;</pre>\n\nIn this example, the text of the second **TextInput **is bound to the text of the first **TextInput**.&#160; Since this binding is not **TwoWay**, the value changes are not reciprocal.\n\n#### <font style=\"font-weight: bold\">Binding to Chained Properties</font>\n\nIn all the examples thus far, data binding has happened on a property of a single object.&#160; This may not be the case when the data’s object tree is more complex.&#160; You can get the **First** and **Last** name properties out of the data model by using property chaining:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;fx:Declarations&gt;\n    &lt;fx:Model id=&quot;model&quot;&gt;\n        &lt;person&gt;\n            &lt;name&gt;\n                &lt;first&gt;Brian&lt;/first&gt;\n                &lt;last&gt;Genisio&lt;/last&gt;\n            &lt;/name&gt;\n        &lt;/person&gt;\n    &lt;/fx:Model&gt;\n&lt;/fx:Declarations&gt;\n\n&lt;s:Label text=&quot;{model.name.first}&quot; /&gt;</pre>\n\nThe same notification rules apply; meaning that the UI will update if **First** is a notifiable property.&#160; In the case of **fx:Model**, all properties are inherently bindable.\n\nIn order for change notification to occur on the chained properties to update on change, all of the properties in the chain must be **[Bindable].**\n\n#### <font style=\"font-weight: bold\">Formatted Text</font>\n\nSince data binding is based on an evaluated expression, adding text before or after the bound value is very easy:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:Label text=&quot;Your name is: {model.name.first}&quot; /&gt;</pre>\n\n<font style=\"font-weight: bold\"></font>\n\nIn this example, the UI will display “Your name is: Brian”.\n\n#### <font style=\"font-weight: bold\">Formatters</font>\n\nSince data binding is based on expressions, data can be formatted using functions in the expression that get evaluated every time a bindable property changes.&#160; In addition, Flex provides several formatters out of the box.&#160; The following example shows how to set the precision of a double value to 2 digits after the decimal place:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;fx:Declarations&gt;\n    &lt;mx:NumberFormatter id=&quot;numeric&quot; precision=&quot;2&quot; /&gt;\n&lt;/fx:Declarations&gt;\n\n&lt;s:TextInput id=&quot;number&quot; /&gt;\n&lt;s:Label text=&quot;{numeric.format(Number(number.text))}&quot; /&gt;</pre>\n\nWhenever the **number.text** property changes, it uses the **NumberFormatter** to evaluate the text in the **Label.&#160; **In addition to the numerous built-in formatters (currency, date, phone number, etc), you can create your own formatters by extending **Formatter**.&#160; \n\n</div>\n\n### <font style=\"font-weight: bold\">Summary</font>\n\nThe capabilities provided by data binding in Silverlight and Flex give the developer an extremely powerful tool.&#160; It allows him/her to write more features with less code.&#160; Silverlight uses a declarative model where Flex uses an expression model, but the majority of the capabilities mirror each other.&#160; Data binding is a case where I think Flex has the upper hand, though.&#160; By using expressions, the data binding is both more succinct and more powerful.&#160; That is not to say that the declarative style in Silverlight is bad.&#160; It is just that the expressive side in Flex is better (in my opinion).&#160; \n\nI am VERY curious to see how C# 5 with the compiler as a service adds value to the binding story in Silverlight.&#160; Will we see an optional expression-based binding that is compiled and evaluated at runtime?&#160; If not, how hard will it be to write this?\n\nNext time, I will write about visualizing data in Silverlight and Flex. Stay tuned ![Smile](http://houseofbilz.com/wp-content/uploads/2011/01/wlEmoticon-smile.png)","source":"_posts/2011-01-24-cross-training-in-silverlight-flexdata-binding.md","raw":"---\ntitle: 'Cross-Training in Silverlight & Flex–Data Binding'\ntags:\n  - Cross-Training\n  - Data Binding\n  - Flex\n  - Silverlight\nid: 264\ncategories:\n  - Uncategorized\ndate: 2011-01-24 01:57:39\n---\n\nMore [Cross-Training in SIlverlight and Flex](http://houseofbilz.com/archives/2010/10/24/cross-training-in-silverlight-vs-flex/)\n\n[![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2011%2F01%2F24%2Fcross-training-in-silverlight-flexdata-binding%2F)](http://dotnetshoutout.com/Cross-Training-in-Silverlight-Flex-Data-Binding)\n\nOne of the most powerful and compelling features of RIA frameworks like Silverlight and Flex is data binding.&#160; Data binding is where you declaratively state that a property in the view is “bound” to data in your model (or [presentation behavior layer](http://houseofbilz.com/archives/2010/12/29/cross-training-in-silverlight-flexmvvm-vs-presentation-model/)).&#160; This means that when the model data changes, the UI is updated.&#160; Conversely, when a user sets something in the UI layer, the model is then updated.\n\nThis capability greatly increases the ability to write features by reducing the amount of value management code the developer has to write.&#160; Data binding makes patterns like [MVVM and Presentation Model](http://houseofbilz.com/archives/2010/12/29/cross-training-in-silverlight-flexmvvm-vs-presentation-model/) possible because it eliminates boiler-plate code that is often found in other patterns like Model-View-Presenter.&#160; Data binding, in my opinion, is one of the features of modern application stacks that sets them apart from their ancestors.\n\nIn this article, I will discuss the different ways you might want to use data binding in Silverlight and Flex.&#160; I will describe how the approaches differ.&#160; You will see how similar they are as well.&#160; All of these examples can be found on my BitBucket site where all of my [“Cross-Training” examples](https://bitbucket.org/briangenisio/crosstraining/src) can be found.\n  <div style=\"background-color: #e8f3ff\">   \n\n### <font style=\"font-weight: bold\">Data Binding in Silverlight</font>\n\nData binding in Silverlight is purely declarative (as opposed to Flex, which is expression-based).&#160; For any given property in the visual tree, the developer can use a binding syntax to declaratively state how to bind.&#160; Silverlight conventions have you set a “data context” for a visual element in which the binding declaration works against.&#160; These bindings can be created imperatively in code, but they are typically defined in XAML unless there is a more dynamic reason to do it differently.\n\n#### <font style=\"font-weight: bold\">Data Contexts</font>\n\nYou define data contexts for a visual tree.&#160; When the data context is set, it remains in scope for all descendants in the visual tree unless is is set again.&#160; Data contexts can be set in XAML or in code and they can be any object.&#160; Here is an example of setting a data context that will be used for all of the examples to come:\n    <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;UserControl.Resources&gt;\n    &lt;local:DataModel x:Name=&quot;dataModel&quot; SimpleText=&quot;default&quot;&gt;\n        &lt;local:DataModel.Person&gt;\n            &lt;local:Person&gt;\n                &lt;local:Person.FullName&gt;\n                    &lt;local:PersonName First=&quot;Brian&quot; Last=&quot;Genisio&quot; /&gt;\n                &lt;/local:Person.FullName&gt;\n            &lt;/local:Person&gt;\n        &lt;/local:DataModel.Person&gt;\n    &lt;/local:DataModel&gt;\n&lt;/UserControl.Resources&gt;\n\n&lt;StackPanel DataContext=&quot;{StaticResource dataModel}&quot;&gt;\n&lt;/StackPanel&gt;</pre>\n\nAll of the examples in this post will be inside the **StackPanel** so they will inherit the data context from their visual parent.&#160; There are certainly other ways of setting the **DataContext** but this is how we will do it for this post.\n\n#### <font style=\"font-weight: bold\">Basic Example</font>\n\nNow that we have seen an example of setting the data context, lets bind to the **SimpleText** property in the data model:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;TextBlock Text=&quot;{Binding SimpleText}&quot; /&gt;</pre>\n\nBy using this simple binding syntax, the text block in the UI will show the value of **SimpleText**.&#160; In this case, the UI will show “default”.\n\n#### <font style=\"font-weight: bold\">Change Notification</font>\n\nDisplaying data is great and very often, this is all you need.&#160; Often, though, you need to update the UI when the property changes.&#160; It becomes the data object’s responsibility to notify the listener (the UI in this case) of the change so it knows to modify the text.\n\nTypically, this is done with the **INotifyPropertyChanged** interface.&#160; The interface defines one event – **PropertyChanged** – which sends the name of the property that changed.&#160; The interface is not specific to the UI layer but the UI layer knows how to process the event through the binding you created in the XAML.&#160; \n\nThis is how you implement **INotifyPropertyChanged **in the **DataModel** class:\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">public class DataModel : INotifyPropertyChanged\n{\n    private string _simpleText = &quot;first&quot;;\n    public string SimpleText\n    {\n        get { return _simpleText; }\n        set\n        {\n            if (_simpleText == value)\n                return;\n\n            _simpleText = value;\n            OnPropertyChanged(&quot;SimpleText&quot;);\n        }\n    }\n\n    protected void OnPropertyChanged(string property)\n    {\n        var handlers = PropertyChanged;\n        if (handlers != null)\n            handlers(this, new PropertyChangedEventArgs(property));\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n}</pre>\n\nThe first part of this class defines the notifiable property using a common pattern.&#160; It uses a private backing store (**_simpleText**) and delegates to it in the property getter and setter.&#160; The setter checks to make sure the value has changed so it doesn’t send an event when nothing changed.&#160; It then sets the backing store and fires an event saying “SimpleText” has changed.\n\nThe second part of this code implements the event that was defined in the **INotifyPropertyChanged** interface.&#160; It uses a very common event pattern of using a protected **OnPropertyChanged** method.&#160; Inside, it makes a copy of the handlers to avoid any changes that may happen while looping through the handlers.&#160; It then calls the handlers if they exist.&#160; It is very common to push the second part of this class into a common **Notifiable** class.\n\nNow that the **DataModel** can notify the UI of changes to **SimpleText**, you can can set the property being changed:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;\n    &lt;TextBlock Text=&quot;{Binding SimpleText}&quot; /&gt;\n    &lt;Button Content=&quot;update text&quot; Click=&quot;UpdateSimpleText&quot; /&gt;\n&lt;/StackPanel&gt;</pre>\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">private void UpdateSimpleText(object sender, RoutedEventArgs e)\n{\n    (Resources[&quot;dataModel&quot;] as DataModel).SimpleText = &quot;updated&quot;;\n}</pre>\n\nIn this example, the value begins with “default” just as the before.&#160; When you press the “update text” button, the **SimpleText** property is modified.&#160; Internally, the property notifies the UI of the change and user sees “updated”.\n\n#### <font style=\"font-weight: bold\">Dependency Properties</font>\n\nVisual elements within Silverlight use a different mechanism for property notification.&#160; Dependency Properties are the preferred method for creating bindable properties on UI elements.&#160; More specifically, any class that derives from **DependencyObject** should avoid using **INotifyPropertyChanged** and use Dependency Properties instead.\n\nDependency Properties are created imperatively in the code behind of the visual element.&#160; Add a Dependency Property to the **MainPage** user control:\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">public static DependencyProperty LocalTextProperty = \n    DependencyProperty.Register(&quot;LocalText&quot;, \n        typeof(String), typeof(MainPage), \n        new PropertyMetadata(&quot;&quot;));\n\npublic string LocalText\n{\n    get { return GetValue(LocalTextProperty) as string; }\n    set { SetValue(LocalTextProperty, value); }\n}</pre>\n\nWith this property created, you can now bind to a property in my user control, instead of a data object:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;\n    &lt;TextBox Text=&quot;{Binding ElementName=root, Path=LocalText,  Mode=TwoWay}&quot; Width=&quot;100&quot; /&gt;\n    &lt;TextBox Text=&quot;{Binding ElementName=root, Path=LocalText}&quot; Width=&quot;100&quot; /&gt;\n&lt;/StackPanel&gt;</pre>\n\nThere are a few things to notice here:\n\n*   **ElementName** refers to the root control, which is of type **MainPage**.&#160; This ignores the inherited data context.*   In the first **TextBox**, the **Mode** is set to **TwoWay**.&#160; This tells the control to push any changes back to the property.&#160; Since the property has notification built in (since it is a Dependency Property), the second control will get updated automatically; it is bound to the same property.\n\nAs a rule of thumb, use Dependency Properties if your class derives from **DependencyObject**.&#160; Use **INotifyPropertyChanged** in all other cases.\n\n#### <font style=\"font-weight: bold\">Binding to Other Elements</font>\n\nIn addition to binding to data, you may also need to bind to values in the view.&#160; The previous example shows some of this; the data contexts for the text boxes are the root elements instead of whatever was set earlier.\n\nYou can bind to another element by name:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;\n    &lt;TextBox Width=&quot;100&quot; x:Name=&quot;input&quot; /&gt;\n    &lt;TextBox Width=&quot;100&quot; Text=&quot;{Binding ElementName=input, Path=Text}&quot; /&gt;\n&lt;/StackPanel&gt;</pre>\n\nIn this example, the text of the second **TextBox** is bound to the text of the first **TextBox**.&#160; Since this binding is not **TwoWay**, the value changes are not reciprocal.\n\n#### <font style=\"font-weight: bold\">Binding to Chained Properties</font>\n\nIn all the examples thus far, data binding has happened on a property of the data context.&#160; This may not be the case when the data’s object tree is more complex.&#160; You can get the **First** and **Last** name properties, which are properties of a different object, from the data model using property chaining:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;TextBlock Text=&quot;{Binding Person.FullName.First'}&quot; /&gt;</pre>\n\nThe same notification rules apply; the UI will update if **First** is a notifiable property.\n\n#### <font style=\"font-weight: bold\">Formatted Text</font>\n\nIf you need to format the text display of a given value, you can do so using the **StringFormat** attribute in the binding declaration.&#160; Building on the previous example, the text is displayed as “Your name is: Brian”:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;TextBlock Text=&quot;{Binding Person.FullName.First, StringFormat='Your name is: {0}'}&quot; /&gt;</pre>\n\n#### <font style=\"font-weight: bold\">Value Converters</font>\n\nOften, the format of the data is more complex than a simple string format.&#160; In cases like this, you can use Value Converters.&#160; These are classes that implement **IValueConverter** and provide functions for **Convert** and **ConvertBack.**&#160; Whenever binding occurs, the value is passed to the Value Converter which in turn translates the data to be displayed in the UI.&#160; \n\nHere is an example displaying a number with two digits of precision:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;UserControl.Resources&gt;\n    &lt;local:NumberValueConverter x:Name=&quot;numeric&quot; Precision=&quot;2&quot; /&gt;\n&lt;/UserControl.Resources&gt;\n\n&lt;TextBox Width=&quot;100&quot; x:Name=&quot;number&quot; /&gt;\n&lt;TextBlock Text=&quot;{Binding ElementName=number, Path=Text, Converter={StaticResource numeric}}&quot; /&gt;</pre>\n\nThe **NumberValueConverter** handles the conversion from a string value to a double and back to a string with the specified level of precision.&#160; There are not many built-in Value Converters, but they are easy to build:\n\n  <pre class=\"brush: csharp; ruler: true; gutter: false; toolbar: false;\">public class NumberValueConverter : IValueConverter\n{\n    public NumberValueConverter()\n    {\n        Precision = 4;\n    }\n\n    public int Precision { get; set; }\n\n    public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture)\n    {\n        if (!(value is string))\n            return DependencyProperty.UnsetValue;\n\n        if (string.IsNullOrWhiteSpace(value as string))\n            value = &quot;0&quot;;\n\n        if ((value as string).EndsWith(&quot;.&quot;))\n            value = value + &quot;0&quot;;\n\n        var format = string.Format(&quot;{{0:F{0}}}&quot;, Precision);\n\n        return string.Format(format, double.Parse(value as string));\n    }\n\n    public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture)\n    {\n        throw new System.NotImplementedException();\n    }\n}</pre>\n\n#### <font style=\"font-weight: bold\">Summary</font>\n\nData binding is very powerful in Silverlight.&#160; The previous examples highlighted the most common case data binding scenarios.&#160; Certainly there are more details to cover for more complex cases, but you should understand data binding capabilities pretty well by now.&#160; \n\nNext, let’s see how Flex implements the same features.\n\n</div>\n\n<div style=\"background-color: #ffe8e8\">\n\n### <font style=\"font-weight: bold\"></font>\n\n### <font style=\"font-weight: bold\">Data Binding in Flex</font>\n\nData binding in Flex is expression-based (as opposed to Silveright, which is declarative).&#160; For any given property in the visual tree, the developer can use a binding syntax to declaratively state how to bind.&#160; Since Flex is expression-based, it does not require a data context like in Silverlight.&#160; These bindings can be created imperatively in code, but they are typically defined in MXML unless there is a more dynamic reason to do it differently.\n\n#### <font style=\"font-weight: bold\">Basic Example</font>\n\nTo begin with, let us assume that we have a data object defined some place:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;fx:Declarations&gt;\n    &lt;local:DataObject id=&quot;dataObject&quot; simpleText=&quot;default&quot; /&gt;\n&lt;/fx:Dexlarations&gt;</pre>\n\n#### <font style=\"font-weight: bold\"></font>\n\nSince we named the data object with the id of **dataObject**, we can use it in a binding expression anywhere within scope:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:Label text=&quot;{dataObject.simpleText}&quot; /&gt;</pre>\n\nWhen the MXML code is compiled, the binding expression is compiled as well.&#160; It gets turned into ActionScript 3 code just like everything else in the MXML markup.&#160; The compiler re-writes the class to set the text from the **dataObject** object as defined in the expression.\n\n#### <font style=\"font-weight: bold\">Change Notification</font>\n\nDisplaying data is great and very often, this is all you need.&#160; Often, though, you need to update the UI when the property changes.&#160; It becomes the data object’s responsibility to notify the listener (the UI) of the change so it knows to modify the text.\n\nTypically, this is done with Bindable Properties.&#160; This is how you do it in the **DataObject** class:\n\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">[Bindable]\npublic class DataObject\n{\n    public var simpleText:String;\n}</pre>\n\nNotice the [**Bindable]** meta tag that has been added to the **DataObject** class.&#160; This meta tag tells the Flex compiler to re-write the public properties in this class to be notifiable.&#160; It does this by employing the standard eventing mechanism found in ActionScript 3.&#160; \n\nIn reality, the generated code looks a lot like the Silverlight notifiable properties; the key difference is that the **Bindable** flag does it for you.&#160; There is no specific notifiable interface for notifiable properties but the code-generated convention is to name the event as “propertyChanged” where “property” is the actual name of the property; in this example, it is “simpleTextChanged”.\n\nEnough of the details.&#160; By doing this, you can have code like this that will update the text based on data binding when you press the button:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:Label text=&quot;{dataObject.simpleText}&quot; /&gt;\n&lt;s:Button label=&quot;update&quot; click=&quot;dataObject.simpleText = 'Updated'&quot; /&gt;</pre>\n\nThe Flex compiler parses the binding expression and listens to change events on the **dataObject** instance.&#160; When it changes, the **Label.text** property is set.&#160; All of this is generated for you.\n\n#### <font style=\"font-weight: bold\">Binding to Local Variables</font>\n\nIt is easy to bind to local variables since reading a local variable is noting but an expression in Flex.&#160; For instance, you can define the variable as **[Bindable] **in the script block:\n\n  <pre class=\"brush: as3; ruler: true; gutter: false; toolbar: false;\">[Bindable]\nprivate var localText:String = &quot;&quot;;</pre>\n\nThen you simply bind to the variable:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:TextInput text=&quot;@{localText}&quot; /&gt;\n&lt;s:TextInput text=&quot;{localText}&quot; /&gt;</pre>\n\nNotice that the first text box use the “@” symbol.&#160; This tells the binding system that the binding is two-way.&#160; In other words, anything typed into the first **TextInput** will get set in the **localText** variable and then sent back to the second **TextInput**.\n\n#### <font style=\"font-weight: bold\">Using Expressions</font>\n\n<font style=\"font-weight: bold\"></font>\n\nThe power of using expressions for data binding becomes obvious when you call methods within the binding.&#160; In this example, we can add two values using data binding alone.&#160; When **a** or **b** change, the binding expression is automatically re-evaluated, causing the output to change:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:TextInput id=&quot;a&quot; /&gt;\n&lt;s:TextInput id=&quot;b&quot; /&gt;\n&lt;s:Label text=&quot;a + b = {add(Number(a.text), Number(b.text))}&quot; /&gt;</pre>\n\nAlthough I don’t recommend putting too much logic in the binding expressions, the power provided here is quite amazing.&#160; One way I find myself using this feature while implementing the Presentation Model pattern is by hiding elements based on if data exists.&#160; A simple example of binding the **visible** property to the existence of the **nullableObject** variable:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:Label text=&quot;Value is not null&quot; visible=&quot;{nullableObject != null}&quot; /&gt;\n&lt;s:Button label=&quot;Make null&quot; click=&quot;nullableObject = null&quot; /&gt;\n&lt;s:Button label=&quot;Set value&quot; click=&quot;nullableObject = 'something'&quot; /&gt;</pre>\n\n#### <font style=\"font-weight: bold\">Binding to Other Elements</font>\n\nIn addition to binding to data, you may also need to bind to values in the view.&#160; You can bind to another element by **id** since setting an **id** on a visual element automatically references it in a variable of the same name:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:TextInput id=&quot;input&quot; /&gt;\n&lt;s:TextInput text=&quot;{input.text}&quot; /&gt;</pre>\n\nIn this example, the text of the second **TextInput **is bound to the text of the first **TextInput**.&#160; Since this binding is not **TwoWay**, the value changes are not reciprocal.\n\n#### <font style=\"font-weight: bold\">Binding to Chained Properties</font>\n\nIn all the examples thus far, data binding has happened on a property of a single object.&#160; This may not be the case when the data’s object tree is more complex.&#160; You can get the **First** and **Last** name properties out of the data model by using property chaining:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;fx:Declarations&gt;\n    &lt;fx:Model id=&quot;model&quot;&gt;\n        &lt;person&gt;\n            &lt;name&gt;\n                &lt;first&gt;Brian&lt;/first&gt;\n                &lt;last&gt;Genisio&lt;/last&gt;\n            &lt;/name&gt;\n        &lt;/person&gt;\n    &lt;/fx:Model&gt;\n&lt;/fx:Declarations&gt;\n\n&lt;s:Label text=&quot;{model.name.first}&quot; /&gt;</pre>\n\nThe same notification rules apply; meaning that the UI will update if **First** is a notifiable property.&#160; In the case of **fx:Model**, all properties are inherently bindable.\n\nIn order for change notification to occur on the chained properties to update on change, all of the properties in the chain must be **[Bindable].**\n\n#### <font style=\"font-weight: bold\">Formatted Text</font>\n\nSince data binding is based on an evaluated expression, adding text before or after the bound value is very easy:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;s:Label text=&quot;Your name is: {model.name.first}&quot; /&gt;</pre>\n\n<font style=\"font-weight: bold\"></font>\n\nIn this example, the UI will display “Your name is: Brian”.\n\n#### <font style=\"font-weight: bold\">Formatters</font>\n\nSince data binding is based on expressions, data can be formatted using functions in the expression that get evaluated every time a bindable property changes.&#160; In addition, Flex provides several formatters out of the box.&#160; The following example shows how to set the precision of a double value to 2 digits after the decimal place:\n\n  <pre class=\"brush: xml; ruler: true; gutter: false; toolbar: false;\">&lt;fx:Declarations&gt;\n    &lt;mx:NumberFormatter id=&quot;numeric&quot; precision=&quot;2&quot; /&gt;\n&lt;/fx:Declarations&gt;\n\n&lt;s:TextInput id=&quot;number&quot; /&gt;\n&lt;s:Label text=&quot;{numeric.format(Number(number.text))}&quot; /&gt;</pre>\n\nWhenever the **number.text** property changes, it uses the **NumberFormatter** to evaluate the text in the **Label.&#160; **In addition to the numerous built-in formatters (currency, date, phone number, etc), you can create your own formatters by extending **Formatter**.&#160; \n\n</div>\n\n### <font style=\"font-weight: bold\">Summary</font>\n\nThe capabilities provided by data binding in Silverlight and Flex give the developer an extremely powerful tool.&#160; It allows him/her to write more features with less code.&#160; Silverlight uses a declarative model where Flex uses an expression model, but the majority of the capabilities mirror each other.&#160; Data binding is a case where I think Flex has the upper hand, though.&#160; By using expressions, the data binding is both more succinct and more powerful.&#160; That is not to say that the declarative style in Silverlight is bad.&#160; It is just that the expressive side in Flex is better (in my opinion).&#160; \n\nI am VERY curious to see how C# 5 with the compiler as a service adds value to the binding story in Silverlight.&#160; Will we see an optional expression-based binding that is compiled and evaluated at runtime?&#160; If not, how hard will it be to write this?\n\nNext time, I will write about visualizing data in Silverlight and Flex. Stay tuned ![Smile](http://houseofbilz.com/wp-content/uploads/2011/01/wlEmoticon-smile.png)","slug":"cross-training-in-silverlight-flexdata-binding","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9hz00586eulpul4dnny"},{"title":"RIA Rockstars","id":"274","date":"2011-02-08T15:54:48.000Z","_content":"\nJust a quick note.  I will be popping over to [RIA Rockstars](http://riarockstars.com/) every once in a while to write content for them.  Essentially, they took over the hole that was left when Adobe and O'Reilly shut down [Inside RIA](insideria.com) last month.  Many of the same authors moved during that change, so the same quality of content should be expected of RIA Rockstars.\n\nMy first article, [Processing Data on the Client with ActionLinq](http://riarockstars.com/2011/02/07/processing-data-on-the-clientactionlinq/) is up.  I will try to cross-link any articles I write for them here.\n\nCheers,\n\nBrian","source":"_posts/2011-02-08-ria-rockstars.md","raw":"---\ntitle: RIA Rockstars\ntags:\n  - Flex\n  - RIA\nid: 274\ncategories:\n  - Uncategorized\ndate: 2011-02-08 10:54:48\n---\n\nJust a quick note.  I will be popping over to [RIA Rockstars](http://riarockstars.com/) every once in a while to write content for them.  Essentially, they took over the hole that was left when Adobe and O'Reilly shut down [Inside RIA](insideria.com) last month.  Many of the same authors moved during that change, so the same quality of content should be expected of RIA Rockstars.\n\nMy first article, [Processing Data on the Client with ActionLinq](http://riarockstars.com/2011/02/07/processing-data-on-the-clientactionlinq/) is up.  I will try to cross-link any articles I write for them here.\n\nCheers,\n\nBrian","slug":"ria-rockstars","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9i0005a6eulth5yxfbv"},{"title":"Mobile Smackdown -- Flex Edition","id":"280","date":"2011-02-24T20:24:55.000Z","_content":"\nI posted a screencast of building a Flex Mobile application in 12 minutes.  It is a clone of the app they built in the Mobile Smackdown at CodeMash this year.\n\n[Check it out!](http://riarockstars.com/2011/02/24/mobile-smackdown-flex-edition/)","source":"_posts/2011-02-24-mobile-smackdown-flex-edition.md","raw":"---\ntitle: Mobile Smackdown -- Flex Edition\ntags:\n  - Flex\n  - Mobile\nid: 280\ncategories:\n  - Uncategorized\ndate: 2011-02-24 15:24:55\n---\n\nI posted a screencast of building a Flex Mobile application in 12 minutes.  It is a clone of the app they built in the Mobile Smackdown at CodeMash this year.\n\n[Check it out!](http://riarockstars.com/2011/02/24/mobile-smackdown-flex-edition/)","slug":"mobile-smackdown-flex-edition","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9i1005d6eull7leaps7"},{"title":"Presentation Model and Multiple Screens (Flex)","id":"286","date":"2011-03-24T16:00:25.000Z","_content":"\nI put up another post to RiaRockstars.com recently.  This time it is about the [Presentation Model pattern](http://riarockstars.com/2011/03/16/presentation-model-and-multiple-screens-part-1/) and how it will aid you in developing for multiple screens (Phone, Tablet, Web, Desktop, etc).  It is part 1 of 2 in a series I am co-authoring with [Charlie Sears](http://www.srtsolutions.com/author/charliesears).  ","source":"_posts/2011-03-24-presentation-model-and-multiple-screens-flex.md","raw":"---\ntitle: Presentation Model and Multiple Screens (Flex)\ntags:\n  - Flex\n  - Mobile\n  - Patterns\n  - Presentation Model\nid: 286\ncategories:\n  - Uncategorized\ndate: 2011-03-24 12:00:25\n---\n\nI put up another post to RiaRockstars.com recently.  This time it is about the [Presentation Model pattern](http://riarockstars.com/2011/03/16/presentation-model-and-multiple-screens-part-1/) and how it will aid you in developing for multiple screens (Phone, Tablet, Web, Desktop, etc).  It is part 1 of 2 in a series I am co-authoring with [Charlie Sears](http://www.srtsolutions.com/author/charliesears).  ","slug":"presentation-model-and-multiple-screens-flex","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9i2005f6eul3sour4i0"},{"title":"Introducing Jasmine-Flex","id":"300","date":"2011-04-05T15:14:43.000Z","_content":"\nI have been developing software using Test Driven Development ([TDD](http://en.wikipedia.org/wiki/Test_driven_development)) for over three years now.  I usually use traditional xUnit style testing frameworks ([NUnit](http://www.nunit.org/), [JUnit](http://www.junit.org/), [jsUnit](http://www.jsunit.net/), [FlexUnit](http://www.flexunit.org/), [cppUnit](http://sourceforge.net/apps/mediawiki/cppunit/index.php?title=Main_Page \"Main_Page\"), etc) because they are the most accessible frameworks out there.\n\nIn reality, though, my TDD style has evolved into more of a Behavior Driven Development ([BDD](http://en.wikipedia.org/wiki/Behavior_driven_development)) style.  I specify how my software behaves opposed to writing tests against the inputs/outputs of a given function.  Although this can be a bit awkward with the xUnit style of testing, it can be done ANDI have done so successfully for quite some time.\n\nWhile I am doing this, I always think to the times when I develop in Ruby.  When in Ruby, I don’t use the standard xUnit tool.  Instead, I use [RSpec](http://rspec.info/).  RSpec allows me to organize my tests (specifications) more organically and within context.  The result is a more expressive, better organized test suite more suited for BDD-style development.\n\nLately, however, I have been spending a lot of time with the Flex framework.  I wanted to find a BDD context specification tool for that environment but I came up empty.  I got excited when I found one in JavaScript, and it gave me hope.\n\n### Enter Jasmine\n\n[Jasmine](http://pivotal.github.com/jasmine/) is a BDD testing tool written in JavaScript and used in all sorts of environments including [Ruby on Rails](http://rubyonrails.org/) and [Node.js](http://nodejs.org/).  I put my feet to the fire and hacked out a port of this code base to ActionScript.  I am pleased to announce that [Jasmine-Flex](https://github.com/BrianGenisio/jasmine-flex/wiki) is ready to go!\n\nUsing Jasmine-Flex is simple:\n\n1.  Create a new Flex project (Flash or Air)\n2.  Download JasmineFlex.swc and put it in your libs folder.\n3.  Put the **TrivialFlexReporterView** in your application and set **autoExecute** to true.\n4.  Add your specs using the **script** tag\n5.  Run the app.\nHere is a step-by-step example:\n\n1\\. Create a new Flex project (Flash or Air)\n\n[![step1](http://houseofbilz.com/wp-content/uploads/2011/04/step1_thumb.png \"step1\")](http://houseofbilz.com/wp-content/uploads/2011/04/step1.png)\n\n2\\. Download JasmineFlex.swc and put it in your libs folder\n\n[![step2](http://houseofbilz.com/wp-content/uploads/2011/04/step2_thumb.png \"step2\")](http://houseofbilz.com/wp-content/uploads/2011/04/step2.png)\n\n3\\. Put the **TrivialFlexReporterView** in your application and set **autoExecute** to true.\n\n[![step3](http://houseofbilz.com/wp-content/uploads/2011/04/step3_thumb.png \"step3\")](http://houseofbilz.com/wp-content/uploads/2011/04/step3.png)\n\n4\\. Add your specs using the **script** tag\n\n[![step4a](http://houseofbilz.com/wp-content/uploads/2011/04/step4a_thumb.png \"step4a\")](http://houseofbilz.com/wp-content/uploads/2011/04/step4a.png)\n\n[![step4b](http://houseofbilz.com/wp-content/uploads/2011/04/step4b_thumb.png \"step4b\")](http://houseofbilz.com/wp-content/uploads/2011/04/step4b.png)\n\n5\\. Run the app\n\n[![step5](http://houseofbilz.com/wp-content/uploads/2011/04/step5_thumb.png \"step5\")](http://houseofbilz.com/wp-content/uploads/2011/04/step5.png)\n\n### You are up and running\n\nNow that you have a Jasmine testing environment up and running, you continue to use Jasmine to write specs, watch them fail, and make them pass.  Add as many spec suites as you need using the **script** tag (step 3).  Before you know it, you will have a rich suite of executable specifications!\n\n### Need more information?\n\n*   See the documentation on the [Jasmine-Flex](https://github.com/BrianGenisio/jasmine-flex/wiki) site.\n*   Take a look at an [example](https://github.com/BrianGenisio/jasmine-flex/tree/master/flex/example) project.\n*   See the specs for the [Jasmine](https://github.com/BrianGenisio/jasmine-flex/tree/master/flex/specs/src/suites) project (Jasmine was built using Jasmine!).\n*   Check out [The RSpec Book](http://www.pragprog.com/titles/achbd/the-rspec-book). Most of the concepts apply directly to Jasmine.","source":"_posts/2011-04-05-introducing-jasmine-flex.md","raw":"---\ntitle: Introducing Jasmine-Flex\ntags:\n  - BDD\n  - Flex\n  - jasmine\n  - testing\nid: 300\ncategories:\n  - Uncategorized\ndate: 2011-04-05 11:14:43\n---\n\nI have been developing software using Test Driven Development ([TDD](http://en.wikipedia.org/wiki/Test_driven_development)) for over three years now.  I usually use traditional xUnit style testing frameworks ([NUnit](http://www.nunit.org/), [JUnit](http://www.junit.org/), [jsUnit](http://www.jsunit.net/), [FlexUnit](http://www.flexunit.org/), [cppUnit](http://sourceforge.net/apps/mediawiki/cppunit/index.php?title=Main_Page \"Main_Page\"), etc) because they are the most accessible frameworks out there.\n\nIn reality, though, my TDD style has evolved into more of a Behavior Driven Development ([BDD](http://en.wikipedia.org/wiki/Behavior_driven_development)) style.  I specify how my software behaves opposed to writing tests against the inputs/outputs of a given function.  Although this can be a bit awkward with the xUnit style of testing, it can be done ANDI have done so successfully for quite some time.\n\nWhile I am doing this, I always think to the times when I develop in Ruby.  When in Ruby, I don’t use the standard xUnit tool.  Instead, I use [RSpec](http://rspec.info/).  RSpec allows me to organize my tests (specifications) more organically and within context.  The result is a more expressive, better organized test suite more suited for BDD-style development.\n\nLately, however, I have been spending a lot of time with the Flex framework.  I wanted to find a BDD context specification tool for that environment but I came up empty.  I got excited when I found one in JavaScript, and it gave me hope.\n\n### Enter Jasmine\n\n[Jasmine](http://pivotal.github.com/jasmine/) is a BDD testing tool written in JavaScript and used in all sorts of environments including [Ruby on Rails](http://rubyonrails.org/) and [Node.js](http://nodejs.org/).  I put my feet to the fire and hacked out a port of this code base to ActionScript.  I am pleased to announce that [Jasmine-Flex](https://github.com/BrianGenisio/jasmine-flex/wiki) is ready to go!\n\nUsing Jasmine-Flex is simple:\n\n1.  Create a new Flex project (Flash or Air)\n2.  Download JasmineFlex.swc and put it in your libs folder.\n3.  Put the **TrivialFlexReporterView** in your application and set **autoExecute** to true.\n4.  Add your specs using the **script** tag\n5.  Run the app.\nHere is a step-by-step example:\n\n1\\. Create a new Flex project (Flash or Air)\n\n[![step1](http://houseofbilz.com/wp-content/uploads/2011/04/step1_thumb.png \"step1\")](http://houseofbilz.com/wp-content/uploads/2011/04/step1.png)\n\n2\\. Download JasmineFlex.swc and put it in your libs folder\n\n[![step2](http://houseofbilz.com/wp-content/uploads/2011/04/step2_thumb.png \"step2\")](http://houseofbilz.com/wp-content/uploads/2011/04/step2.png)\n\n3\\. Put the **TrivialFlexReporterView** in your application and set **autoExecute** to true.\n\n[![step3](http://houseofbilz.com/wp-content/uploads/2011/04/step3_thumb.png \"step3\")](http://houseofbilz.com/wp-content/uploads/2011/04/step3.png)\n\n4\\. Add your specs using the **script** tag\n\n[![step4a](http://houseofbilz.com/wp-content/uploads/2011/04/step4a_thumb.png \"step4a\")](http://houseofbilz.com/wp-content/uploads/2011/04/step4a.png)\n\n[![step4b](http://houseofbilz.com/wp-content/uploads/2011/04/step4b_thumb.png \"step4b\")](http://houseofbilz.com/wp-content/uploads/2011/04/step4b.png)\n\n5\\. Run the app\n\n[![step5](http://houseofbilz.com/wp-content/uploads/2011/04/step5_thumb.png \"step5\")](http://houseofbilz.com/wp-content/uploads/2011/04/step5.png)\n\n### You are up and running\n\nNow that you have a Jasmine testing environment up and running, you continue to use Jasmine to write specs, watch them fail, and make them pass.  Add as many spec suites as you need using the **script** tag (step 3).  Before you know it, you will have a rich suite of executable specifications!\n\n### Need more information?\n\n*   See the documentation on the [Jasmine-Flex](https://github.com/BrianGenisio/jasmine-flex/wiki) site.\n*   Take a look at an [example](https://github.com/BrianGenisio/jasmine-flex/tree/master/flex/example) project.\n*   See the specs for the [Jasmine](https://github.com/BrianGenisio/jasmine-flex/tree/master/flex/specs/src/suites) project (Jasmine was built using Jasmine!).\n*   Check out [The RSpec Book](http://www.pragprog.com/titles/achbd/the-rspec-book). Most of the concepts apply directly to Jasmine.","slug":"introducing-jasmine-flex","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9i4005i6eul4zj6mmlf"},{"title":"Slides and Presentation for “Mobile Air” Presentation","id":"306","date":"2011-05-06T22:02:20.000Z","_content":"\nThis morning, I presented at [StirTrek 2011](http://stirtrek.com).&#160; Here are my demos and presentation:\n\n*   [Presentation](https://bitbucket.org/briangenisio/airforandroid/raw/0b43706fc87b/AirOnAndroid.pptx)\n*   [Code Demos](https://bitbucket.org/briangenisio/airforandroid/src/0b43706fc87b)\n*   [ScoreKeeper (Shared screens) Demo](https://bitbucket.org/briangenisio/scorekeeper/overview)","source":"_posts/2011-05-06-slides-and-presentation-for-mobile-air-presentation.md","raw":"---\ntitle: Slides and Presentation for “Mobile Air” Presentation\ntags:\n  - Air\n  - Flex\n  - Mobile\nid: 306\ncategories:\n  - Uncategorized\ndate: 2011-05-06 18:02:20\n---\n\nThis morning, I presented at [StirTrek 2011](http://stirtrek.com).&#160; Here are my demos and presentation:\n\n*   [Presentation](https://bitbucket.org/briangenisio/airforandroid/raw/0b43706fc87b/AirOnAndroid.pptx)\n*   [Code Demos](https://bitbucket.org/briangenisio/airforandroid/src/0b43706fc87b)\n*   [ScoreKeeper (Shared screens) Demo](https://bitbucket.org/briangenisio/scorekeeper/overview)","slug":"slides-and-presentation-for-mobile-air-presentation","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9i5005l6eul6b2y72jr"},{"title":"Captive Runtime packaging in Air 3.0","id":"313","date":"2011-10-11T21:42:09.000Z","_content":"\nWhen I talk with people about the Flex framework, many think of it as a Flash library. They often refer to Flex as a web framework that runs in a plug-in. To me, however, Flex is an application framework. To be honest, Flex in the browser doesn’t excite me. I am much more interested in using Flex on the desktop or on mobile devices.\n\n**Some History**\n\nUntil recently, Flex has been criticized for requiring a separate runtime install. The criticism is valid – users were often confused by this and found the need to upgrade something other than the app they wanted to install. The user experience became one where the user was left wondering, “what just happened?”\n\nIn one case, my customer required that nothing be allowed installed on the users’ machine (network access was not available either). This meant no Air runtime and no app. We had a workaround which included an app embedded inside of a PDF but that left the user feeling like they were watching Inception (an app within an app…).\n\nAlthough this was the case in OSX, Windows and Android, it was not the case in iOS (iPhone and iPad). Apple doesn’t allow third-party runtimes on their devices so Adobe created a native compiler and packager that bundles the Air libraries directly into the app.\n\n**Captive Runtime**\n\nIn Air 3.0, however, the requirement for a separate Air runtime has been lifted. With the “Captive Runtime” feature, developers can bundle the native Air libraries with the app. When apps are bundled this way, they can be deployed any way you want. They won’t require an installation of Air OR the application itself (on the desktop; mobile apps still need to be installed but can be without the separate runtime). This doesn’t mean you are restricted from installing your app but it means that it is no longer required. In addition to iOS, Captive Runtime will work in Android, OSX and Windows.\n\nLet’s see how easy it is to use. I will create a “Hello World” app for illustrative purposes but significantly more complicated applications work just as easily.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/29619d66-af32-458e-b4d6-dc43166cc114/2011-10-06_11-42-17.png)\n\n[Flash Builder 4.6](http://www.adobe.com/devnet/flex/articles/whats-new-flex-flash-builder-46.html) has integration built-in integration for captive runtime.  When you “Export Release Build” from Flash Builder, you simply create a “Signed application with AIR runtime bundled”.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/945de260-d491-4a2a-91c1-74ab7cb7c9b3/2011-10-06_06-55-542.png)\n\nEverything else is the same. You add a signed certificate to the app as you normally would and any other packaging settings.  When you are complete, you will get a native application that is ready to execute but doesn’t require Air to be installed.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/202db853-961d-47a9-8388-b34332892e19/2011-10-06_10-41-36.png)\n\nThis app can be copied to a thumb drive, shared from network storage or embedded into an installer. It is an application just like any other.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/46a53a46-6b33-4523-a20e-db09d071eda0/2011-10-06_10-44-36.png)\n\nNote that this does bloat the size of your application. This may or may not be an issue for you depending on your audience and deployment mechanism. You can always package your app as a traditional Air app if you prefer.\n\nThe Windows story for building your app is exactly the same as the OSX side. The only difference is that the app is packaged as an EXE with the Air support alongside it.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/41811197-7d4d-4fcd-9bad-af15d4a39ea6/2011-10-06_11-30-16.png)\n\nThe story for Android is similar. You have a different dialog for packaging, but the idea is the same. The APK that is produced will have Air bundled inside.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/4b0f8c73-28ea-4118-8012-021863e57edc/2011-10-06_11-23-11.png)\n\nOf course, you don’t need to use Flash Builder to package your app. You can do it from the SDK and the command line. Instead of repeating what you can already find out in other places, I will just refer you to [Andrew Trice’s blog](http://www.tricedesigns.com/2011/08/10/air-3-0-captive-runtime/) for more info on that.\n\n&nbsp;\n\nIf you would like to get a sneak peek of Flash Builder 4.6, you can [apply for the Flex and Flash Builder pre-release](https://prerelease.adobe.com/callout/default.html?callid=DC919522A42544798C33ECB4041FC5DC).\n\n&nbsp;","source":"_posts/2011-10-11-captive-runtime-packaging-in-air-3-0.md","raw":"---\ntitle: Captive Runtime packaging in Air 3.0\ntags:\n  - Development\n  - Flash Builder\n  - Flex\nid: 313\ncategories:\n  - Uncategorized\ndate: 2011-10-11 17:42:09\n---\n\nWhen I talk with people about the Flex framework, many think of it as a Flash library. They often refer to Flex as a web framework that runs in a plug-in. To me, however, Flex is an application framework. To be honest, Flex in the browser doesn’t excite me. I am much more interested in using Flex on the desktop or on mobile devices.\n\n**Some History**\n\nUntil recently, Flex has been criticized for requiring a separate runtime install. The criticism is valid – users were often confused by this and found the need to upgrade something other than the app they wanted to install. The user experience became one where the user was left wondering, “what just happened?”\n\nIn one case, my customer required that nothing be allowed installed on the users’ machine (network access was not available either). This meant no Air runtime and no app. We had a workaround which included an app embedded inside of a PDF but that left the user feeling like they were watching Inception (an app within an app…).\n\nAlthough this was the case in OSX, Windows and Android, it was not the case in iOS (iPhone and iPad). Apple doesn’t allow third-party runtimes on their devices so Adobe created a native compiler and packager that bundles the Air libraries directly into the app.\n\n**Captive Runtime**\n\nIn Air 3.0, however, the requirement for a separate Air runtime has been lifted. With the “Captive Runtime” feature, developers can bundle the native Air libraries with the app. When apps are bundled this way, they can be deployed any way you want. They won’t require an installation of Air OR the application itself (on the desktop; mobile apps still need to be installed but can be without the separate runtime). This doesn’t mean you are restricted from installing your app but it means that it is no longer required. In addition to iOS, Captive Runtime will work in Android, OSX and Windows.\n\nLet’s see how easy it is to use. I will create a “Hello World” app for illustrative purposes but significantly more complicated applications work just as easily.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/29619d66-af32-458e-b4d6-dc43166cc114/2011-10-06_11-42-17.png)\n\n[Flash Builder 4.6](http://www.adobe.com/devnet/flex/articles/whats-new-flex-flash-builder-46.html) has integration built-in integration for captive runtime.  When you “Export Release Build” from Flash Builder, you simply create a “Signed application with AIR runtime bundled”.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/945de260-d491-4a2a-91c1-74ab7cb7c9b3/2011-10-06_06-55-542.png)\n\nEverything else is the same. You add a signed certificate to the app as you normally would and any other packaging settings.  When you are complete, you will get a native application that is ready to execute but doesn’t require Air to be installed.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/202db853-961d-47a9-8388-b34332892e19/2011-10-06_10-41-36.png)\n\nThis app can be copied to a thumb drive, shared from network storage or embedded into an installer. It is an application just like any other.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/46a53a46-6b33-4523-a20e-db09d071eda0/2011-10-06_10-44-36.png)\n\nNote that this does bloat the size of your application. This may or may not be an issue for you depending on your audience and deployment mechanism. You can always package your app as a traditional Air app if you prefer.\n\nThe Windows story for building your app is exactly the same as the OSX side. The only difference is that the app is packaged as an EXE with the Air support alongside it.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/41811197-7d4d-4fcd-9bad-af15d4a39ea6/2011-10-06_11-30-16.png)\n\nThe story for Android is similar. You have a different dialog for packaging, but the idea is the same. The APK that is produced will have Air bundled inside.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/4b0f8c73-28ea-4118-8012-021863e57edc/2011-10-06_11-23-11.png)\n\nOf course, you don’t need to use Flash Builder to package your app. You can do it from the SDK and the command line. Instead of repeating what you can already find out in other places, I will just refer you to [Andrew Trice’s blog](http://www.tricedesigns.com/2011/08/10/air-3-0-captive-runtime/) for more info on that.\n\n&nbsp;\n\nIf you would like to get a sneak peek of Flash Builder 4.6, you can [apply for the Flex and Flash Builder pre-release](https://prerelease.adobe.com/callout/default.html?callid=DC919522A42544798C33ECB4041FC5DC).\n\n&nbsp;","slug":"captive-runtime-packaging-in-air-3-0","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9i6005p6euleifl69xq"},{"title":"A Proxy Server for Parse.com","id":"366","date":"2011-11-07T16:41:46.000Z","_content":"\n[&lt;&lt; See the full series of posts](http://houseofbilz.com/archives/2011/11/07/going-mostly-server-less-with-backbone-js/)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; [Making Backbone.js work with Parse.com &gt;&gt;](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/)\n\nIn my [previous post](http://houseofbilz.com/archives/2011/11/07/going-mostly-server-less-with-backbone-js/), I asked the question: “Is there any reason why can’t we use a service like [[Parse.com](https://www.parse.com/)] in an HTML5/Javascript single-paged app?”&#160; The answer is “yes”.\n\nThe reason: [the same origin policy](http://en.wikipedia.org/wiki/Same_origin_policy).&#160; The browser won’t let you request Parse.com data from a different domain.&#160; There are certainly tricks you can play if you just want to GET the data (like JSONP for example), but there is no good way to make POST/PUT/DELETE requests.&#160; You have to stay on your own domain if you want to use all that a REST API has to offer.\n\nUsing my newfound [CoffeeScript](http://jashkenas.github.com/coffee-script/) skills, I came up with this proxy server based on [Node.js](http://nodejs.org/) with [Express](http://expressjs.com/) and [Restler](https://github.com/danwrong/restler).&#160; While I’m at it, the server can return my index.html and all other assets (images, Javascript, CSS and HTML templates). \n\nHere is the code (full code for this post is available on GitHub [https://github.com/BrianGenisio/Parseback/tree/parse.com-proxy-with-readme](https://github.com/BrianGenisio/Parseback/tree/parse.com-proxy-with-readme)):\n\n**proxy.coffee**\n  <pre class=\"brush: coffeescript; toolbar: false;\">express = require 'express'\nrestler = require 'restler'\nconfig = require './config'\n\napp = express.createServer()\napp.use express.bodyParser()\n\napp.get &quot;/&quot;, (req, res) =&gt;\n  res.sendfile &quot;#{__dirname}/index.html&quot;\n\napp.all &quot;#{config.apiPath}*&quot;, (req, res) =&gt; \n  console.log &quot;REQUEST: &quot;, req.url, req.body || &quot;no body&quot;\n\n  data = JSON.stringify(req.body)\n\n  restOptions =\n    username:  config.applicationID\n    password:  config.masterKey\n    data:      data\n    method:    req.method.toLowerCase()\n    headers:\n      'Content-Type':  'application/json'\n      'Content-Length': data?.length || 0\n\n  complete = (data) =&gt; \n    console.log &quot;COMPLETE: &quot;, data\n    res.json JSON.parse(data)\n\n  error = (data, res) =&gt;\n    console.log &quot;FAILURE: &quot;, data, res\n\n  restler.request(&quot;https://api.parse.com/1/classes/#{req.url.replace(config.apiPath, '')}&quot;, restOptions)\n    .on(&quot;complete&quot;, complete)\n    .on(&quot;error&quot;, error)\n\napp.get &quot;/*&quot;, (req, res) =&gt;\n  res.sendfile &quot;#{__dirname}#{req.url}&quot;\n\napp.listen config.port\n\nconsole.log &quot;Server started on #{config.port}&quot;</pre>\n\nThis light-weight proxy will open a port and listen to requests.&#160; If you request “/” or any other file, it will dump it back.&#160; If you request “/data/*”, it will proxy your request off to Parse.com and return the result back.&#160; It will handle all of the GET/POST/PUT/DELETE requests that Parse.com supports.\n\nThis proxy server loads a config file:\n\n**config.coffee**\n\n<pre class=\"brush: coffeescript; ruler: true; toolbar: false; smart-tabs: false;\">module.exports =  \n  applicationID: 'Your Parse.com Application ID'\n  masterKey:     'Your Parse.com Master Key'\n  apiPath:  '/data/'\n  port:     3001</pre>\n\nThe first two configuration options are provided to you by Parse.com when you create a new “App” with them.&#160; All of your entities for that “App” will have the same Application ID and Master Key.\n\nNext is the path you want the proxy to use when passing data requests on.&#160; In this example, [http://mydomain.com/data/People](http://mydomain.com/data/People) would proxy off to [http://api.parse.com/1/classes/People](http://api.parse.com/1/classes/People).\n\nFinally you can specify the port to run the proxy on.&#160; This is self explanatory.\n\nNow all I can run my server: <font face=\"Courier New\">coffee proxy.coffee</font>\n\nUsing curl, I can test all of the actions that my new server supports:\n\n### Create\n\n<font face=\"Courier New\">&gt; curl -X POST -H &quot;Content-Type: application/json&quot; \\ \n\n&gt; -d '{&quot;first&quot;: &quot;Brian&quot;, &quot;last&quot;: &quot;Genisio&quot;}' \\</font>\n\n  <p>&gt; \n\n  [<font face=\"Courier New\">http://localhost:3001/data/People</font>](http://localhost:3001/data/People)<font face=\"Courier New\"> \n\n{&quot;createdAt&quot;:&quot;2011-11-05T19:11:25.873Z&quot;,&quot;objectId&quot;:&quot;fiIMd53m0j&quot;}&#160; </font></p>\n\n### List&#160; \n\n<font face=\"Courier New\">&gt; curl -X GET </font>[<font face=\"Courier New\">http://localhost:3001/data/People</font>](http://localhost:3001/data/People)<font face=\"Courier New\"> \n\n{&quot;results&quot;:[{&quot;updatedAt&quot;:&quot;2011-11-05T19:11:25.873Z&quot;,&quot;last&quot;:&quot;Genisio&quot;,&quot;createdAt&quot;:&quot;2011-11-05T19:11:25.873Z&quot;,&quot;first&quot;:&quot;Brian&quot;,&quot;objectId&quot;:&quot;fiIMd53m0j&quot;}]}&#160; </font>\n\n### Update&#160; \n\n<font face=\"Courier New\">&gt; curl -X PUT -H &quot;Content-Type: application/json&quot; \\&#160; \n&gt; -d '{&quot;middle&quot;: &quot;Michael&quot;}' \\&#160; \n&gt; </font>[<font face=\"Courier New\">http://localhost:3001/data/People/fiIMd53m0j</font>](http://localhost:3001/data/People/fiIMd53m0j)<font face=\"Courier New\"> \n\n{&quot;updatedAt&quot;:&quot;2011-11-05T19:15:25.122Z&quot;}&#160; </font>\n\n### Show&#160; \n\n<font face=\"Courier New\">&gt; curl -X GET </font>[<font face=\"Courier New\">http://localhost:3001/data/People/fiIMd53m0j</font>](http://localhost:3001/data/People/fiIMd53m0j)<font face=\"Courier New\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; \n{&quot;middle&quot;:&quot;Michael&quot;,&quot;updatedAt&quot;:&quot;2011-11-05T19:15:25.122Z&quot;,&quot;last&quot;:&quot;Genisio&quot;,&quot;createdAt&quot;:&quot;2011-11-05T19:11:25.873Z&quot;,&quot;first&quot;:&quot;Brian&quot;,&quot;objectId&quot;:&quot;fiIMd53m0j&quot;}&#160;&#160; </font>\n\n### Delete&#160; \n\n<font face=\"Courier New\">&gt; curl -X DELETE </font>[<font face=\"Courier New\">http://localhost:3001/data/People/fiIMd53m0j</font>](http://localhost:3001/data/People/fiIMd53m0j)<font face=\"Courier New\"> \n\n{}</font>&#160;\n\n### Index.html\n\n<font face=\"Courier New\">&gt; curl </font>[<font face=\"Courier New\">http://localhost:3001</font>](http://localhost:3001)<font face=\"Courier New\"> \n\nI AM AN HTML FILE</font>\n\n### Other assets\n\n<font face=\"Courier New\">&gt; curl </font>[<font face=\"Courier New\">http://localhost:3001/foo.bar</font>](http://localhost:3001/foo.bar)<font face=\"Courier New\"> \n\nI AM A TEXT FILE</font>\n\nConsidering my entire server is less than 50 lines of code, I am happy with this compromise.&#160; My technology (the browser) does not allow me to go completely server-less but this gets me pretty close. \n\nIn the next post, I will show how I got Backbone.js to talk to my proxy server.\n\n[Making Backbone.js work with Parse.com &gt;&gt;](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/)","source":"_posts/2011-11-07-a-proxy-server-for-parse-com.md","raw":"---\ntitle: A Proxy Server for Parse.com\ntags:\n  - CoffeeScript\n  - Development\n  - HTML5\n  - Javascript\n  - Node.js\n  - Parse.com\n  - Technology\n  - Web\nid: 366\ncategories:\n  - Uncategorized\ndate: 2011-11-07 11:41:46\n---\n\n[&lt;&lt; See the full series of posts](http://houseofbilz.com/archives/2011/11/07/going-mostly-server-less-with-backbone-js/)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; [Making Backbone.js work with Parse.com &gt;&gt;](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/)\n\nIn my [previous post](http://houseofbilz.com/archives/2011/11/07/going-mostly-server-less-with-backbone-js/), I asked the question: “Is there any reason why can’t we use a service like [[Parse.com](https://www.parse.com/)] in an HTML5/Javascript single-paged app?”&#160; The answer is “yes”.\n\nThe reason: [the same origin policy](http://en.wikipedia.org/wiki/Same_origin_policy).&#160; The browser won’t let you request Parse.com data from a different domain.&#160; There are certainly tricks you can play if you just want to GET the data (like JSONP for example), but there is no good way to make POST/PUT/DELETE requests.&#160; You have to stay on your own domain if you want to use all that a REST API has to offer.\n\nUsing my newfound [CoffeeScript](http://jashkenas.github.com/coffee-script/) skills, I came up with this proxy server based on [Node.js](http://nodejs.org/) with [Express](http://expressjs.com/) and [Restler](https://github.com/danwrong/restler).&#160; While I’m at it, the server can return my index.html and all other assets (images, Javascript, CSS and HTML templates). \n\nHere is the code (full code for this post is available on GitHub [https://github.com/BrianGenisio/Parseback/tree/parse.com-proxy-with-readme](https://github.com/BrianGenisio/Parseback/tree/parse.com-proxy-with-readme)):\n\n**proxy.coffee**\n  <pre class=\"brush: coffeescript; toolbar: false;\">express = require 'express'\nrestler = require 'restler'\nconfig = require './config'\n\napp = express.createServer()\napp.use express.bodyParser()\n\napp.get &quot;/&quot;, (req, res) =&gt;\n  res.sendfile &quot;#{__dirname}/index.html&quot;\n\napp.all &quot;#{config.apiPath}*&quot;, (req, res) =&gt; \n  console.log &quot;REQUEST: &quot;, req.url, req.body || &quot;no body&quot;\n\n  data = JSON.stringify(req.body)\n\n  restOptions =\n    username:  config.applicationID\n    password:  config.masterKey\n    data:      data\n    method:    req.method.toLowerCase()\n    headers:\n      'Content-Type':  'application/json'\n      'Content-Length': data?.length || 0\n\n  complete = (data) =&gt; \n    console.log &quot;COMPLETE: &quot;, data\n    res.json JSON.parse(data)\n\n  error = (data, res) =&gt;\n    console.log &quot;FAILURE: &quot;, data, res\n\n  restler.request(&quot;https://api.parse.com/1/classes/#{req.url.replace(config.apiPath, '')}&quot;, restOptions)\n    .on(&quot;complete&quot;, complete)\n    .on(&quot;error&quot;, error)\n\napp.get &quot;/*&quot;, (req, res) =&gt;\n  res.sendfile &quot;#{__dirname}#{req.url}&quot;\n\napp.listen config.port\n\nconsole.log &quot;Server started on #{config.port}&quot;</pre>\n\nThis light-weight proxy will open a port and listen to requests.&#160; If you request “/” or any other file, it will dump it back.&#160; If you request “/data/*”, it will proxy your request off to Parse.com and return the result back.&#160; It will handle all of the GET/POST/PUT/DELETE requests that Parse.com supports.\n\nThis proxy server loads a config file:\n\n**config.coffee**\n\n<pre class=\"brush: coffeescript; ruler: true; toolbar: false; smart-tabs: false;\">module.exports =  \n  applicationID: 'Your Parse.com Application ID'\n  masterKey:     'Your Parse.com Master Key'\n  apiPath:  '/data/'\n  port:     3001</pre>\n\nThe first two configuration options are provided to you by Parse.com when you create a new “App” with them.&#160; All of your entities for that “App” will have the same Application ID and Master Key.\n\nNext is the path you want the proxy to use when passing data requests on.&#160; In this example, [http://mydomain.com/data/People](http://mydomain.com/data/People) would proxy off to [http://api.parse.com/1/classes/People](http://api.parse.com/1/classes/People).\n\nFinally you can specify the port to run the proxy on.&#160; This is self explanatory.\n\nNow all I can run my server: <font face=\"Courier New\">coffee proxy.coffee</font>\n\nUsing curl, I can test all of the actions that my new server supports:\n\n### Create\n\n<font face=\"Courier New\">&gt; curl -X POST -H &quot;Content-Type: application/json&quot; \\ \n\n&gt; -d '{&quot;first&quot;: &quot;Brian&quot;, &quot;last&quot;: &quot;Genisio&quot;}' \\</font>\n\n  <p>&gt; \n\n  [<font face=\"Courier New\">http://localhost:3001/data/People</font>](http://localhost:3001/data/People)<font face=\"Courier New\"> \n\n{&quot;createdAt&quot;:&quot;2011-11-05T19:11:25.873Z&quot;,&quot;objectId&quot;:&quot;fiIMd53m0j&quot;}&#160; </font></p>\n\n### List&#160; \n\n<font face=\"Courier New\">&gt; curl -X GET </font>[<font face=\"Courier New\">http://localhost:3001/data/People</font>](http://localhost:3001/data/People)<font face=\"Courier New\"> \n\n{&quot;results&quot;:[{&quot;updatedAt&quot;:&quot;2011-11-05T19:11:25.873Z&quot;,&quot;last&quot;:&quot;Genisio&quot;,&quot;createdAt&quot;:&quot;2011-11-05T19:11:25.873Z&quot;,&quot;first&quot;:&quot;Brian&quot;,&quot;objectId&quot;:&quot;fiIMd53m0j&quot;}]}&#160; </font>\n\n### Update&#160; \n\n<font face=\"Courier New\">&gt; curl -X PUT -H &quot;Content-Type: application/json&quot; \\&#160; \n&gt; -d '{&quot;middle&quot;: &quot;Michael&quot;}' \\&#160; \n&gt; </font>[<font face=\"Courier New\">http://localhost:3001/data/People/fiIMd53m0j</font>](http://localhost:3001/data/People/fiIMd53m0j)<font face=\"Courier New\"> \n\n{&quot;updatedAt&quot;:&quot;2011-11-05T19:15:25.122Z&quot;}&#160; </font>\n\n### Show&#160; \n\n<font face=\"Courier New\">&gt; curl -X GET </font>[<font face=\"Courier New\">http://localhost:3001/data/People/fiIMd53m0j</font>](http://localhost:3001/data/People/fiIMd53m0j)<font face=\"Courier New\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; \n{&quot;middle&quot;:&quot;Michael&quot;,&quot;updatedAt&quot;:&quot;2011-11-05T19:15:25.122Z&quot;,&quot;last&quot;:&quot;Genisio&quot;,&quot;createdAt&quot;:&quot;2011-11-05T19:11:25.873Z&quot;,&quot;first&quot;:&quot;Brian&quot;,&quot;objectId&quot;:&quot;fiIMd53m0j&quot;}&#160;&#160; </font>\n\n### Delete&#160; \n\n<font face=\"Courier New\">&gt; curl -X DELETE </font>[<font face=\"Courier New\">http://localhost:3001/data/People/fiIMd53m0j</font>](http://localhost:3001/data/People/fiIMd53m0j)<font face=\"Courier New\"> \n\n{}</font>&#160;\n\n### Index.html\n\n<font face=\"Courier New\">&gt; curl </font>[<font face=\"Courier New\">http://localhost:3001</font>](http://localhost:3001)<font face=\"Courier New\"> \n\nI AM AN HTML FILE</font>\n\n### Other assets\n\n<font face=\"Courier New\">&gt; curl </font>[<font face=\"Courier New\">http://localhost:3001/foo.bar</font>](http://localhost:3001/foo.bar)<font face=\"Courier New\"> \n\nI AM A TEXT FILE</font>\n\nConsidering my entire server is less than 50 lines of code, I am happy with this compromise.&#160; My technology (the browser) does not allow me to go completely server-less but this gets me pretty close. \n\nIn the next post, I will show how I got Backbone.js to talk to my proxy server.\n\n[Making Backbone.js work with Parse.com &gt;&gt;](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/)","slug":"a-proxy-server-for-parse-com","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9i8005s6eul7x96gtld"},{"title":"Going (Mostly) Server-less with Backbone.js","id":"363","date":"2011-11-07T16:19:36.000Z","_content":"\nI have been having a lot of fun with [Backbone.js](http://documentcloud.github.com/backbone/) and [CoffeeScript](http://jashkenas.github.com/coffee-script/) lately.&#160; It is my new programming obsession.&#160; They go together like chocolate and coffee.&#160; Along with this work, I have had the fantasy of going server-less and pushing all of my data stores to a back-end that I don’t have to code or manage myself.&#160; I mean, how cool would that be?&#160; To develop a browser-based application complete with data storage without a server is boss if you ask me.\n\nFor my data store, I have been playing with a new (currently in Beta) service called [Parse.com](https://www.parse.com/).&#160; Parse.com gives you a schema-less data store -- a place to put your stuff with a REST API.&#160; They are focusing on being the persistence layer for mobile apps when you don’t want to mess with a server.&#160; Is there any reason why we can’t use a service like this in an HTML5/Javascript single-paged app?&#160; It turns out that the answer is more complicated than “no” but it is something that we can certainly get around.&#160; \n\nThis series will be broken into several parts:\n\n1.  Introduction (this page)2.  [A Proxy Server for Parse.com](http://houseofbilz.com/archives/2011/11/07/a-proxy-server-for-parse-com/)3.  [Making Backbone.js Work with Parse.com](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/)4.  [Working with Backbone.js and the Parse.com Proxy](http://houseofbilz.com/archives/2011/11/09/working-with-backbone-js-and-the-parse-com-proxy/)5.  [Building an Application with Parse.com Models](http://houseofbilz.com/archives/2011/11/30/an-example-backboneparse-com-app/)6.  [Hosting the Todos example on Heroku (Bonus)](http://houseofbilz.com/archives/2011/11/30/hosting-the-todos-example-on-heroku/)  \n\nAll of the code (front-end and back-end) in these examples will be written in [CoffeeScript](http://jashkenas.github.com/coffee-script/) but there is no reason you can’t do the same thing with Javascript.&#160; Let me know if you find this short series useful.&#160; \n\n**Disclaimer:&#160; I am really just hacking and documenting my work.&#160; I have no idea how this will perform in a real-world scenario.&#160; It is a thought experiment.&#160; If anything, this is really just a place for me to document my work.**","source":"_posts/2011-11-07-going-mostly-server-less-with-backbone-js.md","raw":"---\ntitle: Going (Mostly) Server-less with Backbone.js\ntags:\n  - CoffeeScript\n  - Development\n  - HTML5\n  - Javascript\n  - Node.js\n  - Parse.com\n  - Technology\n  - Web\nid: 363\ncategories:\n  - Uncategorized\ndate: 2011-11-07 11:19:36\n---\n\nI have been having a lot of fun with [Backbone.js](http://documentcloud.github.com/backbone/) and [CoffeeScript](http://jashkenas.github.com/coffee-script/) lately.&#160; It is my new programming obsession.&#160; They go together like chocolate and coffee.&#160; Along with this work, I have had the fantasy of going server-less and pushing all of my data stores to a back-end that I don’t have to code or manage myself.&#160; I mean, how cool would that be?&#160; To develop a browser-based application complete with data storage without a server is boss if you ask me.\n\nFor my data store, I have been playing with a new (currently in Beta) service called [Parse.com](https://www.parse.com/).&#160; Parse.com gives you a schema-less data store -- a place to put your stuff with a REST API.&#160; They are focusing on being the persistence layer for mobile apps when you don’t want to mess with a server.&#160; Is there any reason why we can’t use a service like this in an HTML5/Javascript single-paged app?&#160; It turns out that the answer is more complicated than “no” but it is something that we can certainly get around.&#160; \n\nThis series will be broken into several parts:\n\n1.  Introduction (this page)2.  [A Proxy Server for Parse.com](http://houseofbilz.com/archives/2011/11/07/a-proxy-server-for-parse-com/)3.  [Making Backbone.js Work with Parse.com](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/)4.  [Working with Backbone.js and the Parse.com Proxy](http://houseofbilz.com/archives/2011/11/09/working-with-backbone-js-and-the-parse-com-proxy/)5.  [Building an Application with Parse.com Models](http://houseofbilz.com/archives/2011/11/30/an-example-backboneparse-com-app/)6.  [Hosting the Todos example on Heroku (Bonus)](http://houseofbilz.com/archives/2011/11/30/hosting-the-todos-example-on-heroku/)  \n\nAll of the code (front-end and back-end) in these examples will be written in [CoffeeScript](http://jashkenas.github.com/coffee-script/) but there is no reason you can’t do the same thing with Javascript.&#160; Let me know if you find this short series useful.&#160; \n\n**Disclaimer:&#160; I am really just hacking and documenting my work.&#160; I have no idea how this will perform in a real-world scenario.&#160; It is a thought experiment.&#160; If anything, this is really just a place for me to document my work.**","slug":"going-mostly-server-less-with-backbone-js","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9i9005u6eulwjp3sa50"},{"title":"Making Backbone.js Work with Parse.com","id":"374","date":"2011-11-08T01:40:45.000Z","_content":"\n[Series Overview](http://houseofbilz.com/archives/2011/11/07/going-mostly-server-less-with-backbone-js/)     \n[&lt;&lt; A Proxy Server for Parse.com](http://houseofbilz.com/archives/2011/11/07/a-proxy-server-for-parse-com/)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; [Working with Backbone.js and the Parse.com proxy &gt;&gt;](http://houseofbilz.com/archives/2011/11/09/working-with-backbone-js-and-the-parse-com-proxy/)\n\nIn the previous post, I showed how you can create a minimal server that proxies requests on to [Parse.com](http://parse.com) for back-end data storage.\n\nNext, I need to consider the [Backbone.js](http://documentcloud.github.com/backbone/) side of things.&#160; Backbone gives a really great way of describing models and collections as long as the data conforms to its REST flavor.&#160; Unfortunately, Parse.com does things a little bit differently.&#160; I have encapsulated this code into some base prototypes that can be used later.&#160; \n\n**parse.com.coffee**\n  <pre class=\"brush: coffeescript; ruler: true; toolbar: false; smart-tabs: false;\">class Backbone.ParseCollection extends Backbone.Collection\n  parse: (resp, xhr) -&gt;\n    data = super\n    data.results\n\n  fetch: (options) -&gt;\n    if options?.query?\n      options.data = &quot;where=&quot; + JSON.stringify options.query\n      delete options.query\n    super\n\nclass Backbone.ParseModel extends Backbone.Model\n  setId: (data) -&gt;\n    data.id = data.objectId unless data.id\n    data\n\n  constructor: (model) -&gt;\n    @setId model\n    super\n\n  parse: (resp, xhr) -&gt;\n    @setId super\n\n  toJSON: () -&gt;\n    result = super\n    delete result.createdAt\n    delete result.updatedAt\n    result</pre>\n\nThese base classes help me to adapt the data and behavior of Parse.com:\n\n### Collection Fetching\n\nBackbone wants a JSON array from the server.&#160; Parse.com gives you a JSON object with an array called “results” inside the root object.&#160; The code overrides Backbone.Collection.parse to return the array property from the Parse.com response.\n\n### Collection Queries\n\nYou can make server-side queries via the query parameters in the Parse.com API.&#160; The code overrides Backbone.Collection.fetch to take a “query” option.&#160; Mutate it to the format that Parse.com wants in the API.&#160; I’ll discuss this more in the next post.\n\n### Model IDs\n\nParse.com IDs have the name of “objectId” but Backbone expects the IDs to be named “id”.&#160; The code overrides the Backbone.Model.parse and Backbone.Model.constructor functions to set the ID based on the “objectID” that comes from Parse.com.&#160; This will be used later when updating or deleting the object.\n\n### Model Metadata\n\nParse.com includes two metadata fields: “createdAt” and “updatedAt”.&#160; While they may be useful, Parse.com fails if you send these fields via a PUT request.&#160; The code overrides Backbone.Model.toJSON to remove these items from the serialization, thus keeping them from being sent to Parse.com as well.\n\nWe now have base prototypes that allow us to communicate with the server.&#160; Instead of extending Backbone.Model and Backbone.Collection, you should make your models extend Backbone.ParseModel and Backbone.ParseCollection.&#160; \n\nIn the next post, I will show how to do this and we will play in the browser a bit in order to show [how Backbone.js models and collections interact with the proxy server](http://houseofbilz.com/archives/2011/11/09/working-with-backbone-js-and-the-parse-com-proxy/). \n\n  ","source":"_posts/2011-11-07-making-backbone-js-work-with-parse-com.md","raw":"---\ntitle: Making Backbone.js Work with Parse.com\ntags:\n  - CoffeeScript\n  - Development\n  - HTML5\n  - Javascript\n  - Node.js\n  - Parse.com\n  - Technology\n  - Web\nid: 374\ncategories:\n  - Uncategorized\ndate: 2011-11-07 20:40:45\n---\n\n[Series Overview](http://houseofbilz.com/archives/2011/11/07/going-mostly-server-less-with-backbone-js/)     \n[&lt;&lt; A Proxy Server for Parse.com](http://houseofbilz.com/archives/2011/11/07/a-proxy-server-for-parse-com/)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; [Working with Backbone.js and the Parse.com proxy &gt;&gt;](http://houseofbilz.com/archives/2011/11/09/working-with-backbone-js-and-the-parse-com-proxy/)\n\nIn the previous post, I showed how you can create a minimal server that proxies requests on to [Parse.com](http://parse.com) for back-end data storage.\n\nNext, I need to consider the [Backbone.js](http://documentcloud.github.com/backbone/) side of things.&#160; Backbone gives a really great way of describing models and collections as long as the data conforms to its REST flavor.&#160; Unfortunately, Parse.com does things a little bit differently.&#160; I have encapsulated this code into some base prototypes that can be used later.&#160; \n\n**parse.com.coffee**\n  <pre class=\"brush: coffeescript; ruler: true; toolbar: false; smart-tabs: false;\">class Backbone.ParseCollection extends Backbone.Collection\n  parse: (resp, xhr) -&gt;\n    data = super\n    data.results\n\n  fetch: (options) -&gt;\n    if options?.query?\n      options.data = &quot;where=&quot; + JSON.stringify options.query\n      delete options.query\n    super\n\nclass Backbone.ParseModel extends Backbone.Model\n  setId: (data) -&gt;\n    data.id = data.objectId unless data.id\n    data\n\n  constructor: (model) -&gt;\n    @setId model\n    super\n\n  parse: (resp, xhr) -&gt;\n    @setId super\n\n  toJSON: () -&gt;\n    result = super\n    delete result.createdAt\n    delete result.updatedAt\n    result</pre>\n\nThese base classes help me to adapt the data and behavior of Parse.com:\n\n### Collection Fetching\n\nBackbone wants a JSON array from the server.&#160; Parse.com gives you a JSON object with an array called “results” inside the root object.&#160; The code overrides Backbone.Collection.parse to return the array property from the Parse.com response.\n\n### Collection Queries\n\nYou can make server-side queries via the query parameters in the Parse.com API.&#160; The code overrides Backbone.Collection.fetch to take a “query” option.&#160; Mutate it to the format that Parse.com wants in the API.&#160; I’ll discuss this more in the next post.\n\n### Model IDs\n\nParse.com IDs have the name of “objectId” but Backbone expects the IDs to be named “id”.&#160; The code overrides the Backbone.Model.parse and Backbone.Model.constructor functions to set the ID based on the “objectID” that comes from Parse.com.&#160; This will be used later when updating or deleting the object.\n\n### Model Metadata\n\nParse.com includes two metadata fields: “createdAt” and “updatedAt”.&#160; While they may be useful, Parse.com fails if you send these fields via a PUT request.&#160; The code overrides Backbone.Model.toJSON to remove these items from the serialization, thus keeping them from being sent to Parse.com as well.\n\nWe now have base prototypes that allow us to communicate with the server.&#160; Instead of extending Backbone.Model and Backbone.Collection, you should make your models extend Backbone.ParseModel and Backbone.ParseCollection.&#160; \n\nIn the next post, I will show how to do this and we will play in the browser a bit in order to show [how Backbone.js models and collections interact with the proxy server](http://houseofbilz.com/archives/2011/11/09/working-with-backbone-js-and-the-parse-com-proxy/). \n\n  ","slug":"making-backbone-js-work-with-parse-com","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ia005y6euldikqgw6e"},{"title":"Working with Backbone.js and the Parse.com Proxy","id":"381","date":"2011-11-09T16:32:19.000Z","_content":"\n[Series Overview](http://houseofbilz.com/archives/2011/11/07/going-mostly-server-less-with-backbone-js/) \n\n[&lt;&lt; Making Backbone.js Work with Parse.com](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[An Example Backbone/Parse.com App &gt;&gt;](http://houseofbilz.com/archives/2011/11/30/an-example-backboneparse-com-app/)\n\nIn the [last post](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/), I presented some base prototypes for Backbone.js models and collections that play nicely with Parse.com\n\nNext, I will put all the pieces together and show how to use Backbone.js with Parse.com.&#160; All of the code is available on GitHub. [https://github.com/BrianGenisio/Parseback/tree/parse.com-proxy-with-backbone.js](https://github.com/BrianGenisio/Parseback/tree/parse.com-proxy-with-backbone.js)\n\n### Create an “App” on Parse.com called “MyPeeps”\n\nOnce you crate the App, you will be given an **Application Id** and a **Master Key** which are essentially your user/password authentication for the site.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/ae906ffa-2f27-4317-a88f-7ff710850645/2011-11-04_22-10-11.png)![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/ec1bf2af-ed3d-4792-9bec-ea0ca1e71839/2011-11-04_22-10-47.png)\n\n### Set the ApplicationID and MasterKey in the <font style=\"font-weight: bold\">config.coffee </font>file\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/e2e751c7-91a1-41f1-9254-9036979675ac/2011-11-09_05-41-33.png)\n\n### Create the model and collections (<font style=\"font-weight: bold\">people.coffee</font>)\n\nThe model and collection extends from **ParseModel** and **ParseCollection** described in the [last post](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/).\n\n<pre class=\"brush: coffeescript; ruler: true; toolbar: false; smart-tabs: false;\">window.app = \n  models: {}\n  collections: {}\n\nclass app.models.Person extends Backbone.ParseModel\n  urlRoot: &quot;/data/People&quot;\n\nclass app.collections.People extends Backbone.ParseCollection\n  model: app.models.Person\n  url: &quot;/data/People&quot;</pre>\n\n### Create <font style=\"font-weight: bold\">index.html</font>\n\n<pre class=\"brush: xml; ruler: true; toolbar: false; smart-tabs: false;\">&lt;html&gt;\n&lt;head&gt;\n  &lt;script type=&quot;text/javascript&quot; src=&quot;/vendor/jquery-1.6.2.js&quot;&gt;&lt;/script&gt;\n  &lt;script type=&quot;text/javascript&quot; src=&quot;/vendor/underscore-1.1.7.js&quot;&gt;&lt;/script&gt;\n  &lt;script type=&quot;text/javascript&quot; src=&quot;/vendor/backbone-0.5.3.js&quot;&gt;&lt;/script&gt;\n\n  &lt;script type=&quot;text/javascript&quot; src=&quot;app.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  Use the developer tools in your browser to play\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n\n### Run the [proxy server](http://houseofbilz.com/archives/2011/11/07/a-proxy-server-for-parse-com/)\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/8321bda4-3108-41b1-a228-62d255f2de75/2011-11-09_05-47-46.png)\n\n### Point your browser to [http://localhost:3001](http://localhost:3001). Open your console and start playing\n\nUse your developer tools to create and work with your backbone models (created in **people.coffee**).\n\n### Create\n\nCreate a new **Person** model with the attributes you want and **save** it.&#160; The “People” class will get created on Parse.com and the attributes will get populated. Everything is schema-less so it gets created on demand.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/c4cc99a6-e50b-4ae3-930c-99f4e6db6bf4/2011-11-06_19-40-09.png)\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/a6bdfdb6-3f3c-4a9d-9786-90faf656dd06/2011-11-06_19-37-32.png)\n\n### List\n\nCreate a new **People** collection and **fetch** the items.&#160; When the server responds, you will see your new item in the collection with the attributes you set.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/e2ca54e4-2b77-4a25-b8ca-e6f403451f13/2011-11-06_19-41-19.png)\n\n### Update\n\nWhen you update the attributes on your **Person** model and save it, the updates will go back to Parse.com.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/eb144cc0-ec82-47c9-8372-04889b828e08/2011-11-06_19-42-56.png)![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/7f640dff-9d2d-4687-b879-607aae7b7ebd/2011-11-06_19-43-17.png)\n\n### Show\n\nIf you create a new **Person** model with a known id, you can **fetch** it from Parse.com\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/b2fa1cab-8ca6-48ca-a90b-8668264139c3/2011-11-06_19-45-05.png)\n\n### Delete\n\nIf you don’t want your object anymore, you can **destroy** it.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/e0925b52-a9a1-4f75-9aa8-21f4b1834a04/2011-11-06_19-45-50.png)![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/12b4faae-523e-49c9-83a1-ef7f2dd51e9b/2011-11-06_19-46-07.png)\n\n### Querying\n\nA very useful feature of the Parse.com API is the ability to query data.&#160; To illustrate this, let’s populate the database with three **Person** models: Brian Genisio, Eli Genisio and Jon Doe.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/c78d171d-37e6-480b-93f2-76f2329692f5/2011-11-06_19-57-58.png)\n\nI can pass a query parameter into the **fetch** function because **Person** derives from **ParseModel**.&#160; Here, I am querying for any object in the database with a **last** attribute of “Genisio”.&#160; Note that I only receive the two and Jon Doe is not retrieved.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/27fe7baa-aa3d-43db-9a04-afd576fdded4/2011-11-06_19-57-58.png)\n\nQueries can be [more complex](https://www.parse.com/docs/rest#data-querying).&#160; Here is a similar query asking for all objects who’s **last** name attribute is not “Doe”.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/e58cc32d-228c-43c8-9bcd-46f21195929d/2011-11-06_19-59-13.png)\n\n### Conclusion\n\nI’ve illustrated how easy it is to use Backbone.js to work with the Parse.com backend.&#160; Everything available in the REST API is abstracted with the **Model** and **Collection** paradigm that Backbone provides.&#160; By placing a small proxy between your HTML client and Parse.com, you can quickly build single-paged applications and forget about the back-end. (For data-centric apps)\n\nIn my next post, I will give an [example of a single-paged application that uses Parse.com as the back-end.](http://houseofbilz.com/archives/2011/11/30/an-example-backboneparse-com-app/)","source":"_posts/2011-11-09-working-with-backbone-js-and-the-parse-com-proxy.md","raw":"---\ntitle: Working with Backbone.js and the Parse.com Proxy\ntags:\n  - CoffeeScript\n  - Development\n  - HTML5\n  - Javascript\n  - Node.js\n  - Parse.com\n  - Technology\n  - Web\nid: 381\ncategories:\n  - Uncategorized\ndate: 2011-11-09 11:32:19\n---\n\n[Series Overview](http://houseofbilz.com/archives/2011/11/07/going-mostly-server-less-with-backbone-js/) \n\n[&lt;&lt; Making Backbone.js Work with Parse.com](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[An Example Backbone/Parse.com App &gt;&gt;](http://houseofbilz.com/archives/2011/11/30/an-example-backboneparse-com-app/)\n\nIn the [last post](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/), I presented some base prototypes for Backbone.js models and collections that play nicely with Parse.com\n\nNext, I will put all the pieces together and show how to use Backbone.js with Parse.com.&#160; All of the code is available on GitHub. [https://github.com/BrianGenisio/Parseback/tree/parse.com-proxy-with-backbone.js](https://github.com/BrianGenisio/Parseback/tree/parse.com-proxy-with-backbone.js)\n\n### Create an “App” on Parse.com called “MyPeeps”\n\nOnce you crate the App, you will be given an **Application Id** and a **Master Key** which are essentially your user/password authentication for the site.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/ae906ffa-2f27-4317-a88f-7ff710850645/2011-11-04_22-10-11.png)![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/ec1bf2af-ed3d-4792-9bec-ea0ca1e71839/2011-11-04_22-10-47.png)\n\n### Set the ApplicationID and MasterKey in the <font style=\"font-weight: bold\">config.coffee </font>file\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/e2e751c7-91a1-41f1-9254-9036979675ac/2011-11-09_05-41-33.png)\n\n### Create the model and collections (<font style=\"font-weight: bold\">people.coffee</font>)\n\nThe model and collection extends from **ParseModel** and **ParseCollection** described in the [last post](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/).\n\n<pre class=\"brush: coffeescript; ruler: true; toolbar: false; smart-tabs: false;\">window.app = \n  models: {}\n  collections: {}\n\nclass app.models.Person extends Backbone.ParseModel\n  urlRoot: &quot;/data/People&quot;\n\nclass app.collections.People extends Backbone.ParseCollection\n  model: app.models.Person\n  url: &quot;/data/People&quot;</pre>\n\n### Create <font style=\"font-weight: bold\">index.html</font>\n\n<pre class=\"brush: xml; ruler: true; toolbar: false; smart-tabs: false;\">&lt;html&gt;\n&lt;head&gt;\n  &lt;script type=&quot;text/javascript&quot; src=&quot;/vendor/jquery-1.6.2.js&quot;&gt;&lt;/script&gt;\n  &lt;script type=&quot;text/javascript&quot; src=&quot;/vendor/underscore-1.1.7.js&quot;&gt;&lt;/script&gt;\n  &lt;script type=&quot;text/javascript&quot; src=&quot;/vendor/backbone-0.5.3.js&quot;&gt;&lt;/script&gt;\n\n  &lt;script type=&quot;text/javascript&quot; src=&quot;app.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  Use the developer tools in your browser to play\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n\n### Run the [proxy server](http://houseofbilz.com/archives/2011/11/07/a-proxy-server-for-parse-com/)\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/8321bda4-3108-41b1-a228-62d255f2de75/2011-11-09_05-47-46.png)\n\n### Point your browser to [http://localhost:3001](http://localhost:3001). Open your console and start playing\n\nUse your developer tools to create and work with your backbone models (created in **people.coffee**).\n\n### Create\n\nCreate a new **Person** model with the attributes you want and **save** it.&#160; The “People” class will get created on Parse.com and the attributes will get populated. Everything is schema-less so it gets created on demand.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/c4cc99a6-e50b-4ae3-930c-99f4e6db6bf4/2011-11-06_19-40-09.png)\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/a6bdfdb6-3f3c-4a9d-9786-90faf656dd06/2011-11-06_19-37-32.png)\n\n### List\n\nCreate a new **People** collection and **fetch** the items.&#160; When the server responds, you will see your new item in the collection with the attributes you set.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/e2ca54e4-2b77-4a25-b8ca-e6f403451f13/2011-11-06_19-41-19.png)\n\n### Update\n\nWhen you update the attributes on your **Person** model and save it, the updates will go back to Parse.com.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/eb144cc0-ec82-47c9-8372-04889b828e08/2011-11-06_19-42-56.png)![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/7f640dff-9d2d-4687-b879-607aae7b7ebd/2011-11-06_19-43-17.png)\n\n### Show\n\nIf you create a new **Person** model with a known id, you can **fetch** it from Parse.com\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/b2fa1cab-8ca6-48ca-a90b-8668264139c3/2011-11-06_19-45-05.png)\n\n### Delete\n\nIf you don’t want your object anymore, you can **destroy** it.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/e0925b52-a9a1-4f75-9aa8-21f4b1834a04/2011-11-06_19-45-50.png)![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/12b4faae-523e-49c9-83a1-ef7f2dd51e9b/2011-11-06_19-46-07.png)\n\n### Querying\n\nA very useful feature of the Parse.com API is the ability to query data.&#160; To illustrate this, let’s populate the database with three **Person** models: Brian Genisio, Eli Genisio and Jon Doe.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/c78d171d-37e6-480b-93f2-76f2329692f5/2011-11-06_19-57-58.png)\n\nI can pass a query parameter into the **fetch** function because **Person** derives from **ParseModel**.&#160; Here, I am querying for any object in the database with a **last** attribute of “Genisio”.&#160; Note that I only receive the two and Jon Doe is not retrieved.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/27fe7baa-aa3d-43db-9a04-afd576fdded4/2011-11-06_19-57-58.png)\n\nQueries can be [more complex](https://www.parse.com/docs/rest#data-querying).&#160; Here is a similar query asking for all objects who’s **last** name attribute is not “Doe”.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/e58cc32d-228c-43c8-9bcd-46f21195929d/2011-11-06_19-59-13.png)\n\n### Conclusion\n\nI’ve illustrated how easy it is to use Backbone.js to work with the Parse.com backend.&#160; Everything available in the REST API is abstracted with the **Model** and **Collection** paradigm that Backbone provides.&#160; By placing a small proxy between your HTML client and Parse.com, you can quickly build single-paged applications and forget about the back-end. (For data-centric apps)\n\nIn my next post, I will give an [example of a single-paged application that uses Parse.com as the back-end.](http://houseofbilz.com/archives/2011/11/30/an-example-backboneparse-com-app/)","slug":"working-with-backbone-js-and-the-parse-com-proxy","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ic00616eulv2ro8k0i"},{"title":"An Example Backbone/Parse.com App","id":"396","date":"2011-12-01T01:02:15.000Z","_content":"\n[Series Overview](http://houseofbilz.com/archives/2011/11/07/going-mostly-server-less-with-backbone-js/)\n\n[&lt;&lt; Working with Backbone.js and the Parse.com Proxy](http://houseofbilz.com/archives/2011/11/09/working-with-backbone-js-and-the-parse-com-proxy/)&nbsp;&nbsp;&nbsp;&nbsp;[Hosting the Todos example on Heroku &gt;&gt;](http://houseofbilz.com/archives/2011/11/30/hosting-the-todos-example-on-heroku/)\n\nThis is the post where I put it all together.&#160; I showed how to create a proxy to [use Parse.com as your data store](http://houseofbilz.com/archives/2011/11/07/a-proxy-server-for-parse-com/).&#160; I also showed how to [modify Backbone.js to use Parse.com](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/).&#160; Now, I will show how easy it is to use Backbone.js models and collections with a service like Parse.com.&#160; Note that Parse.com is not the only service out there that does this.&#160; StackMob is another example of a “place to put your stuff” service.&#160; There are others.\n\nIn this app, I will borrow from the default [Backbone.js](http://documentcloud.github.com/backbone/) example: Todos.&#160; [Todos](http://documentcloud.github.com/backbone/#examples-todos) is a simple to-do list, which uses the browser’s local storage to save data.&#160; \n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/f0dd85a2-2d24-43c6-bb73-1319e835105a/2011-11-30_14-22-43.png)\n\nI will adapt it to be hosted by the Parse.com proxy that I showed in my previous post.&#160; Instead of storing locally, the app will put push to Parse.com.&#160; Want to play with it?&#160; I have hosted everything on Heroku: [http://todos-parsepack.herokuapp.com/](http://todos-parsepack.herokuapp.com/)\n\nThere are only a few tiny steps to make this work:\n\n1.  Replace localstorage.js with parse.com.js\n2.  Modify the model and collection to use Parse.com instead of local storage\n3.  Configure the proxy\n4.  Run the proxy\n\n&#160;\n\n### 1\\. Modify index.html\n\nThe example given with Backbone.js uses the “localstorage” override for Backbone.sync.&#160; We want to use the default REST version Backbone.sync so we remove it.&#160; We also want to use the base prototypes to adapt Parse.com to Backbone.\n\n<font face=\"Courier New\"><strike>&lt;script src=&quot;backbone-localstorage.js&quot;&gt;&lt;/script&gt; \n\n</strike>&lt;script src=”parse.com.js&quot;&gt;&lt;/script&gt;</font>\n\n### 2a. Modify the model\n\nThe example uses a vanilla Backbone.Model.&#160; Instead, change it to Backbone.ParseModel and give it the location of the data.\n\n<font face=\"Courier New\"><strike>window.Todo = Backbone.Model.extend({ \n\n</strike>window.Todo = Backbone.ParseModel.extend({ \n\n&#160;&#160;&#160; urlRoot: &quot;/data/Todos&quot;,</font>\n\n### 2b. Modify the Collection\n\nThe example uses a Backbone.Collection.&#160; Instead, change it to Backbone.ParseCollection and give it the location of the data.\n\n<font face=\"Courier New\"><strike>window.TodoList = Backbone.Collection.extend({ \n\n</strike>window.TodoList = Backbone.ParseCollection.extend({ \n\n&#160;&#160;&#160; url: &quot;/data/Todos&quot;,</font>\n\nAlso, since we aren’t using local storage, remove the localStore details.\n\n<font face=\"Courier New\"><strike>localStorage: new Store(&quot;todos&quot;),</strike></font>\n\n### 3\\. Configure the App\n\nThat is all you need to do in order to modify the app.&#160; Everything else is exactly the same.&#160; You do, however, need to create an App at Parse.com. \n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/829dc2f5-dca8-48b9-8c0a-0b59879a0504/2011-11-30_14-34-18.png)![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/60446bb8-193a-4be8-a359-e5ab433f6213/2011-11-30_14-35-47.png)\n\nUse the Application ID and Master Key and edit the config.coffee file:\n\n<pre class=\"brush: coffeescript; ruler: true; toolbar: false; smart-tabs: false;\">applicationID: 'APPLICATION ID' \nmasterKey:    'MASTER KEY' \napiPath:  '/data/'\nport:     3001</pre>\n\n### 4\\. Run the proxy:\n\n<font face=\"Courier New\">&gt; coffee proxy.coffee</font>\n\n### Test the app\n\nAdd items to your list.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/f1e9ed51-045a-43a2-8afa-ae00514650a0/2011-11-30_14-40-41.png)\n\n&#160;\n\nSee them show up in your data store.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/51f7e2c9-2191-4bde-9c6f-952bb816519e/2011-11-30_14-44-14.png)\n\n### Conclusion\n\nThat was insanely easy.&#160; You just need to tell you models and collections to go to the server instead of local storage, configure the proxy and run it.&#160; This solution installs well on Heroku as you can see.&#160; This app wasn’t built with any type of user models, so everyone in the world gets to share Todos in this example… that can also be done with Parse.com, but I that is a different post ☺.\n\nIf anyone finds this useful, I would be curious to know if it helps.&#160;  If you want the source code for this project, take a look at [the GitHub project](https://github.com/BrianGenisio/todos-parseback) \n\nAs a bonus, I wrote up the modifications I needed to make in order to [host the Parse-backed Todos example on Heroku](http://houseofbilz.com/archives/2011/11/30/hosting-the-todos-example-on-heroku/).  It was really easy and worth the writeup. ","source":"_posts/2011-11-30-an-example-backboneparse-com-app.md","raw":"---\ntitle: An Example Backbone/Parse.com App\ntags:\n  - CoffeeScript\n  - Development\n  - HTML5\n  - Javascript\n  - Node.js\n  - Parse.com\n  - Technology\n  - Web\nid: 396\ncategories:\n  - Uncategorized\ndate: 2011-11-30 20:02:15\n---\n\n[Series Overview](http://houseofbilz.com/archives/2011/11/07/going-mostly-server-less-with-backbone-js/)\n\n[&lt;&lt; Working with Backbone.js and the Parse.com Proxy](http://houseofbilz.com/archives/2011/11/09/working-with-backbone-js-and-the-parse-com-proxy/)&nbsp;&nbsp;&nbsp;&nbsp;[Hosting the Todos example on Heroku &gt;&gt;](http://houseofbilz.com/archives/2011/11/30/hosting-the-todos-example-on-heroku/)\n\nThis is the post where I put it all together.&#160; I showed how to create a proxy to [use Parse.com as your data store](http://houseofbilz.com/archives/2011/11/07/a-proxy-server-for-parse-com/).&#160; I also showed how to [modify Backbone.js to use Parse.com](http://houseofbilz.com/archives/2011/11/07/making-backbone-js-work-with-parse-com/).&#160; Now, I will show how easy it is to use Backbone.js models and collections with a service like Parse.com.&#160; Note that Parse.com is not the only service out there that does this.&#160; StackMob is another example of a “place to put your stuff” service.&#160; There are others.\n\nIn this app, I will borrow from the default [Backbone.js](http://documentcloud.github.com/backbone/) example: Todos.&#160; [Todos](http://documentcloud.github.com/backbone/#examples-todos) is a simple to-do list, which uses the browser’s local storage to save data.&#160; \n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/f0dd85a2-2d24-43c6-bb73-1319e835105a/2011-11-30_14-22-43.png)\n\nI will adapt it to be hosted by the Parse.com proxy that I showed in my previous post.&#160; Instead of storing locally, the app will put push to Parse.com.&#160; Want to play with it?&#160; I have hosted everything on Heroku: [http://todos-parsepack.herokuapp.com/](http://todos-parsepack.herokuapp.com/)\n\nThere are only a few tiny steps to make this work:\n\n1.  Replace localstorage.js with parse.com.js\n2.  Modify the model and collection to use Parse.com instead of local storage\n3.  Configure the proxy\n4.  Run the proxy\n\n&#160;\n\n### 1\\. Modify index.html\n\nThe example given with Backbone.js uses the “localstorage” override for Backbone.sync.&#160; We want to use the default REST version Backbone.sync so we remove it.&#160; We also want to use the base prototypes to adapt Parse.com to Backbone.\n\n<font face=\"Courier New\"><strike>&lt;script src=&quot;backbone-localstorage.js&quot;&gt;&lt;/script&gt; \n\n</strike>&lt;script src=”parse.com.js&quot;&gt;&lt;/script&gt;</font>\n\n### 2a. Modify the model\n\nThe example uses a vanilla Backbone.Model.&#160; Instead, change it to Backbone.ParseModel and give it the location of the data.\n\n<font face=\"Courier New\"><strike>window.Todo = Backbone.Model.extend({ \n\n</strike>window.Todo = Backbone.ParseModel.extend({ \n\n&#160;&#160;&#160; urlRoot: &quot;/data/Todos&quot;,</font>\n\n### 2b. Modify the Collection\n\nThe example uses a Backbone.Collection.&#160; Instead, change it to Backbone.ParseCollection and give it the location of the data.\n\n<font face=\"Courier New\"><strike>window.TodoList = Backbone.Collection.extend({ \n\n</strike>window.TodoList = Backbone.ParseCollection.extend({ \n\n&#160;&#160;&#160; url: &quot;/data/Todos&quot;,</font>\n\nAlso, since we aren’t using local storage, remove the localStore details.\n\n<font face=\"Courier New\"><strike>localStorage: new Store(&quot;todos&quot;),</strike></font>\n\n### 3\\. Configure the App\n\nThat is all you need to do in order to modify the app.&#160; Everything else is exactly the same.&#160; You do, however, need to create an App at Parse.com. \n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/829dc2f5-dca8-48b9-8c0a-0b59879a0504/2011-11-30_14-34-18.png)![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/60446bb8-193a-4be8-a359-e5ab433f6213/2011-11-30_14-35-47.png)\n\nUse the Application ID and Master Key and edit the config.coffee file:\n\n<pre class=\"brush: coffeescript; ruler: true; toolbar: false; smart-tabs: false;\">applicationID: 'APPLICATION ID' \nmasterKey:    'MASTER KEY' \napiPath:  '/data/'\nport:     3001</pre>\n\n### 4\\. Run the proxy:\n\n<font face=\"Courier New\">&gt; coffee proxy.coffee</font>\n\n### Test the app\n\nAdd items to your list.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/f1e9ed51-045a-43a2-8afa-ae00514650a0/2011-11-30_14-40-41.png)\n\n&#160;\n\nSee them show up in your data store.\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/51f7e2c9-2191-4bde-9c6f-952bb816519e/2011-11-30_14-44-14.png)\n\n### Conclusion\n\nThat was insanely easy.&#160; You just need to tell you models and collections to go to the server instead of local storage, configure the proxy and run it.&#160; This solution installs well on Heroku as you can see.&#160; This app wasn’t built with any type of user models, so everyone in the world gets to share Todos in this example… that can also be done with Parse.com, but I that is a different post ☺.\n\nIf anyone finds this useful, I would be curious to know if it helps.&#160;  If you want the source code for this project, take a look at [the GitHub project](https://github.com/BrianGenisio/todos-parseback) \n\nAs a bonus, I wrote up the modifications I needed to make in order to [host the Parse-backed Todos example on Heroku](http://houseofbilz.com/archives/2011/11/30/hosting-the-todos-example-on-heroku/).  It was really easy and worth the writeup. ","slug":"an-example-backboneparse-com-app","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ie00646eulumtone84"},{"title":"Hosting the Todos example on Heroku","id":"407","date":"2011-12-01T01:40:06.000Z","_content":"\n[Series Overview](http://houseofbilz.com/archives/2011/11/07/going-mostly-server-less-with-backbone-js/)\n\n[&lt;&lt; An Example Backbone/Parse.com App](http://houseofbilz.com/archives/2011/11/30/an-example-backboneparse-com-app/)\n\nThe Todos example was extremely easy to get up and running with Heroku.&#160; Even though this is a CoffeeScript based server running with Node.js, Heroku can support the application.&#160; I won’t go over the install process for the pre-requisites (Git and Heroku) because it is easy to [find on the web](http://www.jamesward.com/2011/06/21/getting-started-with-node-js-on-the-cloud/).&#160; Assuming they are installed, deploy the app like this:\n\n### Pull down the Todos example\n\n<font size=\"3\" face=\"Courier New\">**&gt; git clone git@github.com:BrianGenisio/todos-parseback.git**</font>\n\n### Create the Heroku app\n\n<font face=\"Courier New\"><font size=\"3\">**&gt; heroku create -s cedar yourappname          \n**</font><font color=\"#333333\">Creating yourappname... done, stack is cedar        \n</font></font><font color=\"#333333\" face=\"Courier New\">http://yourappname.herokuapp.com/</font><font color=\"#333333\" face=\"Courier New\"> | git@heroku.com:yourappname.git      \nGit remote heroku added</font>\n\n### Create file: package.json\n\n  <pre class=\"brush: js; ruler: true; toolbar: false; smart-tabs: false;\">{\n  &quot;name&quot;: &quot;yourappname&quot;,\n  &quot;version&quot;: &quot;0.0.1&quot;,\n  &quot;dependencies&quot;: {\n    &quot;express&quot;: &quot;2.5.0&quot;,\n    &quot;coffee-script&quot;: &quot;1.1.3&quot;,\n    &quot;restler&quot;: &quot;0.2.1&quot;\n  }\n}</pre>\n\n### Install the packages locally (for testing)\n\n<font size=\"3\" face=\"Courier New\">**&gt; npm install**</font>\n\n### Configure and test the app\n\n<font size=\"3\" face=\"Courier New\">**&gt; cp config.coffee.example config.coffee**</font>\n\nEdit **config.coffee** per the steps in the previous article and run it:\n\n<font size=\"3\">**&gt; coffee proxy.coffee**</font>\n\nPoint your browser to [http://localhost:3001](http://localhost:3001) and play.&#160; Everything should be working right now locally.&#160; Next, lets get it up on Heroku.\n\n### Create file: run.js\n\n<pre class=\"brush: coffeescript; ruler: true; toolbar: false; smart-tabs: false;\"># Necessary because Heroku can’t run CoffeeScript directly\nrequire(&quot;coffee-script&quot;);\nrequire(&quot;./proxy.coffee&quot;);</pre>\n\n### Create file: Procfile\n\n<font face=\"Courier New\">web: node run.js</font>\n\n### Deploy to Heroku (via git)\n\n<font face=\"Courier New\">**<font size=\"3\">&gt; git add .\n\n&gt; git commit -m &quot;Adding Heroku files&quot;\n\n</font>**<font color=\"#333333\" size=\"2\">[master 0154577] Adding Heroku files\n\n 3 files changed, 12 insertions(+), 0 deletions(-)\n\n create mode 100644 Procfile\n\n create mode 100644 package.json\n\n create mode 100644 run.js</font></font>\n\n<font face=\"Courier New\">**<font size=\"3\">&gt; git push heroku master\n\n</font>**<font color=\"#333333\">Counting objects: 23, done.\n\nDelta compression using up to 4 threads.\n\nCompressing objects: 100% (21/21), done.\n\nWriting objects: 100% (23/23), 102.20 KiB, done.\n\nTotal 23 (delta 1), reused 17 (delta 0)</font></font>\n\n<font color=\"#333333\" face=\"Courier New\">-----&gt; Heroku receiving push\n\n-----&gt; Node.js app detected\n\n-----&gt; Fetching Node.js binaries\n\n-----&gt; Vendoring node 0.4.7\n\n-----&gt; Installing dependencies with npm 1.0.94\n\n&#160;&#160;&#160;&#160;&#160;&#160; restler@0.2.1 ./node_modules/restler \n\n&#160;&#160;&#160;&#160;&#160;&#160; coffee-script@1.1.3 ./node_modules/coffee-script \n\n&#160;&#160;&#160;&#160;&#160;&#160; express@2.5.0 ./node_modules/express \n\n&#160;&#160;&#160;&#160;&#160;&#160; ├── mkdirp@0.0.7\n\n&#160;&#160;&#160;&#160;&#160;&#160; ├── mime@1.2.4\n\n&#160;&#160;&#160;&#160;&#160;&#160; ├── qs@0.3.2\n\n&#160;&#160;&#160;&#160;&#160;&#160; └── connect@1.7.3\n\n&#160;&#160;&#160;&#160;&#160;&#160; Dependencies installed\n\n-----&gt; Discovering process types\n\n&#160;&#160;&#160;&#160;&#160;&#160; Procfile declares types -&gt; web\n\n-----&gt; Compiled slug size is 3.4MB\n\n-----&gt; Launching... done, v4\n\n&#160;&#160;&#160;&#160;&#160;&#160; </font>[<font color=\"#333333\" face=\"Courier New\">http://yourappname.herokuapp.com</font>](http://yourappname.herokuapp.com)<font color=\"#333333\" face=\"Courier New\"> deployed to Heroku</font>\n\n<font color=\"#333333\" face=\"Courier New\">To git@heroku.com:yourappname.git\n\n * [new branch]&#160;&#160;&#160;&#160;&#160; master –&gt; master</font>\n\n### Try it out\n\n<font face=\"Courier New\"><font size=\"3\">**&gt; heroku open\n\n**</font><font color=\"#333333\">Opening </font></font>[<font color=\"#333333\" face=\"Courier New\">http://yourappname.herokuapp.com/</font>](http://yourappname.herokuapp.com/)\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/f0dd85a2-2d24-43c6-bb73-1319e835105a/2011-11-30_14-22-43.png)\n\n### That’s it!\n\nSeriously.&#160; That was easy.&#160; Now the app is hosted.&#160; Heroku and Parse.com do all the dirty work for you.\n\n<font color=\"#333333\" face=\"Courier New\">\n\n</font>","source":"_posts/2011-11-30-hosting-the-todos-example-on-heroku.md","raw":"---\ntitle: Hosting the Todos example on Heroku\nid: 407\ncategories:\n  - Uncategorized\ndate: 2011-11-30 20:40:06\ntags:\n---\n\n[Series Overview](http://houseofbilz.com/archives/2011/11/07/going-mostly-server-less-with-backbone-js/)\n\n[&lt;&lt; An Example Backbone/Parse.com App](http://houseofbilz.com/archives/2011/11/30/an-example-backboneparse-com-app/)\n\nThe Todos example was extremely easy to get up and running with Heroku.&#160; Even though this is a CoffeeScript based server running with Node.js, Heroku can support the application.&#160; I won’t go over the install process for the pre-requisites (Git and Heroku) because it is easy to [find on the web](http://www.jamesward.com/2011/06/21/getting-started-with-node-js-on-the-cloud/).&#160; Assuming they are installed, deploy the app like this:\n\n### Pull down the Todos example\n\n<font size=\"3\" face=\"Courier New\">**&gt; git clone git@github.com:BrianGenisio/todos-parseback.git**</font>\n\n### Create the Heroku app\n\n<font face=\"Courier New\"><font size=\"3\">**&gt; heroku create -s cedar yourappname          \n**</font><font color=\"#333333\">Creating yourappname... done, stack is cedar        \n</font></font><font color=\"#333333\" face=\"Courier New\">http://yourappname.herokuapp.com/</font><font color=\"#333333\" face=\"Courier New\"> | git@heroku.com:yourappname.git      \nGit remote heroku added</font>\n\n### Create file: package.json\n\n  <pre class=\"brush: js; ruler: true; toolbar: false; smart-tabs: false;\">{\n  &quot;name&quot;: &quot;yourappname&quot;,\n  &quot;version&quot;: &quot;0.0.1&quot;,\n  &quot;dependencies&quot;: {\n    &quot;express&quot;: &quot;2.5.0&quot;,\n    &quot;coffee-script&quot;: &quot;1.1.3&quot;,\n    &quot;restler&quot;: &quot;0.2.1&quot;\n  }\n}</pre>\n\n### Install the packages locally (for testing)\n\n<font size=\"3\" face=\"Courier New\">**&gt; npm install**</font>\n\n### Configure and test the app\n\n<font size=\"3\" face=\"Courier New\">**&gt; cp config.coffee.example config.coffee**</font>\n\nEdit **config.coffee** per the steps in the previous article and run it:\n\n<font size=\"3\">**&gt; coffee proxy.coffee**</font>\n\nPoint your browser to [http://localhost:3001](http://localhost:3001) and play.&#160; Everything should be working right now locally.&#160; Next, lets get it up on Heroku.\n\n### Create file: run.js\n\n<pre class=\"brush: coffeescript; ruler: true; toolbar: false; smart-tabs: false;\"># Necessary because Heroku can’t run CoffeeScript directly\nrequire(&quot;coffee-script&quot;);\nrequire(&quot;./proxy.coffee&quot;);</pre>\n\n### Create file: Procfile\n\n<font face=\"Courier New\">web: node run.js</font>\n\n### Deploy to Heroku (via git)\n\n<font face=\"Courier New\">**<font size=\"3\">&gt; git add .\n\n&gt; git commit -m &quot;Adding Heroku files&quot;\n\n</font>**<font color=\"#333333\" size=\"2\">[master 0154577] Adding Heroku files\n\n 3 files changed, 12 insertions(+), 0 deletions(-)\n\n create mode 100644 Procfile\n\n create mode 100644 package.json\n\n create mode 100644 run.js</font></font>\n\n<font face=\"Courier New\">**<font size=\"3\">&gt; git push heroku master\n\n</font>**<font color=\"#333333\">Counting objects: 23, done.\n\nDelta compression using up to 4 threads.\n\nCompressing objects: 100% (21/21), done.\n\nWriting objects: 100% (23/23), 102.20 KiB, done.\n\nTotal 23 (delta 1), reused 17 (delta 0)</font></font>\n\n<font color=\"#333333\" face=\"Courier New\">-----&gt; Heroku receiving push\n\n-----&gt; Node.js app detected\n\n-----&gt; Fetching Node.js binaries\n\n-----&gt; Vendoring node 0.4.7\n\n-----&gt; Installing dependencies with npm 1.0.94\n\n&#160;&#160;&#160;&#160;&#160;&#160; restler@0.2.1 ./node_modules/restler \n\n&#160;&#160;&#160;&#160;&#160;&#160; coffee-script@1.1.3 ./node_modules/coffee-script \n\n&#160;&#160;&#160;&#160;&#160;&#160; express@2.5.0 ./node_modules/express \n\n&#160;&#160;&#160;&#160;&#160;&#160; ├── mkdirp@0.0.7\n\n&#160;&#160;&#160;&#160;&#160;&#160; ├── mime@1.2.4\n\n&#160;&#160;&#160;&#160;&#160;&#160; ├── qs@0.3.2\n\n&#160;&#160;&#160;&#160;&#160;&#160; └── connect@1.7.3\n\n&#160;&#160;&#160;&#160;&#160;&#160; Dependencies installed\n\n-----&gt; Discovering process types\n\n&#160;&#160;&#160;&#160;&#160;&#160; Procfile declares types -&gt; web\n\n-----&gt; Compiled slug size is 3.4MB\n\n-----&gt; Launching... done, v4\n\n&#160;&#160;&#160;&#160;&#160;&#160; </font>[<font color=\"#333333\" face=\"Courier New\">http://yourappname.herokuapp.com</font>](http://yourappname.herokuapp.com)<font color=\"#333333\" face=\"Courier New\"> deployed to Heroku</font>\n\n<font color=\"#333333\" face=\"Courier New\">To git@heroku.com:yourappname.git\n\n * [new branch]&#160;&#160;&#160;&#160;&#160; master –&gt; master</font>\n\n### Try it out\n\n<font face=\"Courier New\"><font size=\"3\">**&gt; heroku open\n\n**</font><font color=\"#333333\">Opening </font></font>[<font color=\"#333333\" face=\"Courier New\">http://yourappname.herokuapp.com/</font>](http://yourappname.herokuapp.com/)\n\n![](http://content.screencast.com/users/BrianGenisio/folders/Snagit/media/f0dd85a2-2d24-43c6-bb73-1319e835105a/2011-11-30_14-22-43.png)\n\n### That’s it!\n\nSeriously.&#160; That was easy.&#160; Now the app is hosted.&#160; Heroku and Parse.com do all the dirty work for you.\n\n<font color=\"#333333\" face=\"Courier New\">\n\n</font>","slug":"hosting-the-todos-example-on-heroku","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9if00666eul4g5j3yu2"},{"title":"Choose Your Own Application","id":"422","date":"2013-02-05T16:31:06.000Z","_content":"\nIt has been a while since I've posted.  I've been neck-deep in Single-Page Application work for the past year and haven't had much time to come up for air.  I wanted to show what my latest side project is.  [Choose Your Own Application](http://chooseyourownapplication.com) is a tutorial site for learning Single-Page Application stacks.  We help you build an application using your choice of technology.  You get to make choices as you go and you earn achievements as you try different things.  It is a ton of fun!\n\nDennis Burton and I worked on this with several other SRT colleagues and we are very proud of it.  We presented it as a half-day CodeMash session last month and the room was overflowing with over 100 participants, all heads-down and hacking out code. Since then, we've picked up another 300 or so users who have gone through the 22 different possible paths in the site.\n\n<center>[![](https://s3.amazonaws.com/chooseyourownapp/Splash_Graphic_Launch.gif)](http://chooseyourownapplication.com)</center>","source":"_posts/2013-02-05-choose-your-own-application.md","raw":"---\ntitle: Choose Your Own Application\nid: 422\ncategories:\n  - Uncategorized\ndate: 2013-02-05 11:31:06\ntags:\n---\n\nIt has been a while since I've posted.  I've been neck-deep in Single-Page Application work for the past year and haven't had much time to come up for air.  I wanted to show what my latest side project is.  [Choose Your Own Application](http://chooseyourownapplication.com) is a tutorial site for learning Single-Page Application stacks.  We help you build an application using your choice of technology.  You get to make choices as you go and you earn achievements as you try different things.  It is a ton of fun!\n\nDennis Burton and I worked on this with several other SRT colleagues and we are very proud of it.  We presented it as a half-day CodeMash session last month and the room was overflowing with over 100 participants, all heads-down and hacking out code. Since then, we've picked up another 300 or so users who have gone through the 22 different possible paths in the site.\n\n<center>[![](https://s3.amazonaws.com/chooseyourownapp/Splash_Graphic_Launch.gif)](http://chooseyourownapplication.com)</center>","slug":"choose-your-own-application","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ih006a6eul3oqmud6q"},{"layout":"post","title":"Where is the Rest of my Blog?","description":"Where is the rest of it?","_content":"\nIf you are looking for the rest of my blog -- all the posts I have written over the years -- you'll have to look at my **[\"House of Bilz\"](http://houseofbilz.com)** blog.  I recently moved over to using Jekyll as my site generator and I haven't gotten to translate all the old posts over.  I might get to it some day, I might not.  They are all there.  ","source":"_posts/2013-04-02-where-is-the-rest-of-my-blog.md","raw":"---\nlayout: post\ntitle: \"Where is the Rest of my Blog?\"\ndescription: \"Where is the rest of it?\"\ncategory: Software\ntags: []\npermalink: software/2013/04/02/where-is-the-rest-of-my-blog.html\n---\n\nIf you are looking for the rest of my blog -- all the posts I have written over the years -- you'll have to look at my **[\"House of Bilz\"](http://houseofbilz.com)** blog.  I recently moved over to using Jekyll as my site generator and I haven't gotten to translate all the old posts over.  I might get to it some day, I might not.  They are all there.  ","slug":"software/2013/04/02/where-is-the-rest-of-my-blog.html","published":1,"date":"2013-04-02T04:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9ij006d6eulrvl8wesq"},{"title":"There and Back Again -- Thoughts on SPAs","id":"438","date":"2013-04-17T18:27:50.000Z","_content":"\nI've been doing this software thing for quite a while now.  My first software job was in web development back in 1998\\.  Since then, I've traveled through Simulation Systems, Embedded Systems, Tooling, Desktop Applications, Rich Internet Applications (RIA), some mobile and today I am back where I started, developing Web Applications.\n\n### Productivity Highs with RIA Frameworks\n\nAfter traveling out and back, I see everything from a different perspective.  Web applications, today, are incredibly different from the way they were in the 90s.  The biggest difference, from my perspective, is the way we develop them.  Coming from the RIA perspective, using Silverlight and Flex, I am accustomed to a certain productivity that I pine for now that I am developing for the web again.\n\nIf you know me, you know that I was a big fan of Silverlight and Flex.  They were frameworks which let me develop amazing desktop experiences in the browser.  I was doing things in 2007 that to this day is still impossible to do with HTML5 today.  Those frameworks had one flaw, however.  They required plug-ins to run.\n\n### Death to the Plug-In\n\nI've never been much of an apologist for plug-ins. I saw them as a necessary evil.  An evil that became unsustainable in this brave new world of mobile computing.  When Apple, Microsoft and Adobe killed Silverlight and Flex, I wasn't sad because I loved those platforms.  I was sad because I knew I couldn't be as productive writing the same kinds of applications in HTML/JavaScript/CSS.\n\n### First Generation SPA Frameworks\n\nThis is where the Single-Paged Application (SPA) frameworks came to my aid.  There are too many to count, but from my vantage point, it has felt like Backbone.js and Knockout.js have been the primary options in the SPA market.    I landed on Backbone.js as my go-to choice because it was a more complete solution than Knockout.js with its client-side route handling and model synchronization.  I found myself at home with building SPAs because they were so similar to RIAs.\n\nUnfortunately, my productivity never came close to that of the plug-in frameworks.  Backbone.js and Knockout.js simply aren't high enough of an abstraction for them to provide the same abilities to me.  They are the first generation of SPA tools and with that brings the pains of a first-generation technology.\n\n### Filling in the Gaps\n\nWe're starting to see some pretty nice add-ons to our first-generation tools.  These add-ons fill the gaps that the frameworks leave by attempting to make you more productive.  Specifically, Backbone.js has a poor view abstraction, making things like collection views and deeply nested views difficult.  Marionette.js builds upon Backbone.js to provide more structure, guidance and capabilities.  Using Marionette.js boosted my productivity significantly by taking care of much of the boiler-plate code that I found myself writing with Backbone.js alone.  It is still not ideal, mostly because the abstractions are not extremely strong.  They are strongER, but nothing compared to the capabilities I pine for.  Knockout.js has a similar packaging called Hot Towel.  Hot Towel fills in the holes that Knockout.js left by providing model synchronization, route handling and child view handling.\n\nUnfortunately, these approaches only take us as far as the base technologies allow us to.  Without a strong abstraction to begin with, these add-ons can only ever takes us to generation 1.5.\n\n### Second Generation SPA Frameworks\n\nAt the same time, the second generation of the SPA frameworks are coming forward.  They come from a higher level of abstraction and the code you write demonstrates it by being significantly less (half or less).  These frameworks (Angular.js and Ember.js) provide everything we wanted from our first generation tools but they also bring more capabilities like convention-based development paradigms and dependency injection.  What's more, we are starting to see tooling (such as Batarang) built around these abstractions which let our development lifecycle be that much smoother.\n\nI am focusing my efforts on these second-generation tool sets for now.  I am not abandoning my Backbone.js/Marionette.js tools completely, but I am not planning to invest much more time in them.  Instead of patching the holes that the first generation tools created, I am choosing to spend my time using (and recommending) the next generation of tools.  Specifically, I am focusing my efforts on Angular.js.  It fits my development style better and I feel like the abstractions make more sense to me.  I'm not knocking on Ember.js in any way.  It is a fine choice, in my opinion.\n\n### The Future of SPA Development\n\nBut this isn't where we are settling.  I think it will require a third generation of tools before the SPA space really takes off.  I have no idea what these frameworks will be, but I expect they will approach the productivity that I grew accustomed to with Silverlight and Flex.  The levels of abstractions will be higher and the tooling will be richer.  I expect that we will start to approach similar developer/designer workflows that were so amazing in the SPA days.  I expect we will see multiple language integration, including debugging and profiling tools built around these frameworks.  They will feel much less like a web framework and more like a desktop development framework.  The user experiences we create will be comparable to the experiences we created with Flex and Silverlight.\n\n### Paying Back the Debt\n\nThe funny thing is that we will have taken 5 years to get there.  It will be 5 years of stepping out of the plug-ins and into the browser so that we can achieve the same quality of application that we were already producing.  In some ways, it feels like a regression, but we have to realize that the plug-ins were really just a disguised form of technical debt.  They provided a one-off environment so that we were able to do things that weren't possible in the browser, but they did so by not investing in the browser.  Ultimately, the browser is the platform we were headed towards so we incurred debt.  We just have to pay it off before we can really innovate again.\n\n### Conclusion\n\nI'm excited to see where the future of front-end development goes.  I'm excited to see that great strides are being made and I am happy to be at the front of the wave.  The community is starting to get excited too.  Here in Ann Arbor, we will be kicking off a JavaScript user group very soon which will give us a place to discuss these technologies and approaches.  I look forward to chatting it up!\n\n### On a personal note\n\nThis is my last blog post written for SRT Solutions.  I am moving on to something new.  More on that soon.","source":"_posts/2013-04-17-there-and-back-again-thoughts-on-spas-1.md","raw":"---\ntitle: There and Back Again -- Thoughts on SPAs\nid: 438\ncategories:\n  - Uncategorized\ndate: 2013-04-17 14:27:50\ntags:\n---\n\nI've been doing this software thing for quite a while now.  My first software job was in web development back in 1998\\.  Since then, I've traveled through Simulation Systems, Embedded Systems, Tooling, Desktop Applications, Rich Internet Applications (RIA), some mobile and today I am back where I started, developing Web Applications.\n\n### Productivity Highs with RIA Frameworks\n\nAfter traveling out and back, I see everything from a different perspective.  Web applications, today, are incredibly different from the way they were in the 90s.  The biggest difference, from my perspective, is the way we develop them.  Coming from the RIA perspective, using Silverlight and Flex, I am accustomed to a certain productivity that I pine for now that I am developing for the web again.\n\nIf you know me, you know that I was a big fan of Silverlight and Flex.  They were frameworks which let me develop amazing desktop experiences in the browser.  I was doing things in 2007 that to this day is still impossible to do with HTML5 today.  Those frameworks had one flaw, however.  They required plug-ins to run.\n\n### Death to the Plug-In\n\nI've never been much of an apologist for plug-ins. I saw them as a necessary evil.  An evil that became unsustainable in this brave new world of mobile computing.  When Apple, Microsoft and Adobe killed Silverlight and Flex, I wasn't sad because I loved those platforms.  I was sad because I knew I couldn't be as productive writing the same kinds of applications in HTML/JavaScript/CSS.\n\n### First Generation SPA Frameworks\n\nThis is where the Single-Paged Application (SPA) frameworks came to my aid.  There are too many to count, but from my vantage point, it has felt like Backbone.js and Knockout.js have been the primary options in the SPA market.    I landed on Backbone.js as my go-to choice because it was a more complete solution than Knockout.js with its client-side route handling and model synchronization.  I found myself at home with building SPAs because they were so similar to RIAs.\n\nUnfortunately, my productivity never came close to that of the plug-in frameworks.  Backbone.js and Knockout.js simply aren't high enough of an abstraction for them to provide the same abilities to me.  They are the first generation of SPA tools and with that brings the pains of a first-generation technology.\n\n### Filling in the Gaps\n\nWe're starting to see some pretty nice add-ons to our first-generation tools.  These add-ons fill the gaps that the frameworks leave by attempting to make you more productive.  Specifically, Backbone.js has a poor view abstraction, making things like collection views and deeply nested views difficult.  Marionette.js builds upon Backbone.js to provide more structure, guidance and capabilities.  Using Marionette.js boosted my productivity significantly by taking care of much of the boiler-plate code that I found myself writing with Backbone.js alone.  It is still not ideal, mostly because the abstractions are not extremely strong.  They are strongER, but nothing compared to the capabilities I pine for.  Knockout.js has a similar packaging called Hot Towel.  Hot Towel fills in the holes that Knockout.js left by providing model synchronization, route handling and child view handling.\n\nUnfortunately, these approaches only take us as far as the base technologies allow us to.  Without a strong abstraction to begin with, these add-ons can only ever takes us to generation 1.5.\n\n### Second Generation SPA Frameworks\n\nAt the same time, the second generation of the SPA frameworks are coming forward.  They come from a higher level of abstraction and the code you write demonstrates it by being significantly less (half or less).  These frameworks (Angular.js and Ember.js) provide everything we wanted from our first generation tools but they also bring more capabilities like convention-based development paradigms and dependency injection.  What's more, we are starting to see tooling (such as Batarang) built around these abstractions which let our development lifecycle be that much smoother.\n\nI am focusing my efforts on these second-generation tool sets for now.  I am not abandoning my Backbone.js/Marionette.js tools completely, but I am not planning to invest much more time in them.  Instead of patching the holes that the first generation tools created, I am choosing to spend my time using (and recommending) the next generation of tools.  Specifically, I am focusing my efforts on Angular.js.  It fits my development style better and I feel like the abstractions make more sense to me.  I'm not knocking on Ember.js in any way.  It is a fine choice, in my opinion.\n\n### The Future of SPA Development\n\nBut this isn't where we are settling.  I think it will require a third generation of tools before the SPA space really takes off.  I have no idea what these frameworks will be, but I expect they will approach the productivity that I grew accustomed to with Silverlight and Flex.  The levels of abstractions will be higher and the tooling will be richer.  I expect that we will start to approach similar developer/designer workflows that were so amazing in the SPA days.  I expect we will see multiple language integration, including debugging and profiling tools built around these frameworks.  They will feel much less like a web framework and more like a desktop development framework.  The user experiences we create will be comparable to the experiences we created with Flex and Silverlight.\n\n### Paying Back the Debt\n\nThe funny thing is that we will have taken 5 years to get there.  It will be 5 years of stepping out of the plug-ins and into the browser so that we can achieve the same quality of application that we were already producing.  In some ways, it feels like a regression, but we have to realize that the plug-ins were really just a disguised form of technical debt.  They provided a one-off environment so that we were able to do things that weren't possible in the browser, but they did so by not investing in the browser.  Ultimately, the browser is the platform we were headed towards so we incurred debt.  We just have to pay it off before we can really innovate again.\n\n### Conclusion\n\nI'm excited to see where the future of front-end development goes.  I'm excited to see that great strides are being made and I am happy to be at the front of the wave.  The community is starting to get excited too.  Here in Ann Arbor, we will be kicking off a JavaScript user group very soon which will give us a place to discuss these technologies and approaches.  I look forward to chatting it up!\n\n### On a personal note\n\nThis is my last blog post written for SRT Solutions.  I am moving on to something new.  More on that soon.","slug":"there-and-back-again-thoughts-on-spas-1","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ik006g6eul035hxbdt"},{"layout":"post","title":"There and Back Again -- Thoughts on SPAs","description":"Reflections on a Career in Software","_content":"\nI've been doing this software thing for quite a while now.  My first software job was in web development back in 1998.  Since then, I've traveled through Simulation Systems, Embedded Systems, Tooling, Desktop Applications, Rich Internet Applications (RIA), some mobile and today I am back where I started, developing Web Applications.\n\n### Productivity Highs with RIA Frameworks\nAfter traveling out and back, I see everything from a different perspective.  Web applications, today, are incredibly different from the way they were in the 90s.  The biggest difference, from my perspective, is the way we develop them.  Coming from the RIA perspective, using Silverlight and Flex, I am accustomed to a certain productivity that I pine for now that I am developing for the web again.\n\nIf you know me, you know that I was a big fan of Silverlight and Flex.  They were frameworks which let me develop amazing desktop experiences in the browser.  I was doing things in 2007 that to this day is still impossible to do with HTML5 today.  Those frameworks had one flaw, however.  They required plug-ins to run.\n\n### Death to the Plug-In\nI've never been much of an apologist for plug-ins. I saw them as a necessary evil.  An evil that became unsustainable in this brave new world of mobile computing.  When Apple, Microsoft and Adobe killed Silverlight and Flex, I wasn't sad because I loved those platforms.  I was sad because I knew I couldn't be as productive writing the same kinds of applications in HTML/JavaScript/CSS.\n\n### First Generation SPA Frameworks\nThis is where the Single-Paged Application (SPA) frameworks came to my aid.  There are too many to count, but from my vantage point, it has felt like Backbone.js and Knockout.js have been the primary options in the SPA market.    I landed on Backbone.js as my go-to choice because it was a more complete solution than Knockout.js with its client-side route handling and model synchronization.  I found myself at home with building SPAs because they were so similar to RIAs.\n\nUnfortunately, my productivity never came close to that of the plug-in frameworks.  Backbone.js and Knockout.js simply aren't high enough of an abstraction for them to provide the same abilities to me.  They are the first generation of SPA tools and with that brings the pains of a first-generation technology.\n\n### Filling in the Gaps\nWe're starting to see some pretty nice add-ons to our first-generation tools.  These add-ons fill the gaps that the frameworks leave by attempting to make you more productive.  Specifically, Backbone.js has a poor view abstraction, making things like collection views and deeply nested views difficult.  Marionette.js builds upon Backbone.js to provide more structure, guidance and capabilities.  Using Marionette.js boosted my productivity significantly by taking care of much of the boiler-plate code that I found myself writing with Backbone.js alone.  It is still not ideal, mostly because the abstractions are not extremely strong.  They are strongER, but nothing compared to the capabilities I pine for.  Knockout.js has a similar packaging called Hot Towel.  Hot Towel fills in the holes that Knockout.js left by providing model synchronization, route handling and child view handling.\n\nUnfortunately, these approaches only take us as far as the base technologies allow us to.  Without a strong abstraction to begin with, these add-ons can only ever takes us to generation 1.5.\n\n### Second Generation SPA Frameworks\nAt the same time, the second generation of the SPA frameworks are coming forward.  They come from a higher level of abstraction and the code you write demonstrates it by being significantly less (half or less).  These frameworks (Angular.js and Ember.js) provide everything we wanted from our first generation tools but they also bring more capabilities like convention-based development paradigms and dependency injection.  What's more, we are starting to see tooling (such as Batarang) built around these abstractions which let our development lifecycle be that much smoother.\n\nI am focusing my efforts on these second-generation tool sets for now.  I am not abandoning my Backbone.js/Marionette.js tools completely, but I am not planning to invest much more time in them.  Instead of patching the holes that the first generation tools created, I am choosing to spend my time using (and recommending) the next generation of tools.  Specifically, I am focusing my efforts on Angular.js.  It fits my development style better and I feel like the abstractions make more sense to me.  I'm not knocking on Ember.js in any way.  It is a fine choice, in my opinion.\n\n### The Future of SPA Development\nBut this isn't where we are settling.  I think it will require a third generation of tools before the SPA space really takes off.  I have no idea what these frameworks will be, but I expect they will approach the productivity that I grew accustomed to with Silverlight and Flex.  The levels of abstractions will be higher and the tooling will be richer.  I expect that we will start to approach similar developer/designer workflows that were so amazing in the SPA days.  I expect we will see multiple language integration, including debugging and profiling tools built around these frameworks.  They will feel much less like a web framework and more like a desktop development framework.  The user experiences we create will be comparable to the experiences we created with Flex and Silverlight.\n\n### Paying Back the Debt\nThe funny thing is that we will have taken 5 years to get there.  It will be 5 years of stepping out of the plug-ins and into the browser so that we can achieve the same quality of application that we were already producing.  In some ways, it feels like a regression, but we have to realize that the plug-ins were really just a disguised form of technical debt.  They provided a one-off environment so that we were able to do things that weren't possible in the browser, but they did so by not investing in the browser.  Ultimately, the browser is the platform we were headed towards so we incurred debt.  We just have to pay it off before we can really innovate again.\n\n### Conclusion\nI'm excited to see where the future of front-end development goes.  I'm excited to see that great strides are being made and I am happy to be at the front of the wave.  The community is starting to get excited too.  Here in Ann Arbor, we will be kicking off a JavaScript user group very soon which will give us a place to discuss these technologies and approaches.  I look forward to chatting it up!\n\n### On a personal note\nThis is my last blog post written for SRT Solutions.  I am moving on to something new.  More on that soon.","source":"_posts/2013-04-17-there-and-back-again-thoughts-on-spas.md","raw":"---\nlayout: post\ntitle: \"There and Back Again -- Thoughts on SPAs\"\ndescription: \"Reflections on a Career in Software\"\ncategory: Software\ntags: [Angular, Backbone, SPA]\npermalink: software/2013/04/17/there-and-back-again-thoughts-on-spas.html\n---\n\nI've been doing this software thing for quite a while now.  My first software job was in web development back in 1998.  Since then, I've traveled through Simulation Systems, Embedded Systems, Tooling, Desktop Applications, Rich Internet Applications (RIA), some mobile and today I am back where I started, developing Web Applications.\n\n### Productivity Highs with RIA Frameworks\nAfter traveling out and back, I see everything from a different perspective.  Web applications, today, are incredibly different from the way they were in the 90s.  The biggest difference, from my perspective, is the way we develop them.  Coming from the RIA perspective, using Silverlight and Flex, I am accustomed to a certain productivity that I pine for now that I am developing for the web again.\n\nIf you know me, you know that I was a big fan of Silverlight and Flex.  They were frameworks which let me develop amazing desktop experiences in the browser.  I was doing things in 2007 that to this day is still impossible to do with HTML5 today.  Those frameworks had one flaw, however.  They required plug-ins to run.\n\n### Death to the Plug-In\nI've never been much of an apologist for plug-ins. I saw them as a necessary evil.  An evil that became unsustainable in this brave new world of mobile computing.  When Apple, Microsoft and Adobe killed Silverlight and Flex, I wasn't sad because I loved those platforms.  I was sad because I knew I couldn't be as productive writing the same kinds of applications in HTML/JavaScript/CSS.\n\n### First Generation SPA Frameworks\nThis is where the Single-Paged Application (SPA) frameworks came to my aid.  There are too many to count, but from my vantage point, it has felt like Backbone.js and Knockout.js have been the primary options in the SPA market.    I landed on Backbone.js as my go-to choice because it was a more complete solution than Knockout.js with its client-side route handling and model synchronization.  I found myself at home with building SPAs because they were so similar to RIAs.\n\nUnfortunately, my productivity never came close to that of the plug-in frameworks.  Backbone.js and Knockout.js simply aren't high enough of an abstraction for them to provide the same abilities to me.  They are the first generation of SPA tools and with that brings the pains of a first-generation technology.\n\n### Filling in the Gaps\nWe're starting to see some pretty nice add-ons to our first-generation tools.  These add-ons fill the gaps that the frameworks leave by attempting to make you more productive.  Specifically, Backbone.js has a poor view abstraction, making things like collection views and deeply nested views difficult.  Marionette.js builds upon Backbone.js to provide more structure, guidance and capabilities.  Using Marionette.js boosted my productivity significantly by taking care of much of the boiler-plate code that I found myself writing with Backbone.js alone.  It is still not ideal, mostly because the abstractions are not extremely strong.  They are strongER, but nothing compared to the capabilities I pine for.  Knockout.js has a similar packaging called Hot Towel.  Hot Towel fills in the holes that Knockout.js left by providing model synchronization, route handling and child view handling.\n\nUnfortunately, these approaches only take us as far as the base technologies allow us to.  Without a strong abstraction to begin with, these add-ons can only ever takes us to generation 1.5.\n\n### Second Generation SPA Frameworks\nAt the same time, the second generation of the SPA frameworks are coming forward.  They come from a higher level of abstraction and the code you write demonstrates it by being significantly less (half or less).  These frameworks (Angular.js and Ember.js) provide everything we wanted from our first generation tools but they also bring more capabilities like convention-based development paradigms and dependency injection.  What's more, we are starting to see tooling (such as Batarang) built around these abstractions which let our development lifecycle be that much smoother.\n\nI am focusing my efforts on these second-generation tool sets for now.  I am not abandoning my Backbone.js/Marionette.js tools completely, but I am not planning to invest much more time in them.  Instead of patching the holes that the first generation tools created, I am choosing to spend my time using (and recommending) the next generation of tools.  Specifically, I am focusing my efforts on Angular.js.  It fits my development style better and I feel like the abstractions make more sense to me.  I'm not knocking on Ember.js in any way.  It is a fine choice, in my opinion.\n\n### The Future of SPA Development\nBut this isn't where we are settling.  I think it will require a third generation of tools before the SPA space really takes off.  I have no idea what these frameworks will be, but I expect they will approach the productivity that I grew accustomed to with Silverlight and Flex.  The levels of abstractions will be higher and the tooling will be richer.  I expect that we will start to approach similar developer/designer workflows that were so amazing in the SPA days.  I expect we will see multiple language integration, including debugging and profiling tools built around these frameworks.  They will feel much less like a web framework and more like a desktop development framework.  The user experiences we create will be comparable to the experiences we created with Flex and Silverlight.\n\n### Paying Back the Debt\nThe funny thing is that we will have taken 5 years to get there.  It will be 5 years of stepping out of the plug-ins and into the browser so that we can achieve the same quality of application that we were already producing.  In some ways, it feels like a regression, but we have to realize that the plug-ins were really just a disguised form of technical debt.  They provided a one-off environment so that we were able to do things that weren't possible in the browser, but they did so by not investing in the browser.  Ultimately, the browser is the platform we were headed towards so we incurred debt.  We just have to pay it off before we can really innovate again.\n\n### Conclusion\nI'm excited to see where the future of front-end development goes.  I'm excited to see that great strides are being made and I am happy to be at the front of the wave.  The community is starting to get excited too.  Here in Ann Arbor, we will be kicking off a JavaScript user group very soon which will give us a place to discuss these technologies and approaches.  I look forward to chatting it up!\n\n### On a personal note\nThis is my last blog post written for SRT Solutions.  I am moving on to something new.  More on that soon.","slug":"software/2013/04/17/there-and-back-again-thoughts-on-spas.html","published":1,"date":"2013-04-17T04:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9il006j6eulq5dwdtog"},{"title":"Angular Directives: Demystified","id":"447","date":"2014-01-16T06:06:11.000Z","_content":"\nAt [Codemash](http://codemash.org/) this year, I presented \"Angular Directives: Demystified\".  I expect to record this session soon, but in the meantime, here are the [slides](http://directivesdemystified.herokuapp.com/) and the [code](https://github.com/BrianGenisio/directives):","source":"_posts/2014-01-16-angular-directives-demystified-1.md","raw":"---\ntitle: 'Angular Directives: Demystified'\nid: 447\ncategories:\n  - Uncategorized\ndate: 2014-01-16 01:06:11\ntags:\n---\n\nAt [Codemash](http://codemash.org/) this year, I presented \"Angular Directives: Demystified\".  I expect to record this session soon, but in the meantime, here are the [slides](http://directivesdemystified.herokuapp.com/) and the [code](https://github.com/BrianGenisio/directives):","slug":"angular-directives-demystified-1","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9im006m6eulmpxn4ltx"},{"layout":"post","title":"Angular Directives Demystified","description":"Code and Slides from Codemash Presentation","_content":"\nAt [Codemash](http://codemash.org) this year, I presented “Angular Directives: Demystified”. I expect to record this session soon, but in the meantime, here are the [slides](http://directivesdemystified.herokuapp.com/#/slides/0) and the [code](https://github.com/BrianGenisio/directives).","source":"_posts/2014-01-16-angular-directives-demystified.md","raw":"---\nlayout: post\ntitle: \"Angular Directives Demystified\"\ndescription: \"Code and Slides from Codemash Presentation\"\ncategory: Software\ntags: [Angular, Directives]\npermalink: software/2014/01/16/angular-directives-demystified.html\n---\n\nAt [Codemash](http://codemash.org) this year, I presented “Angular Directives: Demystified”. I expect to record this session soon, but in the meantime, here are the [slides](http://directivesdemystified.herokuapp.com/#/slides/0) and the [code](https://github.com/BrianGenisio/directives).","slug":"software/2014/01/16/angular-directives-demystified.html","published":1,"date":"2014-01-16T05:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9in006o6eul3b4vjd4k"},{"layout":"post","title":"Calling Actions in Directives","description":"Techniques for executing actions on directives","_content":"\nThe other day, a coleague asked me what the best way is to call an action on a directive.  We know that directives can call back to the parent scope, but with isolated scopes, you have no way to call into a directive to execute an action.  This type of thing is pretty rare in Angular.  Usually, our directives respond to changes in data or state which an be based off of the built-in binding capabilities.  Sometimes, however, we need to call actions on a directive.  A video player directive, for example, can benefit from actions such as `video.play()` and `video.pause()`.  \n\nSome of the things to consider:\n\n * When you have multiple instances, how do you tell them all to act?\n * When you have multiple instances, how do you tell only one to act?\n * How would multiple copies inside of an ng-repeat work?\n * We might want to avoid tight coupling (do we always?)\n\nSo I thought about it more, and I have three possible answers to this question (there are more, but these feel most natural).  I am open to thoughts.  Is there a better way that I am missing?  I'm basing some of this off of what other widget frameworks do.  Take WinForms/WPF/Silverlight/Flex, for instance.  In those worlds, the controls (directives) expose methods.  The caller gives it a name `<widget name=\"foo\">` and the framework creates variables for you to call: `foo.bar()`.  Convenient, but Angular doesn't give us this out of the box.  What are some approaches to come close to that?\n\n### Setup\nI am assuming a directive called \"arm\" which can be composed to create a \"puppet\".  A \"puppeteer\" wants to control the arms of the puppets.  Each arm has an action called `function wave(){ alert('wave'); }`  All of the code for these examples can be found [here](http://codepen.io/BrianGenisio/pen/ituKv).\n\n### Events\nThe most obvious solution mkhere is to use events.  Events are nice because they are built in.  Events are also a bit ugly, however, because they broadcast.  We can mitigate this by namespacing our events.  The caller can call `$broadcast('arm:wave')` and the directive can hook that event: `$scope.$on('arm:wave', wave)`.\n\nThis works well except that in our current implementation, we can't send a \"wave\" event to a specific directive.  If we borrow from other frameworks, we can just give the arm an `id` like this: `<arm id=\"left\"></arm>`.  Now, the puppeteer can call it: `$broadcast('arm: wave', 'left')`.  The directive's code gets a bit more complex but not too bad.  It starts by binding id `scope: { id: '@' }` and then the event handler does this\n\n```javascript\n$scope.$on('arm:wave', function(e, id) {\n    if(id === undefined || $scope.id === id) {\n        wave();\n    }\n});\n```\n\nThis works well.  You can broadcast to all of them by ommiting the id, or you can call one of them by using the id.  How might you do this in an `ng-repeat`?\n\n```html\n<arm ng-repeat=\"arm in arms\" id=\"arm-{{ '{{arm.id' }}}}\"></arm>\n```\n\nIndividual calls would become `$broadcast('arm:wave', 'arm-' + arm.id)`\n\n### Commands\nBorrowing from other frameworks, this example invokes the \"command\" pattern.  It lets the directive define some commands that the puppeteer can call.  The directive would define a binding: `scope: { commands: '=?' }`.  The directive would then set the commands object: `$scope.commands = { wave: wave }`.  \n\nThe puppeteer can now hook up the command: `<arm commands=\"left\"></arm>` and use it: `left.wave();`\n\nThis approach is arguably cleaner, but it introduces a new concept that isn't native to Angular.  How does it scale to `ng-repeat`?\n\n```html\n<arm ng-repeat=\"arm in arms\" commands=\"armControls[arm.i]\">\n```\n\nBroadcast would become: \n\n```js\narmControls.forEach(function(arm) { arm.wave(); });\n```\n\nIndividual calls would become: `armControls[arm.id].wave()`\n\n### Controller Expose\nOk, so **events** are a bit chatty and more code than we want to copy everytime.  **Commands** are less code and less chatty, but they aren't native.  It turns out that Angular already has a way to communicate via directives (directive-to-directive) by assigning functions to the controller itself.  Like this: `this.wave = wave;`.  But the puppeteer doesn't have access to the directive's controller.  \n\nWe can expose it!  Create a binding in the scope: `scope: { controller: '=?' }`.  Then, in the controller, you can just assign it: `$scope.controller = this;`.\n\nCalling it is very similar to **commands**:\n\n```html\n<arm controller=\"left\">\n```\n\nAccess to the actions and `ng-repeat` is exactly the same as the **commands** option, but the way you wire it up is more Angular-like.  With **commands**, you expose only what you want, but you need to explicitly expose everything.  With **controller**, you only do it once, and you don't have to explicitly wire up the action, but you now get access to everything.\n\n### Conclusion\nIn the end, I prefer the **events** mechanism if I am looking for a decoupled approach but a **controller** approach if I am looking for something a bit more coupled. I am soliciting feedback from the community since I know they are likely to have opinions.  Again, you can play with all three approaches [here](http://codepen.io/BrianGenisio/pen/ituKv).  Thoughts?\n","source":"_posts/2014-03-05-calling-actions-in-directives.md","raw":"---\nlayout: post\ntitle: \"Calling Actions in Directives\"\ndescription: \"Techniques for executing actions on directives\"\ncategory: Software\ntags: [Angular, Directives]\npermalink: software/2014/03/05/calling-actions-in-directives.html\n---\n\nThe other day, a coleague asked me what the best way is to call an action on a directive.  We know that directives can call back to the parent scope, but with isolated scopes, you have no way to call into a directive to execute an action.  This type of thing is pretty rare in Angular.  Usually, our directives respond to changes in data or state which an be based off of the built-in binding capabilities.  Sometimes, however, we need to call actions on a directive.  A video player directive, for example, can benefit from actions such as `video.play()` and `video.pause()`.  \n\nSome of the things to consider:\n\n * When you have multiple instances, how do you tell them all to act?\n * When you have multiple instances, how do you tell only one to act?\n * How would multiple copies inside of an ng-repeat work?\n * We might want to avoid tight coupling (do we always?)\n\nSo I thought about it more, and I have three possible answers to this question (there are more, but these feel most natural).  I am open to thoughts.  Is there a better way that I am missing?  I'm basing some of this off of what other widget frameworks do.  Take WinForms/WPF/Silverlight/Flex, for instance.  In those worlds, the controls (directives) expose methods.  The caller gives it a name `<widget name=\"foo\">` and the framework creates variables for you to call: `foo.bar()`.  Convenient, but Angular doesn't give us this out of the box.  What are some approaches to come close to that?\n\n### Setup\nI am assuming a directive called \"arm\" which can be composed to create a \"puppet\".  A \"puppeteer\" wants to control the arms of the puppets.  Each arm has an action called `function wave(){ alert('wave'); }`  All of the code for these examples can be found [here](http://codepen.io/BrianGenisio/pen/ituKv).\n\n### Events\nThe most obvious solution mkhere is to use events.  Events are nice because they are built in.  Events are also a bit ugly, however, because they broadcast.  We can mitigate this by namespacing our events.  The caller can call `$broadcast('arm:wave')` and the directive can hook that event: `$scope.$on('arm:wave', wave)`.\n\nThis works well except that in our current implementation, we can't send a \"wave\" event to a specific directive.  If we borrow from other frameworks, we can just give the arm an `id` like this: `<arm id=\"left\"></arm>`.  Now, the puppeteer can call it: `$broadcast('arm: wave', 'left')`.  The directive's code gets a bit more complex but not too bad.  It starts by binding id `scope: { id: '@' }` and then the event handler does this\n\n```javascript\n$scope.$on('arm:wave', function(e, id) {\n    if(id === undefined || $scope.id === id) {\n        wave();\n    }\n});\n```\n\nThis works well.  You can broadcast to all of them by ommiting the id, or you can call one of them by using the id.  How might you do this in an `ng-repeat`?\n\n```html\n<arm ng-repeat=\"arm in arms\" id=\"arm-{{ '{{arm.id' }}}}\"></arm>\n```\n\nIndividual calls would become `$broadcast('arm:wave', 'arm-' + arm.id)`\n\n### Commands\nBorrowing from other frameworks, this example invokes the \"command\" pattern.  It lets the directive define some commands that the puppeteer can call.  The directive would define a binding: `scope: { commands: '=?' }`.  The directive would then set the commands object: `$scope.commands = { wave: wave }`.  \n\nThe puppeteer can now hook up the command: `<arm commands=\"left\"></arm>` and use it: `left.wave();`\n\nThis approach is arguably cleaner, but it introduces a new concept that isn't native to Angular.  How does it scale to `ng-repeat`?\n\n```html\n<arm ng-repeat=\"arm in arms\" commands=\"armControls[arm.i]\">\n```\n\nBroadcast would become: \n\n```js\narmControls.forEach(function(arm) { arm.wave(); });\n```\n\nIndividual calls would become: `armControls[arm.id].wave()`\n\n### Controller Expose\nOk, so **events** are a bit chatty and more code than we want to copy everytime.  **Commands** are less code and less chatty, but they aren't native.  It turns out that Angular already has a way to communicate via directives (directive-to-directive) by assigning functions to the controller itself.  Like this: `this.wave = wave;`.  But the puppeteer doesn't have access to the directive's controller.  \n\nWe can expose it!  Create a binding in the scope: `scope: { controller: '=?' }`.  Then, in the controller, you can just assign it: `$scope.controller = this;`.\n\nCalling it is very similar to **commands**:\n\n```html\n<arm controller=\"left\">\n```\n\nAccess to the actions and `ng-repeat` is exactly the same as the **commands** option, but the way you wire it up is more Angular-like.  With **commands**, you expose only what you want, but you need to explicitly expose everything.  With **controller**, you only do it once, and you don't have to explicitly wire up the action, but you now get access to everything.\n\n### Conclusion\nIn the end, I prefer the **events** mechanism if I am looking for a decoupled approach but a **controller** approach if I am looking for something a bit more coupled. I am soliciting feedback from the community since I know they are likely to have opinions.  Again, you can play with all three approaches [here](http://codepen.io/BrianGenisio/pen/ituKv).  Thoughts?\n","slug":"software/2014/03/05/calling-actions-in-directives.html","published":1,"date":"2014-03-05T05:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9ip006s6eulmez2fd15"},{"layout":"post","title":"Rise of the NodeBots","description":"Creating NodeBots for a Hackathon","_content":"\nEvery 8 weeks at [our company](http://letsfixhealthcare.com), we take two days off to hack on something new.  It is a chance to try new ideas, learn new technologies, or exercise our brain in ways we don't tend to do in our everyday roles.  These \"Hackathons\" are fully supported by the owner of our company as he believes these periodic shifting of gears are beneficial to our creativity and to our product portfolio.\n\nWe don't always produce something useful.  Sometimes we learn that a given technology or approach is not for us.  Sometimes, however, we take what we learn and apply the ideas directly to our product.  Dozens of features and even full products have their roots in our \"Hackathons\".  They have proven to be exceptionally beneficial for the culture of our workplace.\n\n### Trying Something New -- NodeBots\n![Nodebot Army](/images/nodebot-army.JPG)\n\nAt our next Hackathon, we are organizing an event: \"Battle of the NodeBots\".  Approximately 20 of us will be building robots that will fight in a ring for supremacy.  Everyone will be given the same base kit.  If any of us build the kit like the reference bot, it is very unlikely we will win -- those with beneficial innovations are likely to have the advantage.\n\nInnovations will come in one of three forms:\n\n- **Software:** Pre-programmed maneuvers, articulated control, sensing systems, etc will help the bot gain an edge in the \"brains\" department.  Most people will be using Node and [Jonhhy-Five](https://github.com/rwaldron/johnny-five) to program their bots, though nothing is stopping anyone from writing C code that runs on the metal.\n- **Electronics:** Extra servos, motors, controllers, or sensors will help the bot gain an edge in the \"motion and sensing\" department. This is where most of us will be learning the most.  We are software developers, not electronics engineers!  We will have a library of electronics components to pull from.\n- **Mechanical:** Wheel traction, caster location, weight, size, articulated parts, etc will gain an edge in the \"physical\" department.  We will have a library of building supplies to pull from.\n\n### The Kit\n![Nodebot Army](/images/nodebot-kit.JPG)\n\nInspired by the [SumoBot Jr.](http://sumobotkit.com/) and the [SimpleBot](https://github.com/nodebotsau/SimpleBot), I was able to put together a kit that came in around $45 per bag.  This is the kit we that everyone will get:\n\n- (1) [SainSmart Uno Arduino Clone](http://www.sainsmart.com/sainsmart-uno-r3-atmega328-au-development-board-compatible-with-arduino-uno-r3.html)\n- 5mm Wood Platform -- (1) 3\" x 6.75\" panel and (2) 2.5\" wheels\n- (2) Parallax [Continuous Rotation Servos](http://www.parallax.com/product/900-00008)\n- (1) [5/8\" Ball Caster](http://www.amazon.com/TruePower-Roller-Ball-Transfer-Bearings/dp/B009KAQVWC/ref=sr_1_4)\n- (1) [Small Breadboard](http://www.amazon.com/SYB-170-Color-Board-Small-Bread/dp/B00ARUF2JM/ref=sr_1_2)\n- (6) [Solderless Breadboard Wires](http://www.amazon.com/Wosang-Solderless-Flexible-Breadboard-Jumper/dp/B005TZJ0AM/ref=pd_bxgy_e_img_y)\n- (2) [3-pin Headers](http://www.amazon.com/5pcs-Angle-Single-Header-Strip/dp/B0079SK5MO/ref=sr_1_4)\n- (1) 10' USB Cable (A to B)\n- (1) 9v Battery\n- (1) 9v to 2.1mm Battery Clip\n- (4) Zipties\n- (2) 1\" Double-Stick Tape\n- (6) #6x3/8\" Self-Drilling Screws\n\nHere is the bot fully assembled:\n![Nodebot Army](/images/nodebot-assembled.JPG)\n\n### The Lab\nIn order to enable everyone to be creative, we will have a stocked lab:\n- Electronics (Resistors, Capacitors, Diodes, Transistors, Wires, Headers, etc)\n- Displays (LEDs, LED Arrays, 8-Segments, Tri-color LEDs, LCDs, etc)\n- Locomotion (Servos, Motors, Gears, Propellers, etc)\n- Sensors (Light, Proximity, Temperature, Water, etc)\n- Control (Switches, Joysticks, Keypads, Potentiometers)\n- Building (Soldering Iron, Hot Glue Gun, Drills, Saws, Voltmeters, Screw Drivers, Pliers, etc)\n- Crafts (Wood, Popsicle Sticks, Dowel Rods, Wire, Flashing, Screws, etc)\n\n### The Setup\nWe are going to use [Jonhhy-Five](https://github.com/rwaldron/johnny-five) to control our bots.  This mechanism uses serial (USB) communications to talk to our Arduino via the [Firmata](http://firmata.org/wiki/Main_Page) protocol.  This will require everyone to install [StandardFirmata](https://github.com/firmata/arduino/blob/master/examples/StandardFirmata/StandardFirmata.ino) on the board.  We will have a couple of these [Bluetooth to Serial adapters](http://www.amazon.com/JY-MCU-Arduino-Bluetooth-Wireless-Serial/dp/B009DZQ4MG/ref=sr_1_1) available if anyone feels like spending their valuable time [getting it working ](https://github.com/rwaldron/johnny-five/wiki/JY-MCU-Bluetooth-Serial-Port-Module-Notes).\n\n### More to Come!\nI plan to document more about this event as I go.  We'll see how it goes.  I'll be [tweeting ](http://twitter.com/BrianGenisio) photos and recording video of the battles.  Stay tuned!","source":"_posts/2014-08-23-rise-of-the-nodebots.md","raw":"---\nlayout: post\ntitle: \"Rise of the NodeBots\"\ndescription: \"Creating NodeBots for a Hackathon\"\ncategory: Software\ntags: [NodeBots, Arduino, Johnny-Five]\npermalink: software/2014/08/23/rise-of-the-nodebots.html\n---\n\nEvery 8 weeks at [our company](http://letsfixhealthcare.com), we take two days off to hack on something new.  It is a chance to try new ideas, learn new technologies, or exercise our brain in ways we don't tend to do in our everyday roles.  These \"Hackathons\" are fully supported by the owner of our company as he believes these periodic shifting of gears are beneficial to our creativity and to our product portfolio.\n\nWe don't always produce something useful.  Sometimes we learn that a given technology or approach is not for us.  Sometimes, however, we take what we learn and apply the ideas directly to our product.  Dozens of features and even full products have their roots in our \"Hackathons\".  They have proven to be exceptionally beneficial for the culture of our workplace.\n\n### Trying Something New -- NodeBots\n![Nodebot Army](/images/nodebot-army.JPG)\n\nAt our next Hackathon, we are organizing an event: \"Battle of the NodeBots\".  Approximately 20 of us will be building robots that will fight in a ring for supremacy.  Everyone will be given the same base kit.  If any of us build the kit like the reference bot, it is very unlikely we will win -- those with beneficial innovations are likely to have the advantage.\n\nInnovations will come in one of three forms:\n\n- **Software:** Pre-programmed maneuvers, articulated control, sensing systems, etc will help the bot gain an edge in the \"brains\" department.  Most people will be using Node and [Jonhhy-Five](https://github.com/rwaldron/johnny-five) to program their bots, though nothing is stopping anyone from writing C code that runs on the metal.\n- **Electronics:** Extra servos, motors, controllers, or sensors will help the bot gain an edge in the \"motion and sensing\" department. This is where most of us will be learning the most.  We are software developers, not electronics engineers!  We will have a library of electronics components to pull from.\n- **Mechanical:** Wheel traction, caster location, weight, size, articulated parts, etc will gain an edge in the \"physical\" department.  We will have a library of building supplies to pull from.\n\n### The Kit\n![Nodebot Army](/images/nodebot-kit.JPG)\n\nInspired by the [SumoBot Jr.](http://sumobotkit.com/) and the [SimpleBot](https://github.com/nodebotsau/SimpleBot), I was able to put together a kit that came in around $45 per bag.  This is the kit we that everyone will get:\n\n- (1) [SainSmart Uno Arduino Clone](http://www.sainsmart.com/sainsmart-uno-r3-atmega328-au-development-board-compatible-with-arduino-uno-r3.html)\n- 5mm Wood Platform -- (1) 3\" x 6.75\" panel and (2) 2.5\" wheels\n- (2) Parallax [Continuous Rotation Servos](http://www.parallax.com/product/900-00008)\n- (1) [5/8\" Ball Caster](http://www.amazon.com/TruePower-Roller-Ball-Transfer-Bearings/dp/B009KAQVWC/ref=sr_1_4)\n- (1) [Small Breadboard](http://www.amazon.com/SYB-170-Color-Board-Small-Bread/dp/B00ARUF2JM/ref=sr_1_2)\n- (6) [Solderless Breadboard Wires](http://www.amazon.com/Wosang-Solderless-Flexible-Breadboard-Jumper/dp/B005TZJ0AM/ref=pd_bxgy_e_img_y)\n- (2) [3-pin Headers](http://www.amazon.com/5pcs-Angle-Single-Header-Strip/dp/B0079SK5MO/ref=sr_1_4)\n- (1) 10' USB Cable (A to B)\n- (1) 9v Battery\n- (1) 9v to 2.1mm Battery Clip\n- (4) Zipties\n- (2) 1\" Double-Stick Tape\n- (6) #6x3/8\" Self-Drilling Screws\n\nHere is the bot fully assembled:\n![Nodebot Army](/images/nodebot-assembled.JPG)\n\n### The Lab\nIn order to enable everyone to be creative, we will have a stocked lab:\n- Electronics (Resistors, Capacitors, Diodes, Transistors, Wires, Headers, etc)\n- Displays (LEDs, LED Arrays, 8-Segments, Tri-color LEDs, LCDs, etc)\n- Locomotion (Servos, Motors, Gears, Propellers, etc)\n- Sensors (Light, Proximity, Temperature, Water, etc)\n- Control (Switches, Joysticks, Keypads, Potentiometers)\n- Building (Soldering Iron, Hot Glue Gun, Drills, Saws, Voltmeters, Screw Drivers, Pliers, etc)\n- Crafts (Wood, Popsicle Sticks, Dowel Rods, Wire, Flashing, Screws, etc)\n\n### The Setup\nWe are going to use [Jonhhy-Five](https://github.com/rwaldron/johnny-five) to control our bots.  This mechanism uses serial (USB) communications to talk to our Arduino via the [Firmata](http://firmata.org/wiki/Main_Page) protocol.  This will require everyone to install [StandardFirmata](https://github.com/firmata/arduino/blob/master/examples/StandardFirmata/StandardFirmata.ino) on the board.  We will have a couple of these [Bluetooth to Serial adapters](http://www.amazon.com/JY-MCU-Arduino-Bluetooth-Wireless-Serial/dp/B009DZQ4MG/ref=sr_1_1) available if anyone feels like spending their valuable time [getting it working ](https://github.com/rwaldron/johnny-five/wiki/JY-MCU-Bluetooth-Serial-Port-Module-Notes).\n\n### More to Come!\nI plan to document more about this event as I go.  We'll see how it goes.  I'll be [tweeting ](http://twitter.com/BrianGenisio) photos and recording video of the battles.  Stay tuned!","slug":"software/2014/08/23/rise-of-the-nodebots.html","published":1,"date":"2014-08-23T04:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9iq006v6eul6kgkn78p"},{"layout":"post","title":"Bootstrapping your Arduino with Firmata and Johnny-Five","description":"Creating NodeBots for a Hackathon","_content":"\nHere is a little screencast I put together to get all the software you need to get started with your NodeBot.  The instructions are exactly the same for Windows. Unless, of course, you want to [use Visual Studio](/software/2014/08/25/using-visual-studio-to-program-your-nodebot.html).  \n\n- [Arduino IDE](http://arduino.cc/en/Main/Software)\n- [Node.js](http://nodejs.org)\n- [Johnny-Five](https://github.com/rwaldron/johnny-five)   \n\n<iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/j-Xvb386Dr0\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n\n","source":"_posts/2014-08-25-bootstrapping-your-arduino-with-firmata-and-johnny-five.md","raw":"---\nlayout: post\ntitle: \"Bootstrapping your Arduino with Firmata and Johnny-Five\"\ndescription: \"Creating NodeBots for a Hackathon\"\ncategory: Software\ntags: [NodeBots, Arduino, Johnny-Five]\npermalink: software/2014/08/25/bootstrapping-your-arduino-with-firmata-and-johnny-five.html\n---\n\nHere is a little screencast I put together to get all the software you need to get started with your NodeBot.  The instructions are exactly the same for Windows. Unless, of course, you want to [use Visual Studio](/software/2014/08/25/using-visual-studio-to-program-your-nodebot.html).  \n\n- [Arduino IDE](http://arduino.cc/en/Main/Software)\n- [Node.js](http://nodejs.org)\n- [Johnny-Five](https://github.com/rwaldron/johnny-five)   \n\n<iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/j-Xvb386Dr0\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n\n","slug":"software/2014/08/25/bootstrapping-your-arduino-with-firmata-and-johnny-five.html","published":1,"date":"2014-08-25T04:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9is006z6eulj9renaie"},{"layout":"post","title":"Building Your NodeBot","description":"How to build the reference NodeBot","_content":"\nFor our [\"Battle of the NodeBots\" Hackathon project](/software/2014/08/23/rise-of-the-nodebots.html), we will be building a bot to compete against other bots.  We have a kit which includes the following components.  \n\n- (1) [SainSmart Uno Arduino Clone](http://www.sainsmart.com/sainsmart-uno-r3-atmega328-au-development-board-compatible-with-arduino-uno-r3.html)\n- 5mm Wood Platform -- (1) 3\" x 6.75\" panel and (2) 2.5\" wheels\n- (2) Parallax [Continuous Rotation Servos](http://www.parallax.com/product/900-00008)\n- (1) [5/8\" Ball Caster](http://www.amazon.com/TruePower-Roller-Ball-Transfer-Bearings/dp/B009KAQVWC/ref=sr_1_4)\n- (1) [Small Breadboard](http://www.amazon.com/SYB-170-Color-Board-Small-Bread/dp/B00ARUF2JM/ref=sr_1_2)\n- (6) [Solderless Breadboard Wires](http://www.amazon.com/Wosang-Solderless-Flexible-Breadboard-Jumper/dp/B005TZJ0AM/ref=pd_bxgy_e_img_y)\n- (2) [3-pin Headers](http://www.amazon.com/5pcs-Angle-Single-Header-Strip/dp/B0079SK5MO/ref=sr_1_4)\n- (1) 10' USB Cable (A to B)\n- (1) 9v Battery\n- (1) 9v to 2.1mm Battery Clip\n- (4) Zipties\n- (2) 1\" Double-Stick Tape\n- (6) #6x3/8\" Self-Drilling Screws\n\nYou are encouraged to build your bot however you want, but this is how you can build it without any modifications from the original design.\n\n### Lay out your parts\nYou want to get a feel for where everything will go.  Lay your major components out on the board and rough-in where you think you'd like them to go.\n![Rough-out the parts](/images/nodebot-assemble/nodebot-rough-out.JPG)\n\n### Attach your wheels to your servos\nThe easiest way to do this is to remove the servo horn and attach the horn to the wheels using the self-drilling screws.  The holes in the servo horn are smaller than the screws but these things make quick work of the plastic and go right through to the wood.  Just make sure they are centered. Reattach the horns when you are done.\n![Attach the wheels to the servo horns](/images/nodebot-assemble/nodebot-attach-wheels-to-servo.JPG)\n\n### Attach the servos to your chassis\nYou can do this however you want.  A quick-and-dirty approach is to use double-sided tape.  I prefer zip-ties.  Figure out where you want the servos to sit and mark it on the board.  Use a drill to punch a hole through the wood.  Attach the servos to the wood using zip-ties and snip off the excess zip-tie.\n\n![Mark your servo location](/images/nodebot-assemble/nodebot-mark-servo-location.JPG)\n![Attach the servos with zip-ties](/images/nodebot-assemble/nodebot-attach-servos.JPG)\n\n### Attach the caster wheel to the bottom of the chassis\nThe self-drilling screws are really useful for this.\n![Attach the front caster wheel](/images/nodebot-assemble/nodebot-attach-caster2.JPG)\n\n### Attach the Arduino and Breadboard\nAffix the Arduino using double-stick tape.  Affix the breadboard using the attached mounting tape.\n![Affix the boards](/images/nodebot-assemble/nodebot-attach-boards.JPG)\n\n### Mount the battery\nUsing double-stick tape, affix the battery to the bot.  Connect it to the Arduino using the 9v clip.\n![Affix the battery](/images/nodebot-assemble/nodebot-attach-battery.JPG)\n\n### Power the servos from the board\nYou are not likely to keep the servos here permanently, but this is a good starting point.  Pins 9 and 10 support PWM signals, which are best for servos.  You can connect them to the SVG pin headers for now.  The white leads are the \"signal\" for the SVG pins.\n\n![Power the servos](/images/nodebot-assemble/nodebot-plug-servos.JPG)\n\nYour servos may start spinning now.  If that happens, you can trim them using the screws on the back of the servos.  You may need to do this again once you have hooked your system up to the software.\n\n![Trim the servos](/images/nodebot-assemble/nodebot-calibrate.JPG)\n\n### Start programming your bot!\n\nNow you have a working bot.  You can plug your USB cable into the board and go to town.  If you haven't already [gotten yourself bootstrapped](/software/2014/08/25/bootstrapping-your-arduino-with-firmata-and-johnny-five.html) ([or with Visual Studio](/software/2014/08/25/using-visual-studio-to-program-your-nodebot.html)), now is a good time.\n\nTake a look at the [servo API](https://github.com/rwaldron/johnny-five/wiki/Servo) in Johnny-Five to get you started.  Here is a [simple example](https://github.com/rwaldron/johnny-five/blob/master/docs/servo-continuous.md) that will rotate your 10-pin servo clockwise.\n\n![Start Programming](/images/nodebot-assemble/nodebot-program-bot.JPG)\n\n\n\n\n","source":"_posts/2014-08-25-building-your-nodebot.md","raw":"---\nlayout: post\ntitle: \"Building Your NodeBot\"\ndescription: \"How to build the reference NodeBot\"\ncategory: Software\ntags: [NodeBots, Arduino, Johnny-Five]\npermalink: software/2014/08/25/building-your-nodebot.html\n---\n\nFor our [\"Battle of the NodeBots\" Hackathon project](/software/2014/08/23/rise-of-the-nodebots.html), we will be building a bot to compete against other bots.  We have a kit which includes the following components.  \n\n- (1) [SainSmart Uno Arduino Clone](http://www.sainsmart.com/sainsmart-uno-r3-atmega328-au-development-board-compatible-with-arduino-uno-r3.html)\n- 5mm Wood Platform -- (1) 3\" x 6.75\" panel and (2) 2.5\" wheels\n- (2) Parallax [Continuous Rotation Servos](http://www.parallax.com/product/900-00008)\n- (1) [5/8\" Ball Caster](http://www.amazon.com/TruePower-Roller-Ball-Transfer-Bearings/dp/B009KAQVWC/ref=sr_1_4)\n- (1) [Small Breadboard](http://www.amazon.com/SYB-170-Color-Board-Small-Bread/dp/B00ARUF2JM/ref=sr_1_2)\n- (6) [Solderless Breadboard Wires](http://www.amazon.com/Wosang-Solderless-Flexible-Breadboard-Jumper/dp/B005TZJ0AM/ref=pd_bxgy_e_img_y)\n- (2) [3-pin Headers](http://www.amazon.com/5pcs-Angle-Single-Header-Strip/dp/B0079SK5MO/ref=sr_1_4)\n- (1) 10' USB Cable (A to B)\n- (1) 9v Battery\n- (1) 9v to 2.1mm Battery Clip\n- (4) Zipties\n- (2) 1\" Double-Stick Tape\n- (6) #6x3/8\" Self-Drilling Screws\n\nYou are encouraged to build your bot however you want, but this is how you can build it without any modifications from the original design.\n\n### Lay out your parts\nYou want to get a feel for where everything will go.  Lay your major components out on the board and rough-in where you think you'd like them to go.\n![Rough-out the parts](/images/nodebot-assemble/nodebot-rough-out.JPG)\n\n### Attach your wheels to your servos\nThe easiest way to do this is to remove the servo horn and attach the horn to the wheels using the self-drilling screws.  The holes in the servo horn are smaller than the screws but these things make quick work of the plastic and go right through to the wood.  Just make sure they are centered. Reattach the horns when you are done.\n![Attach the wheels to the servo horns](/images/nodebot-assemble/nodebot-attach-wheels-to-servo.JPG)\n\n### Attach the servos to your chassis\nYou can do this however you want.  A quick-and-dirty approach is to use double-sided tape.  I prefer zip-ties.  Figure out where you want the servos to sit and mark it on the board.  Use a drill to punch a hole through the wood.  Attach the servos to the wood using zip-ties and snip off the excess zip-tie.\n\n![Mark your servo location](/images/nodebot-assemble/nodebot-mark-servo-location.JPG)\n![Attach the servos with zip-ties](/images/nodebot-assemble/nodebot-attach-servos.JPG)\n\n### Attach the caster wheel to the bottom of the chassis\nThe self-drilling screws are really useful for this.\n![Attach the front caster wheel](/images/nodebot-assemble/nodebot-attach-caster2.JPG)\n\n### Attach the Arduino and Breadboard\nAffix the Arduino using double-stick tape.  Affix the breadboard using the attached mounting tape.\n![Affix the boards](/images/nodebot-assemble/nodebot-attach-boards.JPG)\n\n### Mount the battery\nUsing double-stick tape, affix the battery to the bot.  Connect it to the Arduino using the 9v clip.\n![Affix the battery](/images/nodebot-assemble/nodebot-attach-battery.JPG)\n\n### Power the servos from the board\nYou are not likely to keep the servos here permanently, but this is a good starting point.  Pins 9 and 10 support PWM signals, which are best for servos.  You can connect them to the SVG pin headers for now.  The white leads are the \"signal\" for the SVG pins.\n\n![Power the servos](/images/nodebot-assemble/nodebot-plug-servos.JPG)\n\nYour servos may start spinning now.  If that happens, you can trim them using the screws on the back of the servos.  You may need to do this again once you have hooked your system up to the software.\n\n![Trim the servos](/images/nodebot-assemble/nodebot-calibrate.JPG)\n\n### Start programming your bot!\n\nNow you have a working bot.  You can plug your USB cable into the board and go to town.  If you haven't already [gotten yourself bootstrapped](/software/2014/08/25/bootstrapping-your-arduino-with-firmata-and-johnny-five.html) ([or with Visual Studio](/software/2014/08/25/using-visual-studio-to-program-your-nodebot.html)), now is a good time.\n\nTake a look at the [servo API](https://github.com/rwaldron/johnny-five/wiki/Servo) in Johnny-Five to get you started.  Here is a [simple example](https://github.com/rwaldron/johnny-five/blob/master/docs/servo-continuous.md) that will rotate your 10-pin servo clockwise.\n\n![Start Programming](/images/nodebot-assemble/nodebot-program-bot.JPG)\n\n\n\n\n","slug":"software/2014/08/25/building-your-nodebot.html","published":1,"date":"2014-08-25T04:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9iu00726eul4dpr28a0"},{"layout":"post","title":"Using Visual Studio to Program Your NodeBot","description":"Creating NodeBots for a Hackathon from Visual Studio","_content":"\nInstead of using the [command line to manage your NodeBot workflow](/software/2014/08/25/bootstrapping-your-arduino-with-firmata-and-johnny-five.html), you may want to use Visual Studio in Windows.  This is certainly possible, using the Node Tools for Visual Studio.  Here is a screencast showing how to do that!\n\n- [Arduino IDE](http://arduino.cc/en/Main/Software)\n- [Node Tools for VS](http://nodejstools.codeplex.com/)\n- [Johnny-Five](https://github.com/rwaldron/johnny-five)   \n\n<iframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/ndLw8J1Vmxg\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n\n","source":"_posts/2014-08-25-using-visual-studio-to-program-your-nodebot.md","raw":"---\nlayout: post\ntitle: \"Using Visual Studio to Program Your NodeBot\"\ndescription: \"Creating NodeBots for a Hackathon from Visual Studio\"\ncategory: Software\ntags: [NodeBots, Arduino, Johnny-Five, Visual Studio]\npermalink: software/2014/08/25/using-visual-studio-to-program-your-nodebot.html\n---\n\nInstead of using the [command line to manage your NodeBot workflow](/software/2014/08/25/bootstrapping-your-arduino-with-firmata-and-johnny-five.html), you may want to use Visual Studio in Windows.  This is certainly possible, using the Node Tools for Visual Studio.  Here is a screencast showing how to do that!\n\n- [Arduino IDE](http://arduino.cc/en/Main/Software)\n- [Node Tools for VS](http://nodejstools.codeplex.com/)\n- [Johnny-Five](https://github.com/rwaldron/johnny-five)   \n\n<iframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/ndLw8J1Vmxg\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n\n","slug":"software/2014/08/25/using-visual-studio-to-program-your-nodebot.html","published":1,"date":"2014-08-25T04:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9iv00766eul7z8kafjd"},{"title":"My Blog is moving","id":"452","date":"2014-09-03T22:26:01.000Z","_content":"\nI am in the process of moving my blog over to using [Jekyll with Github Pages](https://help.github.com/articles/using-jekyll-with-pages).  Eventually, as I move all of the content over to markdown, this site will point to the new site.  For the time being, all of my content is here at:\n\n## [BrianGenisio.com](http://BrianGenisio.com)\n\nThanks for reading!","source":"_posts/2014-09-03-my-blog-is-moving.md","raw":"---\ntitle: My Blog is moving\nid: 452\ncategories:\n  - Uncategorized\ndate: 2014-09-03 18:26:01\ntags:\n---\n\nI am in the process of moving my blog over to using [Jekyll with Github Pages](https://help.github.com/articles/using-jekyll-with-pages).  Eventually, as I move all of the content over to markdown, this site will point to the new site.  For the time being, all of my content is here at:\n\n## [BrianGenisio.com](http://BrianGenisio.com)\n\nThanks for reading!","slug":"my-blog-is-moving","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9ix00786eulv9jrpqjz"},{"layout":"post","title":"Our NodeBots Hackathon Summary","description":"A summary of the awesome Hackathon at CareEvolution","_content":"## Our NodeBots Hackathon\nI discussed the plans for our [\"Battle of the NodeBots\" Hackathon project](/software/2014/08/23/rise-of-the-nodebots.html)  a couple of weeks ago.  The outcome was much better than I had expected.  The creativity unleashed for that one day was enough to fuel us for months.  \n\nWe had offensive bots using spinning bashers, propellors, flippers, and quarter dumping.  We had agile bots, employing wireless communication and sophisticated control mechanisms.  We had defensive bots which used a 5 pound weight to increase mass.  We had a sabotage bot which created electromagnetic fields to disrupt their oponents' electronics.  We even had an \"Empirial Walker\" style robot which slowly approached its opponent with friction on its side.\n\nIn all, we had 16 people building 8 robots with Arduinos, Johnny-Five, wood, hot glue, and all sorts of random components.\n\nThe rules of the game were simple:\n\n0. Build your bot however you want, but use the two continuous servos as your primary drive mechanism\n0. The is a hexagon, approximately 4 feet wide on carpet\n0. You are given 3 1-minute rounds to knock your opponent completely out of the arena.  A successful KO will win the match and the bot moves on.\n0. If after 1 minute, a KO is not achieved, the bot with their Arduino closest to the center dot gets 1 point.\n0. If after 3 rounds, nobotty has achieved a KO, the bot with the most points wins a \"Technical KO\" and the bot moves on.\n\n## Here is a \"Highlights Video\"\n<iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/pmp_hCg6jGQ\" frameborder=\"0\" allowfullscreen></iframe>\n","source":"_posts/2014-09-13-nodebots-hackathon-summary.md","raw":"---\nlayout: post\ntitle: \"Our NodeBots Hackathon Summary\"\ndescription: \"A summary of the awesome Hackathon at CareEvolution\"\ncategory: Software\ntags: [NodeBots, Arduino, Johnny-Five]\npermalink: software/2014/09/13/nodebots-hackathon-summary.html\n---\n## Our NodeBots Hackathon\nI discussed the plans for our [\"Battle of the NodeBots\" Hackathon project](/software/2014/08/23/rise-of-the-nodebots.html)  a couple of weeks ago.  The outcome was much better than I had expected.  The creativity unleashed for that one day was enough to fuel us for months.  \n\nWe had offensive bots using spinning bashers, propellors, flippers, and quarter dumping.  We had agile bots, employing wireless communication and sophisticated control mechanisms.  We had defensive bots which used a 5 pound weight to increase mass.  We had a sabotage bot which created electromagnetic fields to disrupt their oponents' electronics.  We even had an \"Empirial Walker\" style robot which slowly approached its opponent with friction on its side.\n\nIn all, we had 16 people building 8 robots with Arduinos, Johnny-Five, wood, hot glue, and all sorts of random components.\n\nThe rules of the game were simple:\n\n0. Build your bot however you want, but use the two continuous servos as your primary drive mechanism\n0. The is a hexagon, approximately 4 feet wide on carpet\n0. You are given 3 1-minute rounds to knock your opponent completely out of the arena.  A successful KO will win the match and the bot moves on.\n0. If after 1 minute, a KO is not achieved, the bot with their Arduino closest to the center dot gets 1 point.\n0. If after 3 rounds, nobotty has achieved a KO, the bot with the most points wins a \"Technical KO\" and the bot moves on.\n\n## Here is a \"Highlights Video\"\n<iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/pmp_hCg6jGQ\" frameborder=\"0\" allowfullscreen></iframe>\n","slug":"software/2014/09/13/nodebots-hackathon-summary.html","published":1,"date":"2014-09-13T04:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9iy007b6eulm1lhmm4h"},{"layout":"post","title":"NodeBots at Codemash","description":"The awesome awesomeness that is NodeBots + CodeMash","_content":"\nAn epic thing happened last week.  The [CodeMash](http://codemash.org) 2015 session list was released.  There are some [AMAZING sessions](http://www.codemash.org/accepted-session-list/) lined up.  I can't wait to go. *Don't forget to [register](http://www.codemash.org/registration/)!*\n\n[![NodeBots at CodeMash](/images/nodebots.codemash.png)](http://twitter.com/nodebots_cm)\n\n## NodeBots at CodeMash\nOne particular session I am excited about is the [NodeBots](http://nodebots.io) pre-compiler.  [John Chapman](https://twitter.com/johnchapman) and [I](https://twitter.com/briangenisio) are working hard to put together an immersive hacking experience.  With over $5000 worth of Arduinos, servos, electronics, power sources, cables, wood, tools, and artsy-craftsy stuff (all donated by my employer, [CareEvolution](http://letsfixhealthcare.com)), you just need to supply the creativity.\n\nMore details will follow later (follow us on [Twitter](http://twitter.com/nodebots_cm)), but here are some simple details:\n\n0. The NodeBots pre-compiler will run BOTH Tuesday and Wednesday\n0. You will pick ONE of those days to attend\n0. You will need to pre-register in order to participate\n0. You will build a bot to compete in the \"Octogon Battle\" or \"Autonomous Maze\".\n0. If you don't want to compete in one of those things, you can hack and build however you want.\n\nAt one of our [recent hackathons](/software/2014/09/13/nodebots-hackathon-summary.html), we [beta-tested](/software/2014/08/23/rise-of-the-nodebots.html) the NodeBots event and it was really, really fun.  We even made a [highlights video](https://www.youtube.com/watch?v=pmp_hCg6jGQ)!\n\n![Hacking Nodebots](/images/nodebots-hacking.jpg)\n","source":"_posts/2014-10-04-codemash-nodebots-woot.md","raw":"---\nlayout: post\ntitle: \"NodeBots at Codemash\"\ndescription: \"The awesome awesomeness that is NodeBots + CodeMash\"\ncategory: Software\ntags: [NodeBots, Arduino, Johnny-Five, Codemash]\npermalink: software/2014/10/04/codemash-nodebots-woot.html\n---\n\nAn epic thing happened last week.  The [CodeMash](http://codemash.org) 2015 session list was released.  There are some [AMAZING sessions](http://www.codemash.org/accepted-session-list/) lined up.  I can't wait to go. *Don't forget to [register](http://www.codemash.org/registration/)!*\n\n[![NodeBots at CodeMash](/images/nodebots.codemash.png)](http://twitter.com/nodebots_cm)\n\n## NodeBots at CodeMash\nOne particular session I am excited about is the [NodeBots](http://nodebots.io) pre-compiler.  [John Chapman](https://twitter.com/johnchapman) and [I](https://twitter.com/briangenisio) are working hard to put together an immersive hacking experience.  With over $5000 worth of Arduinos, servos, electronics, power sources, cables, wood, tools, and artsy-craftsy stuff (all donated by my employer, [CareEvolution](http://letsfixhealthcare.com)), you just need to supply the creativity.\n\nMore details will follow later (follow us on [Twitter](http://twitter.com/nodebots_cm)), but here are some simple details:\n\n0. The NodeBots pre-compiler will run BOTH Tuesday and Wednesday\n0. You will pick ONE of those days to attend\n0. You will need to pre-register in order to participate\n0. You will build a bot to compete in the \"Octogon Battle\" or \"Autonomous Maze\".\n0. If you don't want to compete in one of those things, you can hack and build however you want.\n\nAt one of our [recent hackathons](/software/2014/09/13/nodebots-hackathon-summary.html), we [beta-tested](/software/2014/08/23/rise-of-the-nodebots.html) the NodeBots event and it was really, really fun.  We even made a [highlights video](https://www.youtube.com/watch?v=pmp_hCg6jGQ)!\n\n![Hacking Nodebots](/images/nodebots-hacking.jpg)\n","slug":"software/2014/10/04/codemash-nodebots-woot.html","published":1,"date":"2014-10-04T04:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9j1007e6eulpq9zbhle"},{"layout":"post","title":"LearnHarmony.org","description":"My project to help people learn ES6/ES7/Harmony","_content":"I've been working on a project lately for learning the next version of JavaScript.  It is called [LearnHarmony.org](http://learnharmony.org).  It allows for in-browser experimentation of next-generation JavaScript features.  I've created several micro-lessons on the features that are available and I will be adding more to come.\n\nThere are a couple of fun things regarding this:\n\n - The entire site is a static SPA, [built with ES6 features](https://github.com/BrianGenisio/learnharmony)\n - You can run ES6 features directly in the browser\n - I hijacked the console and display it on-screen to make play easier\n - This site was built with [Traceur](https://github.com/google/traceur-compiler) and the REPL window also uses Traceur.\n\nHave Fun!\n\n","source":"_posts/2014-10-23-learn-harmony.md","raw":"---\nlayout: post\ntitle: \"LearnHarmony.org\"\ndescription: \"My project to help people learn ES6/ES7/Harmony\"\ncategory: Software\ntags: [ES6, Harmony, JavaScript]\npermalink: software/2014/10/23/learn-harmony.html\n---\nI've been working on a project lately for learning the next version of JavaScript.  It is called [LearnHarmony.org](http://learnharmony.org).  It allows for in-browser experimentation of next-generation JavaScript features.  I've created several micro-lessons on the features that are available and I will be adding more to come.\n\nThere are a couple of fun things regarding this:\n\n - The entire site is a static SPA, [built with ES6 features](https://github.com/BrianGenisio/learnharmony)\n - You can run ES6 features directly in the browser\n - I hijacked the console and display it on-screen to make play easier\n - This site was built with [Traceur](https://github.com/google/traceur-compiler) and the REPL window also uses Traceur.\n\nHave Fun!\n\n","slug":"software/2014/10/23/learn-harmony.html","published":1,"date":"2014-10-23T04:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9j3007i6eulydwvy8zh"},{"layout":"post","title":"CodeMash NodeBots","description":"A recap of the NodeBots event","_content":"\n[We](http://LetsFixHealthcare.com) just got back from running the [NodeBots](http://nodebots.io) session [CodeMash](http://codemash.org) and I was blown away.  Not only did all of the bot builders exceed my expectations, my team rocked it as well.  We had an amazing event.  I've never seen so many nerds have as much fun as we did.  \n\n![NodeBots at CodeMash](/images/codemash15/codemash.nodebots.jpg)\n\nThe event was held over two days with an open house on the third.  Tuesday had about 70 attendees and Wednesday saw over 90.  During the open house, well over 100 people came and went.  It was like a bee hive of creation -- builders buzzing from station to station, picking up their bits and bringing them back to their cell.  \n\n![The Room](/images/codemash15/the-room.jpg)\n\nI can't come close to highlighting everything that happened those days, but I can showcase the stand-outs.\n\n## Battle Bots\nOne of the two events attendees participated in was the \"Battle Bots\" event.  The only build rule: the drive train had to be powered by the two continuous rotation servos provided to them in their kits.  Other than that, it was a bot-build free-for-all.  \n\n![Curb Feelerz](/images/codemash15/curb-feelerz.jpg)\n\nThe winner of the first day was [Julie Cameron](https://twitter.com/jewlofthelotus) and [Nate Dotz](https://twitter.com/nathandotz).  They built a scoop-style bot which transformed from a wedge to a bulldozer to a skid steer.  \"Curb Feelerz\" was agile and dangerous when it got its scoop underneath your bot.\n\n![Wheels of Death](/images/codemash15/wheels-of-death.jpg)\n\nBy the second day, the attendees upped their game after being tipped off from the day before. The winner of the second day was [Charlie Sears](https://twitter.com/CharlieSears) and [Alex Matsukevich](https://twitter.com/fusionmobile/).  They learned that traction was a key factor for victory so they embedded thumb tacks in the tires.  Along with a low profile, a curved body, and plenty of heft, \"WheelS of Death\" crushed everything in its path. \n\n<iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/H9AzpnXpcrU\" frameborder=\"0\" allowfullscreen></iframe>\n\nThese bots went head-to-head at the open house.  In the end, the spiked tires proved to be the advantage and \"WheelS of Death\" handily crushed \"Curb Feelerz\".\n\n## Line Racers\nMany of the pacifists in the group chose to avoid battle and hit the track.  Donned with a 6-sensor reflectance array, the line racers competed in time trials against a black-lined course.  There were several hairy turns and switchbacks they had to navigate, which proved difficult for some.  \n\n![Awesome Bot](/images/codemash15/awesome-bot.jpg)\n\nDay one produced the winner.  \"Awesome Bot\" was truly awesome with a 22 second finish without penalty.  [Andy Benz](https://twitter.com/andorbal) figured out that large Folgers-lid wheels had a huge advantage. The wheels needed some reinforcements and traction, but when that was done, \"Awesome Bot\" left the rest in the dust.\n\n<iframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/FdlE7aQxmAY\" frameborder=\"0\" allowfullscreen></iframe>\n\nThe second day was unable to show up the performance of \"Awesome Bot\", but it still gave a good show.  [Amber McKenzie](https://twitter.com/nlprunner/) and [Anthony Masi](https://twitter.com/snoopy_681/) figured out the wheel trick early on.  Instead of Folgers lids, they built their own wheels out of wood spokes, plastic rims, and tires made from cut-up rubber gloves.  \"Bob\" had so much traction that it was able to climb the walls and flip over!  In the end, they won the second day with a 25 second time trial.\n\n## Best in Show\n![Sherman](/images/codemash15/sherman.jpg)\n\nIf there was one bot which took the spirit of this event and ran with it, it would be \"Sherman\" by [Charlotte Chang](https://twitter.com/pushorpull) and [Christopher Greff](https://www.linkedin.com/profile/view?id=196107107).  They knew they wanted to use the tank treads, but they also knew that they needed to use the servos for power (which didn't fit in the tank chassis).  They found a gearbox, which also didn't fit in the chassis, and (literally) hacked it to bits to retro-fit the servos as power, and the tank wheels to the gearbox.  The result was pure hackery genius.  I LOVE this bot.\n\n![Sherman's Gears](/images/codemash15/sherman-gears.jpg)\n\n## Honorable Mention\n![Gears](/images/codemash15/gears.jpg)\n\nIt is also worth mentioning that someone brought a 3D printer to the hack lab.  We didn't know it was coming, but he gave access to anyone who wanted to use it.  Besides the owner, only one team took advantage of this tool.  [Jeanette Head](https://twitter.com/JeanetteHead17) and [Al Scott](https://twitter.com/aljscott/) had never 3D printed anything before, but that didn't stop them.  They found some gears on [Thingverse](http://www.thingiverse.com/) and geared up their servos for more power.  How awesome is that?  Here is a photo with them sporting their prizes (a [Johnny-Five](https://github.com/rwaldron/johnny-five) t-shirt, which everyone highlighted in this post also won, thanks to [Rick Waldron](https://twitter.com/rwaldron) and [Bocoup](https://twitter.com/bocoup))\n\n![Jeanette and Al](/images/codemash15/jeanette-al.jpg)\n\n## Thank You!\nThere are so many people to thank.  I am sure I will miss somone here, but here is a list of people that helped make this event awesome (in the order of interactions): [John Chapman](https://twitter.com/JohnChapman), [Raquel Vélez](https://twitter.com/rockbot), [Chris Williams](https://twitter.com/voodootikigod), [Rick Waldron](https://twitter.com/rwaldron), [Brian Prince](https://twitter.com/brianhprince), [Jason Follas](https://twitter.com/jfollas), [Rob Gillen](https://twitter.com/argodev), [Vik Kheterpal](https://www.linkedin.com/profile/view?id=10306994), [Jeff Yates](https://twitter.com/jefftunes), [Kyle Neumeier](https://twitter.com/kneumei), [Greg Weaver](https://twitter.com/sneezinglion), [Brandon Charnesky](https://www.linkedin.com/profile/view?id=187252581), [Brad Barnich](https://twitter.com/bbarnich), [Mike Ward](https://twitter.com/mikeward_aa), [Ravi Desai](https://twitter.com/Ravi_S_Desai), [The Kalahari Staff](http://www.kalahariresorts.com/ohio), [The CodeMash Staff](http://www.codemash.org/), [CareEvolution](http://LetsFixHealthcare.com), and (most importantly) my wife [Cara Genisio](https://twitter.com/CaraGenisio).\n","source":"_posts/2015-01-12-codemash-nodebots-recap.md","raw":"---\nlayout: post\ntitle: \"CodeMash NodeBots\"\ndescription: \"A recap of the NodeBots event\"\ncategory: Software\ntags: [NodeBots, CodeMash, Johnny-Five]\npermalink: software/2015/01/12/codemash-nodebots-recap.html\n---\n\n[We](http://LetsFixHealthcare.com) just got back from running the [NodeBots](http://nodebots.io) session [CodeMash](http://codemash.org) and I was blown away.  Not only did all of the bot builders exceed my expectations, my team rocked it as well.  We had an amazing event.  I've never seen so many nerds have as much fun as we did.  \n\n![NodeBots at CodeMash](/images/codemash15/codemash.nodebots.jpg)\n\nThe event was held over two days with an open house on the third.  Tuesday had about 70 attendees and Wednesday saw over 90.  During the open house, well over 100 people came and went.  It was like a bee hive of creation -- builders buzzing from station to station, picking up their bits and bringing them back to their cell.  \n\n![The Room](/images/codemash15/the-room.jpg)\n\nI can't come close to highlighting everything that happened those days, but I can showcase the stand-outs.\n\n## Battle Bots\nOne of the two events attendees participated in was the \"Battle Bots\" event.  The only build rule: the drive train had to be powered by the two continuous rotation servos provided to them in their kits.  Other than that, it was a bot-build free-for-all.  \n\n![Curb Feelerz](/images/codemash15/curb-feelerz.jpg)\n\nThe winner of the first day was [Julie Cameron](https://twitter.com/jewlofthelotus) and [Nate Dotz](https://twitter.com/nathandotz).  They built a scoop-style bot which transformed from a wedge to a bulldozer to a skid steer.  \"Curb Feelerz\" was agile and dangerous when it got its scoop underneath your bot.\n\n![Wheels of Death](/images/codemash15/wheels-of-death.jpg)\n\nBy the second day, the attendees upped their game after being tipped off from the day before. The winner of the second day was [Charlie Sears](https://twitter.com/CharlieSears) and [Alex Matsukevich](https://twitter.com/fusionmobile/).  They learned that traction was a key factor for victory so they embedded thumb tacks in the tires.  Along with a low profile, a curved body, and plenty of heft, \"WheelS of Death\" crushed everything in its path. \n\n<iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/H9AzpnXpcrU\" frameborder=\"0\" allowfullscreen></iframe>\n\nThese bots went head-to-head at the open house.  In the end, the spiked tires proved to be the advantage and \"WheelS of Death\" handily crushed \"Curb Feelerz\".\n\n## Line Racers\nMany of the pacifists in the group chose to avoid battle and hit the track.  Donned with a 6-sensor reflectance array, the line racers competed in time trials against a black-lined course.  There were several hairy turns and switchbacks they had to navigate, which proved difficult for some.  \n\n![Awesome Bot](/images/codemash15/awesome-bot.jpg)\n\nDay one produced the winner.  \"Awesome Bot\" was truly awesome with a 22 second finish without penalty.  [Andy Benz](https://twitter.com/andorbal) figured out that large Folgers-lid wheels had a huge advantage. The wheels needed some reinforcements and traction, but when that was done, \"Awesome Bot\" left the rest in the dust.\n\n<iframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/FdlE7aQxmAY\" frameborder=\"0\" allowfullscreen></iframe>\n\nThe second day was unable to show up the performance of \"Awesome Bot\", but it still gave a good show.  [Amber McKenzie](https://twitter.com/nlprunner/) and [Anthony Masi](https://twitter.com/snoopy_681/) figured out the wheel trick early on.  Instead of Folgers lids, they built their own wheels out of wood spokes, plastic rims, and tires made from cut-up rubber gloves.  \"Bob\" had so much traction that it was able to climb the walls and flip over!  In the end, they won the second day with a 25 second time trial.\n\n## Best in Show\n![Sherman](/images/codemash15/sherman.jpg)\n\nIf there was one bot which took the spirit of this event and ran with it, it would be \"Sherman\" by [Charlotte Chang](https://twitter.com/pushorpull) and [Christopher Greff](https://www.linkedin.com/profile/view?id=196107107).  They knew they wanted to use the tank treads, but they also knew that they needed to use the servos for power (which didn't fit in the tank chassis).  They found a gearbox, which also didn't fit in the chassis, and (literally) hacked it to bits to retro-fit the servos as power, and the tank wheels to the gearbox.  The result was pure hackery genius.  I LOVE this bot.\n\n![Sherman's Gears](/images/codemash15/sherman-gears.jpg)\n\n## Honorable Mention\n![Gears](/images/codemash15/gears.jpg)\n\nIt is also worth mentioning that someone brought a 3D printer to the hack lab.  We didn't know it was coming, but he gave access to anyone who wanted to use it.  Besides the owner, only one team took advantage of this tool.  [Jeanette Head](https://twitter.com/JeanetteHead17) and [Al Scott](https://twitter.com/aljscott/) had never 3D printed anything before, but that didn't stop them.  They found some gears on [Thingverse](http://www.thingiverse.com/) and geared up their servos for more power.  How awesome is that?  Here is a photo with them sporting their prizes (a [Johnny-Five](https://github.com/rwaldron/johnny-five) t-shirt, which everyone highlighted in this post also won, thanks to [Rick Waldron](https://twitter.com/rwaldron) and [Bocoup](https://twitter.com/bocoup))\n\n![Jeanette and Al](/images/codemash15/jeanette-al.jpg)\n\n## Thank You!\nThere are so many people to thank.  I am sure I will miss somone here, but here is a list of people that helped make this event awesome (in the order of interactions): [John Chapman](https://twitter.com/JohnChapman), [Raquel Vélez](https://twitter.com/rockbot), [Chris Williams](https://twitter.com/voodootikigod), [Rick Waldron](https://twitter.com/rwaldron), [Brian Prince](https://twitter.com/brianhprince), [Jason Follas](https://twitter.com/jfollas), [Rob Gillen](https://twitter.com/argodev), [Vik Kheterpal](https://www.linkedin.com/profile/view?id=10306994), [Jeff Yates](https://twitter.com/jefftunes), [Kyle Neumeier](https://twitter.com/kneumei), [Greg Weaver](https://twitter.com/sneezinglion), [Brandon Charnesky](https://www.linkedin.com/profile/view?id=187252581), [Brad Barnich](https://twitter.com/bbarnich), [Mike Ward](https://twitter.com/mikeward_aa), [Ravi Desai](https://twitter.com/Ravi_S_Desai), [The Kalahari Staff](http://www.kalahariresorts.com/ohio), [The CodeMash Staff](http://www.codemash.org/), [CareEvolution](http://LetsFixHealthcare.com), and (most importantly) my wife [Cara Genisio](https://twitter.com/CaraGenisio).\n","slug":"software/2015/01/12/codemash-nodebots-recap.html","published":1,"date":"2015-01-12T05:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9ks00ff6eulw1nyvmkx"},{"layout":"post","title":"Piece of Mind Temperature Monitor","description":"How I eased my mind in the bitter cold","_content":"\n![Siesta Key](/images/siesta_key.jpg)\n\nI just got home from 5-day vacation in [Siesta Key](http://www.drbeach.org/top10beaches.htm) where my family and I frolicked in the the slightly warmer climate than what we are used to in Ann Arbor Michigan.  The entire eastern half of the nation was under a [polar vortex](http://en.wikipedia.org/wiki/Polar_vortex) so our balmy Floridian host was much cooler than expected.  Back home, however, the temperature dropped as low as -28 degrees Fahrenheit (-33 degrees Celsius).\n\nThis wouldn't normally cause me any anxiety if it were not for my 22 year old furnace.  I couldn't help but worry that it would fail, causing my pipes to freeze followed by all sorts of damage.  I knew I wouldn't be comfortable leaving my home without feeling confident that my furnace was keeping up.\n\n## Spark Core + Thermistor\nI dove into my basement to scrounge for parts and I built myself an \"Internet of Things\" thing to monitor the temperature inside my home.  It was really easy and it only took me 30 minutes.  I had an unused [Spark Core](https://www.spark.io/) and a [Tinkerkit Thermistor](http://www.amazon.com/Arduino-TinkerKit-Thermistor-Module/dp/B00EIB48W8) lying around, so I used them.  Any thermistor would have worked, but that is the one I found in my lab.\n\n![Spark + Thermistor](/images/spark_temperature.jpg)\n\nI hooked up ground, power, and signal (to Analog 7) and got coding.  I found some conversion code for this Tinkerkit module on the [Johnny-Five](https://github.com/rwaldron/johnny-five) project, and I ported it over to C.  The Spark.io builder made it easy for me to send the following code to my Spark Core:\n\n![Spark + Thermistor Diagram](/images/spark_temperature_fritz.png)\n\n```c\n#include \"math.h\"\n\ndouble temperature = 0.0;\n\nconst double RESISTOR = 10000;\nconst double ADCRES = 4095;\nconst double BETA = 3950;\nconst double GINF = 120.6685;\nconst double KELVIN = 273.15;\n\nvoid setup() {\n    Spark.variable(\"temperature\", &temperature, DOUBLE);\n    pinMode(A7, INPUT);\n}\n\nvoid loop() {\n  int raw = analogRead(A7);\n  double rthermistor = RESISTOR * (ADCRES / raw - 1.0);\n  double tempC = BETA / (log(rthermistor * GINF));\n\n  temperature = tempC - KELVIN;\n  temperature = (temperature * 9.0) / 5.0 + 32.0; // to F\n}\n```\n\nThat was it.  From there, the \"temperature\" variable was exposed to the web.  The value was available from a simple URL: `https://api.spark.io/v1/devices/MY_DEVICE_ID/temperature?access_token=MY_ACCESS_TOKEN`\n\n```\n{\n  cmd: \"VarReturn\",\n  name: \"temperature\",\n  result: 67.39388212240802,\n  coreInfo: {\n    last_app: \"\",\n    last_heard: \"2015-02-21T01:59:44.665Z\",\n    connected: true,\n    deviceID: \"MY_DEVICE_ID\"\n  }\n}\n```\n\nCool (or warm?)!  But I don't really feel like reading JSON on my vacation.\n\n## CodePen to Host a Simple UI\nI didn't want to go through the hassle of creating a tiny site and publishing it just to read this value.  This is why I like [CodePen](http://codepen.io) and their ilk.  I can write up a quick little code snippet (note that I'm using ES6), and I'm good to go.\n\n```html\n<h1>The temperature at home is <span id=\"temperature\">...</span></h1>\n<button id=\"reload\" class=\"btn btn-primary\">Reload</button>\n```\n\n```js\nfunction getTemperature() {\n  var device = \"MY_DEVICE_ID\";\n  var key = \"MY_ACCESS_TOKEN\";\n  var url = `https://api.spark.io/v1/devices/${device}/temperature?access_token=${key}`;\n  $.getJSON(url, json => $('#temperature').text(json.result.toFixed(1) + \" degrees\"));\n}\n\n$(function() {\n  getTemperature();\n\n  $('#reload').on('click', function() {\n    $('#temperature').text('...');\n    getTemperature();\n  });\n});\n```\n\nNow I can go to the \"full-page\" view of the site from my phone.  The UI was only hacked together so it is crude (remember, this entire project only took 30 minutes to hack together), but it works!\n\n![See the temperature](http://i.imgur.com/wrm0jHJ.png)\n\nBut I really don't want to be checking my phone every 5 minutes.\n\n## Setting Up Phone Alerts\n\nI really like [IFTTT](http://ifttt.com).  It stands for \"If This Then That\".  I published a [recipe](https://ifttt.com/recipes/261514-cold-house) that says: \"If [the temperature goes below 55 degrees] then [send an alert to my phone]\".\n\nI had to put the device in my freezer, but I received an alert on my phone that the temperature dropped below 55 degrees!\n\n![A phone alert](/images/ifttt_alert.png)\n\n## Did My Furnace Fail?\nNo, it did not.  BUT, I was never worried about it on vacation because I always knew that it was holding up.  In fact, on the last day of our vacation, the temperature jumped from 65 degrees to 70 degrees.  At first I was confused, but then I learned that our house cleaners had come that morning and they bumped the temperature up in anticipation of our arrival home!  \n\nThis is why I love living in the future.  We have some amazing abstractions here.  I can focus on the details that matter to me and I let the infrastructure do the rest for me.  This is the kind of thing we'll be seeing more and more of going forward as the \"Internet of Things\" becomes more ubiquitous.\n","source":"_posts/2015-02-20-piece-of-mind-temperature-monitor.md","raw":"---\nlayout: post\ntitle: \"Piece of Mind Temperature Monitor\"\ndescription: \"How I eased my mind in the bitter cold\"\ncategory: Software\ntags: [Spark Core, Hacking, IOT, Internet of Things]\npermalink: software/2015/02/20/piece-of-mind-temperature-monitor.html\n---\n\n![Siesta Key](/images/siesta_key.jpg)\n\nI just got home from 5-day vacation in [Siesta Key](http://www.drbeach.org/top10beaches.htm) where my family and I frolicked in the the slightly warmer climate than what we are used to in Ann Arbor Michigan.  The entire eastern half of the nation was under a [polar vortex](http://en.wikipedia.org/wiki/Polar_vortex) so our balmy Floridian host was much cooler than expected.  Back home, however, the temperature dropped as low as -28 degrees Fahrenheit (-33 degrees Celsius).\n\nThis wouldn't normally cause me any anxiety if it were not for my 22 year old furnace.  I couldn't help but worry that it would fail, causing my pipes to freeze followed by all sorts of damage.  I knew I wouldn't be comfortable leaving my home without feeling confident that my furnace was keeping up.\n\n## Spark Core + Thermistor\nI dove into my basement to scrounge for parts and I built myself an \"Internet of Things\" thing to monitor the temperature inside my home.  It was really easy and it only took me 30 minutes.  I had an unused [Spark Core](https://www.spark.io/) and a [Tinkerkit Thermistor](http://www.amazon.com/Arduino-TinkerKit-Thermistor-Module/dp/B00EIB48W8) lying around, so I used them.  Any thermistor would have worked, but that is the one I found in my lab.\n\n![Spark + Thermistor](/images/spark_temperature.jpg)\n\nI hooked up ground, power, and signal (to Analog 7) and got coding.  I found some conversion code for this Tinkerkit module on the [Johnny-Five](https://github.com/rwaldron/johnny-five) project, and I ported it over to C.  The Spark.io builder made it easy for me to send the following code to my Spark Core:\n\n![Spark + Thermistor Diagram](/images/spark_temperature_fritz.png)\n\n```c\n#include \"math.h\"\n\ndouble temperature = 0.0;\n\nconst double RESISTOR = 10000;\nconst double ADCRES = 4095;\nconst double BETA = 3950;\nconst double GINF = 120.6685;\nconst double KELVIN = 273.15;\n\nvoid setup() {\n    Spark.variable(\"temperature\", &temperature, DOUBLE);\n    pinMode(A7, INPUT);\n}\n\nvoid loop() {\n  int raw = analogRead(A7);\n  double rthermistor = RESISTOR * (ADCRES / raw - 1.0);\n  double tempC = BETA / (log(rthermistor * GINF));\n\n  temperature = tempC - KELVIN;\n  temperature = (temperature * 9.0) / 5.0 + 32.0; // to F\n}\n```\n\nThat was it.  From there, the \"temperature\" variable was exposed to the web.  The value was available from a simple URL: `https://api.spark.io/v1/devices/MY_DEVICE_ID/temperature?access_token=MY_ACCESS_TOKEN`\n\n```\n{\n  cmd: \"VarReturn\",\n  name: \"temperature\",\n  result: 67.39388212240802,\n  coreInfo: {\n    last_app: \"\",\n    last_heard: \"2015-02-21T01:59:44.665Z\",\n    connected: true,\n    deviceID: \"MY_DEVICE_ID\"\n  }\n}\n```\n\nCool (or warm?)!  But I don't really feel like reading JSON on my vacation.\n\n## CodePen to Host a Simple UI\nI didn't want to go through the hassle of creating a tiny site and publishing it just to read this value.  This is why I like [CodePen](http://codepen.io) and their ilk.  I can write up a quick little code snippet (note that I'm using ES6), and I'm good to go.\n\n```html\n<h1>The temperature at home is <span id=\"temperature\">...</span></h1>\n<button id=\"reload\" class=\"btn btn-primary\">Reload</button>\n```\n\n```js\nfunction getTemperature() {\n  var device = \"MY_DEVICE_ID\";\n  var key = \"MY_ACCESS_TOKEN\";\n  var url = `https://api.spark.io/v1/devices/${device}/temperature?access_token=${key}`;\n  $.getJSON(url, json => $('#temperature').text(json.result.toFixed(1) + \" degrees\"));\n}\n\n$(function() {\n  getTemperature();\n\n  $('#reload').on('click', function() {\n    $('#temperature').text('...');\n    getTemperature();\n  });\n});\n```\n\nNow I can go to the \"full-page\" view of the site from my phone.  The UI was only hacked together so it is crude (remember, this entire project only took 30 minutes to hack together), but it works!\n\n![See the temperature](http://i.imgur.com/wrm0jHJ.png)\n\nBut I really don't want to be checking my phone every 5 minutes.\n\n## Setting Up Phone Alerts\n\nI really like [IFTTT](http://ifttt.com).  It stands for \"If This Then That\".  I published a [recipe](https://ifttt.com/recipes/261514-cold-house) that says: \"If [the temperature goes below 55 degrees] then [send an alert to my phone]\".\n\nI had to put the device in my freezer, but I received an alert on my phone that the temperature dropped below 55 degrees!\n\n![A phone alert](/images/ifttt_alert.png)\n\n## Did My Furnace Fail?\nNo, it did not.  BUT, I was never worried about it on vacation because I always knew that it was holding up.  In fact, on the last day of our vacation, the temperature jumped from 65 degrees to 70 degrees.  At first I was confused, but then I learned that our house cleaners had come that morning and they bumped the temperature up in anticipation of our arrival home!  \n\nThis is why I love living in the future.  We have some amazing abstractions here.  I can focus on the details that matter to me and I let the infrastructure do the rest for me.  This is the kind of thing we'll be seeing more and more of going forward as the \"Internet of Things\" becomes more ubiquitous.\n","slug":"software/2015/02/20/piece-of-mind-temperature-monitor.html","published":1,"date":"2015-02-20T05:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9ku00fh6eullt48ls2i"},{"layout":"post","title":"Get Your Motor Running","description":"A screencast I put together about bootstrapping the Particle Photon with Johnny-Five","_content":"\nI put together a video for getting bootstrapped with the Particle Photon and Johnny-Five.  This includes claiming the device, provisioning the device, loading the firmware, and building a Johnny-Five based wireless robot.\n\n<iframe width=\"480\" height=\"360\" src=\"https://www.youtube.com/embed/jhism2iqT7o\" frameborder=\"0\" allowfullscreen></iframe>\n","source":"_posts/2016-01-11-get-your-motor-running.md","raw":"---\nlayout: post\ntitle: \"Get Your Motor Running\"\ndescription: \"A screencast I put together about bootstrapping the Particle Photon with Johnny-Five\"\ncategory: Software\ntags: [IoT, NodeBots, Johnny-Five, Particle, Photon]\npermalink: software/2016/01/11/get-your-motor-running.html\n---\n\nI put together a video for getting bootstrapped with the Particle Photon and Johnny-Five.  This includes claiming the device, provisioning the device, loading the firmware, and building a Johnny-Five based wireless robot.\n\n<iframe width=\"480\" height=\"360\" src=\"https://www.youtube.com/embed/jhism2iqT7o\" frameborder=\"0\" allowfullscreen></iframe>\n","slug":"software/2016/01/11/get-your-motor-running.html","published":1,"date":"2016-01-11T05:00:00.000Z","updated":"2016-04-05T19:40:22.000Z","comments":1,"photos":[],"link":"","_id":"cimnua9kx00fk6eulz8mb2bd6"},{"title":"Adventures in Ruby MVVM – Wrapping it up","id":"153","date":"2010-09-26T04:52:27.000Z","_content":"\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F09%2F26%2Fadventures-in-ruby-mvvm-wrapping-it-up%2F)](http://dotnetshoutout.com/Adventures-in-Ruby-MVVM-Wrapping-it-up)\n\n[Source code for the RubyMVVM playground on BitBucket](http://bitbucket.org/briangenisio/rubyvm/src)\n\nIt has been quite a while since I blogged.&#160; Actually, I was just about to sit down to write this blog post about 7 weeks ago when my wife went into labor.&#160; Soon afterwards, she gave birth to our second child -- a son named [Eli Hecker Genisio](http://maia.genisio.org/2010/08/elis-birth.html).&#160; Needless to say, I have been neglecting blog for a while.\n\nPrevious to that, I had gotten to a place where I felt like I was ready to wrap up my experiments in using Ruby for ViewModels and Models.&#160; Here is what I would have written:\n\n#### \n\n### What Worked, What Didn’t?\n\nUsing Ruby as the primary logic and model platform for MVVM (Presenter Model) style apps in WPF was a ton of fun.&#160; It gave me the chance to learn Ruby pretty well (I’m still a hack, but who isn’t?) and got to use many of the more advanced topics such as meta programming and mix-ins.&#160; My ViewModel code was succinct and my model code was even more trivial once I employed the [HTTParty](http://httparty.rubyforge.org/) gem.&#160; What was most fun (and likely my biggest take-away) was how wonderful writing tests using [rspec](http://rspec.info/) was.&#160; All of my tests were written using rspec and I think I might start writing my C# tests using rspec in the future.&#160; \n\nWhat didn’t work: The general coding workflow.&#160; Since there is no tooling support for IronRuby in VisualStudio 2010, it became a disjoined development effort.&#160; This was not completely bad, but things like debugging and deployment became difficult.&#160; I cringe when I think about deploying ruby gems with a Silverlight app. In addition ,the integration between .Net and IronRuby at runtime still needs work.&#160; For instance, defining anything but a trivial property in Ruby did not translate well into the .Net side.&#160; Also, WPF had difficulty binding to ruby strings.&#160; Some controls worked well, but some completely failed.&#160; I ended up writing a ValueConverter in WPF that called ToString() on the Ruby string in order to bind properly.&#160; Silverlight can’t even try to bind to a dynamic property, so that was even more difficult.\n\nIn all, I left feeling like the “goods” and “bads” canceled themselves out and I was stuck asking myself: “Why would I want to do this for real applications?”.&#160; My answer is: “Until there is good tooling support for IronRuby in Visual Studio (don’t hold your breath), this story probably doesn’t have any legs”.\n\n### The Playground – A Twitter Search App\n\n[![RubyMVVM_Twitter](http://houseofbilz.com/wp-content/uploads/2010/09/RubyMVVM_Twitter_thumb.png \"RubyMVVM_Twitter\")](http://houseofbilz.com/wp-content/uploads/2010/09/RubyMVVM_Twitter.png) \n\nWith that, I’d like to document my playground in case anyone feels like running with it.&#160; I created a WPF Twitter Search application (the 2010 hello world) and hoste d the code on [BitBucket](http://bitbucket.org/briangenisio/rubyvm/src).&#160; Once I built all of the [mix-ins](http://bitbucket.org/briangenisio/rubyvm/src/tip/IronRubyMVVM/RubyVM/) necessary to support automatic property notification and convention-based command creation (amongst others), I came up with a ViewModel which is (mostly) void of .Net integration issues that looks like this:\n  <div id=\"codeSnippetWrapper\">   <div style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\">     <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum1\">   1:</span> class TwitterViewModel</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum2\">   2:</span>   include ViewModelSupport</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum3\">   3:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum4\">   4:</span>   declare_notifiable :search_text, :responses</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum5\">   5:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum6\">   6:</span>   def responses</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum7\">   7:</span>     @responses ||= NotifiableArray.new</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum8\">   8:</span>   end</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum9\">   9:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum10\">  10:</span>   def execute_search</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum11\">  11:</span>     responses.clear</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum12\">  12:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum13\">  13:</span>     Twitter.search(@search_text)[<span style=\"color: #006080\">&quot;results&quot;</span>].each <span style=\"color: #0000ff\">do</span> |tweet| </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum14\">  14:</span>       responses.push(TweetViewModel.new(tweet)) </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum15\">  15:</span>     end</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum16\">  16:</span>   end</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum17\">  17:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum18\">  18:</span>   map_commands</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum19\">  19:</span> end</pre>\n<!--CRLF--></div>\n</div>\n\n1\\. Notice that the very first thing I do is add the **ViewModelSupport** mixin.&#160; This provides the support for the magic that happens under the hood.&#160; \n\n2\\. Immediately following, I use the **declare_notifiable** directive.&#160; This will create a property that will notify on change, using **INotifyPropertyChanged **in the .Net world.&#160; This was included with the mix-in.\n\n3\\. The **responses** method (read-only property in .Net) is a **NotifiableArray**. This is a Ruby array I built that will send collection changed events to .Net. \n\n4\\. The **execute_search** method uses the **execute_** convention to generate an **ICommand** property named **search** that can be bound to in the view.&#160; This is what gets executed when the user presses the “Search Twitter” button.&#160; It goes off to Twitter (**Twitter.search** to be explained later) to search for the text entered into the **search_text** property.&#160; For each tweet that comes back, wrap it in a **TweetViewModel** (explained later) and put it into the **responses** collection.&#160; The View will update appropriately.\n\n5\\. The **map_commands** line is a class method that tells Ruby to go map any methods named **execute_*** to command properties (*) that can be bound to by the view.\n\nAs for the individual **TweetViewModel**, it looks like this:\n\n<div id=\"codeSnippetWrapper\">\n  <div style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\">\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum1\">   1:</span> class TweetViewModel</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum2\">   2:</span>    include HashExposer</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum3\">   3:</span>    expose :text, :profile_image_url, :created_at, :from_user</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum4\">   4:</span> end</pre>\n<!--CRLF--></div>\n</div>\n\nIt uses **HashExposer** which is a mix-in I wrote that will find any items in the hash with the key declared with **expose** as a property.&#160; It is a very simple wrapper to allow for binding in the WPF view down to the individual tweet properties found in the hash.&#160; The hash that is passed in in the initializer is what these properties map to.\n\nFinally, here is what the **Twitter** service looks like:\n\n<div id=\"codeSnippetWrapper\">\n  <div style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\">\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum1\">   1:</span> class Twitter</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum2\">   2:</span>   include HTTParty</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum3\">   3:</span>   base_uri 'search.twitter.com'</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum4\">   4:</span>   format :json</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum5\">   5:</span>   </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum6\">   6:</span>   def self.search(query)</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum7\">   7:</span>     get('/search.json', :query =&gt;<span style=\"color: #008000\">; {:q =&gt; query})</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum8\">   8:</span>   end</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum9\">   9:</span>     </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum10\">  10:</span> end</pre>\n<!--CRLF--></div>\n</div>\n\nBy using the [HTTParty](http://httparty.rubyforge.org/) gem, I get to define what **Twitter.search(text)** looks like in a minimal way.&#160; The response of **search** is a parsed hash which I wrap with the **TweetViewModel**.&#160; This is an AMAZINGLY simple way to consume web services in Ruby.&#160; I was shocked to see how easy it was.&#160; \n\nThat is everything on the Ruby side!&#160; All of the application-specific ruby code has been shown in this blog post.&#160; By using the **ViewModelSupport** mix-in (found in the source code), the rest of the .Net integration is abstracted away.&#160; With this alone, I felt like I was successful.&#160; \n\nNext, I’d like to show the WPF side of the application.&#160; This is what the view looks like:\n\n<div style=\"border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px\" id=\"codeSnippetWrapper\">\n  <div style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\">\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum1\">   1:</span> ﻿<span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">UserControl</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum2\">   2:</span>     <span style=\"color: #ff0000\">xmlns</span><span style=\"color: #0000ff\">=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum3\">   3:</span>     <span style=\"color: #ff0000\">xmlns:x</span><span style=\"color: #0000ff\">=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum4\">   4:</span>     <span style=\"color: #ff0000\">xmlns:d</span><span style=\"color: #0000ff\">=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum5\">   5:</span>     <span style=\"color: #ff0000\">xmlns:mc</span><span style=\"color: #0000ff\">=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum6\">   6:</span>     <span style=\"color: #ff0000\">xmlns:local</span><span style=\"color: #0000ff\">=&quot;clr-namespace:IronRubyMVVM&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum7\">   7:</span>     <span style=\"color: #ff0000\">xmlns:SampleData</span><span style=\"color: #0000ff\">=&quot;clr-namespace:Expression.Blend.SampleData.Tweets&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum8\">   8:</span>     <span style=\"color: #ff0000\">mc:Ignorable</span><span style=\"color: #0000ff\">=&quot;d&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum9\">   9:</span>     <span style=\"color: #ff0000\">x:Class</span><span style=\"color: #0000ff\">=&quot;IronRubyMVVM.TwitterView&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum10\">  10:</span>     <span style=\"color: #ff0000\">x:Name</span><span style=\"color: #0000ff\">=&quot;UserControl&quot;</span> <span style=\"color: #ff0000\">d:DesignHeight</span><span style=\"color: #0000ff\">=&quot;651.96&quot;</span> <span style=\"color: #ff0000\">d:DesignWidth</span><span style=\"color: #0000ff\">=&quot;669&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum11\">  11:</span>     <span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum12\">  12:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum13\">  13:</span>     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">UserControl.Resources</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum14\">  14:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">SampleData:Tweets</span> <span style=\"color: #ff0000\">x:Key</span><span style=\"color: #0000ff\">=&quot;Tweets&quot;</span> <span style=\"color: #ff0000\">d:IsDataSource</span><span style=\"color: #0000ff\">=&quot;True&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum15\">  15:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">local:StringConverter</span> <span style=\"color: #ff0000\">x:Key</span><span style=\"color: #0000ff\">=&quot;ToString&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum16\">  16:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">DataTemplate</span> <span style=\"color: #ff0000\">x:Key</span><span style=\"color: #0000ff\">=&quot;responsesItemTemplate1&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum17\">  17:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Border</span> <span style=\"color: #ff0000\">BorderThickness</span><span style=\"color: #0000ff\">=&quot;2&quot;</span> <span style=\"color: #ff0000\">CornerRadius</span><span style=\"color: #0000ff\">=&quot;4&quot;</span> <span style=\"color: #ff0000\">BorderBrush</span><span style=\"color: #0000ff\">=&quot;Black&quot;</span> <span style=\"color: #ff0000\">Margin</span><span style=\"color: #0000ff\">=&quot;3&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum18\">  18:</span>                 <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Grid</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum19\">  19:</span>                     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Grid.ColumnDefinitions</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum20\">  20:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ColumnDefinition</span> <span style=\"color: #ff0000\">Width</span><span style=\"color: #0000ff\">=&quot;Auto&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum21\">  21:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ColumnDefinition</span> <span style=\"color: #ff0000\">Width</span><span style=\"color: #0000ff\">=&quot;*&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum22\">  22:</span>                     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Grid.ColumnDefinitions</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum23\">  23:</span>                     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Grid.Background</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum24\">  24:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">LinearGradientBrush</span> <span style=\"color: #ff0000\">EndPoint</span><span style=\"color: #0000ff\">=&quot;0.5,1&quot;</span> <span style=\"color: #ff0000\">StartPoint</span><span style=\"color: #0000ff\">=&quot;0.5,0&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum25\">  25:</span>                             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">GradientStop</span> <span style=\"color: #ff0000\">Color</span><span style=\"color: #0000ff\">=&quot;#FFD1EBFB&quot;</span> <span style=\"color: #ff0000\">Offset</span><span style=\"color: #0000ff\">=&quot;0.694&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum26\">  26:</span>                             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">GradientStop</span> <span style=\"color: #ff0000\">Color</span><span style=\"color: #0000ff\">=&quot;White&quot;</span> <span style=\"color: #ff0000\">Offset</span><span style=\"color: #0000ff\">=&quot;0.116&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum27\">  27:</span>                         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">LinearGradientBrush</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum28\">  28:</span>                     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Grid.Background</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum29\">  29:</span>                     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">StackPanel</span> <span style=\"color: #ff0000\">Grid</span>.<span style=\"color: #ff0000\">Column</span><span style=\"color: #0000ff\">=&quot;0&quot;</span> <span style=\"color: #ff0000\">Margin</span><span style=\"color: #0000ff\">=&quot;2&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum30\">  30:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Border</span> <span style=\"color: #ff0000\">BorderBrush</span><span style=\"color: #0000ff\">=&quot;Black&quot;</span> <span style=\"color: #ff0000\">BorderThickness</span><span style=\"color: #0000ff\">=&quot;3&quot;</span> <span style=\"color: #ff0000\">Height</span><span style=\"color: #0000ff\">=&quot;100&quot;</span> <span style=\"color: #ff0000\">Width</span><span style=\"color: #0000ff\">=&quot;100&quot;</span> <span style=\"color: #ff0000\">CornerRadius</span><span style=\"color: #0000ff\">=&quot;5&quot;</span> <span style=\"color: #ff0000\">Margin</span><span style=\"color: #0000ff\">=&quot;3&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum31\">  31:</span>                             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Image</span> <span style=\"color: #ff0000\">Source</span><span style=\"color: #0000ff\">=&quot;{Binding profile_image_url, Converter={StaticResource ToString}}&quot;</span> <span style=\"color: #ff0000\">Margin</span><span style=\"color: #0000ff\">=&quot;7&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum32\">  32:</span>                         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Border</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum33\">  33:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TextBlock</span> <span style=\"color: #ff0000\">Text</span><span style=\"color: #0000ff\">=&quot;{Binding from_user}&quot;</span> <span style=\"color: #ff0000\">HorizontalAlignment</span><span style=\"color: #0000ff\">=&quot;Center&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum34\">  34:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TextBlock</span> <span style=\"color: #ff0000\">Text</span><span style=\"color: #0000ff\">=&quot;{Binding created_at}&quot;</span> <span style=\"color: #ff0000\">HorizontalAlignment</span><span style=\"color: #0000ff\">=&quot;Center&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum35\">  35:</span>                     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">StackPanel</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum36\">  36:</span>                     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TextBlock</span> <span style=\"color: #ff0000\">Grid</span>.<span style=\"color: #ff0000\">Column</span><span style=\"color: #0000ff\">=&quot;1&quot;</span> <span style=\"color: #ff0000\">Text</span><span style=\"color: #0000ff\">=&quot;{Binding text}&quot;</span> <span style=\"color: #ff0000\">VerticalAlignment</span><span style=\"color: #0000ff\">=&quot;Top&quot;</span> <span style=\"color: #ff0000\">TextWrapping</span><span style=\"color: #0000ff\">=&quot;Wrap&quot;</span> <span style=\"color: #ff0000\">Margin</span><span style=\"color: #0000ff\">=&quot;8,30,0,0&quot;</span> <span style=\"color: #ff0000\">FontSize</span><span style=\"color: #0000ff\">=&quot;18.667&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum37\">  37:</span>                 <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Grid</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum38\">  38:</span>             <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Border</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum39\">  39:</span>         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">DataTemplate</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum40\">  40:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ItemsPanelTemplate</span> <span style=\"color: #ff0000\">x:Key</span><span style=\"color: #0000ff\">=&quot;ItemsPanelTemplate1&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum41\">  41:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">StackPanel</span> <span style=\"color: #ff0000\">IsItemsHost</span><span style=\"color: #0000ff\">=&quot;True&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum42\">  42:</span>         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">ItemsPanelTemplate</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum43\">  43:</span>     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">UserControl.Resources</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum44\">  44:</span>     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">UserControl.Background</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum45\">  45:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">LinearGradientBrush</span> <span style=\"color: #ff0000\">EndPoint</span><span style=\"color: #0000ff\">=&quot;0.5,1&quot;</span> <span style=\"color: #ff0000\">StartPoint</span><span style=\"color: #0000ff\">=&quot;0.5,0&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum46\">  46:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">GradientStop</span> <span style=\"color: #ff0000\">Color</span><span style=\"color: #0000ff\">=&quot;#FFD6D6D6&quot;</span> <span style=\"color: #ff0000\">Offset</span><span style=\"color: #0000ff\">=&quot;0&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum47\">  47:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">GradientStop</span> <span style=\"color: #ff0000\">Color</span><span style=\"color: #0000ff\">=&quot;White&quot;</span> <span style=\"color: #ff0000\">Offset</span><span style=\"color: #0000ff\">=&quot;1&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum48\">  48:</span>         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">LinearGradientBrush</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum49\">  49:</span>     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">UserControl.Background</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum50\">  50:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum51\">  51:</span>     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">UserControl.DataContext</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum52\">  52:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Binding</span> <span style=\"color: #ff0000\">Path</span><span style=\"color: #0000ff\">=&quot;TwitterViewModel&quot;</span> <span style=\"color: #ff0000\">Source</span><span style=\"color: #0000ff\">=&quot;{StaticResource VMLocator}&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum53\">  53:</span>     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">UserControl.DataContext</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum54\">  54:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum55\">  55:</span>     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Grid</span> <span style=\"color: #ff0000\">x:Name</span><span style=\"color: #0000ff\">=&quot;LayoutRoot&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum56\">  56:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Grid.RowDefinitions</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum57\">  57:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">RowDefinition</span> <span style=\"color: #ff0000\">Height</span><span style=\"color: #0000ff\">=&quot;Auto&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum58\">  58:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">RowDefinition</span> <span style=\"color: #ff0000\">Height</span><span style=\"color: #0000ff\">=&quot;*&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum59\">  59:</span>         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Grid.RowDefinitions</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum60\">  60:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">StackPanel</span> <span style=\"color: #ff0000\">Orientation</span><span style=\"color: #0000ff\">=&quot;Horizontal&quot;</span> <span style=\"color: #ff0000\">Grid</span>.<span style=\"color: #ff0000\">Row</span><span style=\"color: #0000ff\">=&quot;0&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum61\">  61:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TextBox</span> <span style=\"color: #ff0000\">Width</span><span style=\"color: #0000ff\">=&quot;200&quot;</span> <span style=\"color: #ff0000\">VerticalAlignment</span><span style=\"color: #0000ff\">=&quot;Top&quot;</span> <span style=\"color: #ff0000\">Text</span><span style=\"color: #0000ff\">=&quot;{Binding search_text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}&quot;</span> <span style=\"color: #ff0000\">Margin</span><span style=\"color: #0000ff\">=&quot;5,0&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum62\">  62:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Button</span> <span style=\"color: #ff0000\">Content</span><span style=\"color: #0000ff\">=&quot;Search Twitter&quot;</span> <span style=\"color: #ff0000\">VerticalAlignment</span><span style=\"color: #0000ff\">=&quot;Top&quot;</span> <span style=\"color: #ff0000\">Command</span><span style=\"color: #0000ff\">=&quot;{Binding search}&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum63\">  63:</span>         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">StackPanel</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum64\">  64:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ItemsControl</span> <span style=\"color: #ff0000\">Grid</span>.<span style=\"color: #ff0000\">Row</span><span style=\"color: #0000ff\">=&quot;1&quot;</span> <span style=\"color: #ff0000\">ItemsSource</span><span style=\"color: #0000ff\">=&quot;{Binding responses}&quot;</span> <span style=\"color: #ff0000\">ItemTemplate</span><span style=\"color: #0000ff\">=&quot;{DynamicResource responsesItemTemplate1}&quot;</span> <span style=\"color: #ff0000\">d:DataContext</span><span style=\"color: #0000ff\">=&quot;{Binding Source={StaticResource Tweets}}&quot;</span> <span style=\"color: #ff0000\">HorizontalContentAlignment</span><span style=\"color: #0000ff\">=&quot;Stretch&quot;</span> <span style=\"color: #ff0000\">ItemsPanel</span><span style=\"color: #0000ff\">=&quot;{DynamicResource ItemsPanelTemplate1}&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum65\">  65:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ItemsControl.Template</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum66\">  66:</span>                 <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ControlTemplate</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum67\">  67:</span>                     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ScrollViewer</span> <span style=\"color: #ff0000\">x:Name</span><span style=\"color: #0000ff\">=&quot;ScrollViewer&quot;</span> <span style=\"color: #ff0000\">Padding</span><span style=\"color: #0000ff\">=&quot;{TemplateBinding Padding}&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum68\">  68:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ItemsPresenter</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum69\">  69:</span>                     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">ScrollViewer</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum70\">  70:</span>                 <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">ControlTemplate</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum71\">  71:</span>             <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">ItemsControl.Template</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum72\">  72:</span>         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">ItemsControl</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum73\">  73:</span>     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Grid</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum74\">  74:</span> <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">UserControl</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF--></div>\n</div>\n\nJust as in any MVVM application, all of the connections between the View and the ViewModel happen through binding.&#160; This is no exception.\n\nThe only C# in this entire application are in the [bootstrapping of the ruby classes](http://houseofbilz.com/archives/2010/07/07/adventures-in-ruby-mvvm-bootstrapping-ruby/) (**ViewModelLocator**) and the **StringConverter** which helps bind the view to Ruby strings.\n\nThe code for these support classes can be found in the [source code on BitBucket](http://bitbucket.org/briangenisio/rubyvm/src).\n\nThis puts to rest my Ruby-based MVVM experiments.&#160; I learned a ton and I think there is a good foundation here for improvement if anyone wants to run with it. \n\nFor me, I will be moving on to some posts about Flex and ActionScript – another learning project for me to experiment with.&#160; Stay tuned :)","source":"_posts/2010-09-26-adventures-in-ruby-mvvm-wrapping-it-up.md","raw":"---\ntitle: Adventures in Ruby MVVM – Wrapping it up\ntags:\n  - MVVM\n  - Ruby\nid: 153\ncategories:\n  - Uncategorized\ndate: 2010-09-26 00:52:27\n---\n\n[More Adventures in MVVM](http://houseofbilz.com/archives/2009/05/22/adventures-in-mvvm-model-view-viewmodel/) [![Shout it](http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Fhouseofbilz.com%2Farchives%2F2010%2F09%2F26%2Fadventures-in-ruby-mvvm-wrapping-it-up%2F)](http://dotnetshoutout.com/Adventures-in-Ruby-MVVM-Wrapping-it-up)\n\n[Source code for the RubyMVVM playground on BitBucket](http://bitbucket.org/briangenisio/rubyvm/src)\n\nIt has been quite a while since I blogged.&#160; Actually, I was just about to sit down to write this blog post about 7 weeks ago when my wife went into labor.&#160; Soon afterwards, she gave birth to our second child -- a son named [Eli Hecker Genisio](http://maia.genisio.org/2010/08/elis-birth.html).&#160; Needless to say, I have been neglecting blog for a while.\n\nPrevious to that, I had gotten to a place where I felt like I was ready to wrap up my experiments in using Ruby for ViewModels and Models.&#160; Here is what I would have written:\n\n#### \n\n### What Worked, What Didn’t?\n\nUsing Ruby as the primary logic and model platform for MVVM (Presenter Model) style apps in WPF was a ton of fun.&#160; It gave me the chance to learn Ruby pretty well (I’m still a hack, but who isn’t?) and got to use many of the more advanced topics such as meta programming and mix-ins.&#160; My ViewModel code was succinct and my model code was even more trivial once I employed the [HTTParty](http://httparty.rubyforge.org/) gem.&#160; What was most fun (and likely my biggest take-away) was how wonderful writing tests using [rspec](http://rspec.info/) was.&#160; All of my tests were written using rspec and I think I might start writing my C# tests using rspec in the future.&#160; \n\nWhat didn’t work: The general coding workflow.&#160; Since there is no tooling support for IronRuby in VisualStudio 2010, it became a disjoined development effort.&#160; This was not completely bad, but things like debugging and deployment became difficult.&#160; I cringe when I think about deploying ruby gems with a Silverlight app. In addition ,the integration between .Net and IronRuby at runtime still needs work.&#160; For instance, defining anything but a trivial property in Ruby did not translate well into the .Net side.&#160; Also, WPF had difficulty binding to ruby strings.&#160; Some controls worked well, but some completely failed.&#160; I ended up writing a ValueConverter in WPF that called ToString() on the Ruby string in order to bind properly.&#160; Silverlight can’t even try to bind to a dynamic property, so that was even more difficult.\n\nIn all, I left feeling like the “goods” and “bads” canceled themselves out and I was stuck asking myself: “Why would I want to do this for real applications?”.&#160; My answer is: “Until there is good tooling support for IronRuby in Visual Studio (don’t hold your breath), this story probably doesn’t have any legs”.\n\n### The Playground – A Twitter Search App\n\n[![RubyMVVM_Twitter](http://houseofbilz.com/wp-content/uploads/2010/09/RubyMVVM_Twitter_thumb.png \"RubyMVVM_Twitter\")](http://houseofbilz.com/wp-content/uploads/2010/09/RubyMVVM_Twitter.png) \n\nWith that, I’d like to document my playground in case anyone feels like running with it.&#160; I created a WPF Twitter Search application (the 2010 hello world) and hoste d the code on [BitBucket](http://bitbucket.org/briangenisio/rubyvm/src).&#160; Once I built all of the [mix-ins](http://bitbucket.org/briangenisio/rubyvm/src/tip/IronRubyMVVM/RubyVM/) necessary to support automatic property notification and convention-based command creation (amongst others), I came up with a ViewModel which is (mostly) void of .Net integration issues that looks like this:\n  <div id=\"codeSnippetWrapper\">   <div style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\">     <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum1\">   1:</span> class TwitterViewModel</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum2\">   2:</span>   include ViewModelSupport</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum3\">   3:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum4\">   4:</span>   declare_notifiable :search_text, :responses</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum5\">   5:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum6\">   6:</span>   def responses</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum7\">   7:</span>     @responses ||= NotifiableArray.new</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum8\">   8:</span>   end</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum9\">   9:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum10\">  10:</span>   def execute_search</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum11\">  11:</span>     responses.clear</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum12\">  12:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum13\">  13:</span>     Twitter.search(@search_text)[<span style=\"color: #006080\">&quot;results&quot;</span>].each <span style=\"color: #0000ff\">do</span> |tweet| </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum14\">  14:</span>       responses.push(TweetViewModel.new(tweet)) </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum15\">  15:</span>     end</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum16\">  16:</span>   end</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum17\">  17:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum18\">  18:</span>   map_commands</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum19\">  19:</span> end</pre>\n<!--CRLF--></div>\n</div>\n\n1\\. Notice that the very first thing I do is add the **ViewModelSupport** mixin.&#160; This provides the support for the magic that happens under the hood.&#160; \n\n2\\. Immediately following, I use the **declare_notifiable** directive.&#160; This will create a property that will notify on change, using **INotifyPropertyChanged **in the .Net world.&#160; This was included with the mix-in.\n\n3\\. The **responses** method (read-only property in .Net) is a **NotifiableArray**. This is a Ruby array I built that will send collection changed events to .Net. \n\n4\\. The **execute_search** method uses the **execute_** convention to generate an **ICommand** property named **search** that can be bound to in the view.&#160; This is what gets executed when the user presses the “Search Twitter” button.&#160; It goes off to Twitter (**Twitter.search** to be explained later) to search for the text entered into the **search_text** property.&#160; For each tweet that comes back, wrap it in a **TweetViewModel** (explained later) and put it into the **responses** collection.&#160; The View will update appropriately.\n\n5\\. The **map_commands** line is a class method that tells Ruby to go map any methods named **execute_*** to command properties (*) that can be bound to by the view.\n\nAs for the individual **TweetViewModel**, it looks like this:\n\n<div id=\"codeSnippetWrapper\">\n  <div style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\">\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum1\">   1:</span> class TweetViewModel</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum2\">   2:</span>    include HashExposer</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum3\">   3:</span>    expose :text, :profile_image_url, :created_at, :from_user</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum4\">   4:</span> end</pre>\n<!--CRLF--></div>\n</div>\n\nIt uses **HashExposer** which is a mix-in I wrote that will find any items in the hash with the key declared with **expose** as a property.&#160; It is a very simple wrapper to allow for binding in the WPF view down to the individual tweet properties found in the hash.&#160; The hash that is passed in in the initializer is what these properties map to.\n\nFinally, here is what the **Twitter** service looks like:\n\n<div id=\"codeSnippetWrapper\">\n  <div style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\">\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum1\">   1:</span> class Twitter</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum2\">   2:</span>   include HTTParty</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum3\">   3:</span>   base_uri 'search.twitter.com'</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum4\">   4:</span>   format :json</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum5\">   5:</span>   </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum6\">   6:</span>   def self.search(query)</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum7\">   7:</span>     get('/search.json', :query =&gt;<span style=\"color: #008000\">; {:q =&gt; query})</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum8\">   8:</span>   end</pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum9\">   9:</span>     </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum10\">  10:</span> end</pre>\n<!--CRLF--></div>\n</div>\n\nBy using the [HTTParty](http://httparty.rubyforge.org/) gem, I get to define what **Twitter.search(text)** looks like in a minimal way.&#160; The response of **search** is a parsed hash which I wrap with the **TweetViewModel**.&#160; This is an AMAZINGLY simple way to consume web services in Ruby.&#160; I was shocked to see how easy it was.&#160; \n\nThat is everything on the Ruby side!&#160; All of the application-specific ruby code has been shown in this blog post.&#160; By using the **ViewModelSupport** mix-in (found in the source code), the rest of the .Net integration is abstracted away.&#160; With this alone, I felt like I was successful.&#160; \n\nNext, I’d like to show the WPF side of the application.&#160; This is what the view looks like:\n\n<div style=\"border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px\" id=\"codeSnippetWrapper\">\n  <div style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\">\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum1\">   1:</span> ﻿<span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">UserControl</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum2\">   2:</span>     <span style=\"color: #ff0000\">xmlns</span><span style=\"color: #0000ff\">=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum3\">   3:</span>     <span style=\"color: #ff0000\">xmlns:x</span><span style=\"color: #0000ff\">=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum4\">   4:</span>     <span style=\"color: #ff0000\">xmlns:d</span><span style=\"color: #0000ff\">=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum5\">   5:</span>     <span style=\"color: #ff0000\">xmlns:mc</span><span style=\"color: #0000ff\">=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum6\">   6:</span>     <span style=\"color: #ff0000\">xmlns:local</span><span style=\"color: #0000ff\">=&quot;clr-namespace:IronRubyMVVM&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum7\">   7:</span>     <span style=\"color: #ff0000\">xmlns:SampleData</span><span style=\"color: #0000ff\">=&quot;clr-namespace:Expression.Blend.SampleData.Tweets&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum8\">   8:</span>     <span style=\"color: #ff0000\">mc:Ignorable</span><span style=\"color: #0000ff\">=&quot;d&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum9\">   9:</span>     <span style=\"color: #ff0000\">x:Class</span><span style=\"color: #0000ff\">=&quot;IronRubyMVVM.TwitterView&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum10\">  10:</span>     <span style=\"color: #ff0000\">x:Name</span><span style=\"color: #0000ff\">=&quot;UserControl&quot;</span> <span style=\"color: #ff0000\">d:DesignHeight</span><span style=\"color: #0000ff\">=&quot;651.96&quot;</span> <span style=\"color: #ff0000\">d:DesignWidth</span><span style=\"color: #0000ff\">=&quot;669&quot;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum11\">  11:</span>     <span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum12\">  12:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum13\">  13:</span>     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">UserControl.Resources</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum14\">  14:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">SampleData:Tweets</span> <span style=\"color: #ff0000\">x:Key</span><span style=\"color: #0000ff\">=&quot;Tweets&quot;</span> <span style=\"color: #ff0000\">d:IsDataSource</span><span style=\"color: #0000ff\">=&quot;True&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum15\">  15:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">local:StringConverter</span> <span style=\"color: #ff0000\">x:Key</span><span style=\"color: #0000ff\">=&quot;ToString&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum16\">  16:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">DataTemplate</span> <span style=\"color: #ff0000\">x:Key</span><span style=\"color: #0000ff\">=&quot;responsesItemTemplate1&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum17\">  17:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Border</span> <span style=\"color: #ff0000\">BorderThickness</span><span style=\"color: #0000ff\">=&quot;2&quot;</span> <span style=\"color: #ff0000\">CornerRadius</span><span style=\"color: #0000ff\">=&quot;4&quot;</span> <span style=\"color: #ff0000\">BorderBrush</span><span style=\"color: #0000ff\">=&quot;Black&quot;</span> <span style=\"color: #ff0000\">Margin</span><span style=\"color: #0000ff\">=&quot;3&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum18\">  18:</span>                 <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Grid</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum19\">  19:</span>                     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Grid.ColumnDefinitions</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum20\">  20:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ColumnDefinition</span> <span style=\"color: #ff0000\">Width</span><span style=\"color: #0000ff\">=&quot;Auto&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum21\">  21:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ColumnDefinition</span> <span style=\"color: #ff0000\">Width</span><span style=\"color: #0000ff\">=&quot;*&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum22\">  22:</span>                     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Grid.ColumnDefinitions</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum23\">  23:</span>                     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Grid.Background</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum24\">  24:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">LinearGradientBrush</span> <span style=\"color: #ff0000\">EndPoint</span><span style=\"color: #0000ff\">=&quot;0.5,1&quot;</span> <span style=\"color: #ff0000\">StartPoint</span><span style=\"color: #0000ff\">=&quot;0.5,0&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum25\">  25:</span>                             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">GradientStop</span> <span style=\"color: #ff0000\">Color</span><span style=\"color: #0000ff\">=&quot;#FFD1EBFB&quot;</span> <span style=\"color: #ff0000\">Offset</span><span style=\"color: #0000ff\">=&quot;0.694&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum26\">  26:</span>                             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">GradientStop</span> <span style=\"color: #ff0000\">Color</span><span style=\"color: #0000ff\">=&quot;White&quot;</span> <span style=\"color: #ff0000\">Offset</span><span style=\"color: #0000ff\">=&quot;0.116&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum27\">  27:</span>                         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">LinearGradientBrush</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum28\">  28:</span>                     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Grid.Background</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum29\">  29:</span>                     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">StackPanel</span> <span style=\"color: #ff0000\">Grid</span>.<span style=\"color: #ff0000\">Column</span><span style=\"color: #0000ff\">=&quot;0&quot;</span> <span style=\"color: #ff0000\">Margin</span><span style=\"color: #0000ff\">=&quot;2&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum30\">  30:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Border</span> <span style=\"color: #ff0000\">BorderBrush</span><span style=\"color: #0000ff\">=&quot;Black&quot;</span> <span style=\"color: #ff0000\">BorderThickness</span><span style=\"color: #0000ff\">=&quot;3&quot;</span> <span style=\"color: #ff0000\">Height</span><span style=\"color: #0000ff\">=&quot;100&quot;</span> <span style=\"color: #ff0000\">Width</span><span style=\"color: #0000ff\">=&quot;100&quot;</span> <span style=\"color: #ff0000\">CornerRadius</span><span style=\"color: #0000ff\">=&quot;5&quot;</span> <span style=\"color: #ff0000\">Margin</span><span style=\"color: #0000ff\">=&quot;3&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum31\">  31:</span>                             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Image</span> <span style=\"color: #ff0000\">Source</span><span style=\"color: #0000ff\">=&quot;{Binding profile_image_url, Converter={StaticResource ToString}}&quot;</span> <span style=\"color: #ff0000\">Margin</span><span style=\"color: #0000ff\">=&quot;7&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum32\">  32:</span>                         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Border</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum33\">  33:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TextBlock</span> <span style=\"color: #ff0000\">Text</span><span style=\"color: #0000ff\">=&quot;{Binding from_user}&quot;</span> <span style=\"color: #ff0000\">HorizontalAlignment</span><span style=\"color: #0000ff\">=&quot;Center&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum34\">  34:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TextBlock</span> <span style=\"color: #ff0000\">Text</span><span style=\"color: #0000ff\">=&quot;{Binding created_at}&quot;</span> <span style=\"color: #ff0000\">HorizontalAlignment</span><span style=\"color: #0000ff\">=&quot;Center&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum35\">  35:</span>                     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">StackPanel</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum36\">  36:</span>                     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TextBlock</span> <span style=\"color: #ff0000\">Grid</span>.<span style=\"color: #ff0000\">Column</span><span style=\"color: #0000ff\">=&quot;1&quot;</span> <span style=\"color: #ff0000\">Text</span><span style=\"color: #0000ff\">=&quot;{Binding text}&quot;</span> <span style=\"color: #ff0000\">VerticalAlignment</span><span style=\"color: #0000ff\">=&quot;Top&quot;</span> <span style=\"color: #ff0000\">TextWrapping</span><span style=\"color: #0000ff\">=&quot;Wrap&quot;</span> <span style=\"color: #ff0000\">Margin</span><span style=\"color: #0000ff\">=&quot;8,30,0,0&quot;</span> <span style=\"color: #ff0000\">FontSize</span><span style=\"color: #0000ff\">=&quot;18.667&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum37\">  37:</span>                 <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Grid</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum38\">  38:</span>             <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Border</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum39\">  39:</span>         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">DataTemplate</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum40\">  40:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ItemsPanelTemplate</span> <span style=\"color: #ff0000\">x:Key</span><span style=\"color: #0000ff\">=&quot;ItemsPanelTemplate1&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum41\">  41:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">StackPanel</span> <span style=\"color: #ff0000\">IsItemsHost</span><span style=\"color: #0000ff\">=&quot;True&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum42\">  42:</span>         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">ItemsPanelTemplate</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum43\">  43:</span>     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">UserControl.Resources</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum44\">  44:</span>     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">UserControl.Background</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum45\">  45:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">LinearGradientBrush</span> <span style=\"color: #ff0000\">EndPoint</span><span style=\"color: #0000ff\">=&quot;0.5,1&quot;</span> <span style=\"color: #ff0000\">StartPoint</span><span style=\"color: #0000ff\">=&quot;0.5,0&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum46\">  46:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">GradientStop</span> <span style=\"color: #ff0000\">Color</span><span style=\"color: #0000ff\">=&quot;#FFD6D6D6&quot;</span> <span style=\"color: #ff0000\">Offset</span><span style=\"color: #0000ff\">=&quot;0&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum47\">  47:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">GradientStop</span> <span style=\"color: #ff0000\">Color</span><span style=\"color: #0000ff\">=&quot;White&quot;</span> <span style=\"color: #ff0000\">Offset</span><span style=\"color: #0000ff\">=&quot;1&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum48\">  48:</span>         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">LinearGradientBrush</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum49\">  49:</span>     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">UserControl.Background</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum50\">  50:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum51\">  51:</span>     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">UserControl.DataContext</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum52\">  52:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Binding</span> <span style=\"color: #ff0000\">Path</span><span style=\"color: #0000ff\">=&quot;TwitterViewModel&quot;</span> <span style=\"color: #ff0000\">Source</span><span style=\"color: #0000ff\">=&quot;{StaticResource VMLocator}&quot;</span><span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum53\">  53:</span>     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">UserControl.DataContext</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum54\">  54:</span>&#160; </pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum55\">  55:</span>     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Grid</span> <span style=\"color: #ff0000\">x:Name</span><span style=\"color: #0000ff\">=&quot;LayoutRoot&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum56\">  56:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Grid.RowDefinitions</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum57\">  57:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">RowDefinition</span> <span style=\"color: #ff0000\">Height</span><span style=\"color: #0000ff\">=&quot;Auto&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum58\">  58:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">RowDefinition</span> <span style=\"color: #ff0000\">Height</span><span style=\"color: #0000ff\">=&quot;*&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum59\">  59:</span>         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Grid.RowDefinitions</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum60\">  60:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">StackPanel</span> <span style=\"color: #ff0000\">Orientation</span><span style=\"color: #0000ff\">=&quot;Horizontal&quot;</span> <span style=\"color: #ff0000\">Grid</span>.<span style=\"color: #ff0000\">Row</span><span style=\"color: #0000ff\">=&quot;0&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum61\">  61:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">TextBox</span> <span style=\"color: #ff0000\">Width</span><span style=\"color: #0000ff\">=&quot;200&quot;</span> <span style=\"color: #ff0000\">VerticalAlignment</span><span style=\"color: #0000ff\">=&quot;Top&quot;</span> <span style=\"color: #ff0000\">Text</span><span style=\"color: #0000ff\">=&quot;{Binding search_text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}&quot;</span> <span style=\"color: #ff0000\">Margin</span><span style=\"color: #0000ff\">=&quot;5,0&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum62\">  62:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Button</span> <span style=\"color: #ff0000\">Content</span><span style=\"color: #0000ff\">=&quot;Search Twitter&quot;</span> <span style=\"color: #ff0000\">VerticalAlignment</span><span style=\"color: #0000ff\">=&quot;Top&quot;</span> <span style=\"color: #ff0000\">Command</span><span style=\"color: #0000ff\">=&quot;{Binding search}&quot;</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum63\">  63:</span>         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">StackPanel</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum64\">  64:</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ItemsControl</span> <span style=\"color: #ff0000\">Grid</span>.<span style=\"color: #ff0000\">Row</span><span style=\"color: #0000ff\">=&quot;1&quot;</span> <span style=\"color: #ff0000\">ItemsSource</span><span style=\"color: #0000ff\">=&quot;{Binding responses}&quot;</span> <span style=\"color: #ff0000\">ItemTemplate</span><span style=\"color: #0000ff\">=&quot;{DynamicResource responsesItemTemplate1}&quot;</span> <span style=\"color: #ff0000\">d:DataContext</span><span style=\"color: #0000ff\">=&quot;{Binding Source={StaticResource Tweets}}&quot;</span> <span style=\"color: #ff0000\">HorizontalContentAlignment</span><span style=\"color: #0000ff\">=&quot;Stretch&quot;</span> <span style=\"color: #ff0000\">ItemsPanel</span><span style=\"color: #0000ff\">=&quot;{DynamicResource ItemsPanelTemplate1}&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum65\">  65:</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ItemsControl.Template</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum66\">  66:</span>                 <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ControlTemplate</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum67\">  67:</span>                     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ScrollViewer</span> <span style=\"color: #ff0000\">x:Name</span><span style=\"color: #0000ff\">=&quot;ScrollViewer&quot;</span> <span style=\"color: #ff0000\">Padding</span><span style=\"color: #0000ff\">=&quot;{TemplateBinding Padding}&quot;</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum68\">  68:</span>                         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ItemsPresenter</span> <span style=\"color: #0000ff\">/&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum69\">  69:</span>                     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">ScrollViewer</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum70\">  70:</span>                 <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">ControlTemplate</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum71\">  71:</span>             <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">ItemsControl.Template</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum72\">  72:</span>         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">ItemsControl</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum73\">  73:</span>     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Grid</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF-->\n\n    <pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"><span style=\"color: #606060\" id=\"lnum74\">  74:</span> <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">UserControl</span><span style=\"color: #0000ff\">&gt;</span></pre>\n<!--CRLF--></div>\n</div>\n\nJust as in any MVVM application, all of the connections between the View and the ViewModel happen through binding.&#160; This is no exception.\n\nThe only C# in this entire application are in the [bootstrapping of the ruby classes](http://houseofbilz.com/archives/2010/07/07/adventures-in-ruby-mvvm-bootstrapping-ruby/) (**ViewModelLocator**) and the **StringConverter** which helps bind the view to Ruby strings.\n\nThe code for these support classes can be found in the [source code on BitBucket](http://bitbucket.org/briangenisio/rubyvm/src).\n\nThis puts to rest my Ruby-based MVVM experiments.&#160; I learned a ton and I think there is a good foundation here for improvement if anyone wants to run with it. \n\nFor me, I will be moving on to some posts about Flex and ActionScript – another learning project for me to experiment with.&#160; Stay tuned :)","slug":"adventures-in-ruby-mvvm-wrapping-it-up","published":1,"updated":"2016-04-05T19:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimnua9kz00fo6eul448rgstp"}],"PostAsset":[],"PostCategory":[{"post_id":"cimnua9dk00066eul4iwi9czo","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9dv000a6eulhog89v7b"},{"post_id":"cimnua9d800016eulvbc3pegi","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9dx000d6eule203nib5"},{"post_id":"cimnua9do00076eul0dtf3ott","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9dz000f6eul6y59yovb"},{"post_id":"cimnua9ds00096eulwlcqsdsm","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9e1000h6eulm515h457"},{"post_id":"cimnua9dd00036eul6dwbgogy","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9e3000j6euluydr6ofa"},{"post_id":"cimnua9dw000b6eulhqwjisku","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9e5000l6eulikifdacl"},{"post_id":"cimnua9dy000e6eulyxjd2ui9","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9e8000n6eulyz8ccsro"},{"post_id":"cimnua9di00056eulbt2igzfd","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ea000p6eulg8g3t495"},{"post_id":"cimnua9e0000g6eul6cwlqd8k","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ec000r6eul8rnwhxxu"},{"post_id":"cimnua9e2000i6eulygr4gfzs","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9eg000t6eulj0lc2h3q"},{"post_id":"cimnua9e3000k6eultkhw9nuy","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9eh000v6eul6146qsdp"},{"post_id":"cimnua9e6000m6eulx6ye9blm","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ej000x6euli5zn7rgr"},{"post_id":"cimnua9e9000o6eulgw9c44ok","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9el000z6eullb4lbbwm"},{"post_id":"cimnua9ea000q6eulgypdcqj7","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9en00116eultv569opp"},{"post_id":"cimnua9ec000s6eul6h26dmwt","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9eo00136eulizxt399s"},{"post_id":"cimnua9eg000u6euljjf0w6fp","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9eq00156eul78mgswe4"},{"post_id":"cimnua9ei000w6eulcnbjh39i","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ez00176eulbygxizgp"},{"post_id":"cimnua9ej000y6eulsw442437","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9f100196eulq3nfm3h6"},{"post_id":"cimnua9el00106eulpde5554x","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9f4001b6eulz2v10xi7"},{"post_id":"cimnua9en00126eulcj3xqsoj","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9f6001d6eulvllnl6wt"},{"post_id":"cimnua9ep00146eulkzez6gwu","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9f7001f6eulqeypyklx"},{"post_id":"cimnua9eq00166eulwmlra7z3","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9f9001h6eulh4popu85"},{"post_id":"cimnua9ez00186euldh3bqmq3","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9fa001j6eul4xhx7b1o"},{"post_id":"cimnua9f2001a6eulqm1yfqc4","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9fc001l6eulrdhiyi7y"},{"post_id":"cimnua9f5001c6eulbbmuz0f3","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ff001n6eulyumtmpuk"},{"post_id":"cimnua9f6001e6eulny6po1jx","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9fh001p6eulx2jrycmy"},{"post_id":"cimnua9f7001g6eul6behtm8m","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9fj001r6eulld1s3hkq"},{"post_id":"cimnua9f9001i6eulb6vx4v1c","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9fl001t6eulox0wa90a"},{"post_id":"cimnua9fa001k6eulcsa7dofp","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9fn001v6euliy9rzf1z"},{"post_id":"cimnua9fc001m6eulw6bbmq1v","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9fq001x6eulbcovkahz"},{"post_id":"cimnua9ff001o6eulyn2rjbkm","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9fr001z6eul3s7q00de"},{"post_id":"cimnua9fh001q6eulcrjrenxk","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ft00216eulz13rjw3y"},{"post_id":"cimnua9fk001s6eul5dxu379u","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9fu00236eulpbm4ie6q"},{"post_id":"cimnua9fm001u6eulkup1r76g","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9fv00256eulkw8vakyj"},{"post_id":"cimnua9fn001w6eulisdq28gh","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9fw00276eulnannn51c"},{"post_id":"cimnua9fq001y6eullfp9071t","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9fz00296eulzz0719qu"},{"post_id":"cimnua9fs00206eulzbduhaz5","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9g0002b6eul8wd1545q"},{"post_id":"cimnua9ft00226eulrm5ds5cc","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9g1002d6eulq0yz4xlg"},{"post_id":"cimnua9fu00246eulg9cykmut","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9g2002f6eulljwe95q4"},{"post_id":"cimnua9fv00266eulzrsywofp","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9g3002h6eulotszgu2g"},{"post_id":"cimnua9fw00286eul5v9y8nz2","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9g5002j6eulu1e9f0kj"},{"post_id":"cimnua9fz002a6eulm93vygye","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9g6002l6eulgzgrui57"},{"post_id":"cimnua9g0002c6euly4hginel","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9g7002n6eul1lufurq3"},{"post_id":"cimnua9g1002e6eulqnf3aeb6","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gb002p6eul8ph03yji"},{"post_id":"cimnua9g2002g6eul68i86pn4","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gd002r6eulx3tyxk5c"},{"post_id":"cimnua9g3002i6eulo2pzwszg","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ge002t6eulyrg57bay"},{"post_id":"cimnua9g5002k6eulivriy8hd","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gf002v6eul3eb3eksv"},{"post_id":"cimnua9g6002m6eulbhztidyi","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gg002x6eulfbgwzpju"},{"post_id":"cimnua9g7002o6eulmskiwaly","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gi002z6eul96onl6sq"},{"post_id":"cimnua9gb002q6eul3or3vtcf","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gj00316eul4cfrb38k"},{"post_id":"cimnua9gd002s6eulwuxb55sm","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gk00336eulsduawz34"},{"post_id":"cimnua9ge002u6eul5qwgbhmb","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gm00356eulkhka4h36"},{"post_id":"cimnua9gf002w6eul1xbce562","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gp00376eul1ri6j1by"},{"post_id":"cimnua9gh002y6eulkwlud06e","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gr00396eul57jxabnb"},{"post_id":"cimnua9gi00306eul49f9if1c","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gs003b6eula5gs5jjp"},{"post_id":"cimnua9gj00326eul2ocmg6v7","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gt003d6eulwnwf09mr"},{"post_id":"cimnua9gl00346eulvm3lg8hf","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gw003g6eulisy8nup5"},{"post_id":"cimnua9gn00366eulz52bh73n","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9gx003i6eulz6c9inuz"},{"post_id":"cimnua9gq00386eul5nvlbdie","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9h0003l6eultputs0bq"},{"post_id":"cimnua9gr003a6eulal9o1fcj","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9h2003o6eulgix2ezxe"},{"post_id":"cimnua9gs003c6eulzwzw838p","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9h4003q6eul185g2ovi"},{"post_id":"cimnua9gu003e6eul8bigmsut","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9h7003t6euldbat7tix"},{"post_id":"cimnua9gw003h6eul8924p67d","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9h8003v6eulpl21m3xx"},{"post_id":"cimnua9gy003j6eul241byoq0","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hb003y6eul7hmm6qgg"},{"post_id":"cimnua9h0003m6eulu8npmfkp","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hc00416eulnxuzallb"},{"post_id":"cimnua9h2003p6eulm8b822w7","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hd00456euljil0btrp"},{"post_id":"cimnua9h4003r6eulizhiktvj","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9he00476eul4m6z55jb"},{"post_id":"cimnua9h8003u6eulnhu3bil2","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hg004a6eulq9gj3tws"},{"post_id":"cimnua9h9003w6eulc64sd2q8","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hi004d6eulnkl0o34z"},{"post_id":"cimnua9hb003z6eulz8s07sy1","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hk004g6eulnoi5zg8v"},{"post_id":"cimnua9hc00426eultjk8d8tx","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hn004j6eulezpj72g1"},{"post_id":"cimnua9hd00466eule93m8z1c","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hp004l6eul3r6gj1cq"},{"post_id":"cimnua9hf00486eul68kr986e","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hq004p6eulr71ukrlb"},{"post_id":"cimnua9hg004b6eull1b5lfeg","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hr004s6eul2finfxmm"},{"post_id":"cimnua9hi004e6eulqn998fmk","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ht004v6eulc4anqits"},{"post_id":"cimnua9hl004h6eulc8shbwlt","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hu004x6eulhzm2oer8"},{"post_id":"cimnua9hn004k6eulr8k0ejpp","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hv00516eull9g50uos"},{"post_id":"cimnua9hp004m6eulg44wy3y1","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hw00546euloboygb00"},{"post_id":"cimnua9hq004q6eulowm8wzys","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9hy00576euly4uywd2n"},{"post_id":"cimnua9hr004t6eulb2fivskf","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9i000596eul4perqx35"},{"post_id":"cimnua9ht004w6euliltxnlng","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9i1005c6eulmxw5w1f6"},{"post_id":"cimnua9hu004y6eul6uzo3ydl","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9i2005e6eul4h78jvkq"},{"post_id":"cimnua9hv00526eulv840f8ql","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9i4005h6eul1rfkgglf"},{"post_id":"cimnua9hw00556eulgb9eyv04","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9i5005k6eul07ty57cb"},{"post_id":"cimnua9hz00586eulpul4dnny","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9i6005o6eul4zgll154"},{"post_id":"cimnua9i0005a6eulth5yxfbv","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9i7005r6eulj0cppgk1"},{"post_id":"cimnua9i1005d6eull7leaps7","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9i9005t6eulxq3oljai"},{"post_id":"cimnua9i2005f6eul3sour4i0","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ia005x6eul2nvdvivw"},{"post_id":"cimnua9i4005i6eul4zj6mmlf","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ib00606eulirhidcv1"},{"post_id":"cimnua9i5005l6eul6b2y72jr","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9id00636eul0qvlxq6w"},{"post_id":"cimnua9i6005p6euleifl69xq","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9if00656eul5btosxk1"},{"post_id":"cimnua9i8005s6eul7x96gtld","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ih00696eul6y2byozz"},{"post_id":"cimnua9i9005u6eulwjp3sa50","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ii006c6eul5elo58z0"},{"post_id":"cimnua9ia005y6euldikqgw6e","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ik006f6eul9rbkntdr"},{"post_id":"cimnua9ic00616eulv2ro8k0i","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9il006i6eul15cf522k"},{"post_id":"cimnua9ie00646eulumtone84","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9im006l6eulj7547dxb"},{"post_id":"cimnua9if00666eul4g5j3yu2","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9in006n6eul0r8dvbdi"},{"post_id":"cimnua9ih006a6eul3oqmud6q","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9ip006r6eullqxt5u0i"},{"post_id":"cimnua9ik006g6eul035hxbdt","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9iq006u6eulsluoaub2"},{"post_id":"cimnua9im006m6eulmpxn4ltx","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9is006y6euliu4f3qyg"},{"post_id":"cimnua9ij006d6eulrvl8wesq","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9iu00716eulv2oc1l0b"},{"post_id":"cimnua9in006o6eul3b4vjd4k","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9iv00756eul7mppu54r"},{"post_id":"cimnua9ip006s6eulmez2fd15","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9ix00776eulih3ms2rr"},{"post_id":"cimnua9il006j6eulq5dwdtog","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9iy007a6eulbfsitd9q"},{"post_id":"cimnua9iq006v6eul6kgkn78p","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9j0007d6eul74kfl8uq"},{"post_id":"cimnua9is006z6eulj9renaie","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9j2007h6eul29uovogd"},{"post_id":"cimnua9iu00726eul4dpr28a0","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9j4007k6eulge66gocd"},{"post_id":"cimnua9iv00766eul7z8kafjd","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9j5007n6euls02g7sbi"},{"post_id":"cimnua9ix00786eulv9jrpqjz","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9j5007p6eul45873nz6"},{"post_id":"cimnua9iy007b6eulm1lhmm4h","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9j5007s6eul450r0i7k"},{"post_id":"cimnua9j1007e6eulpq9zbhle","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9j6007u6eulqcfbjj4l"},{"post_id":"cimnua9j3007i6eulydwvy8zh","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9j6007w6eulj9dl4ts6"},{"post_id":"cimnua9ks00ff6eulw1nyvmkx","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9ky00fn6eull5epptuq"},{"post_id":"cimnua9ku00fh6eullt48ls2i","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9l000fq6euloqj2a1bx"},{"post_id":"cimnua9kx00fk6eulz8mb2bd6","category_id":"cimnua9il006h6euls84qjdo6","_id":"cimnua9l100ft6eulby6hnfuc"},{"post_id":"cimnua9kz00fo6eul448rgstp","category_id":"cimnua9dg00046eulo4cfgwka","_id":"cimnua9l100fv6eulrdg9n105"}],"PostTag":[{"post_id":"cimnua9gs003c6eulzwzw838p","tag_id":"cimnua9gv003f6eulkryilz0h","_id":"cimnua9h2003n6eul53tbdh5j"},{"post_id":"cimnua9gu003e6eul8bigmsut","tag_id":"cimnua9h0003k6eul7p640jwm","_id":"cimnua9hb00406eulkeizowtc"},{"post_id":"cimnua9gu003e6eul8bigmsut","tag_id":"cimnua9h7003s6eul9ml4uaqe","_id":"cimnua9hd00436eultl9v1qdc"},{"post_id":"cimnua9gw003h6eul8924p67d","tag_id":"cimnua9ha003x6eulof5rxhvi","_id":"cimnua9hi004c6eulvu65lyn8"},{"post_id":"cimnua9gw003h6eul8924p67d","tag_id":"cimnua9hd00446eulo05g13v5","_id":"cimnua9hk004f6eul24k91dpw"},{"post_id":"cimnua9gy003j6eul241byoq0","tag_id":"cimnua9hg00496eul6529bek7","_id":"cimnua9hq004o6eulkzn2hqmq"},{"post_id":"cimnua9gy003j6eul241byoq0","tag_id":"cimnua9h7003s6eul9ml4uaqe","_id":"cimnua9hr004r6eulyfv474jg"},{"post_id":"cimnua9h0003m6eulu8npmfkp","tag_id":"cimnua9hg00496eul6529bek7","_id":"cimnua9hv00506eul3pihedya"},{"post_id":"cimnua9h0003m6eulu8npmfkp","tag_id":"cimnua9h7003s6eul9ml4uaqe","_id":"cimnua9hw00536eul5mso5loj"},{"post_id":"cimnua9h2003p6eulm8b822w7","tag_id":"cimnua9hv004z6eulm1iec07o","_id":"cimnua9i5005j6eulm525pznz"},{"post_id":"cimnua9h2003p6eulm8b822w7","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9i6005m6eulc9uvyx8e"},{"post_id":"cimnua9h2003p6eulm8b822w7","tag_id":"cimnua9i1005b6eulr8pdt16b","_id":"cimnua9i7005q6eulb6tz5rmo"},{"post_id":"cimnua9h4003r6eulizhiktvj","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9ia005w6eulvctpeuhx"},{"post_id":"cimnua9h4003r6eulizhiktvj","tag_id":"cimnua9i6005n6eullaf5nt1i","_id":"cimnua9ib005z6eul0pkjuqv5"},{"post_id":"cimnua9h8003u6eulnhu3bil2","tag_id":"cimnua9ha003x6eulof5rxhvi","_id":"cimnua9ih00686eul51ocg0a8"},{"post_id":"cimnua9h8003u6eulnhu3bil2","tag_id":"cimnua9hd00446eulo05g13v5","_id":"cimnua9ii006b6eulfspj0m30"},{"post_id":"cimnua9h9003w6eulc64sd2q8","tag_id":"cimnua9h7003s6eul9ml4uaqe","_id":"cimnua9iq006t6eulseyhbdp1"},{"post_id":"cimnua9h9003w6eulc64sd2q8","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9ir006w6euluj84hxti"},{"post_id":"cimnua9h9003w6eulc64sd2q8","tag_id":"cimnua9ik006e6eullshatmkf","_id":"cimnua9it00706eulc7u615qu"},{"post_id":"cimnua9h9003w6eulc64sd2q8","tag_id":"cimnua9i1005b6eulr8pdt16b","_id":"cimnua9iv00736eulq90z9bhe"},{"post_id":"cimnua9hb003z6eulz8s07sy1","tag_id":"cimnua9h7003s6eul9ml4uaqe","_id":"cimnua9iz007c6eul54siutxa"},{"post_id":"cimnua9hb003z6eulz8s07sy1","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9j2007f6eulyznifabv"},{"post_id":"cimnua9hb003z6eulz8s07sy1","tag_id":"cimnua9ik006e6eullshatmkf","_id":"cimnua9j4007j6eulgurzn7uw"},{"post_id":"cimnua9hb003z6eulz8s07sy1","tag_id":"cimnua9i1005b6eulr8pdt16b","_id":"cimnua9j4007l6eul3g5zazwx"},{"post_id":"cimnua9hc00426eultjk8d8tx","tag_id":"cimnua9iy00796eul8wiw9y1y","_id":"cimnua9j5007o6eulzdqja1h9"},{"post_id":"cimnua9hc00426eultjk8d8tx","tag_id":"cimnua9i1005b6eulr8pdt16b","_id":"cimnua9j5007q6eulvp6bvbi5"},{"post_id":"cimnua9hd00466eule93m8z1c","tag_id":"cimnua9h7003s6eul9ml4uaqe","_id":"cimnua9j5007t6eul4z9wxhet"},{"post_id":"cimnua9hd00466eule93m8z1c","tag_id":"cimnua9j5007m6euluj1bnjg2","_id":"cimnua9j6007v6euly6lk2d2n"},{"post_id":"cimnua9hf00486eul68kr986e","tag_id":"cimnua9h7003s6eul9ml4uaqe","_id":"cimnua9jd00806eulxabq1c27"},{"post_id":"cimnua9hf00486eul68kr986e","tag_id":"cimnua9j5007r6eulz8w01zqh","_id":"cimnua9jd00816eulsavyt5yh"},{"post_id":"cimnua9hf00486eul68kr986e","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9jd00836eulv55rjy76"},{"post_id":"cimnua9hf00486eul68kr986e","tag_id":"cimnua9i1005b6eulr8pdt16b","_id":"cimnua9jd00846eulmhg0x9mb"},{"post_id":"cimnua9hg004b6eull1b5lfeg","tag_id":"cimnua9h7003s6eul9ml4uaqe","_id":"cimnua9je00876eullpiqd880"},{"post_id":"cimnua9hg004b6eull1b5lfeg","tag_id":"cimnua9j5007r6eulz8w01zqh","_id":"cimnua9je00886eul8emdxblm"},{"post_id":"cimnua9hg004b6eull1b5lfeg","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9je008a6eulzos1ullk"},{"post_id":"cimnua9hg004b6eull1b5lfeg","tag_id":"cimnua9i1005b6eulr8pdt16b","_id":"cimnua9je008b6eullvir6de3"},{"post_id":"cimnua9hi004e6eulqn998fmk","tag_id":"cimnua9h7003s6eul9ml4uaqe","_id":"cimnua9je008d6eulny7x314o"},{"post_id":"cimnua9hi004e6eulqn998fmk","tag_id":"cimnua9j5007r6eulz8w01zqh","_id":"cimnua9je008e6eul9tqk0t4i"},{"post_id":"cimnua9hl004h6eulc8shbwlt","tag_id":"cimnua9je00896eulvgk4f5um","_id":"cimnua9jg008h6eul77aa5gkt"},{"post_id":"cimnua9hl004h6eulc8shbwlt","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jg008i6eulph8wqubc"},{"post_id":"cimnua9hl004h6eulc8shbwlt","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9jg008k6eul1ac2qjk3"},{"post_id":"cimnua9hn004k6eulr8k0ejpp","tag_id":"cimnua9je00896eulvgk4f5um","_id":"cimnua9jh008o6eulj61v2cbs"},{"post_id":"cimnua9hn004k6eulr8k0ejpp","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jh008p6eul8oapndff"},{"post_id":"cimnua9hn004k6eulr8k0ejpp","tag_id":"cimnua9jg008l6eulm2wjrign","_id":"cimnua9jh008r6eulepwbuqzr"},{"post_id":"cimnua9hn004k6eulr8k0ejpp","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9jh008s6euljy2lyy88"},{"post_id":"cimnua9hp004m6eulg44wy3y1","tag_id":"cimnua9je00896eulvgk4f5um","_id":"cimnua9ji008x6eulyyqrroji"},{"post_id":"cimnua9hp004m6eulg44wy3y1","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9ji008y6eul6p7nsu38"},{"post_id":"cimnua9hp004m6eulg44wy3y1","tag_id":"cimnua9jh008t6euloihcbezp","_id":"cimnua9ji00906eulzptpfwkq"},{"post_id":"cimnua9hp004m6eulg44wy3y1","tag_id":"cimnua9jh008u6eulnazgvr8o","_id":"cimnua9ji00916eulpee6xlz0"},{"post_id":"cimnua9hp004m6eulg44wy3y1","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9ji00936eulgdpp40en"},{"post_id":"cimnua9hq004q6eulowm8wzys","tag_id":"cimnua9je00896eulvgk4f5um","_id":"cimnua9jj00976eulkn9odwnd"},{"post_id":"cimnua9hq004q6eulowm8wzys","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jj00986eulzrp0k2lx"},{"post_id":"cimnua9hq004q6eulowm8wzys","tag_id":"cimnua9ji00926eul5x88k25d","_id":"cimnua9jj009a6eulem6ze3ka"},{"post_id":"cimnua9hq004q6eulowm8wzys","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9jj009b6eul8kl40meu"},{"post_id":"cimnua9hq004q6eulowm8wzys","tag_id":"cimnua9jj00956eulkzs3fpk1","_id":"cimnua9jj009d6eulxrv11b9g"},{"post_id":"cimnua9hr004t6eulb2fivskf","tag_id":"cimnua9jj00966eul79rejzaa","_id":"cimnua9jk009i6eul5dcux6m5"},{"post_id":"cimnua9hr004t6eulb2fivskf","tag_id":"cimnua9jj00996eul0dzadvbs","_id":"cimnua9jk009j6eulirtxcaxf"},{"post_id":"cimnua9hr004t6eulb2fivskf","tag_id":"cimnua9je00896eulvgk4f5um","_id":"cimnua9jk009l6eulkqzm2w1u"},{"post_id":"cimnua9hr004t6eulb2fivskf","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jk009m6euljklmejk2"},{"post_id":"cimnua9hr004t6eulb2fivskf","tag_id":"cimnua9jh008u6eulnazgvr8o","_id":"cimnua9jl009o6eulgg6mirpc"},{"post_id":"cimnua9hr004t6eulb2fivskf","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9jl009p6euladbts6c5"},{"post_id":"cimnua9ht004w6euliltxnlng","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jl009r6euljj60ehrt"},{"post_id":"cimnua9ht004w6euliltxnlng","tag_id":"cimnua9h7003s6eul9ml4uaqe","_id":"cimnua9jl009s6eult4dj3wry"},{"post_id":"cimnua9ht004w6euliltxnlng","tag_id":"cimnua9jk009k6eulwyuegc88","_id":"cimnua9jl009u6eul5pk2tsmq"},{"post_id":"cimnua9ht004w6euliltxnlng","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9jl009v6eulc0fv6scu"},{"post_id":"cimnua9hu004y6eul6uzo3ydl","tag_id":"cimnua9jl009q6eulbsbsdmpc","_id":"cimnua9jm009z6eul3gy4enjr"},{"post_id":"cimnua9hu004y6eul6uzo3ydl","tag_id":"cimnua9jl009t6eulhxfdzmmz","_id":"cimnua9jm00a06eulamjrye0d"},{"post_id":"cimnua9hu004y6eul6uzo3ydl","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jm00a26eul6gvjv0zs"},{"post_id":"cimnua9hu004y6eul6uzo3ydl","tag_id":"cimnua9jl009x6euln8t7jxz9","_id":"cimnua9jm00a36eulp6t2ogzq"},{"post_id":"cimnua9hv00526eulv840f8ql","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jm00a56eulnavjm0c8"},{"post_id":"cimnua9hv00526eulv840f8ql","tag_id":"cimnua9hg00496eul6529bek7","_id":"cimnua9jm00a66eulz2twiuks"},{"post_id":"cimnua9hw00556eulgb9eyv04","tag_id":"cimnua9h0003k6eul7p640jwm","_id":"cimnua9jn00a96eulmv70ft8l"},{"post_id":"cimnua9hw00556eulgb9eyv04","tag_id":"cimnua9je00896eulvgk4f5um","_id":"cimnua9jn00aa6euldyng0nys"},{"post_id":"cimnua9hw00556eulgb9eyv04","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jn00ac6eulb2ab0zwq"},{"post_id":"cimnua9hw00556eulgb9eyv04","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9jn00ad6eulf4dh4hst"},{"post_id":"cimnua9hz00586eulpul4dnny","tag_id":"cimnua9je00896eulvgk4f5um","_id":"cimnua9jo00ag6eulx5w6ijx4"},{"post_id":"cimnua9hz00586eulpul4dnny","tag_id":"cimnua9jn00ab6eul9spcp52n","_id":"cimnua9jo00ah6eulamlyt69r"},{"post_id":"cimnua9hz00586eulpul4dnny","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jo00aj6eul0axb115x"},{"post_id":"cimnua9hz00586eulpul4dnny","tag_id":"cimnua9hy00566eulj88xp89x","_id":"cimnua9jo00ak6euly10hcanu"},{"post_id":"cimnua9i0005a6eulth5yxfbv","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jp00am6euls1gkti49"},{"post_id":"cimnua9i0005a6eulth5yxfbv","tag_id":"cimnua9jh008u6eulnazgvr8o","_id":"cimnua9jp00an6eulf1ep2pky"},{"post_id":"cimnua9i1005d6eull7leaps7","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jp00aq6eulf3qqfav2"},{"post_id":"cimnua9i1005d6eull7leaps7","tag_id":"cimnua9jp00ao6euljc3x3p5t","_id":"cimnua9jp00ar6eulgxzqcdw0"},{"post_id":"cimnua9i2005f6eul3sour4i0","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jq00aw6eulcg7j8ddo"},{"post_id":"cimnua9i2005f6eul3sour4i0","tag_id":"cimnua9jp00ao6euljc3x3p5t","_id":"cimnua9jq00ax6eulv1s1fz45"},{"post_id":"cimnua9i2005f6eul3sour4i0","tag_id":"cimnua9jq00at6eula74leumk","_id":"cimnua9jq00az6eulmyww5vcs"},{"post_id":"cimnua9i2005f6eul3sour4i0","tag_id":"cimnua9jk009k6eulwyuegc88","_id":"cimnua9jq00b06eulc8hcz7di"},{"post_id":"cimnua9i4005i6eul4zj6mmlf","tag_id":"cimnua9jq00av6eul0cik0k5l","_id":"cimnua9jr00b46euldyemi2fz"},{"post_id":"cimnua9i4005i6eul4zj6mmlf","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jr00b56euly1wsuo5f"},{"post_id":"cimnua9i4005i6eul4zj6mmlf","tag_id":"cimnua9jq00b16eulq4ctb3ni","_id":"cimnua9jr00b76eulikn9g6wc"},{"post_id":"cimnua9i4005i6eul4zj6mmlf","tag_id":"cimnua9jr00b26eul0nl60twx","_id":"cimnua9jr00b86eul6nuiqabu"},{"post_id":"cimnua9i5005l6eul6b2y72jr","tag_id":"cimnua9jr00b36eulzajdnnfx","_id":"cimnua9js00bb6eulchnntu89"},{"post_id":"cimnua9i5005l6eul6b2y72jr","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9js00bc6eulo45u3dy6"},{"post_id":"cimnua9i5005l6eul6b2y72jr","tag_id":"cimnua9jp00ao6euljc3x3p5t","_id":"cimnua9js00be6eul5ovkeos7"},{"post_id":"cimnua9i6005p6euleifl69xq","tag_id":"cimnua9js00ba6eulb9rjvo46","_id":"cimnua9js00bh6eul9ucoqsd8"},{"post_id":"cimnua9i6005p6euleifl69xq","tag_id":"cimnua9js00bd6euljryor170","_id":"cimnua9jt00bi6euldp2so5s1"},{"post_id":"cimnua9i6005p6euleifl69xq","tag_id":"cimnua9je008c6eul8jil3o6f","_id":"cimnua9jt00bk6eul62jkjftr"},{"post_id":"cimnua9i8005s6eul7x96gtld","tag_id":"cimnua9js00bg6euljonxsak0","_id":"cimnua9jv00bs6eul4ovebfwj"},{"post_id":"cimnua9i8005s6eul7x96gtld","tag_id":"cimnua9js00ba6eulb9rjvo46","_id":"cimnua9jv00bt6eulfci8jvyi"},{"post_id":"cimnua9i8005s6eul7x96gtld","tag_id":"cimnua9jt00bl6eululwglyuj","_id":"cimnua9jv00bv6eulx7p0ln80"},{"post_id":"cimnua9i8005s6eul7x96gtld","tag_id":"cimnua9ju00bm6eule9x5lu1b","_id":"cimnua9jv00bw6eulnc5m6x0s"},{"post_id":"cimnua9i8005s6eul7x96gtld","tag_id":"cimnua9ju00bn6eulf2fnbm8j","_id":"cimnua9jw00by6euleywrgfny"},{"post_id":"cimnua9i8005s6eul7x96gtld","tag_id":"cimnua9ju00bo6euljje1evw3","_id":"cimnua9jw00bz6eulb4h0hyrd"},{"post_id":"cimnua9i8005s6eul7x96gtld","tag_id":"cimnua9ju00bp6eul8pccbqti","_id":"cimnua9jw00c16eulretwnitl"},{"post_id":"cimnua9i8005s6eul7x96gtld","tag_id":"cimnua9ju00bq6eulbk15pcum","_id":"cimnua9jw00c26eul844o6xx2"},{"post_id":"cimnua9i9005u6eulwjp3sa50","tag_id":"cimnua9js00bg6euljonxsak0","_id":"cimnua9jx00c86eulnob1epgj"},{"post_id":"cimnua9i9005u6eulwjp3sa50","tag_id":"cimnua9js00ba6eulb9rjvo46","_id":"cimnua9jx00c96euluzhfku11"},{"post_id":"cimnua9i9005u6eulwjp3sa50","tag_id":"cimnua9jt00bl6eululwglyuj","_id":"cimnua9jy00cb6eulf8anvb0b"},{"post_id":"cimnua9i9005u6eulwjp3sa50","tag_id":"cimnua9ju00bm6eule9x5lu1b","_id":"cimnua9jy00cc6eulz40ydk87"},{"post_id":"cimnua9i9005u6eulwjp3sa50","tag_id":"cimnua9ju00bn6eulf2fnbm8j","_id":"cimnua9jz00ce6eul8h7b2120"},{"post_id":"cimnua9i9005u6eulwjp3sa50","tag_id":"cimnua9ju00bo6euljje1evw3","_id":"cimnua9jz00cf6eulccrldg75"},{"post_id":"cimnua9i9005u6eulwjp3sa50","tag_id":"cimnua9ju00bp6eul8pccbqti","_id":"cimnua9k000ch6eulvnb834fy"},{"post_id":"cimnua9i9005u6eulwjp3sa50","tag_id":"cimnua9ju00bq6eulbk15pcum","_id":"cimnua9k000ci6euljueqv2tq"},{"post_id":"cimnua9ia005y6euldikqgw6e","tag_id":"cimnua9js00bg6euljonxsak0","_id":"cimnua9k200co6eulbgtm7191"},{"post_id":"cimnua9ia005y6euldikqgw6e","tag_id":"cimnua9js00ba6eulb9rjvo46","_id":"cimnua9k200cp6eul80mqdd74"},{"post_id":"cimnua9ia005y6euldikqgw6e","tag_id":"cimnua9jt00bl6eululwglyuj","_id":"cimnua9k200cr6eulcn85zr26"},{"post_id":"cimnua9ia005y6euldikqgw6e","tag_id":"cimnua9ju00bm6eule9x5lu1b","_id":"cimnua9k200cs6eulgvy6vz6o"},{"post_id":"cimnua9ia005y6euldikqgw6e","tag_id":"cimnua9ju00bn6eulf2fnbm8j","_id":"cimnua9k200cu6eulr9xns3fu"},{"post_id":"cimnua9ia005y6euldikqgw6e","tag_id":"cimnua9ju00bo6euljje1evw3","_id":"cimnua9k200cv6eulaff80l0z"},{"post_id":"cimnua9ia005y6euldikqgw6e","tag_id":"cimnua9ju00bp6eul8pccbqti","_id":"cimnua9k200cx6eulbbrbp2me"},{"post_id":"cimnua9ia005y6euldikqgw6e","tag_id":"cimnua9ju00bq6eulbk15pcum","_id":"cimnua9k200cy6eul7d6uhvrf"},{"post_id":"cimnua9ic00616eulv2ro8k0i","tag_id":"cimnua9js00bg6euljonxsak0","_id":"cimnua9k400d46euljcigvsb0"},{"post_id":"cimnua9ic00616eulv2ro8k0i","tag_id":"cimnua9js00ba6eulb9rjvo46","_id":"cimnua9k400d56eulqebhxv56"},{"post_id":"cimnua9ic00616eulv2ro8k0i","tag_id":"cimnua9jt00bl6eululwglyuj","_id":"cimnua9k400d76eul3negy65l"},{"post_id":"cimnua9ic00616eulv2ro8k0i","tag_id":"cimnua9ju00bm6eule9x5lu1b","_id":"cimnua9k400d86eulw3nyrgzs"},{"post_id":"cimnua9ic00616eulv2ro8k0i","tag_id":"cimnua9ju00bn6eulf2fnbm8j","_id":"cimnua9k400da6eullkdmsnmm"},{"post_id":"cimnua9ic00616eulv2ro8k0i","tag_id":"cimnua9ju00bo6euljje1evw3","_id":"cimnua9k400db6eul50pi88eu"},{"post_id":"cimnua9ic00616eulv2ro8k0i","tag_id":"cimnua9ju00bp6eul8pccbqti","_id":"cimnua9k500dd6eulsmjk2m9j"},{"post_id":"cimnua9ic00616eulv2ro8k0i","tag_id":"cimnua9ju00bq6eulbk15pcum","_id":"cimnua9k500de6eulf68hzxl0"},{"post_id":"cimnua9ie00646eulumtone84","tag_id":"cimnua9js00bg6euljonxsak0","_id":"cimnua9k800dk6eulcg1k2ydg"},{"post_id":"cimnua9ie00646eulumtone84","tag_id":"cimnua9js00ba6eulb9rjvo46","_id":"cimnua9k800dl6eulxzacf5u6"},{"post_id":"cimnua9ie00646eulumtone84","tag_id":"cimnua9jt00bl6eululwglyuj","_id":"cimnua9k800dn6eulmzx07636"},{"post_id":"cimnua9ie00646eulumtone84","tag_id":"cimnua9ju00bm6eule9x5lu1b","_id":"cimnua9k800do6eulppnqol4j"},{"post_id":"cimnua9ie00646eulumtone84","tag_id":"cimnua9ju00bn6eulf2fnbm8j","_id":"cimnua9k800dq6eulqfj4hia9"},{"post_id":"cimnua9ie00646eulumtone84","tag_id":"cimnua9ju00bo6euljje1evw3","_id":"cimnua9k800dr6eulp4pjewr7"},{"post_id":"cimnua9ie00646eulumtone84","tag_id":"cimnua9ju00bp6eul8pccbqti","_id":"cimnua9k900dt6eulgnbax30b"},{"post_id":"cimnua9ie00646eulumtone84","tag_id":"cimnua9ju00bq6eulbk15pcum","_id":"cimnua9k900du6eul9etqtbue"},{"post_id":"cimnua9il006j6eulq5dwdtog","tag_id":"cimnua9k700dj6eule7nv75va","_id":"cimnua9kb00dw6eul5wdyz69q"},{"post_id":"cimnua9il006j6eulq5dwdtog","tag_id":"cimnua9k800dm6eulqh6kpea3","_id":"cimnua9kb00dx6eul9qs39xgu"},{"post_id":"cimnua9il006j6eulq5dwdtog","tag_id":"cimnua9k800dp6eulu4o70uj1","_id":"cimnua9kb00dy6eul2jlqevbf"},{"post_id":"cimnua9in006o6eul3b4vjd4k","tag_id":"cimnua9k700dj6eule7nv75va","_id":"cimnua9kb00e06eul7vowsl1t"},{"post_id":"cimnua9in006o6eul3b4vjd4k","tag_id":"cimnua9k900dv6eulsdwjuauq","_id":"cimnua9kb00e16eulzt3dxehf"},{"post_id":"cimnua9ip006s6eulmez2fd15","tag_id":"cimnua9k700dj6eule7nv75va","_id":"cimnua9kc00e46euleke8bj5q"},{"post_id":"cimnua9ip006s6eulmez2fd15","tag_id":"cimnua9k900dv6eulsdwjuauq","_id":"cimnua9kc00e56eulmckm6ivz"},{"post_id":"cimnua9iq006v6eul6kgkn78p","tag_id":"cimnua9kc00e36eullhsy96vw","_id":"cimnua9kd00e96eulq5h5shg8"},{"post_id":"cimnua9iq006v6eul6kgkn78p","tag_id":"cimnua9kc00e66eulq16t2jjv","_id":"cimnua9kd00ea6eul29wfh0w3"},{"post_id":"cimnua9iq006v6eul6kgkn78p","tag_id":"cimnua9kd00e76eulpl50x5tw","_id":"cimnua9kd00ec6eulxoocom95"},{"post_id":"cimnua9is006z6eulj9renaie","tag_id":"cimnua9kc00e36eullhsy96vw","_id":"cimnua9ke00ef6eul3ggmffk8"},{"post_id":"cimnua9is006z6eulj9renaie","tag_id":"cimnua9kc00e66eulq16t2jjv","_id":"cimnua9ke00eg6euluxmcq1h6"},{"post_id":"cimnua9is006z6eulj9renaie","tag_id":"cimnua9kd00e76eulpl50x5tw","_id":"cimnua9kf00ei6eulqqmx4krx"},{"post_id":"cimnua9iu00726eul4dpr28a0","tag_id":"cimnua9kc00e36eullhsy96vw","_id":"cimnua9kf00el6eulv9xn6w16"},{"post_id":"cimnua9iu00726eul4dpr28a0","tag_id":"cimnua9kc00e66eulq16t2jjv","_id":"cimnua9kf00em6eulqrjsswpd"},{"post_id":"cimnua9iu00726eul4dpr28a0","tag_id":"cimnua9kd00e76eulpl50x5tw","_id":"cimnua9kg00eo6eulii9ayijv"},{"post_id":"cimnua9iv00766eul7z8kafjd","tag_id":"cimnua9kc00e36eullhsy96vw","_id":"cimnua9kh00es6eulp6olw4v0"},{"post_id":"cimnua9iv00766eul7z8kafjd","tag_id":"cimnua9kc00e66eulq16t2jjv","_id":"cimnua9kh00et6eulh5kyubdc"},{"post_id":"cimnua9iv00766eul7z8kafjd","tag_id":"cimnua9kd00e76eulpl50x5tw","_id":"cimnua9kh00ev6eul45ra9ic6"},{"post_id":"cimnua9iv00766eul7z8kafjd","tag_id":"cimnua9kg00eq6eulx9g0zw74","_id":"cimnua9kh00ew6eulkbbf4wkf"},{"post_id":"cimnua9iy007b6eulm1lhmm4h","tag_id":"cimnua9kc00e36eullhsy96vw","_id":"cimnua9ki00ez6eultqsq34en"},{"post_id":"cimnua9iy007b6eulm1lhmm4h","tag_id":"cimnua9kc00e66eulq16t2jjv","_id":"cimnua9ki00f06eulzigmzuth"},{"post_id":"cimnua9iy007b6eulm1lhmm4h","tag_id":"cimnua9kd00e76eulpl50x5tw","_id":"cimnua9ki00f26eul8argbwuj"},{"post_id":"cimnua9j1007e6eulpq9zbhle","tag_id":"cimnua9kc00e36eullhsy96vw","_id":"cimnua9kj00f66eulbmcu79zi"},{"post_id":"cimnua9j1007e6eulpq9zbhle","tag_id":"cimnua9kc00e66eulq16t2jjv","_id":"cimnua9kj00f76eultpdk85pt"},{"post_id":"cimnua9j1007e6eulpq9zbhle","tag_id":"cimnua9kd00e76eulpl50x5tw","_id":"cimnua9kj00f96eulj8rjsefp"},{"post_id":"cimnua9j1007e6eulpq9zbhle","tag_id":"cimnua9ki00f46eultmwvwxsb","_id":"cimnua9kj00fa6eul6xu8r956"},{"post_id":"cimnua9j3007i6eulydwvy8zh","tag_id":"cimnua9kj00f56eulqa6mg7jo","_id":"cimnua9kk00fc6eulpc1zjpfy"},{"post_id":"cimnua9j3007i6eulydwvy8zh","tag_id":"cimnua9kj00f86eul8z5kqd5k","_id":"cimnua9kk00fd6eulz8ooxuo9"},{"post_id":"cimnua9j3007i6eulydwvy8zh","tag_id":"cimnua9kj00fb6eulnmyuq1l5","_id":"cimnua9kk00fe6eulagtmld3y"},{"post_id":"cimnua9ks00ff6eulw1nyvmkx","tag_id":"cimnua9kc00e36eullhsy96vw","_id":"cimnua9kx00fj6eul2chld2tf"},{"post_id":"cimnua9ks00ff6eulw1nyvmkx","tag_id":"cimnua9h0003k6eul7p640jwm","_id":"cimnua9ky00fm6eullz11qi14"},{"post_id":"cimnua9ks00ff6eulw1nyvmkx","tag_id":"cimnua9kd00e76eulpl50x5tw","_id":"cimnua9l000fp6eul6ey8xkps"},{"post_id":"cimnua9kz00fo6eul448rgstp","tag_id":"cimnua9h7003s6eul9ml4uaqe","_id":"cimnua9l100fr6eultzexqc1t"},{"post_id":"cimnua9kz00fo6eul448rgstp","tag_id":"cimnua9j5007r6eulz8w01zqh","_id":"cimnua9l100fu6eulkbw77yhs"},{"post_id":"cimnua9ku00fh6eullt48ls2i","tag_id":"cimnua9ky00fl6eulvsimcr4w","_id":"cimnua9l200fz6eul4tdg69jo"},{"post_id":"cimnua9ku00fh6eullt48ls2i","tag_id":"cimnua9l100fs6euladzs6zyl","_id":"cimnua9l300g06eulqfsidnnd"},{"post_id":"cimnua9ku00fh6eullt48ls2i","tag_id":"cimnua9l100fw6eulcfy1tsrv","_id":"cimnua9l300g26eul7ow01yhs"},{"post_id":"cimnua9ku00fh6eullt48ls2i","tag_id":"cimnua9l200fx6eulb6z69kgi","_id":"cimnua9l300g36eulklfpnuz2"},{"post_id":"cimnua9kx00fk6eulz8mb2bd6","tag_id":"cimnua9l200fy6eul1zv8ueja","_id":"cimnua9l400g56eul2wtb6lx9"},{"post_id":"cimnua9kx00fk6eulz8mb2bd6","tag_id":"cimnua9kc00e36eullhsy96vw","_id":"cimnua9l400g66eulxxesb9qn"},{"post_id":"cimnua9kx00fk6eulz8mb2bd6","tag_id":"cimnua9kd00e76eulpl50x5tw","_id":"cimnua9l400g76eultae5pw51"},{"post_id":"cimnua9kx00fk6eulz8mb2bd6","tag_id":"cimnua9l300g16euluyokkdmb","_id":"cimnua9l400g86eul38oodr6z"},{"post_id":"cimnua9kx00fk6eulz8mb2bd6","tag_id":"cimnua9l300g46eul3ehq90u6","_id":"cimnua9l400g96eulxfg1acb1"}],"Tag":[{"name":"Career","_id":"cimnua9gv003f6eulkryilz0h"},{"name":"CodeMash","_id":"cimnua9h0003k6eul7p640jwm"},{"name":"MVVM","_id":"cimnua9h7003s6eul9ml4uaqe"},{"name":"XML","_id":"cimnua9ha003x6eulof5rxhvi"},{"name":"YAML","_id":"cimnua9hd00446eulo05g13v5"},{"name":"Jam","_id":"cimnua9hg00496eul6529bek7"},{"name":"Prism","_id":"cimnua9hv004z6eulm1iec07o"},{"name":"Silverlight","_id":"cimnua9hy00566eulj88xp89x"},{"name":"WPF","_id":"cimnua9i1005b6eulr8pdt16b"},{"name":"Silverlightning Talks","_id":"cimnua9i6005n6eullaf5nt1i"},{"name":"VIew Model Support","_id":"cimnua9ik006e6eullshatmkf"},{"name":"Navigation","_id":"cimnua9iy00796eul8wiw9y1y"},{"name":"ViewModel Support","_id":"cimnua9j5007m6euluj1bnjg2"},{"name":"Ruby","_id":"cimnua9j5007r6eulz8w01zqh"},{"name":"Cross-Training","_id":"cimnua9je00896eulvgk4f5um"},{"name":"Flex","_id":"cimnua9je008c6eul8jil3o6f"},{"name":"Platform","_id":"cimnua9jg008l6eulm2wjrign"},{"name":"Future","_id":"cimnua9jh008t6euloihcbezp"},{"name":"RIA","_id":"cimnua9jh008u6eulnazgvr8o"},{"name":"MXML","_id":"cimnua9ji00926eul5x88k25d"},{"name":"XAML","_id":"cimnua9jj00956eulkzs3fpk1"},{"name":"ActionScript","_id":"cimnua9jj00966eul79rejzaa"},{"name":"C#","_id":"cimnua9jj00996eul0dzadvbs"},{"name":"Presentation Model","_id":"cimnua9jk009k6eulwyuegc88"},{"name":"ActionLinq","_id":"cimnua9jl009q6eulbsbsdmpc"},{"name":"Flash","_id":"cimnua9jl009t6eulhxfdzmmz"},{"name":"Linq","_id":"cimnua9jl009x6euln8t7jxz9"},{"name":"Data Binding","_id":"cimnua9jn00ab6eul9spcp52n"},{"name":"Mobile","_id":"cimnua9jp00ao6euljc3x3p5t"},{"name":"Patterns","_id":"cimnua9jq00at6eula74leumk"},{"name":"BDD","_id":"cimnua9jq00av6eul0cik0k5l"},{"name":"jasmine","_id":"cimnua9jq00b16eulq4ctb3ni"},{"name":"testing","_id":"cimnua9jr00b26eul0nl60twx"},{"name":"Air","_id":"cimnua9jr00b36eulzajdnnfx"},{"name":"Development","_id":"cimnua9js00ba6eulb9rjvo46"},{"name":"Flash Builder","_id":"cimnua9js00bd6euljryor170"},{"name":"CoffeeScript","_id":"cimnua9js00bg6euljonxsak0"},{"name":"HTML5","_id":"cimnua9jt00bl6eululwglyuj"},{"name":"Javascript","_id":"cimnua9ju00bm6eule9x5lu1b"},{"name":"Node.js","_id":"cimnua9ju00bn6eulf2fnbm8j"},{"name":"Parse.com","_id":"cimnua9ju00bo6euljje1evw3"},{"name":"Technology","_id":"cimnua9ju00bp6eul8pccbqti"},{"name":"Web","_id":"cimnua9ju00bq6eulbk15pcum"},{"name":"Angular","_id":"cimnua9k700dj6eule7nv75va"},{"name":"Backbone","_id":"cimnua9k800dm6eulqh6kpea3"},{"name":"SPA","_id":"cimnua9k800dp6eulu4o70uj1"},{"name":"Directives","_id":"cimnua9k900dv6eulsdwjuauq"},{"name":"NodeBots","_id":"cimnua9kc00e36eullhsy96vw"},{"name":"Arduino","_id":"cimnua9kc00e66eulq16t2jjv"},{"name":"Johnny-Five","_id":"cimnua9kd00e76eulpl50x5tw"},{"name":"Visual Studio","_id":"cimnua9kg00eq6eulx9g0zw74"},{"name":"Codemash","_id":"cimnua9ki00f46eultmwvwxsb"},{"name":"ES6","_id":"cimnua9kj00f56eulqa6mg7jo"},{"name":"Harmony","_id":"cimnua9kj00f86eul8z5kqd5k"},{"name":"JavaScript","_id":"cimnua9kj00fb6eulnmyuq1l5"},{"name":"Spark Core","_id":"cimnua9ky00fl6eulvsimcr4w"},{"name":"Hacking","_id":"cimnua9l100fs6euladzs6zyl"},{"name":"IOT","_id":"cimnua9l100fw6eulcfy1tsrv"},{"name":"Internet of Things","_id":"cimnua9l200fx6eulb6z69kgi"},{"name":"IoT","_id":"cimnua9l200fy6eul1zv8ueja"},{"name":"Particle","_id":"cimnua9l300g16euluyokkdmb"},{"name":"Photon","_id":"cimnua9l300g46eul3ehq90u6"}]}}